//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    public struct  Pressure
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public PressureUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Pressure(double value, PressureUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit { get; } = PressureUnit.Pascal;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Pressure MaxValue { get; } = new Pressure(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Pressure MinValue { get; } = new Pressure(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Pressure Zero { get; } = new Pressure(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get Pressure in Atmospheres.
        /// </summary>
        public double Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Get Pressure in Bars.
        /// </summary>
        public double Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Get Pressure in Centibars.
        /// </summary>
        public double Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Get Pressure in Decapascals.
        /// </summary>
        public double Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Get Pressure in Decibars.
        /// </summary>
        public double Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Get Pressure in DynesPerSquareCentimeter.
        /// </summary>
        public double DynesPerSquareCentimeter => As(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in FeetOfElevation.
        /// </summary>
        public double FeetOfElevation => As(PressureUnit.FootOfElevation);

        /// <summary>
        ///     Get Pressure in FeetOfHead.
        /// </summary>
        public double FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Get Pressure in Gigapascals.
        /// </summary>
        public double Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Get Pressure in Hectopascals.
        /// </summary>
        public double Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Get Pressure in InchesOfMercury.
        /// </summary>
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Get Pressure in InchesOfWaterColumn.
        /// </summary>
        public double InchesOfWaterColumn => As(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Get Pressure in Kilobars.
        /// </summary>
        public double Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareCentimeter.
        /// </summary>
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMeter.
        /// </summary>
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMillimeter.
        /// </summary>
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareCentimeter.
        /// </summary>
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMeter.
        /// </summary>
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMillimeter.
        /// </summary>
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Kilopascals.
        /// </summary>
        public double Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareFoot.
        /// </summary>
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareInch.
        /// </summary>
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Megabars.
        /// </summary>
        public double Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Get Pressure in MeganewtonsPerSquareMeter.
        /// </summary>
        public double MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in Megapascals.
        /// </summary>
        public double Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Get Pressure in MetersOfElevation.
        /// </summary>
        public double MetersOfElevation => As(PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Get Pressure in MetersOfHead.
        /// </summary>
        public double MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Get Pressure in Microbars.
        /// </summary>
        public double Microbars => As(PressureUnit.Microbar);

        /// <summary>
        ///     Get Pressure in Micropascals.
        /// </summary>
        public double Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Get Pressure in Millibars.
        /// </summary>
        public double Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Get Pressure in MillimetersOfMercury.
        /// </summary>
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Get Pressure in MillimeterOfWaterColumn.
        /// </summary>
        public double MillimeterOfWaterColumn => As(PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Get Pressure in Millipascals.
        /// </summary>
        public double Millipascals => As(PressureUnit.Millipascal);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareCentimeter.
        /// </summary>
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMeter.
        /// </summary>
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMillimeter.
        /// </summary>
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Pascals.
        /// </summary>
        public double Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareFoot.
        /// </summary>
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareInch.
        /// </summary>
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in PoundsPerInchSecondSquared.
        /// </summary>
        public double PoundsPerInchSecondSquared => As(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Get Pressure in TechnicalAtmospheres.
        /// </summary>
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareCentimeter.
        /// </summary>
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMeter.
        /// </summary>
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMillimeter.
        /// </summary>
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Torrs.
        /// </summary>
        public double Torrs => As(PressureUnit.Torr);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Pressure from Atmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromAtmospheres(double atmospheres) => new Pressure(atmospheres, PressureUnit.Atmosphere);

        /// <summary>
        ///     Get Pressure from Bars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromBars(double bars) => new Pressure(bars, PressureUnit.Bar);

        /// <summary>
        ///     Get Pressure from Centibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromCentibars(double centibars) => new Pressure(centibars, PressureUnit.Centibar);

        /// <summary>
        ///     Get Pressure from Decapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDecapascals(double decapascals) => new Pressure(decapascals, PressureUnit.Decapascal);

        /// <summary>
        ///     Get Pressure from Decibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDecibars(double decibars) => new Pressure(decibars, PressureUnit.Decibar);

        /// <summary>
        ///     Get Pressure from DynesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDynesPerSquareCentimeter(double dynespersquarecentimeter) => new Pressure(dynespersquarecentimeter, PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure from FeetOfElevation.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromFeetOfElevation(double feetofelevation) => new Pressure(feetofelevation, PressureUnit.FootOfElevation);

        /// <summary>
        ///     Get Pressure from FeetOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromFeetOfHead(double feetofhead) => new Pressure(feetofhead, PressureUnit.FootOfHead);

        /// <summary>
        ///     Get Pressure from Gigapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromGigapascals(double gigapascals) => new Pressure(gigapascals, PressureUnit.Gigapascal);

        /// <summary>
        ///     Get Pressure from Hectopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromHectopascals(double hectopascals) => new Pressure(hectopascals, PressureUnit.Hectopascal);

        /// <summary>
        ///     Get Pressure from InchesOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromInchesOfMercury(double inchesofmercury) => new Pressure(inchesofmercury, PressureUnit.InchOfMercury);

        /// <summary>
        ///     Get Pressure from InchesOfWaterColumn.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromInchesOfWaterColumn(double inchesofwatercolumn) => new Pressure(inchesofwatercolumn, PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Get Pressure from Kilobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilobars(double kilobars) => new Pressure(kilobars, PressureUnit.Kilobar);

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareCentimeter(double kilogramsforcepersquarecentimeter) => new Pressure(kilogramsforcepersquarecentimeter, PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareMeter(double kilogramsforcepersquaremeter) => new Pressure(kilogramsforcepersquaremeter, PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareMillimeter(double kilogramsforcepersquaremillimeter) => new Pressure(kilogramsforcepersquaremillimeter, PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareCentimeter(double kilonewtonspersquarecentimeter) => new Pressure(kilonewtonspersquarecentimeter, PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareMeter(double kilonewtonspersquaremeter) => new Pressure(kilonewtonspersquaremeter, PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareMillimeter(double kilonewtonspersquaremillimeter) => new Pressure(kilonewtonspersquaremillimeter, PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure from Kilopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopascals(double kilopascals) => new Pressure(kilopascals, PressureUnit.Kilopascal);

        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopoundsForcePerSquareFoot(double kilopoundsforcepersquarefoot) => new Pressure(kilopoundsforcepersquarefoot, PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopoundsForcePerSquareInch(double kilopoundsforcepersquareinch) => new Pressure(kilopoundsforcepersquareinch, PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure from Megabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMegabars(double megabars) => new Pressure(megabars, PressureUnit.Megabar);

        /// <summary>
        ///     Get Pressure from MeganewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMeganewtonsPerSquareMeter(double meganewtonspersquaremeter) => new Pressure(meganewtonspersquaremeter, PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure from Megapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMegapascals(double megapascals) => new Pressure(megapascals, PressureUnit.Megapascal);

        /// <summary>
        ///     Get Pressure from MetersOfElevation.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMetersOfElevation(double metersofelevation) => new Pressure(metersofelevation, PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Get Pressure from MetersOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMetersOfHead(double metersofhead) => new Pressure(metersofhead, PressureUnit.MeterOfHead);

        /// <summary>
        ///     Get Pressure from Microbars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMicrobars(double microbars) => new Pressure(microbars, PressureUnit.Microbar);

        /// <summary>
        ///     Get Pressure from Micropascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMicropascals(double micropascals) => new Pressure(micropascals, PressureUnit.Micropascal);

        /// <summary>
        ///     Get Pressure from Millibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillibars(double millibars) => new Pressure(millibars, PressureUnit.Millibar);

        /// <summary>
        ///     Get Pressure from MillimetersOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillimetersOfMercury(double millimetersofmercury) => new Pressure(millimetersofmercury, PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Get Pressure from MillimeterOfWaterColumn.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillimeterOfWaterColumn(double millimeterofwatercolumn) => new Pressure(millimeterofwatercolumn, PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Get Pressure from Millipascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillipascals(double millipascals) => new Pressure(millipascals, PressureUnit.Millipascal);

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareCentimeter(double newtonspersquarecentimeter) => new Pressure(newtonspersquarecentimeter, PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareMeter(double newtonspersquaremeter) => new Pressure(newtonspersquaremeter, PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareMillimeter(double newtonspersquaremillimeter) => new Pressure(newtonspersquaremillimeter, PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure from Pascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPascals(double pascals) => new Pressure(pascals, PressureUnit.Pascal);

        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsForcePerSquareFoot(double poundsforcepersquarefoot) => new Pressure(poundsforcepersquarefoot, PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsForcePerSquareInch(double poundsforcepersquareinch) => new Pressure(poundsforcepersquareinch, PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure from PoundsPerInchSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsPerInchSecondSquared(double poundsperinchsecondsquared) => new Pressure(poundsperinchsecondsquared, PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Get Pressure from TechnicalAtmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTechnicalAtmospheres(double technicalatmospheres) => new Pressure(technicalatmospheres, PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareCentimeter(double tonnesforcepersquarecentimeter) => new Pressure(tonnesforcepersquarecentimeter, PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareMeter(double tonnesforcepersquaremeter) => new Pressure(tonnesforcepersquaremeter, PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareMillimeter(double tonnesforcepersquaremillimeter) => new Pressure(tonnesforcepersquaremillimeter, PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure from Torrs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTorrs(double torrs) => new Pressure(torrs, PressureUnit.Torr);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
        public static Pressure From(double value, PressureUnit fromUnit)
        {
            return new Pressure(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Pressure ToUnit(PressureUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Pressure(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                PressureUnit.Atmosphere => _value*1.01325*1e5,
                PressureUnit.Bar => _value*1e5,
                PressureUnit.Centibar => (_value*1e5) * 1e-2d,
                PressureUnit.Decapascal => (_value) * 1e1d,
                PressureUnit.Decibar => (_value*1e5) * 1e-1d,
                PressureUnit.DynePerSquareCentimeter => _value*1.0e-1,
                PressureUnit.FootOfElevation => Math.Pow(1.0 - (_value / 145366.45), 5.2553026003237266401799415610351) * 101325.0,
                PressureUnit.FootOfHead => _value*2989.0669,
                PressureUnit.Gigapascal => (_value) * 1e9d,
                PressureUnit.Hectopascal => (_value) * 1e2d,
                PressureUnit.InchOfMercury => _value/2.95299830714159e-4,
                PressureUnit.InchOfWaterColumn => _value*249.08890833333,
                PressureUnit.Kilobar => (_value*1e5) * 1e3d,
                PressureUnit.KilogramForcePerSquareCentimeter => _value*9.80665e4,
                PressureUnit.KilogramForcePerSquareMeter => _value*9.80665019960652,
                PressureUnit.KilogramForcePerSquareMillimeter => _value*9.80665e6,
                PressureUnit.KilonewtonPerSquareCentimeter => (_value*1e4) * 1e3d,
                PressureUnit.KilonewtonPerSquareMeter => (_value) * 1e3d,
                PressureUnit.KilonewtonPerSquareMillimeter => (_value*1e6) * 1e3d,
                PressureUnit.Kilopascal => (_value) * 1e3d,
                PressureUnit.KilopoundForcePerSquareFoot => (_value*4.788025898033584e1) * 1e3d,
                PressureUnit.KilopoundForcePerSquareInch => (_value*6.894757293168361e3) * 1e3d,
                PressureUnit.Megabar => (_value*1e5) * 1e6d,
                PressureUnit.MeganewtonPerSquareMeter => (_value) * 1e6d,
                PressureUnit.Megapascal => (_value) * 1e6d,
                PressureUnit.MeterOfElevation => Math.Pow(1.0 - (_value / 44307.69396), 5.2553026003237266401799415610351) * 101325.0,
                PressureUnit.MeterOfHead => _value*9804.139432,
                PressureUnit.Microbar => (_value*1e5) * 1e-6d,
                PressureUnit.Micropascal => (_value) * 1e-6d,
                PressureUnit.Millibar => (_value*1e5) * 1e-3d,
                PressureUnit.MillimeterOfMercury => _value/7.50061561302643e-3,
                PressureUnit.MillimeterOfWaterColumn => _value*9.806650000000272e0,
                PressureUnit.Millipascal => (_value) * 1e-3d,
                PressureUnit.NewtonPerSquareCentimeter => _value*1e4,
                PressureUnit.NewtonPerSquareMeter => _value,
                PressureUnit.NewtonPerSquareMillimeter => _value*1e6,
                PressureUnit.Pascal => _value,
                PressureUnit.PoundForcePerSquareFoot => _value*4.788025898033584e1,
                PressureUnit.PoundForcePerSquareInch => _value*6.894757293168361e3,
                PressureUnit.PoundPerInchSecondSquared => _value*1.785796732283465e1,
                PressureUnit.TechnicalAtmosphere => _value*9.80680592331*1e4,
                PressureUnit.TonneForcePerSquareCentimeter => _value*9.80665e7,
                PressureUnit.TonneForcePerSquareMeter => _value*9.80665e3,
                PressureUnit.TonneForcePerSquareMillimeter => _value*9.80665e9,
                PressureUnit.Torr => _value*1.3332266752*1e2,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(PressureUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                PressureUnit.Atmosphere => baseUnitValue/(1.01325*1e5),
                PressureUnit.Bar => baseUnitValue/1e5,
                PressureUnit.Centibar => (baseUnitValue/1e5) / 1e-2d,
                PressureUnit.Decapascal => (baseUnitValue) / 1e1d,
                PressureUnit.Decibar => (baseUnitValue/1e5) / 1e-1d,
                PressureUnit.DynePerSquareCentimeter => baseUnitValue/1.0e-1,
                PressureUnit.FootOfElevation => (1.0 - Math.Pow(baseUnitValue / 101325.0, 0.190284)) * 145366.45,
                PressureUnit.FootOfHead => baseUnitValue*0.000334552565551,
                PressureUnit.Gigapascal => (baseUnitValue) / 1e9d,
                PressureUnit.Hectopascal => (baseUnitValue) / 1e2d,
                PressureUnit.InchOfMercury => baseUnitValue*2.95299830714159e-4,
                PressureUnit.InchOfWaterColumn => baseUnitValue/249.08890833333,
                PressureUnit.Kilobar => (baseUnitValue/1e5) / 1e3d,
                PressureUnit.KilogramForcePerSquareCentimeter => baseUnitValue/9.80665e4,
                PressureUnit.KilogramForcePerSquareMeter => baseUnitValue*0.101971619222242,
                PressureUnit.KilogramForcePerSquareMillimeter => baseUnitValue/9.80665e6,
                PressureUnit.KilonewtonPerSquareCentimeter => (baseUnitValue/1e4) / 1e3d,
                PressureUnit.KilonewtonPerSquareMeter => (baseUnitValue) / 1e3d,
                PressureUnit.KilonewtonPerSquareMillimeter => (baseUnitValue/1e6) / 1e3d,
                PressureUnit.Kilopascal => (baseUnitValue) / 1e3d,
                PressureUnit.KilopoundForcePerSquareFoot => (baseUnitValue/4.788025898033584e1) / 1e3d,
                PressureUnit.KilopoundForcePerSquareInch => (baseUnitValue/6.894757293168361e3) / 1e3d,
                PressureUnit.Megabar => (baseUnitValue/1e5) / 1e6d,
                PressureUnit.MeganewtonPerSquareMeter => (baseUnitValue) / 1e6d,
                PressureUnit.Megapascal => (baseUnitValue) / 1e6d,
                PressureUnit.MeterOfElevation => (1.0 - Math.Pow(baseUnitValue / 101325.0, 0.190284)) * 44307.69396,
                PressureUnit.MeterOfHead => baseUnitValue*0.0001019977334,
                PressureUnit.Microbar => (baseUnitValue/1e5) / 1e-6d,
                PressureUnit.Micropascal => (baseUnitValue) / 1e-6d,
                PressureUnit.Millibar => (baseUnitValue/1e5) / 1e-3d,
                PressureUnit.MillimeterOfMercury => baseUnitValue*7.50061561302643e-3,
                PressureUnit.MillimeterOfWaterColumn => baseUnitValue/9.806650000000272e0,
                PressureUnit.Millipascal => (baseUnitValue) / 1e-3d,
                PressureUnit.NewtonPerSquareCentimeter => baseUnitValue/1e4,
                PressureUnit.NewtonPerSquareMeter => baseUnitValue,
                PressureUnit.NewtonPerSquareMillimeter => baseUnitValue/1e6,
                PressureUnit.Pascal => baseUnitValue,
                PressureUnit.PoundForcePerSquareFoot => baseUnitValue/4.788025898033584e1,
                PressureUnit.PoundForcePerSquareInch => baseUnitValue/6.894757293168361e3,
                PressureUnit.PoundPerInchSecondSquared => baseUnitValue/1.785796732283465e1,
                PressureUnit.TechnicalAtmosphere => baseUnitValue/(9.80680592331*1e4),
                PressureUnit.TonneForcePerSquareCentimeter => baseUnitValue/9.80665e7,
                PressureUnit.TonneForcePerSquareMeter => baseUnitValue/9.80665e3,
                PressureUnit.TonneForcePerSquareMillimeter => baseUnitValue/9.80665e9,
                PressureUnit.Torr => baseUnitValue/(1.3332266752*1e2),
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

