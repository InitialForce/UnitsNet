//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Density
    /// </remarks>
    public struct  Density
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DensityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public DensityUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Density(double value, DensityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static DensityUnit BaseUnit { get; } = DensityUnit.KilogramPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Density MaxValue { get; } = new Density(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Density MinValue { get; } = new Density(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Density Zero { get; } = new Density(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get Density in CentigramsPerDeciLiter.
        /// </summary>
        public double CentigramsPerDeciLiter => As(DensityUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Get Density in CentigramsPerLiter.
        /// </summary>
        public double CentigramsPerLiter => As(DensityUnit.CentigramPerLiter);

        /// <summary>
        ///     Get Density in CentigramsPerMilliliter.
        /// </summary>
        public double CentigramsPerMilliliter => As(DensityUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Get Density in DecigramsPerDeciLiter.
        /// </summary>
        public double DecigramsPerDeciLiter => As(DensityUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Get Density in DecigramsPerLiter.
        /// </summary>
        public double DecigramsPerLiter => As(DensityUnit.DecigramPerLiter);

        /// <summary>
        ///     Get Density in DecigramsPerMilliliter.
        /// </summary>
        public double DecigramsPerMilliliter => As(DensityUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Get Density in GramsPerCubicCentimeter.
        /// </summary>
        public double GramsPerCubicCentimeter => As(DensityUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Get Density in GramsPerCubicFoot.
        /// </summary>
        public double GramsPerCubicFoot => As(DensityUnit.GramPerCubicFoot);

        /// <summary>
        ///     Get Density in GramsPerCubicInch.
        /// </summary>
        public double GramsPerCubicInch => As(DensityUnit.GramPerCubicInch);

        /// <summary>
        ///     Get Density in GramsPerCubicMeter.
        /// </summary>
        public double GramsPerCubicMeter => As(DensityUnit.GramPerCubicMeter);

        /// <summary>
        ///     Get Density in GramsPerCubicMillimeter.
        /// </summary>
        public double GramsPerCubicMillimeter => As(DensityUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Get Density in GramsPerDeciLiter.
        /// </summary>
        public double GramsPerDeciLiter => As(DensityUnit.GramPerDeciliter);

        /// <summary>
        ///     Get Density in GramsPerLiter.
        /// </summary>
        public double GramsPerLiter => As(DensityUnit.GramPerLiter);

        /// <summary>
        ///     Get Density in GramsPerMilliliter.
        /// </summary>
        public double GramsPerMilliliter => As(DensityUnit.GramPerMilliliter);

        /// <summary>
        ///     Get Density in KilogramsPerCubicCentimeter.
        /// </summary>
        public double KilogramsPerCubicCentimeter => As(DensityUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Get Density in KilogramsPerCubicMeter.
        /// </summary>
        public double KilogramsPerCubicMeter => As(DensityUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Get Density in KilogramsPerCubicMillimeter.
        /// </summary>
        public double KilogramsPerCubicMillimeter => As(DensityUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Get Density in KilogramsPerLiter.
        /// </summary>
        public double KilogramsPerLiter => As(DensityUnit.KilogramPerLiter);

        /// <summary>
        ///     Get Density in KilopoundsPerCubicFoot.
        /// </summary>
        public double KilopoundsPerCubicFoot => As(DensityUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Get Density in KilopoundsPerCubicInch.
        /// </summary>
        public double KilopoundsPerCubicInch => As(DensityUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Get Density in MicrogramsPerCubicMeter.
        /// </summary>
        public double MicrogramsPerCubicMeter => As(DensityUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Get Density in MicrogramsPerDeciLiter.
        /// </summary>
        public double MicrogramsPerDeciLiter => As(DensityUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Get Density in MicrogramsPerLiter.
        /// </summary>
        public double MicrogramsPerLiter => As(DensityUnit.MicrogramPerLiter);

        /// <summary>
        ///     Get Density in MicrogramsPerMilliliter.
        /// </summary>
        public double MicrogramsPerMilliliter => As(DensityUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Get Density in MilligramsPerCubicMeter.
        /// </summary>
        public double MilligramsPerCubicMeter => As(DensityUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Get Density in MilligramsPerDeciLiter.
        /// </summary>
        public double MilligramsPerDeciLiter => As(DensityUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Get Density in MilligramsPerLiter.
        /// </summary>
        public double MilligramsPerLiter => As(DensityUnit.MilligramPerLiter);

        /// <summary>
        ///     Get Density in MilligramsPerMilliliter.
        /// </summary>
        public double MilligramsPerMilliliter => As(DensityUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Get Density in NanogramsPerDeciLiter.
        /// </summary>
        public double NanogramsPerDeciLiter => As(DensityUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Get Density in NanogramsPerLiter.
        /// </summary>
        public double NanogramsPerLiter => As(DensityUnit.NanogramPerLiter);

        /// <summary>
        ///     Get Density in NanogramsPerMilliliter.
        /// </summary>
        public double NanogramsPerMilliliter => As(DensityUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Get Density in PicogramsPerDeciLiter.
        /// </summary>
        public double PicogramsPerDeciLiter => As(DensityUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Get Density in PicogramsPerLiter.
        /// </summary>
        public double PicogramsPerLiter => As(DensityUnit.PicogramPerLiter);

        /// <summary>
        ///     Get Density in PicogramsPerMilliliter.
        /// </summary>
        public double PicogramsPerMilliliter => As(DensityUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Get Density in PoundsPerCubicCentimeter.
        /// </summary>
        public double PoundsPerCubicCentimeter => As(DensityUnit.PoundPerCubicCentimeter);

        /// <summary>
        ///     Get Density in PoundsPerCubicFoot.
        /// </summary>
        public double PoundsPerCubicFoot => As(DensityUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Get Density in PoundsPerCubicInch.
        /// </summary>
        public double PoundsPerCubicInch => As(DensityUnit.PoundPerCubicInch);

        /// <summary>
        ///     Get Density in PoundsPerCubicMeter.
        /// </summary>
        public double PoundsPerCubicMeter => As(DensityUnit.PoundPerCubicMeter);

        /// <summary>
        ///     Get Density in PoundsPerCubicMillimeter.
        /// </summary>
        public double PoundsPerCubicMillimeter => As(DensityUnit.PoundPerCubicMillimeter);

        /// <summary>
        ///     Get Density in PoundsPerImperialGallon.
        /// </summary>
        public double PoundsPerImperialGallon => As(DensityUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Get Density in PoundsPerUSGallon.
        /// </summary>
        public double PoundsPerUSGallon => As(DensityUnit.PoundPerUSGallon);

        /// <summary>
        ///     Get Density in SlugsPerCubicCentimeter.
        /// </summary>
        public double SlugsPerCubicCentimeter => As(DensityUnit.SlugPerCubicCentimeter);

        /// <summary>
        ///     Get Density in SlugsPerCubicFoot.
        /// </summary>
        public double SlugsPerCubicFoot => As(DensityUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Get Density in SlugsPerCubicInch.
        /// </summary>
        public double SlugsPerCubicInch => As(DensityUnit.SlugPerCubicInch);

        /// <summary>
        ///     Get Density in SlugsPerCubicMeter.
        /// </summary>
        public double SlugsPerCubicMeter => As(DensityUnit.SlugPerCubicMeter);

        /// <summary>
        ///     Get Density in SlugsPerCubicMillimeter.
        /// </summary>
        public double SlugsPerCubicMillimeter => As(DensityUnit.SlugPerCubicMillimeter);

        /// <summary>
        ///     Get Density in TonnesPerCubicCentimeter.
        /// </summary>
        public double TonnesPerCubicCentimeter => As(DensityUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Get Density in TonnesPerCubicFoot.
        /// </summary>
        public double TonnesPerCubicFoot => As(DensityUnit.TonnePerCubicFoot);

        /// <summary>
        ///     Get Density in TonnesPerCubicInch.
        /// </summary>
        public double TonnesPerCubicInch => As(DensityUnit.TonnePerCubicInch);

        /// <summary>
        ///     Get Density in TonnesPerCubicMeter.
        /// </summary>
        public double TonnesPerCubicMeter => As(DensityUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Get Density in TonnesPerCubicMillimeter.
        /// </summary>
        public double TonnesPerCubicMillimeter => As(DensityUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Density from CentigramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromCentigramsPerDeciLiter(double centigramsperdeciliter) => new Density(centigramsperdeciliter, DensityUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Get Density from CentigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromCentigramsPerLiter(double centigramsperliter) => new Density(centigramsperliter, DensityUnit.CentigramPerLiter);

        /// <summary>
        ///     Get Density from CentigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromCentigramsPerMilliliter(double centigramspermilliliter) => new Density(centigramspermilliliter, DensityUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Get Density from DecigramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromDecigramsPerDeciLiter(double decigramsperdeciliter) => new Density(decigramsperdeciliter, DensityUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Get Density from DecigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromDecigramsPerLiter(double decigramsperliter) => new Density(decigramsperliter, DensityUnit.DecigramPerLiter);

        /// <summary>
        ///     Get Density from DecigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromDecigramsPerMilliliter(double decigramspermilliliter) => new Density(decigramspermilliliter, DensityUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Get Density from GramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicCentimeter(double gramspercubiccentimeter) => new Density(gramspercubiccentimeter, DensityUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Get Density from GramsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicFoot(double gramspercubicfoot) => new Density(gramspercubicfoot, DensityUnit.GramPerCubicFoot);

        /// <summary>
        ///     Get Density from GramsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicInch(double gramspercubicinch) => new Density(gramspercubicinch, DensityUnit.GramPerCubicInch);

        /// <summary>
        ///     Get Density from GramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicMeter(double gramspercubicmeter) => new Density(gramspercubicmeter, DensityUnit.GramPerCubicMeter);

        /// <summary>
        ///     Get Density from GramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerCubicMillimeter(double gramspercubicmillimeter) => new Density(gramspercubicmillimeter, DensityUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Get Density from GramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerDeciLiter(double gramsperdeciliter) => new Density(gramsperdeciliter, DensityUnit.GramPerDeciliter);

        /// <summary>
        ///     Get Density from GramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerLiter(double gramsperliter) => new Density(gramsperliter, DensityUnit.GramPerLiter);

        /// <summary>
        ///     Get Density from GramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromGramsPerMilliliter(double gramspermilliliter) => new Density(gramspermilliliter, DensityUnit.GramPerMilliliter);

        /// <summary>
        ///     Get Density from KilogramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerCubicCentimeter(double kilogramspercubiccentimeter) => new Density(kilogramspercubiccentimeter, DensityUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Get Density from KilogramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerCubicMeter(double kilogramspercubicmeter) => new Density(kilogramspercubicmeter, DensityUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Get Density from KilogramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerCubicMillimeter(double kilogramspercubicmillimeter) => new Density(kilogramspercubicmillimeter, DensityUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Get Density from KilogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilogramsPerLiter(double kilogramsperliter) => new Density(kilogramsperliter, DensityUnit.KilogramPerLiter);

        /// <summary>
        ///     Get Density from KilopoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilopoundsPerCubicFoot(double kilopoundspercubicfoot) => new Density(kilopoundspercubicfoot, DensityUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Get Density from KilopoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromKilopoundsPerCubicInch(double kilopoundspercubicinch) => new Density(kilopoundspercubicinch, DensityUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Get Density from MicrogramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerCubicMeter(double microgramspercubicmeter) => new Density(microgramspercubicmeter, DensityUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Get Density from MicrogramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerDeciLiter(double microgramsperdeciliter) => new Density(microgramsperdeciliter, DensityUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Get Density from MicrogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerLiter(double microgramsperliter) => new Density(microgramsperliter, DensityUnit.MicrogramPerLiter);

        /// <summary>
        ///     Get Density from MicrogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMicrogramsPerMilliliter(double microgramspermilliliter) => new Density(microgramspermilliliter, DensityUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Get Density from MilligramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerCubicMeter(double milligramspercubicmeter) => new Density(milligramspercubicmeter, DensityUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Get Density from MilligramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerDeciLiter(double milligramsperdeciliter) => new Density(milligramsperdeciliter, DensityUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Get Density from MilligramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerLiter(double milligramsperliter) => new Density(milligramsperliter, DensityUnit.MilligramPerLiter);

        /// <summary>
        ///     Get Density from MilligramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromMilligramsPerMilliliter(double milligramspermilliliter) => new Density(milligramspermilliliter, DensityUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Get Density from NanogramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromNanogramsPerDeciLiter(double nanogramsperdeciliter) => new Density(nanogramsperdeciliter, DensityUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Get Density from NanogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromNanogramsPerLiter(double nanogramsperliter) => new Density(nanogramsperliter, DensityUnit.NanogramPerLiter);

        /// <summary>
        ///     Get Density from NanogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromNanogramsPerMilliliter(double nanogramspermilliliter) => new Density(nanogramspermilliliter, DensityUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Get Density from PicogramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPicogramsPerDeciLiter(double picogramsperdeciliter) => new Density(picogramsperdeciliter, DensityUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Get Density from PicogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPicogramsPerLiter(double picogramsperliter) => new Density(picogramsperliter, DensityUnit.PicogramPerLiter);

        /// <summary>
        ///     Get Density from PicogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPicogramsPerMilliliter(double picogramspermilliliter) => new Density(picogramspermilliliter, DensityUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Get Density from PoundsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicCentimeter(double poundspercubiccentimeter) => new Density(poundspercubiccentimeter, DensityUnit.PoundPerCubicCentimeter);

        /// <summary>
        ///     Get Density from PoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicFoot(double poundspercubicfoot) => new Density(poundspercubicfoot, DensityUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Get Density from PoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicInch(double poundspercubicinch) => new Density(poundspercubicinch, DensityUnit.PoundPerCubicInch);

        /// <summary>
        ///     Get Density from PoundsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicMeter(double poundspercubicmeter) => new Density(poundspercubicmeter, DensityUnit.PoundPerCubicMeter);

        /// <summary>
        ///     Get Density from PoundsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerCubicMillimeter(double poundspercubicmillimeter) => new Density(poundspercubicmillimeter, DensityUnit.PoundPerCubicMillimeter);

        /// <summary>
        ///     Get Density from PoundsPerImperialGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerImperialGallon(double poundsperimperialgallon) => new Density(poundsperimperialgallon, DensityUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Get Density from PoundsPerUSGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromPoundsPerUSGallon(double poundsperusgallon) => new Density(poundsperusgallon, DensityUnit.PoundPerUSGallon);

        /// <summary>
        ///     Get Density from SlugsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicCentimeter(double slugspercubiccentimeter) => new Density(slugspercubiccentimeter, DensityUnit.SlugPerCubicCentimeter);

        /// <summary>
        ///     Get Density from SlugsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicFoot(double slugspercubicfoot) => new Density(slugspercubicfoot, DensityUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Get Density from SlugsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicInch(double slugspercubicinch) => new Density(slugspercubicinch, DensityUnit.SlugPerCubicInch);

        /// <summary>
        ///     Get Density from SlugsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicMeter(double slugspercubicmeter) => new Density(slugspercubicmeter, DensityUnit.SlugPerCubicMeter);

        /// <summary>
        ///     Get Density from SlugsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromSlugsPerCubicMillimeter(double slugspercubicmillimeter) => new Density(slugspercubicmillimeter, DensityUnit.SlugPerCubicMillimeter);

        /// <summary>
        ///     Get Density from TonnesPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicCentimeter(double tonnespercubiccentimeter) => new Density(tonnespercubiccentimeter, DensityUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Get Density from TonnesPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicFoot(double tonnespercubicfoot) => new Density(tonnespercubicfoot, DensityUnit.TonnePerCubicFoot);

        /// <summary>
        ///     Get Density from TonnesPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicInch(double tonnespercubicinch) => new Density(tonnespercubicinch, DensityUnit.TonnePerCubicInch);

        /// <summary>
        ///     Get Density from TonnesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicMeter(double tonnespercubicmeter) => new Density(tonnespercubicmeter, DensityUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Get Density from TonnesPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Density FromTonnesPerCubicMillimeter(double tonnespercubicmillimeter) => new Density(tonnespercubicmillimeter, DensityUnit.TonnePerCubicMillimeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        public static Density From(double value, DensityUnit fromUnit)
        {
            return new Density(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(DensityUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Density ToUnit(DensityUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Density(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                DensityUnit.CentigramPerDeciliter => (_value/1e-1) * 1e-2d,
                DensityUnit.CentigramPerLiter => (_value/1) * 1e-2d,
                DensityUnit.CentigramPerMilliliter => (_value/1e-3) * 1e-2d,
                DensityUnit.DecigramPerDeciliter => (_value/1e-1) * 1e-1d,
                DensityUnit.DecigramPerLiter => (_value/1) * 1e-1d,
                DensityUnit.DecigramPerMilliliter => (_value/1e-3) * 1e-1d,
                DensityUnit.GramPerCubicCentimeter => _value/1e-3,
                DensityUnit.GramPerCubicFoot => _value*0.0353146667214886,
                DensityUnit.GramPerCubicInch => _value*61.0237440947323,
                DensityUnit.GramPerCubicMeter => _value/1e3,
                DensityUnit.GramPerCubicMillimeter => _value/1e-6,
                DensityUnit.GramPerDeciliter => _value/1e-1,
                DensityUnit.GramPerLiter => _value/1,
                DensityUnit.GramPerMilliliter => _value/1e-3,
                DensityUnit.KilogramPerCubicCentimeter => (_value/1e-3) * 1e3d,
                DensityUnit.KilogramPerCubicMeter => (_value/1e3) * 1e3d,
                DensityUnit.KilogramPerCubicMillimeter => (_value/1e-6) * 1e3d,
                DensityUnit.KilogramPerLiter => _value*1e3,
                DensityUnit.KilopoundPerCubicFoot => (_value/0.062427961) * 1e3d,
                DensityUnit.KilopoundPerCubicInch => (_value/3.6127298147753e-5) * 1e3d,
                DensityUnit.MicrogramPerCubicMeter => (_value/1e3) * 1e-6d,
                DensityUnit.MicrogramPerDeciliter => (_value/1e-1) * 1e-6d,
                DensityUnit.MicrogramPerLiter => (_value/1) * 1e-6d,
                DensityUnit.MicrogramPerMilliliter => (_value/1e-3) * 1e-6d,
                DensityUnit.MilligramPerCubicMeter => (_value/1e3) * 1e-3d,
                DensityUnit.MilligramPerDeciliter => (_value/1e-1) * 1e-3d,
                DensityUnit.MilligramPerLiter => (_value/1) * 1e-3d,
                DensityUnit.MilligramPerMilliliter => (_value/1e-3) * 1e-3d,
                DensityUnit.NanogramPerDeciliter => (_value/1e-1) * 1e-9d,
                DensityUnit.NanogramPerLiter => (_value/1) * 1e-9d,
                DensityUnit.NanogramPerMilliliter => (_value/1e-3) * 1e-9d,
                DensityUnit.PicogramPerDeciliter => (_value/1e-1) * 1e-12d,
                DensityUnit.PicogramPerLiter => (_value/1) * 1e-12d,
                DensityUnit.PicogramPerMilliliter => (_value/1e-3) * 1e-12d,
                DensityUnit.PoundPerCubicCentimeter => _value/2.204622621848775e-6,
                DensityUnit.PoundPerCubicFoot => _value/0.062427961,
                DensityUnit.PoundPerCubicInch => _value/3.6127298147753e-5,
                DensityUnit.PoundPerCubicMeter => _value/2.204622621848775,
                DensityUnit.PoundPerCubicMillimeter => _value/2.204622621848775e-9,
                DensityUnit.PoundPerImperialGallon => _value*9.9776398e1,
                DensityUnit.PoundPerUSGallon => _value*1.19826427e2,
                DensityUnit.SlugPerCubicCentimeter => _value*14593903,
                DensityUnit.SlugPerCubicFoot => _value*515.378818,
                DensityUnit.SlugPerCubicInch => _value*890574.60201535,
                DensityUnit.SlugPerCubicMeter => _value*14.5939,
                DensityUnit.SlugPerCubicMillimeter => _value*14593903000,
                DensityUnit.TonnePerCubicCentimeter => _value/1e-9,
                DensityUnit.TonnePerCubicFoot => _value*3.53146667214886e4,
                DensityUnit.TonnePerCubicInch => _value*6.10237440947323e7,
                DensityUnit.TonnePerCubicMeter => _value/0.001,
                DensityUnit.TonnePerCubicMillimeter => _value/1e-12,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(DensityUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                DensityUnit.CentigramPerDeciliter => (baseUnitValue*1e-1) / 1e-2d,
                DensityUnit.CentigramPerLiter => (baseUnitValue*1) / 1e-2d,
                DensityUnit.CentigramPerMilliliter => (baseUnitValue*1e-3) / 1e-2d,
                DensityUnit.DecigramPerDeciliter => (baseUnitValue*1e-1) / 1e-1d,
                DensityUnit.DecigramPerLiter => (baseUnitValue*1) / 1e-1d,
                DensityUnit.DecigramPerMilliliter => (baseUnitValue*1e-3) / 1e-1d,
                DensityUnit.GramPerCubicCentimeter => baseUnitValue*1e-3,
                DensityUnit.GramPerCubicFoot => baseUnitValue/0.0353146667214886,
                DensityUnit.GramPerCubicInch => baseUnitValue/61.0237440947323,
                DensityUnit.GramPerCubicMeter => baseUnitValue*1e3,
                DensityUnit.GramPerCubicMillimeter => baseUnitValue*1e-6,
                DensityUnit.GramPerDeciliter => baseUnitValue*1e-1,
                DensityUnit.GramPerLiter => baseUnitValue*1,
                DensityUnit.GramPerMilliliter => baseUnitValue*1e-3,
                DensityUnit.KilogramPerCubicCentimeter => (baseUnitValue*1e-3) / 1e3d,
                DensityUnit.KilogramPerCubicMeter => (baseUnitValue*1e3) / 1e3d,
                DensityUnit.KilogramPerCubicMillimeter => (baseUnitValue*1e-6) / 1e3d,
                DensityUnit.KilogramPerLiter => baseUnitValue/1e3,
                DensityUnit.KilopoundPerCubicFoot => (baseUnitValue*0.062427961) / 1e3d,
                DensityUnit.KilopoundPerCubicInch => (baseUnitValue*3.6127298147753e-5) / 1e3d,
                DensityUnit.MicrogramPerCubicMeter => (baseUnitValue*1e3) / 1e-6d,
                DensityUnit.MicrogramPerDeciliter => (baseUnitValue*1e-1) / 1e-6d,
                DensityUnit.MicrogramPerLiter => (baseUnitValue*1) / 1e-6d,
                DensityUnit.MicrogramPerMilliliter => (baseUnitValue*1e-3) / 1e-6d,
                DensityUnit.MilligramPerCubicMeter => (baseUnitValue*1e3) / 1e-3d,
                DensityUnit.MilligramPerDeciliter => (baseUnitValue*1e-1) / 1e-3d,
                DensityUnit.MilligramPerLiter => (baseUnitValue*1) / 1e-3d,
                DensityUnit.MilligramPerMilliliter => (baseUnitValue*1e-3) / 1e-3d,
                DensityUnit.NanogramPerDeciliter => (baseUnitValue*1e-1) / 1e-9d,
                DensityUnit.NanogramPerLiter => (baseUnitValue*1) / 1e-9d,
                DensityUnit.NanogramPerMilliliter => (baseUnitValue*1e-3) / 1e-9d,
                DensityUnit.PicogramPerDeciliter => (baseUnitValue*1e-1) / 1e-12d,
                DensityUnit.PicogramPerLiter => (baseUnitValue*1) / 1e-12d,
                DensityUnit.PicogramPerMilliliter => (baseUnitValue*1e-3) / 1e-12d,
                DensityUnit.PoundPerCubicCentimeter => baseUnitValue*2.204622621848775e-6,
                DensityUnit.PoundPerCubicFoot => baseUnitValue*0.062427961,
                DensityUnit.PoundPerCubicInch => baseUnitValue*3.6127298147753e-5,
                DensityUnit.PoundPerCubicMeter => baseUnitValue*2.204622621848775,
                DensityUnit.PoundPerCubicMillimeter => baseUnitValue*2.204622621848775e-9,
                DensityUnit.PoundPerImperialGallon => baseUnitValue/9.9776398e1,
                DensityUnit.PoundPerUSGallon => baseUnitValue/1.19826427e2,
                DensityUnit.SlugPerCubicCentimeter => baseUnitValue/14593903,
                DensityUnit.SlugPerCubicFoot => baseUnitValue*0.00194032033,
                DensityUnit.SlugPerCubicInch => baseUnitValue/890574.60201535,
                DensityUnit.SlugPerCubicMeter => baseUnitValue/14.5939,
                DensityUnit.SlugPerCubicMillimeter => baseUnitValue/14593903000,
                DensityUnit.TonnePerCubicCentimeter => baseUnitValue*1e-9,
                DensityUnit.TonnePerCubicFoot => baseUnitValue/3.53146667214886e4,
                DensityUnit.TonnePerCubicInch => baseUnitValue/6.10237440947323e7,
                DensityUnit.TonnePerCubicMeter => baseUnitValue*0.001,
                DensityUnit.TonnePerCubicMillimeter => baseUnitValue*1e-12,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

