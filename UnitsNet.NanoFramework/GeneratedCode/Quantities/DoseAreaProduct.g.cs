//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     It is defined as the absorbed dose multiplied by the area irradiated.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Dose_area_product
    /// </remarks>
    public struct  DoseAreaProduct
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DoseAreaProductUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public DoseAreaProductUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public DoseAreaProduct(double value, DoseAreaProductUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of DoseAreaProduct, which is Second. All conversions go via this value.
        /// </summary>
        public static DoseAreaProductUnit BaseUnit { get; } = DoseAreaProductUnit.GrayPerSquareMeter;

        /// <summary>
        /// Represents the largest possible value of DoseAreaProduct.
        /// </summary>
        public static DoseAreaProduct MaxValue { get; } = new DoseAreaProduct(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of DoseAreaProduct.
        /// </summary>
        public static DoseAreaProduct MinValue { get; } = new DoseAreaProduct(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static DoseAreaProduct Zero { get; } = new DoseAreaProduct(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigrayPerSquareCentimeter"/>
        /// </summary>
        public double CentigrayPerSquareCentimeters => As(DoseAreaProductUnit.CentigrayPerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigrayPerSquareDecimeter"/>
        /// </summary>
        public double CentigrayPerSquareDecimeters => As(DoseAreaProductUnit.CentigrayPerSquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigrayPerSquareMeter"/>
        /// </summary>
        public double CentigrayPerSquareMeters => As(DoseAreaProductUnit.CentigrayPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigrayPerSquareMillimeter"/>
        /// </summary>
        public double CentigrayPerSquareMillimeters => As(DoseAreaProductUnit.CentigrayPerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigrayPerSquareCentimeter"/>
        /// </summary>
        public double DecigrayPerSquareCentimeters => As(DoseAreaProductUnit.DecigrayPerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigrayPerSquareDecimeter"/>
        /// </summary>
        public double DecigrayPerSquareDecimeters => As(DoseAreaProductUnit.DecigrayPerSquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigrayPerSquareMeter"/>
        /// </summary>
        public double DecigrayPerSquareMeters => As(DoseAreaProductUnit.DecigrayPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigrayPerSquareMillimeter"/>
        /// </summary>
        public double DecigrayPerSquareMillimeters => As(DoseAreaProductUnit.DecigrayPerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GrayPerSquareCentimeter"/>
        /// </summary>
        public double GrayPerSquareCentimeters => As(DoseAreaProductUnit.GrayPerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GrayPerSquareDecimeter"/>
        /// </summary>
        public double GrayPerSquareDecimeters => As(DoseAreaProductUnit.GrayPerSquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GrayPerSquareMeter"/>
        /// </summary>
        public double GrayPerSquareMeters => As(DoseAreaProductUnit.GrayPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GrayPerSquareMillimeter"/>
        /// </summary>
        public double GrayPerSquareMillimeters => As(DoseAreaProductUnit.GrayPerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograyPerSquareCentimeter"/>
        /// </summary>
        public double MicrograyPerSquareCentimeters => As(DoseAreaProductUnit.MicrograyPerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograyPerSquareDecimeter"/>
        /// </summary>
        public double MicrograyPerSquareDecimeters => As(DoseAreaProductUnit.MicrograyPerSquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograyPerSquareMeter"/>
        /// </summary>
        public double MicrograyPerSquareMeters => As(DoseAreaProductUnit.MicrograyPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograyPerSquareMillimeter"/>
        /// </summary>
        public double MicrograyPerSquareMillimeters => As(DoseAreaProductUnit.MicrograyPerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligrayPerSquareCentimeter"/>
        /// </summary>
        public double MilligrayPerSquareCentimeters => As(DoseAreaProductUnit.MilligrayPerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligrayPerSquareDecimeter"/>
        /// </summary>
        public double MilligrayPerSquareDecimeters => As(DoseAreaProductUnit.MilligrayPerSquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligrayPerSquareMeter"/>
        /// </summary>
        public double MilligrayPerSquareMeters => As(DoseAreaProductUnit.MilligrayPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligrayPerSquareMillimeter"/>
        /// </summary>
        public double MilligrayPerSquareMillimeters => As(DoseAreaProductUnit.MilligrayPerSquareMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigrayPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromCentigrayPerSquareCentimeters(double centigraypersquarecentimeters) => new DoseAreaProduct(centigraypersquarecentimeters, DoseAreaProductUnit.CentigrayPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigrayPerSquareDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromCentigrayPerSquareDecimeters(double centigraypersquaredecimeters) => new DoseAreaProduct(centigraypersquaredecimeters, DoseAreaProductUnit.CentigrayPerSquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigrayPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromCentigrayPerSquareMeters(double centigraypersquaremeters) => new DoseAreaProduct(centigraypersquaremeters, DoseAreaProductUnit.CentigrayPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigrayPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromCentigrayPerSquareMillimeters(double centigraypersquaremillimeters) => new DoseAreaProduct(centigraypersquaremillimeters, DoseAreaProductUnit.CentigrayPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigrayPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromDecigrayPerSquareCentimeters(double decigraypersquarecentimeters) => new DoseAreaProduct(decigraypersquarecentimeters, DoseAreaProductUnit.DecigrayPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigrayPerSquareDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromDecigrayPerSquareDecimeters(double decigraypersquaredecimeters) => new DoseAreaProduct(decigraypersquaredecimeters, DoseAreaProductUnit.DecigrayPerSquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigrayPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromDecigrayPerSquareMeters(double decigraypersquaremeters) => new DoseAreaProduct(decigraypersquaremeters, DoseAreaProductUnit.DecigrayPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigrayPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromDecigrayPerSquareMillimeters(double decigraypersquaremillimeters) => new DoseAreaProduct(decigraypersquaremillimeters, DoseAreaProductUnit.DecigrayPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GrayPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromGrayPerSquareCentimeters(double graypersquarecentimeters) => new DoseAreaProduct(graypersquarecentimeters, DoseAreaProductUnit.GrayPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GrayPerSquareDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromGrayPerSquareDecimeters(double graypersquaredecimeters) => new DoseAreaProduct(graypersquaredecimeters, DoseAreaProductUnit.GrayPerSquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GrayPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromGrayPerSquareMeters(double graypersquaremeters) => new DoseAreaProduct(graypersquaremeters, DoseAreaProductUnit.GrayPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GrayPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromGrayPerSquareMillimeters(double graypersquaremillimeters) => new DoseAreaProduct(graypersquaremillimeters, DoseAreaProductUnit.GrayPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograyPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMicrograyPerSquareCentimeters(double micrograypersquarecentimeters) => new DoseAreaProduct(micrograypersquarecentimeters, DoseAreaProductUnit.MicrograyPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograyPerSquareDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMicrograyPerSquareDecimeters(double micrograypersquaredecimeters) => new DoseAreaProduct(micrograypersquaredecimeters, DoseAreaProductUnit.MicrograyPerSquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograyPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMicrograyPerSquareMeters(double micrograypersquaremeters) => new DoseAreaProduct(micrograypersquaremeters, DoseAreaProductUnit.MicrograyPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograyPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMicrograyPerSquareMillimeters(double micrograypersquaremillimeters) => new DoseAreaProduct(micrograypersquaremillimeters, DoseAreaProductUnit.MicrograyPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligrayPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMilligrayPerSquareCentimeters(double milligraypersquarecentimeters) => new DoseAreaProduct(milligraypersquarecentimeters, DoseAreaProductUnit.MilligrayPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligrayPerSquareDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMilligrayPerSquareDecimeters(double milligraypersquaredecimeters) => new DoseAreaProduct(milligraypersquaredecimeters, DoseAreaProductUnit.MilligrayPerSquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligrayPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMilligrayPerSquareMeters(double milligraypersquaremeters) => new DoseAreaProduct(milligraypersquaremeters, DoseAreaProductUnit.MilligrayPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligrayPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static DoseAreaProduct FromMilligrayPerSquareMillimeters(double milligraypersquaremillimeters) => new DoseAreaProduct(milligraypersquaremillimeters, DoseAreaProductUnit.MilligrayPerSquareMillimeter);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DoseAreaProductUnit" /> to <see cref="DoseAreaProduct" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>DoseAreaProduct unit value.</returns>
        public static DoseAreaProduct From(double value, DoseAreaProductUnit fromUnit)
        {
            return new DoseAreaProduct(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(DoseAreaProductUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this DoseAreaProduct to another DoseAreaProduct with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A DoseAreaProduct with the specified unit.</returns>
                public DoseAreaProduct ToUnit(DoseAreaProductUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new DoseAreaProduct(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        DoseAreaProductUnit.CentigrayPerSquareCentimeter => (_value / 10000) * 1e-2d,
                        DoseAreaProductUnit.CentigrayPerSquareDecimeter => (_value / 100) * 1e-2d,
                        DoseAreaProductUnit.CentigrayPerSquareMeter => (_value) * 1e-2d,
                        DoseAreaProductUnit.CentigrayPerSquareMillimeter => (_value / 1000000) * 1e-2d,
                        DoseAreaProductUnit.DecigrayPerSquareCentimeter => (_value / 10000) * 1e-1d,
                        DoseAreaProductUnit.DecigrayPerSquareDecimeter => (_value / 100) * 1e-1d,
                        DoseAreaProductUnit.DecigrayPerSquareMeter => (_value) * 1e-1d,
                        DoseAreaProductUnit.DecigrayPerSquareMillimeter => (_value / 1000000) * 1e-1d,
                        DoseAreaProductUnit.GrayPerSquareCentimeter => _value / 10000,
                        DoseAreaProductUnit.GrayPerSquareDecimeter => _value / 100,
                        DoseAreaProductUnit.GrayPerSquareMeter => _value,
                        DoseAreaProductUnit.GrayPerSquareMillimeter => _value / 1000000,
                        DoseAreaProductUnit.MicrograyPerSquareCentimeter => (_value / 10000) * 1e-6d,
                        DoseAreaProductUnit.MicrograyPerSquareDecimeter => (_value / 100) * 1e-6d,
                        DoseAreaProductUnit.MicrograyPerSquareMeter => (_value) * 1e-6d,
                        DoseAreaProductUnit.MicrograyPerSquareMillimeter => (_value / 1000000) * 1e-6d,
                        DoseAreaProductUnit.MilligrayPerSquareCentimeter => (_value / 10000) * 1e-3d,
                        DoseAreaProductUnit.MilligrayPerSquareDecimeter => (_value / 100) * 1e-3d,
                        DoseAreaProductUnit.MilligrayPerSquareMeter => (_value) * 1e-3d,
                        DoseAreaProductUnit.MilligrayPerSquareMillimeter => (_value / 1000000) * 1e-3d,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(DoseAreaProductUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        DoseAreaProductUnit.CentigrayPerSquareCentimeter => (baseUnitValue * 10000) / 1e-2d,
                        DoseAreaProductUnit.CentigrayPerSquareDecimeter => (baseUnitValue * 100) / 1e-2d,
                        DoseAreaProductUnit.CentigrayPerSquareMeter => (baseUnitValue) / 1e-2d,
                        DoseAreaProductUnit.CentigrayPerSquareMillimeter => (baseUnitValue * 1000000) / 1e-2d,
                        DoseAreaProductUnit.DecigrayPerSquareCentimeter => (baseUnitValue * 10000) / 1e-1d,
                        DoseAreaProductUnit.DecigrayPerSquareDecimeter => (baseUnitValue * 100) / 1e-1d,
                        DoseAreaProductUnit.DecigrayPerSquareMeter => (baseUnitValue) / 1e-1d,
                        DoseAreaProductUnit.DecigrayPerSquareMillimeter => (baseUnitValue * 1000000) / 1e-1d,
                        DoseAreaProductUnit.GrayPerSquareCentimeter => baseUnitValue * 10000,
                        DoseAreaProductUnit.GrayPerSquareDecimeter => baseUnitValue * 100,
                        DoseAreaProductUnit.GrayPerSquareMeter => baseUnitValue,
                        DoseAreaProductUnit.GrayPerSquareMillimeter => baseUnitValue * 1000000,
                        DoseAreaProductUnit.MicrograyPerSquareCentimeter => (baseUnitValue * 10000) / 1e-6d,
                        DoseAreaProductUnit.MicrograyPerSquareDecimeter => (baseUnitValue * 100) / 1e-6d,
                        DoseAreaProductUnit.MicrograyPerSquareMeter => (baseUnitValue) / 1e-6d,
                        DoseAreaProductUnit.MicrograyPerSquareMillimeter => (baseUnitValue * 1000000) / 1e-6d,
                        DoseAreaProductUnit.MilligrayPerSquareCentimeter => (baseUnitValue * 10000) / 1e-3d,
                        DoseAreaProductUnit.MilligrayPerSquareDecimeter => (baseUnitValue * 100) / 1e-3d,
                        DoseAreaProductUnit.MilligrayPerSquareMeter => (baseUnitValue) / 1e-3d,
                        DoseAreaProductUnit.MilligrayPerSquareMillimeter => (baseUnitValue * 1000000) / 1e-3d,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

