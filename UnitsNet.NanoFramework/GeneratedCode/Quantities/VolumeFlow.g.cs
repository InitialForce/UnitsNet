//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    public struct  VolumeFlow
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeFlowUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public VolumeFlowUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public VolumeFlow(double value, VolumeFlowUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit { get; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static VolumeFlow MaxValue { get; } = new VolumeFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static VolumeFlow MinValue { get; } = new VolumeFlow(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static VolumeFlow Zero { get; } = new VolumeFlow(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerDay.
        /// </summary>
        public double AcreFeetPerDay => As(VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerHour.
        /// </summary>
        public double AcreFeetPerHour => As(VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerMinute.
        /// </summary>
        public double AcreFeetPerMinute => As(VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerSecond.
        /// </summary>
        public double AcreFeetPerSecond => As(VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerDay.
        /// </summary>
        public double CentilitersPerDay => As(VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerHour.
        /// </summary>
        public double CentilitersPerHour => As(VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute => As(VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerSecond.
        /// </summary>
        public double CentilitersPerSecond => As(VolumeFlowUnit.CentiliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicCentimetersPerMinute.
        /// </summary>
        public double CubicCentimetersPerMinute => As(VolumeFlowUnit.CubicCentimeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicDecimetersPerMinute.
        /// </summary>
        public double CubicDecimetersPerMinute => As(VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerHour.
        /// </summary>
        public double CubicFeetPerHour => As(VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerMinute.
        /// </summary>
        public double CubicFeetPerMinute => As(VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerSecond.
        /// </summary>
        public double CubicFeetPerSecond => As(VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerDay.
        /// </summary>
        public double CubicMetersPerDay => As(VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerHour.
        /// </summary>
        public double CubicMetersPerHour => As(VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerMinute.
        /// </summary>
        public double CubicMetersPerMinute => As(VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerSecond.
        /// </summary>
        public double CubicMetersPerSecond => As(VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicMillimetersPerSecond.
        /// </summary>
        public double CubicMillimetersPerSecond => As(VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerDay.
        /// </summary>
        public double CubicYardsPerDay => As(VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerHour.
        /// </summary>
        public double CubicYardsPerHour => As(VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerMinute.
        /// </summary>
        public double CubicYardsPerMinute => As(VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerSecond.
        /// </summary>
        public double CubicYardsPerSecond => As(VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerDay.
        /// </summary>
        public double DecilitersPerDay => As(VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerHour.
        /// </summary>
        public double DecilitersPerHour => As(VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute => As(VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerSecond.
        /// </summary>
        public double DecilitersPerSecond => As(VolumeFlowUnit.DeciliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerDay.
        /// </summary>
        public double KilolitersPerDay => As(VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerHour.
        /// </summary>
        public double KilolitersPerHour => As(VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute => As(VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerSecond.
        /// </summary>
        public double KilolitersPerSecond => As(VolumeFlowUnit.KiloliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in KilousGallonsPerMinute.
        /// </summary>
        public double KilousGallonsPerMinute => As(VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in LitersPerDay.
        /// </summary>
        public double LitersPerDay => As(VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Get VolumeFlow in LitersPerHour.
        /// </summary>
        public double LitersPerHour => As(VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Get VolumeFlow in LitersPerMinute.
        /// </summary>
        public double LitersPerMinute => As(VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in LitersPerSecond.
        /// </summary>
        public double LitersPerSecond => As(VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MegalitersPerDay.
        /// </summary>
        public double MegalitersPerDay => As(VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MegaukGallonsPerSecond.
        /// </summary>
        public double MegaukGallonsPerSecond => As(VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerDay.
        /// </summary>
        public double MicrolitersPerDay => As(VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerHour.
        /// </summary>
        public double MicrolitersPerHour => As(VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute => As(VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerSecond.
        /// </summary>
        public double MicrolitersPerSecond => As(VolumeFlowUnit.MicroliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerDay.
        /// </summary>
        public double MillilitersPerDay => As(VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerHour.
        /// </summary>
        public double MillilitersPerHour => As(VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute => As(VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerSecond.
        /// </summary>
        public double MillilitersPerSecond => As(VolumeFlowUnit.MilliliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MillionUsGallonsPerDay.
        /// </summary>
        public double MillionUsGallonsPerDay => As(VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerDay.
        /// </summary>
        public double NanolitersPerDay => As(VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerHour.
        /// </summary>
        public double NanolitersPerHour => As(VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute => As(VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerSecond.
        /// </summary>
        public double NanolitersPerSecond => As(VolumeFlowUnit.NanoliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerDay.
        /// </summary>
        public double OilBarrelsPerDay => As(VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerHour.
        /// </summary>
        public double OilBarrelsPerHour => As(VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerMinute.
        /// </summary>
        public double OilBarrelsPerMinute => As(VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerSecond.
        /// </summary>
        public double OilBarrelsPerSecond => As(VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerDay.
        /// </summary>
        public double UkGallonsPerDay => As(VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerHour.
        /// </summary>
        public double UkGallonsPerHour => As(VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerMinute.
        /// </summary>
        public double UkGallonsPerMinute => As(VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerSecond.
        /// </summary>
        public double UkGallonsPerSecond => As(VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerDay.
        /// </summary>
        public double UsGallonsPerDay => As(VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerHour.
        /// </summary>
        public double UsGallonsPerHour => As(VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerMinute.
        /// </summary>
        public double UsGallonsPerMinute => As(VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerSecond.
        /// </summary>
        public double UsGallonsPerSecond => As(VolumeFlowUnit.UsGallonPerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerDay(double acrefeetperday) => new VolumeFlow(acrefeetperday, VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerHour(double acrefeetperhour) => new VolumeFlow(acrefeetperhour, VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerMinute(double acrefeetperminute) => new VolumeFlow(acrefeetperminute, VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerSecond(double acrefeetpersecond) => new VolumeFlow(acrefeetpersecond, VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow from CentilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerDay(double centilitersperday) => new VolumeFlow(centilitersperday, VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Get VolumeFlow from CentilitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerHour(double centilitersperhour) => new VolumeFlow(centilitersperhour, VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Get VolumeFlow from CentilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerMinute(double centilitersperminute) => new VolumeFlow(centilitersperminute, VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from CentilitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerSecond(double centiliterspersecond) => new VolumeFlow(centiliterspersecond, VolumeFlowUnit.CentiliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from CubicCentimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicCentimetersPerMinute(double cubiccentimetersperminute) => new VolumeFlow(cubiccentimetersperminute, VolumeFlowUnit.CubicCentimeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from CubicDecimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicDecimetersPerMinute(double cubicdecimetersperminute) => new VolumeFlow(cubicdecimetersperminute, VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerHour(double cubicfeetperhour) => new VolumeFlow(cubicfeetperhour, VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerMinute(double cubicfeetperminute) => new VolumeFlow(cubicfeetperminute, VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerSecond(double cubicfeetpersecond) => new VolumeFlow(cubicfeetpersecond, VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerDay(double cubicmetersperday) => new VolumeFlow(cubicmetersperday, VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerHour(double cubicmetersperhour) => new VolumeFlow(cubicmetersperhour, VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerMinute(double cubicmetersperminute) => new VolumeFlow(cubicmetersperminute, VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerSecond(double cubicmeterspersecond) => new VolumeFlow(cubicmeterspersecond, VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from CubicMillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMillimetersPerSecond(double cubicmillimeterspersecond) => new VolumeFlow(cubicmillimeterspersecond, VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerDay(double cubicyardsperday) => new VolumeFlow(cubicyardsperday, VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerHour(double cubicyardsperhour) => new VolumeFlow(cubicyardsperhour, VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerMinute(double cubicyardsperminute) => new VolumeFlow(cubicyardsperminute, VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerSecond(double cubicyardspersecond) => new VolumeFlow(cubicyardspersecond, VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Get VolumeFlow from DecilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerDay(double decilitersperday) => new VolumeFlow(decilitersperday, VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Get VolumeFlow from DecilitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerHour(double decilitersperhour) => new VolumeFlow(decilitersperhour, VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Get VolumeFlow from DecilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerMinute(double decilitersperminute) => new VolumeFlow(decilitersperminute, VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from DecilitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerSecond(double deciliterspersecond) => new VolumeFlow(deciliterspersecond, VolumeFlowUnit.DeciliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from KilolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerDay(double kilolitersperday) => new VolumeFlow(kilolitersperday, VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Get VolumeFlow from KilolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerHour(double kilolitersperhour) => new VolumeFlow(kilolitersperhour, VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Get VolumeFlow from KilolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerMinute(double kilolitersperminute) => new VolumeFlow(kilolitersperminute, VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from KilolitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerSecond(double kiloliterspersecond) => new VolumeFlow(kiloliterspersecond, VolumeFlowUnit.KiloliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from KilousGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilousGallonsPerMinute(double kilousgallonsperminute) => new VolumeFlow(kilousgallonsperminute, VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow from LitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerDay(double litersperday) => new VolumeFlow(litersperday, VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Get VolumeFlow from LitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerHour(double litersperhour) => new VolumeFlow(litersperhour, VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Get VolumeFlow from LitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerMinute(double litersperminute) => new VolumeFlow(litersperminute, VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from LitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerSecond(double literspersecond) => new VolumeFlow(literspersecond, VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from MegalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMegalitersPerDay(double megalitersperday) => new VolumeFlow(megalitersperday, VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow from MegaukGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMegaukGallonsPerSecond(double megaukgallonspersecond) => new VolumeFlow(megaukgallonspersecond, VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerDay(double microlitersperday) => new VolumeFlow(microlitersperday, VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerHour(double microlitersperhour) => new VolumeFlow(microlitersperhour, VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerMinute(double microlitersperminute) => new VolumeFlow(microlitersperminute, VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerSecond(double microliterspersecond) => new VolumeFlow(microliterspersecond, VolumeFlowUnit.MicroliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from MillilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerDay(double millilitersperday) => new VolumeFlow(millilitersperday, VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Get VolumeFlow from MillilitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerHour(double millilitersperhour) => new VolumeFlow(millilitersperhour, VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Get VolumeFlow from MillilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerMinute(double millilitersperminute) => new VolumeFlow(millilitersperminute, VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from MillilitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerSecond(double milliliterspersecond) => new VolumeFlow(milliliterspersecond, VolumeFlowUnit.MilliliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from MillionUsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillionUsGallonsPerDay(double millionusgallonsperday) => new VolumeFlow(millionusgallonsperday, VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Get VolumeFlow from NanolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerDay(double nanolitersperday) => new VolumeFlow(nanolitersperday, VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow from NanolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerHour(double nanolitersperhour) => new VolumeFlow(nanolitersperhour, VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow from NanolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerMinute(double nanolitersperminute) => new VolumeFlow(nanolitersperminute, VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow from NanolitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerSecond(double nanoliterspersecond) => new VolumeFlow(nanoliterspersecond, VolumeFlowUnit.NanoliterPerSecond);

        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerDay(double oilbarrelsperday) => new VolumeFlow(oilbarrelsperday, VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerHour(double oilbarrelsperhour) => new VolumeFlow(oilbarrelsperhour, VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerMinute(double oilbarrelsperminute) => new VolumeFlow(oilbarrelsperminute, VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerSecond(double oilbarrelspersecond) => new VolumeFlow(oilbarrelspersecond, VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerDay(double ukgallonsperday) => new VolumeFlow(ukgallonsperday, VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerHour(double ukgallonsperhour) => new VolumeFlow(ukgallonsperhour, VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerMinute(double ukgallonsperminute) => new VolumeFlow(ukgallonsperminute, VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerSecond(double ukgallonspersecond) => new VolumeFlow(ukgallonspersecond, VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerDay(double usgallonsperday) => new VolumeFlow(usgallonsperday, VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerHour(double usgallonsperhour) => new VolumeFlow(usgallonsperhour, VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerMinute(double usgallonsperminute) => new VolumeFlow(usgallonsperminute, VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerSecond(double usgallonspersecond) => new VolumeFlow(usgallonspersecond, VolumeFlowUnit.UsGallonPerSecond);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
        public static VolumeFlow From(double value, VolumeFlowUnit fromUnit)
        {
            return new VolumeFlow(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeFlowUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public VolumeFlow ToUnit(VolumeFlowUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new VolumeFlow(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                VolumeFlowUnit.AcreFootPerDay => _value/70.0457,
                VolumeFlowUnit.AcreFootPerHour => _value/2.91857,
                VolumeFlowUnit.AcreFootPerMinute => _value/0.0486427916,
                VolumeFlowUnit.AcreFootPerSecond => _value/0.000810713194,
                VolumeFlowUnit.CentiliterPerDay => (_value/86400000) * 1e-2d,
                VolumeFlowUnit.CentiliterPerHour => (_value/3600000.000) * 1e-2d,
                VolumeFlowUnit.CentiliterPerMinute => (_value/60000.00000) * 1e-2d,
                VolumeFlowUnit.CentiliterPerSecond => (_value/1000) * 1e-2d,
                VolumeFlowUnit.CubicCentimeterPerMinute => _value*1.6666666666667e-8,
                VolumeFlowUnit.CubicDecimeterPerMinute => _value/60000.00000,
                VolumeFlowUnit.CubicFootPerHour => _value*7.8657907199999087346816086183876e-6,
                VolumeFlowUnit.CubicFootPerMinute => _value/2118.88000326,
                VolumeFlowUnit.CubicFootPerSecond => _value/35.314666721,
                VolumeFlowUnit.CubicMeterPerDay => _value/86400,
                VolumeFlowUnit.CubicMeterPerHour => _value/3600,
                VolumeFlowUnit.CubicMeterPerMinute => _value/60,
                VolumeFlowUnit.CubicMeterPerSecond => _value,
                VolumeFlowUnit.CubicMillimeterPerSecond => _value*1e-9,
                VolumeFlowUnit.CubicYardPerDay => _value/113007,
                VolumeFlowUnit.CubicYardPerHour => _value*2.1237634944E-4,
                VolumeFlowUnit.CubicYardPerMinute => _value*0.0127425809664,
                VolumeFlowUnit.CubicYardPerSecond => _value*0.764554857984,
                VolumeFlowUnit.DeciliterPerDay => (_value/86400000) * 1e-1d,
                VolumeFlowUnit.DeciliterPerHour => (_value/3600000.000) * 1e-1d,
                VolumeFlowUnit.DeciliterPerMinute => (_value/60000.00000) * 1e-1d,
                VolumeFlowUnit.DeciliterPerSecond => (_value/1000) * 1e-1d,
                VolumeFlowUnit.KiloliterPerDay => (_value/86400000) * 1e3d,
                VolumeFlowUnit.KiloliterPerHour => (_value/3600000.000) * 1e3d,
                VolumeFlowUnit.KiloliterPerMinute => (_value/60000.00000) * 1e3d,
                VolumeFlowUnit.KiloliterPerSecond => (_value/1000) * 1e3d,
                VolumeFlowUnit.KilousGallonPerMinute => _value/15.850323141489,
                VolumeFlowUnit.LiterPerDay => _value/86400000,
                VolumeFlowUnit.LiterPerHour => _value/3600000.000,
                VolumeFlowUnit.LiterPerMinute => _value/60000.00000,
                VolumeFlowUnit.LiterPerSecond => _value/1000,
                VolumeFlowUnit.MegaliterPerDay => (_value/86400000) * 1e6d,
                VolumeFlowUnit.MegaukGallonPerSecond => (_value/219.969) * 1e6d,
                VolumeFlowUnit.MicroliterPerDay => (_value/86400000) * 1e-6d,
                VolumeFlowUnit.MicroliterPerHour => (_value/3600000.000) * 1e-6d,
                VolumeFlowUnit.MicroliterPerMinute => (_value/60000.00000) * 1e-6d,
                VolumeFlowUnit.MicroliterPerSecond => (_value/1000) * 1e-6d,
                VolumeFlowUnit.MilliliterPerDay => (_value/86400000) * 1e-3d,
                VolumeFlowUnit.MilliliterPerHour => (_value/3600000.000) * 1e-3d,
                VolumeFlowUnit.MilliliterPerMinute => (_value/60000.00000) * 1e-3d,
                VolumeFlowUnit.MilliliterPerSecond => (_value/1000) * 1e-3d,
                VolumeFlowUnit.MillionUsGallonsPerDay => _value/22.824465227,
                VolumeFlowUnit.NanoliterPerDay => (_value/86400000) * 1e-9d,
                VolumeFlowUnit.NanoliterPerHour => (_value/3600000.000) * 1e-9d,
                VolumeFlowUnit.NanoliterPerMinute => (_value/60000.00000) * 1e-9d,
                VolumeFlowUnit.NanoliterPerSecond => (_value/1000) * 1e-9d,
                VolumeFlowUnit.OilBarrelPerDay => _value*1.8401307283333333333333333333333e-6,
                VolumeFlowUnit.OilBarrelPerHour => _value*4.41631375e-5,
                VolumeFlowUnit.OilBarrelPerMinute => _value*2.64978825e-3,
                VolumeFlowUnit.OilBarrelPerSecond => _value/6.28981,
                VolumeFlowUnit.UkGallonPerDay => _value/19005304,
                VolumeFlowUnit.UkGallonPerHour => _value/791887.667,
                VolumeFlowUnit.UkGallonPerMinute => _value/13198.2,
                VolumeFlowUnit.UkGallonPerSecond => _value/219.969,
                VolumeFlowUnit.UsGallonPerDay => _value/22824465.227,
                VolumeFlowUnit.UsGallonPerHour => _value/951019.38848933424,
                VolumeFlowUnit.UsGallonPerMinute => _value/15850.323141489,
                VolumeFlowUnit.UsGallonPerSecond => _value/264.1720523581484,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(VolumeFlowUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                VolumeFlowUnit.AcreFootPerDay => baseUnitValue*70.0457,
                VolumeFlowUnit.AcreFootPerHour => baseUnitValue*2.91857,
                VolumeFlowUnit.AcreFootPerMinute => baseUnitValue*0.0486427916,
                VolumeFlowUnit.AcreFootPerSecond => baseUnitValue*0.000810713194,
                VolumeFlowUnit.CentiliterPerDay => (baseUnitValue*86400000) / 1e-2d,
                VolumeFlowUnit.CentiliterPerHour => (baseUnitValue*3600000.000) / 1e-2d,
                VolumeFlowUnit.CentiliterPerMinute => (baseUnitValue*60000.00000) / 1e-2d,
                VolumeFlowUnit.CentiliterPerSecond => (baseUnitValue*1000) / 1e-2d,
                VolumeFlowUnit.CubicCentimeterPerMinute => baseUnitValue/1.6666666666667e-8,
                VolumeFlowUnit.CubicDecimeterPerMinute => baseUnitValue*60000.00000,
                VolumeFlowUnit.CubicFootPerHour => baseUnitValue/7.8657907199999087346816086183876e-6,
                VolumeFlowUnit.CubicFootPerMinute => baseUnitValue*2118.88000326,
                VolumeFlowUnit.CubicFootPerSecond => baseUnitValue*35.314666721,
                VolumeFlowUnit.CubicMeterPerDay => baseUnitValue*86400,
                VolumeFlowUnit.CubicMeterPerHour => baseUnitValue*3600,
                VolumeFlowUnit.CubicMeterPerMinute => baseUnitValue*60,
                VolumeFlowUnit.CubicMeterPerSecond => baseUnitValue,
                VolumeFlowUnit.CubicMillimeterPerSecond => baseUnitValue/1e-9,
                VolumeFlowUnit.CubicYardPerDay => baseUnitValue*113007,
                VolumeFlowUnit.CubicYardPerHour => baseUnitValue/2.1237634944E-4,
                VolumeFlowUnit.CubicYardPerMinute => baseUnitValue/0.0127425809664,
                VolumeFlowUnit.CubicYardPerSecond => baseUnitValue/0.764554857984,
                VolumeFlowUnit.DeciliterPerDay => (baseUnitValue*86400000) / 1e-1d,
                VolumeFlowUnit.DeciliterPerHour => (baseUnitValue*3600000.000) / 1e-1d,
                VolumeFlowUnit.DeciliterPerMinute => (baseUnitValue*60000.00000) / 1e-1d,
                VolumeFlowUnit.DeciliterPerSecond => (baseUnitValue*1000) / 1e-1d,
                VolumeFlowUnit.KiloliterPerDay => (baseUnitValue*86400000) / 1e3d,
                VolumeFlowUnit.KiloliterPerHour => (baseUnitValue*3600000.000) / 1e3d,
                VolumeFlowUnit.KiloliterPerMinute => (baseUnitValue*60000.00000) / 1e3d,
                VolumeFlowUnit.KiloliterPerSecond => (baseUnitValue*1000) / 1e3d,
                VolumeFlowUnit.KilousGallonPerMinute => baseUnitValue*15.850323141489,
                VolumeFlowUnit.LiterPerDay => baseUnitValue*86400000,
                VolumeFlowUnit.LiterPerHour => baseUnitValue*3600000.000,
                VolumeFlowUnit.LiterPerMinute => baseUnitValue*60000.00000,
                VolumeFlowUnit.LiterPerSecond => baseUnitValue*1000,
                VolumeFlowUnit.MegaliterPerDay => (baseUnitValue*86400000) / 1e6d,
                VolumeFlowUnit.MegaukGallonPerSecond => (baseUnitValue*219.969) / 1e6d,
                VolumeFlowUnit.MicroliterPerDay => (baseUnitValue*86400000) / 1e-6d,
                VolumeFlowUnit.MicroliterPerHour => (baseUnitValue*3600000.000) / 1e-6d,
                VolumeFlowUnit.MicroliterPerMinute => (baseUnitValue*60000.00000) / 1e-6d,
                VolumeFlowUnit.MicroliterPerSecond => (baseUnitValue*1000) / 1e-6d,
                VolumeFlowUnit.MilliliterPerDay => (baseUnitValue*86400000) / 1e-3d,
                VolumeFlowUnit.MilliliterPerHour => (baseUnitValue*3600000.000) / 1e-3d,
                VolumeFlowUnit.MilliliterPerMinute => (baseUnitValue*60000.00000) / 1e-3d,
                VolumeFlowUnit.MilliliterPerSecond => (baseUnitValue*1000) / 1e-3d,
                VolumeFlowUnit.MillionUsGallonsPerDay => baseUnitValue*22.824465227,
                VolumeFlowUnit.NanoliterPerDay => (baseUnitValue*86400000) / 1e-9d,
                VolumeFlowUnit.NanoliterPerHour => (baseUnitValue*3600000.000) / 1e-9d,
                VolumeFlowUnit.NanoliterPerMinute => (baseUnitValue*60000.00000) / 1e-9d,
                VolumeFlowUnit.NanoliterPerSecond => (baseUnitValue*1000) / 1e-9d,
                VolumeFlowUnit.OilBarrelPerDay => baseUnitValue/1.8401307283333333333333333333333e-6,
                VolumeFlowUnit.OilBarrelPerHour => baseUnitValue/4.41631375e-5,
                VolumeFlowUnit.OilBarrelPerMinute => baseUnitValue/2.64978825e-3,
                VolumeFlowUnit.OilBarrelPerSecond => baseUnitValue*6.28981,
                VolumeFlowUnit.UkGallonPerDay => baseUnitValue*19005304,
                VolumeFlowUnit.UkGallonPerHour => baseUnitValue*791887.667,
                VolumeFlowUnit.UkGallonPerMinute => baseUnitValue*13198.2,
                VolumeFlowUnit.UkGallonPerSecond => baseUnitValue*219.969,
                VolumeFlowUnit.UsGallonPerDay => baseUnitValue*22824465.227,
                VolumeFlowUnit.UsGallonPerHour => baseUnitValue*951019.38848933424,
                VolumeFlowUnit.UsGallonPerMinute => baseUnitValue*15850.323141489,
                VolumeFlowUnit.UsGallonPerSecond => baseUnitValue*264.1720523581484,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

