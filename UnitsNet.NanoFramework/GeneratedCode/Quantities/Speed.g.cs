//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
    /// </summary>
    public struct  Speed
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpeedUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public SpeedUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Speed(double value, SpeedUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static SpeedUnit BaseUnit { get; } = SpeedUnit.MeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Speed MaxValue { get; } = new Speed(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Speed MinValue { get; } = new Speed(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Speed Zero { get; } = new Speed(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get Speed in CentimetersPerHour.
        /// </summary>
        public double CentimetersPerHour => As(SpeedUnit.CentimeterPerHour);

        /// <summary>
        ///     Get Speed in CentimetersPerMinutes.
        /// </summary>
        public double CentimetersPerMinutes => As(SpeedUnit.CentimeterPerMinute);

        /// <summary>
        ///     Get Speed in CentimetersPerSecond.
        /// </summary>
        public double CentimetersPerSecond => As(SpeedUnit.CentimeterPerSecond);

        /// <summary>
        ///     Get Speed in DecimetersPerMinutes.
        /// </summary>
        public double DecimetersPerMinutes => As(SpeedUnit.DecimeterPerMinute);

        /// <summary>
        ///     Get Speed in DecimetersPerSecond.
        /// </summary>
        public double DecimetersPerSecond => As(SpeedUnit.DecimeterPerSecond);

        /// <summary>
        ///     Get Speed in FeetPerHour.
        /// </summary>
        public double FeetPerHour => As(SpeedUnit.FootPerHour);

        /// <summary>
        ///     Get Speed in FeetPerMinute.
        /// </summary>
        public double FeetPerMinute => As(SpeedUnit.FootPerMinute);

        /// <summary>
        ///     Get Speed in FeetPerSecond.
        /// </summary>
        public double FeetPerSecond => As(SpeedUnit.FootPerSecond);

        /// <summary>
        ///     Get Speed in InchesPerHour.
        /// </summary>
        public double InchesPerHour => As(SpeedUnit.InchPerHour);

        /// <summary>
        ///     Get Speed in InchesPerMinute.
        /// </summary>
        public double InchesPerMinute => As(SpeedUnit.InchPerMinute);

        /// <summary>
        ///     Get Speed in InchesPerSecond.
        /// </summary>
        public double InchesPerSecond => As(SpeedUnit.InchPerSecond);

        /// <summary>
        ///     Get Speed in KilometersPerHour.
        /// </summary>
        public double KilometersPerHour => As(SpeedUnit.KilometerPerHour);

        /// <summary>
        ///     Get Speed in KilometersPerMinutes.
        /// </summary>
        public double KilometersPerMinutes => As(SpeedUnit.KilometerPerMinute);

        /// <summary>
        ///     Get Speed in KilometersPerSecond.
        /// </summary>
        public double KilometersPerSecond => As(SpeedUnit.KilometerPerSecond);

        /// <summary>
        ///     Get Speed in Knots.
        /// </summary>
        public double Knots => As(SpeedUnit.Knot);

        /// <summary>
        ///     Get Speed in MetersPerHour.
        /// </summary>
        public double MetersPerHour => As(SpeedUnit.MeterPerHour);

        /// <summary>
        ///     Get Speed in MetersPerMinutes.
        /// </summary>
        public double MetersPerMinutes => As(SpeedUnit.MeterPerMinute);

        /// <summary>
        ///     Get Speed in MetersPerSecond.
        /// </summary>
        public double MetersPerSecond => As(SpeedUnit.MeterPerSecond);

        /// <summary>
        ///     Get Speed in MicrometersPerMinutes.
        /// </summary>
        public double MicrometersPerMinutes => As(SpeedUnit.MicrometerPerMinute);

        /// <summary>
        ///     Get Speed in MicrometersPerSecond.
        /// </summary>
        public double MicrometersPerSecond => As(SpeedUnit.MicrometerPerSecond);

        /// <summary>
        ///     Get Speed in MilesPerHour.
        /// </summary>
        public double MilesPerHour => As(SpeedUnit.MilePerHour);

        /// <summary>
        ///     Get Speed in MillimetersPerHour.
        /// </summary>
        public double MillimetersPerHour => As(SpeedUnit.MillimeterPerHour);

        /// <summary>
        ///     Get Speed in MillimetersPerMinutes.
        /// </summary>
        public double MillimetersPerMinutes => As(SpeedUnit.MillimeterPerMinute);

        /// <summary>
        ///     Get Speed in MillimetersPerSecond.
        /// </summary>
        public double MillimetersPerSecond => As(SpeedUnit.MillimeterPerSecond);

        /// <summary>
        ///     Get Speed in NanometersPerMinutes.
        /// </summary>
        public double NanometersPerMinutes => As(SpeedUnit.NanometerPerMinute);

        /// <summary>
        ///     Get Speed in NanometersPerSecond.
        /// </summary>
        public double NanometersPerSecond => As(SpeedUnit.NanometerPerSecond);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerHour.
        /// </summary>
        public double UsSurveyFeetPerHour => As(SpeedUnit.UsSurveyFootPerHour);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerMinute.
        /// </summary>
        public double UsSurveyFeetPerMinute => As(SpeedUnit.UsSurveyFootPerMinute);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerSecond.
        /// </summary>
        public double UsSurveyFeetPerSecond => As(SpeedUnit.UsSurveyFootPerSecond);

        /// <summary>
        ///     Get Speed in YardsPerHour.
        /// </summary>
        public double YardsPerHour => As(SpeedUnit.YardPerHour);

        /// <summary>
        ///     Get Speed in YardsPerMinute.
        /// </summary>
        public double YardsPerMinute => As(SpeedUnit.YardPerMinute);

        /// <summary>
        ///     Get Speed in YardsPerSecond.
        /// </summary>
        public double YardsPerSecond => As(SpeedUnit.YardPerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Speed from CentimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromCentimetersPerHour(double centimetersperhour) => new Speed(centimetersperhour, SpeedUnit.CentimeterPerHour);

        /// <summary>
        ///     Get Speed from CentimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromCentimetersPerMinutes(double centimetersperminutes) => new Speed(centimetersperminutes, SpeedUnit.CentimeterPerMinute);

        /// <summary>
        ///     Get Speed from CentimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromCentimetersPerSecond(double centimeterspersecond) => new Speed(centimeterspersecond, SpeedUnit.CentimeterPerSecond);

        /// <summary>
        ///     Get Speed from DecimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromDecimetersPerMinutes(double decimetersperminutes) => new Speed(decimetersperminutes, SpeedUnit.DecimeterPerMinute);

        /// <summary>
        ///     Get Speed from DecimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromDecimetersPerSecond(double decimeterspersecond) => new Speed(decimeterspersecond, SpeedUnit.DecimeterPerSecond);

        /// <summary>
        ///     Get Speed from FeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromFeetPerHour(double feetperhour) => new Speed(feetperhour, SpeedUnit.FootPerHour);

        /// <summary>
        ///     Get Speed from FeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromFeetPerMinute(double feetperminute) => new Speed(feetperminute, SpeedUnit.FootPerMinute);

        /// <summary>
        ///     Get Speed from FeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromFeetPerSecond(double feetpersecond) => new Speed(feetpersecond, SpeedUnit.FootPerSecond);

        /// <summary>
        ///     Get Speed from InchesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromInchesPerHour(double inchesperhour) => new Speed(inchesperhour, SpeedUnit.InchPerHour);

        /// <summary>
        ///     Get Speed from InchesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromInchesPerMinute(double inchesperminute) => new Speed(inchesperminute, SpeedUnit.InchPerMinute);

        /// <summary>
        ///     Get Speed from InchesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromInchesPerSecond(double inchespersecond) => new Speed(inchespersecond, SpeedUnit.InchPerSecond);

        /// <summary>
        ///     Get Speed from KilometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromKilometersPerHour(double kilometersperhour) => new Speed(kilometersperhour, SpeedUnit.KilometerPerHour);

        /// <summary>
        ///     Get Speed from KilometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromKilometersPerMinutes(double kilometersperminutes) => new Speed(kilometersperminutes, SpeedUnit.KilometerPerMinute);

        /// <summary>
        ///     Get Speed from KilometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromKilometersPerSecond(double kilometerspersecond) => new Speed(kilometerspersecond, SpeedUnit.KilometerPerSecond);

        /// <summary>
        ///     Get Speed from Knots.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromKnots(double knots) => new Speed(knots, SpeedUnit.Knot);

        /// <summary>
        ///     Get Speed from MetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMetersPerHour(double metersperhour) => new Speed(metersperhour, SpeedUnit.MeterPerHour);

        /// <summary>
        ///     Get Speed from MetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMetersPerMinutes(double metersperminutes) => new Speed(metersperminutes, SpeedUnit.MeterPerMinute);

        /// <summary>
        ///     Get Speed from MetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMetersPerSecond(double meterspersecond) => new Speed(meterspersecond, SpeedUnit.MeterPerSecond);

        /// <summary>
        ///     Get Speed from MicrometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMicrometersPerMinutes(double micrometersperminutes) => new Speed(micrometersperminutes, SpeedUnit.MicrometerPerMinute);

        /// <summary>
        ///     Get Speed from MicrometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMicrometersPerSecond(double micrometerspersecond) => new Speed(micrometerspersecond, SpeedUnit.MicrometerPerSecond);

        /// <summary>
        ///     Get Speed from MilesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMilesPerHour(double milesperhour) => new Speed(milesperhour, SpeedUnit.MilePerHour);

        /// <summary>
        ///     Get Speed from MillimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMillimetersPerHour(double millimetersperhour) => new Speed(millimetersperhour, SpeedUnit.MillimeterPerHour);

        /// <summary>
        ///     Get Speed from MillimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMillimetersPerMinutes(double millimetersperminutes) => new Speed(millimetersperminutes, SpeedUnit.MillimeterPerMinute);

        /// <summary>
        ///     Get Speed from MillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromMillimetersPerSecond(double millimeterspersecond) => new Speed(millimeterspersecond, SpeedUnit.MillimeterPerSecond);

        /// <summary>
        ///     Get Speed from NanometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromNanometersPerMinutes(double nanometersperminutes) => new Speed(nanometersperminutes, SpeedUnit.NanometerPerMinute);

        /// <summary>
        ///     Get Speed from NanometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromNanometersPerSecond(double nanometerspersecond) => new Speed(nanometerspersecond, SpeedUnit.NanometerPerSecond);

        /// <summary>
        ///     Get Speed from UsSurveyFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromUsSurveyFeetPerHour(double ussurveyfeetperhour) => new Speed(ussurveyfeetperhour, SpeedUnit.UsSurveyFootPerHour);

        /// <summary>
        ///     Get Speed from UsSurveyFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromUsSurveyFeetPerMinute(double ussurveyfeetperminute) => new Speed(ussurveyfeetperminute, SpeedUnit.UsSurveyFootPerMinute);

        /// <summary>
        ///     Get Speed from UsSurveyFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromUsSurveyFeetPerSecond(double ussurveyfeetpersecond) => new Speed(ussurveyfeetpersecond, SpeedUnit.UsSurveyFootPerSecond);

        /// <summary>
        ///     Get Speed from YardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromYardsPerHour(double yardsperhour) => new Speed(yardsperhour, SpeedUnit.YardPerHour);

        /// <summary>
        ///     Get Speed from YardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromYardsPerMinute(double yardsperminute) => new Speed(yardsperminute, SpeedUnit.YardPerMinute);

        /// <summary>
        ///     Get Speed from YardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed FromYardsPerSecond(double yardspersecond) => new Speed(yardspersecond, SpeedUnit.YardPerSecond);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Speed unit value.</returns>
        public static Speed From(double value, SpeedUnit fromUnit)
        {
            return new Speed(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpeedUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Speed ToUnit(SpeedUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Speed(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                SpeedUnit.CentimeterPerHour => (_value/3600) * 1e-2d,
                SpeedUnit.CentimeterPerMinute => (_value/60) * 1e-2d,
                SpeedUnit.CentimeterPerSecond => (_value) * 1e-2d,
                SpeedUnit.DecimeterPerMinute => (_value/60) * 1e-1d,
                SpeedUnit.DecimeterPerSecond => (_value) * 1e-1d,
                SpeedUnit.FootPerHour => _value*0.3048/3600,
                SpeedUnit.FootPerMinute => _value*0.3048/60,
                SpeedUnit.FootPerSecond => _value*0.3048,
                SpeedUnit.InchPerHour => (_value/3600)*2.54e-2,
                SpeedUnit.InchPerMinute => (_value/60)*2.54e-2,
                SpeedUnit.InchPerSecond => _value*2.54e-2,
                SpeedUnit.KilometerPerHour => (_value/3600) * 1e3d,
                SpeedUnit.KilometerPerMinute => (_value/60) * 1e3d,
                SpeedUnit.KilometerPerSecond => (_value) * 1e3d,
                SpeedUnit.Knot => _value*0.514444,
                SpeedUnit.MeterPerHour => _value/3600,
                SpeedUnit.MeterPerMinute => _value/60,
                SpeedUnit.MeterPerSecond => _value,
                SpeedUnit.MicrometerPerMinute => (_value/60) * 1e-6d,
                SpeedUnit.MicrometerPerSecond => (_value) * 1e-6d,
                SpeedUnit.MilePerHour => _value*0.44704,
                SpeedUnit.MillimeterPerHour => (_value/3600) * 1e-3d,
                SpeedUnit.MillimeterPerMinute => (_value/60) * 1e-3d,
                SpeedUnit.MillimeterPerSecond => (_value) * 1e-3d,
                SpeedUnit.NanometerPerMinute => (_value/60) * 1e-9d,
                SpeedUnit.NanometerPerSecond => (_value) * 1e-9d,
                SpeedUnit.UsSurveyFootPerHour => (_value*1200/3937)/3600,
                SpeedUnit.UsSurveyFootPerMinute => (_value*1200/3937)/60,
                SpeedUnit.UsSurveyFootPerSecond => _value*1200/3937,
                SpeedUnit.YardPerHour => _value*0.9144/3600,
                SpeedUnit.YardPerMinute => _value*0.9144/60,
                SpeedUnit.YardPerSecond => _value*0.9144,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(SpeedUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                SpeedUnit.CentimeterPerHour => (baseUnitValue*3600) / 1e-2d,
                SpeedUnit.CentimeterPerMinute => (baseUnitValue*60) / 1e-2d,
                SpeedUnit.CentimeterPerSecond => (baseUnitValue) / 1e-2d,
                SpeedUnit.DecimeterPerMinute => (baseUnitValue*60) / 1e-1d,
                SpeedUnit.DecimeterPerSecond => (baseUnitValue) / 1e-1d,
                SpeedUnit.FootPerHour => baseUnitValue/0.3048*3600,
                SpeedUnit.FootPerMinute => baseUnitValue/0.3048*60,
                SpeedUnit.FootPerSecond => baseUnitValue/0.3048,
                SpeedUnit.InchPerHour => (baseUnitValue/2.54e-2)*3600,
                SpeedUnit.InchPerMinute => (baseUnitValue/2.54e-2)*60,
                SpeedUnit.InchPerSecond => baseUnitValue/2.54e-2,
                SpeedUnit.KilometerPerHour => (baseUnitValue*3600) / 1e3d,
                SpeedUnit.KilometerPerMinute => (baseUnitValue*60) / 1e3d,
                SpeedUnit.KilometerPerSecond => (baseUnitValue) / 1e3d,
                SpeedUnit.Knot => baseUnitValue/0.514444,
                SpeedUnit.MeterPerHour => baseUnitValue*3600,
                SpeedUnit.MeterPerMinute => baseUnitValue*60,
                SpeedUnit.MeterPerSecond => baseUnitValue,
                SpeedUnit.MicrometerPerMinute => (baseUnitValue*60) / 1e-6d,
                SpeedUnit.MicrometerPerSecond => (baseUnitValue) / 1e-6d,
                SpeedUnit.MilePerHour => baseUnitValue/0.44704,
                SpeedUnit.MillimeterPerHour => (baseUnitValue*3600) / 1e-3d,
                SpeedUnit.MillimeterPerMinute => (baseUnitValue*60) / 1e-3d,
                SpeedUnit.MillimeterPerSecond => (baseUnitValue) / 1e-3d,
                SpeedUnit.NanometerPerMinute => (baseUnitValue*60) / 1e-9d,
                SpeedUnit.NanometerPerSecond => (baseUnitValue) / 1e-9d,
                SpeedUnit.UsSurveyFootPerHour => (baseUnitValue*3937/1200)*3600,
                SpeedUnit.UsSurveyFootPerMinute => (baseUnitValue*3937/1200)*60,
                SpeedUnit.UsSurveyFootPerSecond => baseUnitValue*3937/1200,
                SpeedUnit.YardPerHour => baseUnitValue/0.9144*3600,
                SpeedUnit.YardPerMinute => baseUnitValue/0.9144*60,
                SpeedUnit.YardPerSecond => baseUnitValue/0.9144,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion

    }
}

