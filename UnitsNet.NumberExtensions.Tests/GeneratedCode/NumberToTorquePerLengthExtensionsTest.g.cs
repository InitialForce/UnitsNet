//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToTorquePerLength;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToTorquePerLengthExtensionsTests
    {
        [Fact]
        public void NumberToKilogramForceCentimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilogramForceCentimetersPerMeter(2), 2.KilogramForceCentimetersPerMeter());

        [Fact]
        public void NumberToKilogramForceMetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilogramForceMetersPerMeter(2), 2.KilogramForceMetersPerMeter());

        [Fact]
        public void NumberToKilogramForceMillimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilogramForceMillimetersPerMeter(2), 2.KilogramForceMillimetersPerMeter());

        [Fact]
        public void NumberToKilonewtonCentimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilonewtonCentimetersPerMeter(2), 2.KilonewtonCentimetersPerMeter());

        [Fact]
        public void NumberToKilonewtonMetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilonewtonMetersPerMeter(2), 2.KilonewtonMetersPerMeter());

        [Fact]
        public void NumberToKilonewtonMillimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilonewtonMillimetersPerMeter(2), 2.KilonewtonMillimetersPerMeter());

        [Fact]
        public void NumberToKilopoundForceFeetPerFootTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilopoundForceFeetPerFoot(2), 2.KilopoundForceFeetPerFoot());

        [Fact]
        public void NumberToKilopoundForceInchesPerFootTest() =>
            Assert.Equal(TorquePerLength<double>.FromKilopoundForceInchesPerFoot(2), 2.KilopoundForceInchesPerFoot());

        [Fact]
        public void NumberToMeganewtonCentimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromMeganewtonCentimetersPerMeter(2), 2.MeganewtonCentimetersPerMeter());

        [Fact]
        public void NumberToMeganewtonMetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromMeganewtonMetersPerMeter(2), 2.MeganewtonMetersPerMeter());

        [Fact]
        public void NumberToMeganewtonMillimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromMeganewtonMillimetersPerMeter(2), 2.MeganewtonMillimetersPerMeter());

        [Fact]
        public void NumberToMegapoundForceFeetPerFootTest() =>
            Assert.Equal(TorquePerLength<double>.FromMegapoundForceFeetPerFoot(2), 2.MegapoundForceFeetPerFoot());

        [Fact]
        public void NumberToMegapoundForceInchesPerFootTest() =>
            Assert.Equal(TorquePerLength<double>.FromMegapoundForceInchesPerFoot(2), 2.MegapoundForceInchesPerFoot());

        [Fact]
        public void NumberToNewtonCentimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromNewtonCentimetersPerMeter(2), 2.NewtonCentimetersPerMeter());

        [Fact]
        public void NumberToNewtonMetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromNewtonMetersPerMeter(2), 2.NewtonMetersPerMeter());

        [Fact]
        public void NumberToNewtonMillimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromNewtonMillimetersPerMeter(2), 2.NewtonMillimetersPerMeter());

        [Fact]
        public void NumberToPoundForceFeetPerFootTest() =>
            Assert.Equal(TorquePerLength<double>.FromPoundForceFeetPerFoot(2), 2.PoundForceFeetPerFoot());

        [Fact]
        public void NumberToPoundForceInchesPerFootTest() =>
            Assert.Equal(TorquePerLength<double>.FromPoundForceInchesPerFoot(2), 2.PoundForceInchesPerFoot());

        [Fact]
        public void NumberToTonneForceCentimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromTonneForceCentimetersPerMeter(2), 2.TonneForceCentimetersPerMeter());

        [Fact]
        public void NumberToTonneForceMetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromTonneForceMetersPerMeter(2), 2.TonneForceMetersPerMeter());

        [Fact]
        public void NumberToTonneForceMillimetersPerMeterTest() =>
            Assert.Equal(TorquePerLength<double>.FromTonneForceMillimetersPerMeter(2), 2.TonneForceMillimetersPerMeter());

    }
}
