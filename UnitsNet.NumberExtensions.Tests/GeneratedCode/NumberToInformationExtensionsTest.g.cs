//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToInformation;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToInformationExtensionsTests
    {
        [Fact]
        public void NumberToBitsTest() =>
            Assert.Equal(Information<double>.FromBits(2), 2.Bits());

        [Fact]
        public void NumberToBytesTest() =>
            Assert.Equal(Information<double>.FromBytes(2), 2.Bytes());

        [Fact]
        public void NumberToExabitsTest() =>
            Assert.Equal(Information<double>.FromExabits(2), 2.Exabits());

        [Fact]
        public void NumberToExabytesTest() =>
            Assert.Equal(Information<double>.FromExabytes(2), 2.Exabytes());

        [Fact]
        public void NumberToExbibitsTest() =>
            Assert.Equal(Information<double>.FromExbibits(2), 2.Exbibits());

        [Fact]
        public void NumberToExbibytesTest() =>
            Assert.Equal(Information<double>.FromExbibytes(2), 2.Exbibytes());

        [Fact]
        public void NumberToGibibitsTest() =>
            Assert.Equal(Information<double>.FromGibibits(2), 2.Gibibits());

        [Fact]
        public void NumberToGibibytesTest() =>
            Assert.Equal(Information<double>.FromGibibytes(2), 2.Gibibytes());

        [Fact]
        public void NumberToGigabitsTest() =>
            Assert.Equal(Information<double>.FromGigabits(2), 2.Gigabits());

        [Fact]
        public void NumberToGigabytesTest() =>
            Assert.Equal(Information<double>.FromGigabytes(2), 2.Gigabytes());

        [Fact]
        public void NumberToKibibitsTest() =>
            Assert.Equal(Information<double>.FromKibibits(2), 2.Kibibits());

        [Fact]
        public void NumberToKibibytesTest() =>
            Assert.Equal(Information<double>.FromKibibytes(2), 2.Kibibytes());

        [Fact]
        public void NumberToKilobitsTest() =>
            Assert.Equal(Information<double>.FromKilobits(2), 2.Kilobits());

        [Fact]
        public void NumberToKilobytesTest() =>
            Assert.Equal(Information<double>.FromKilobytes(2), 2.Kilobytes());

        [Fact]
        public void NumberToMebibitsTest() =>
            Assert.Equal(Information<double>.FromMebibits(2), 2.Mebibits());

        [Fact]
        public void NumberToMebibytesTest() =>
            Assert.Equal(Information<double>.FromMebibytes(2), 2.Mebibytes());

        [Fact]
        public void NumberToMegabitsTest() =>
            Assert.Equal(Information<double>.FromMegabits(2), 2.Megabits());

        [Fact]
        public void NumberToMegabytesTest() =>
            Assert.Equal(Information<double>.FromMegabytes(2), 2.Megabytes());

        [Fact]
        public void NumberToPebibitsTest() =>
            Assert.Equal(Information<double>.FromPebibits(2), 2.Pebibits());

        [Fact]
        public void NumberToPebibytesTest() =>
            Assert.Equal(Information<double>.FromPebibytes(2), 2.Pebibytes());

        [Fact]
        public void NumberToPetabitsTest() =>
            Assert.Equal(Information<double>.FromPetabits(2), 2.Petabits());

        [Fact]
        public void NumberToPetabytesTest() =>
            Assert.Equal(Information<double>.FromPetabytes(2), 2.Petabytes());

        [Fact]
        public void NumberToTebibitsTest() =>
            Assert.Equal(Information<double>.FromTebibits(2), 2.Tebibits());

        [Fact]
        public void NumberToTebibytesTest() =>
            Assert.Equal(Information<double>.FromTebibytes(2), 2.Tebibytes());

        [Fact]
        public void NumberToTerabitsTest() =>
            Assert.Equal(Information<double>.FromTerabits(2), 2.Terabits());

        [Fact]
        public void NumberToTerabytesTest() =>
            Assert.Equal(Information<double>.FromTerabytes(2), 2.Terabytes());

    }
}
