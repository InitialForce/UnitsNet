//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToElectricPotentialRate;
using Xunit;

namespace UnitsNet.Tests
{    
    public class NumberToElectricPotentialRateExtensionsTests
    {
        [Fact]
        public void NumberToKilovoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialRate.FromKilovoltsPerHours(2), 2.KilovoltsPerHours());

        [Fact]
        public void NumberToKilovoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialRate.FromKilovoltsPerMinutes(2), 2.KilovoltsPerMinutes());

        [Fact]
        public void NumberToKilovoltsPerSecondTest() =>
            Assert.Equal(ElectricPotentialRate.FromKilovoltsPerSecond(2), 2.KilovoltsPerSecond());

        [Fact]
        public void NumberToMegavoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialRate.FromMegavoltsPerHours(2), 2.MegavoltsPerHours());

        [Fact]
        public void NumberToMegavoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialRate.FromMegavoltsPerMinutes(2), 2.MegavoltsPerMinutes());

        [Fact]
        public void NumberToMegavoltsPerSecondTest() =>
            Assert.Equal(ElectricPotentialRate.FromMegavoltsPerSecond(2), 2.MegavoltsPerSecond());

        [Fact]
        public void NumberToMicrovoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialRate.FromMicrovoltsPerHours(2), 2.MicrovoltsPerHours());

        [Fact]
        public void NumberToMicrovoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialRate.FromMicrovoltsPerMinutes(2), 2.MicrovoltsPerMinutes());

        [Fact]
        public void NumberToMicrovoltsPerSecondTest() =>
            Assert.Equal(ElectricPotentialRate.FromMicrovoltsPerSecond(2), 2.MicrovoltsPerSecond());

        [Fact]
        public void NumberToMillivoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialRate.FromMillivoltsPerHours(2), 2.MillivoltsPerHours());

        [Fact]
        public void NumberToMillivoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialRate.FromMillivoltsPerMinutes(2), 2.MillivoltsPerMinutes());

        [Fact]
        public void NumberToMillivoltsPerSecondTest() =>
            Assert.Equal(ElectricPotentialRate.FromMillivoltsPerSecond(2), 2.MillivoltsPerSecond());

        [Fact]
        public void NumberToVoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialRate.FromVoltsPerHours(2), 2.VoltsPerHours());

        [Fact]
        public void NumberToVoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialRate.FromVoltsPerMinutes(2), 2.VoltsPerMinutes());

        [Fact]
        public void NumberToVoltsPerSecondTest() =>
            Assert.Equal(ElectricPotentialRate.FromVoltsPerSecond(2), 2.VoltsPerSecond());

    }
}
