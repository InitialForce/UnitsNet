//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToMassFlow;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToMassFlowExtensionsTests
    {
        [Fact]
        public void NumberToCentigramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromCentigramsPerDay(2), 2.CentigramsPerDay());

        [Fact]
        public void NumberToCentigramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromCentigramsPerSecond(2), 2.CentigramsPerSecond());

        [Fact]
        public void NumberToDecagramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromDecagramsPerDay(2), 2.DecagramsPerDay());

        [Fact]
        public void NumberToDecagramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromDecagramsPerSecond(2), 2.DecagramsPerSecond());

        [Fact]
        public void NumberToDecigramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromDecigramsPerDay(2), 2.DecigramsPerDay());

        [Fact]
        public void NumberToDecigramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromDecigramsPerSecond(2), 2.DecigramsPerSecond());

        [Fact]
        public void NumberToGramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromGramsPerDay(2), 2.GramsPerDay());

        [Fact]
        public void NumberToGramsPerHourTest() =>
            Assert.Equal(MassFlow<double>.FromGramsPerHour(2), 2.GramsPerHour());

        [Fact]
        public void NumberToGramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromGramsPerSecond(2), 2.GramsPerSecond());

        [Fact]
        public void NumberToHectogramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromHectogramsPerDay(2), 2.HectogramsPerDay());

        [Fact]
        public void NumberToHectogramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromHectogramsPerSecond(2), 2.HectogramsPerSecond());

        [Fact]
        public void NumberToKilogramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromKilogramsPerDay(2), 2.KilogramsPerDay());

        [Fact]
        public void NumberToKilogramsPerHourTest() =>
            Assert.Equal(MassFlow<double>.FromKilogramsPerHour(2), 2.KilogramsPerHour());

        [Fact]
        public void NumberToKilogramsPerMinuteTest() =>
            Assert.Equal(MassFlow<double>.FromKilogramsPerMinute(2), 2.KilogramsPerMinute());

        [Fact]
        public void NumberToKilogramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromKilogramsPerSecond(2), 2.KilogramsPerSecond());

        [Fact]
        public void NumberToMegagramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromMegagramsPerDay(2), 2.MegagramsPerDay());

        [Fact]
        public void NumberToMegapoundsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromMegapoundsPerDay(2), 2.MegapoundsPerDay());

        [Fact]
        public void NumberToMegapoundsPerHourTest() =>
            Assert.Equal(MassFlow<double>.FromMegapoundsPerHour(2), 2.MegapoundsPerHour());

        [Fact]
        public void NumberToMegapoundsPerMinuteTest() =>
            Assert.Equal(MassFlow<double>.FromMegapoundsPerMinute(2), 2.MegapoundsPerMinute());

        [Fact]
        public void NumberToMegapoundsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromMegapoundsPerSecond(2), 2.MegapoundsPerSecond());

        [Fact]
        public void NumberToMicrogramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromMicrogramsPerDay(2), 2.MicrogramsPerDay());

        [Fact]
        public void NumberToMicrogramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromMicrogramsPerSecond(2), 2.MicrogramsPerSecond());

        [Fact]
        public void NumberToMilligramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromMilligramsPerDay(2), 2.MilligramsPerDay());

        [Fact]
        public void NumberToMilligramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromMilligramsPerSecond(2), 2.MilligramsPerSecond());

        [Fact]
        public void NumberToNanogramsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromNanogramsPerDay(2), 2.NanogramsPerDay());

        [Fact]
        public void NumberToNanogramsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromNanogramsPerSecond(2), 2.NanogramsPerSecond());

        [Fact]
        public void NumberToPoundsPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromPoundsPerDay(2), 2.PoundsPerDay());

        [Fact]
        public void NumberToPoundsPerHourTest() =>
            Assert.Equal(MassFlow<double>.FromPoundsPerHour(2), 2.PoundsPerHour());

        [Fact]
        public void NumberToPoundsPerMinuteTest() =>
            Assert.Equal(MassFlow<double>.FromPoundsPerMinute(2), 2.PoundsPerMinute());

        [Fact]
        public void NumberToPoundsPerSecondTest() =>
            Assert.Equal(MassFlow<double>.FromPoundsPerSecond(2), 2.PoundsPerSecond());

        [Fact]
        public void NumberToShortTonsPerHourTest() =>
            Assert.Equal(MassFlow<double>.FromShortTonsPerHour(2), 2.ShortTonsPerHour());

        [Fact]
        public void NumberToTonnesPerDayTest() =>
            Assert.Equal(MassFlow<double>.FromTonnesPerDay(2), 2.TonnesPerDay());

        [Fact]
        public void NumberToTonnesPerHourTest() =>
            Assert.Equal(MassFlow<double>.FromTonnesPerHour(2), 2.TonnesPerHour());

    }
}
