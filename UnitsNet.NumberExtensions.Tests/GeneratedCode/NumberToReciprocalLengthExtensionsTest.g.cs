//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToReciprocalLength;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToReciprocalLengthExtensionsTests
    {
        [Fact]
        public void NumberToInverseCentimeterTest() =>
            Assert.Equal(ReciprocalLength.FromInverseCentimeter(2), 2.InverseCentimeter());

        [Fact]
        public void NumberToInverseFootTest() =>
            Assert.Equal(ReciprocalLength.FromInverseFoot(2), 2.InverseFoot());

        [Fact]
        public void NumberToInverseInchTest() =>
            Assert.Equal(ReciprocalLength.FromInverseInch(2), 2.InverseInch());

        [Fact]
        public void NumberToInverseMeterTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMeter(2), 2.InverseMeter());

        [Fact]
        public void NumberToInverseMicroinchTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMicroinch(2), 2.InverseMicroinch());

        [Fact]
        public void NumberToInverseMilTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMil(2), 2.InverseMil());

        [Fact]
        public void NumberToInverseMileTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMile(2), 2.InverseMile());

        [Fact]
        public void NumberToInverseMillimeterTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMillimeter(2), 2.InverseMillimeter());

        [Fact]
        public void NumberToInverseUsSurveyFeetTest() =>
            Assert.Equal(ReciprocalLength.FromInverseUsSurveyFeet(2), 2.InverseUsSurveyFeet());

        [Fact]
        public void NumberToInverseYardTest() =>
            Assert.Equal(ReciprocalLength.FromInverseYard(2), 2.InverseYard());

    }
}
