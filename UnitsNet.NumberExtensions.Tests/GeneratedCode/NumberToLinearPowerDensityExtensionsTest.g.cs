//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToLinearPowerDensity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToLinearPowerDensityExtensionsTests
    {
        [Fact]
        public void NumberToGigawattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromGigawattsPerCentimeter(2), 2.GigawattsPerCentimeter());

        [Fact]
        public void NumberToGigawattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromGigawattsPerFoot(2), 2.GigawattsPerFoot());

        [Fact]
        public void NumberToGigawattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromGigawattsPerInch(2), 2.GigawattsPerInch());

        [Fact]
        public void NumberToGigawattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromGigawattsPerMeter(2), 2.GigawattsPerMeter());

        [Fact]
        public void NumberToGigawattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromGigawattsPerMillimeter(2), 2.GigawattsPerMillimeter());

        [Fact]
        public void NumberToKilowattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromKilowattsPerCentimeter(2), 2.KilowattsPerCentimeter());

        [Fact]
        public void NumberToKilowattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromKilowattsPerFoot(2), 2.KilowattsPerFoot());

        [Fact]
        public void NumberToKilowattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromKilowattsPerInch(2), 2.KilowattsPerInch());

        [Fact]
        public void NumberToKilowattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromKilowattsPerMeter(2), 2.KilowattsPerMeter());

        [Fact]
        public void NumberToKilowattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromKilowattsPerMillimeter(2), 2.KilowattsPerMillimeter());

        [Fact]
        public void NumberToMegawattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMegawattsPerCentimeter(2), 2.MegawattsPerCentimeter());

        [Fact]
        public void NumberToMegawattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMegawattsPerFoot(2), 2.MegawattsPerFoot());

        [Fact]
        public void NumberToMegawattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMegawattsPerInch(2), 2.MegawattsPerInch());

        [Fact]
        public void NumberToMegawattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMegawattsPerMeter(2), 2.MegawattsPerMeter());

        [Fact]
        public void NumberToMegawattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMegawattsPerMillimeter(2), 2.MegawattsPerMillimeter());

        [Fact]
        public void NumberToMilliwattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMilliwattsPerCentimeter(2), 2.MilliwattsPerCentimeter());

        [Fact]
        public void NumberToMilliwattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMilliwattsPerFoot(2), 2.MilliwattsPerFoot());

        [Fact]
        public void NumberToMilliwattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMilliwattsPerInch(2), 2.MilliwattsPerInch());

        [Fact]
        public void NumberToMilliwattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMilliwattsPerMeter(2), 2.MilliwattsPerMeter());

        [Fact]
        public void NumberToMilliwattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromMilliwattsPerMillimeter(2), 2.MilliwattsPerMillimeter());

        [Fact]
        public void NumberToWattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromWattsPerCentimeter(2), 2.WattsPerCentimeter());

        [Fact]
        public void NumberToWattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromWattsPerFoot(2), 2.WattsPerFoot());

        [Fact]
        public void NumberToWattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromWattsPerInch(2), 2.WattsPerInch());

        [Fact]
        public void NumberToWattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromWattsPerMeter(2), 2.WattsPerMeter());

        [Fact]
        public void NumberToWattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity<double>.FromWattsPerMillimeter(2), 2.WattsPerMillimeter());

    }
}
