//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToIrradiance;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToIrradianceExtensionsTests
    {
        [Fact]
        public void NumberToKilowattsPerSquareCentimeterTest() =>
            Assert.Equal(Irradiance<double>.FromKilowattsPerSquareCentimeter(2), 2.KilowattsPerSquareCentimeter());

        [Fact]
        public void NumberToKilowattsPerSquareMeterTest() =>
            Assert.Equal(Irradiance<double>.FromKilowattsPerSquareMeter(2), 2.KilowattsPerSquareMeter());

        [Fact]
        public void NumberToMegawattsPerSquareCentimeterTest() =>
            Assert.Equal(Irradiance<double>.FromMegawattsPerSquareCentimeter(2), 2.MegawattsPerSquareCentimeter());

        [Fact]
        public void NumberToMegawattsPerSquareMeterTest() =>
            Assert.Equal(Irradiance<double>.FromMegawattsPerSquareMeter(2), 2.MegawattsPerSquareMeter());

        [Fact]
        public void NumberToMicrowattsPerSquareCentimeterTest() =>
            Assert.Equal(Irradiance<double>.FromMicrowattsPerSquareCentimeter(2), 2.MicrowattsPerSquareCentimeter());

        [Fact]
        public void NumberToMicrowattsPerSquareMeterTest() =>
            Assert.Equal(Irradiance<double>.FromMicrowattsPerSquareMeter(2), 2.MicrowattsPerSquareMeter());

        [Fact]
        public void NumberToMilliwattsPerSquareCentimeterTest() =>
            Assert.Equal(Irradiance<double>.FromMilliwattsPerSquareCentimeter(2), 2.MilliwattsPerSquareCentimeter());

        [Fact]
        public void NumberToMilliwattsPerSquareMeterTest() =>
            Assert.Equal(Irradiance<double>.FromMilliwattsPerSquareMeter(2), 2.MilliwattsPerSquareMeter());

        [Fact]
        public void NumberToNanowattsPerSquareCentimeterTest() =>
            Assert.Equal(Irradiance<double>.FromNanowattsPerSquareCentimeter(2), 2.NanowattsPerSquareCentimeter());

        [Fact]
        public void NumberToNanowattsPerSquareMeterTest() =>
            Assert.Equal(Irradiance<double>.FromNanowattsPerSquareMeter(2), 2.NanowattsPerSquareMeter());

        [Fact]
        public void NumberToPicowattsPerSquareCentimeterTest() =>
            Assert.Equal(Irradiance<double>.FromPicowattsPerSquareCentimeter(2), 2.PicowattsPerSquareCentimeter());

        [Fact]
        public void NumberToPicowattsPerSquareMeterTest() =>
            Assert.Equal(Irradiance<double>.FromPicowattsPerSquareMeter(2), 2.PicowattsPerSquareMeter());

        [Fact]
        public void NumberToWattsPerSquareCentimeterTest() =>
            Assert.Equal(Irradiance<double>.FromWattsPerSquareCentimeter(2), 2.WattsPerSquareCentimeter());

        [Fact]
        public void NumberToWattsPerSquareMeterTest() =>
            Assert.Equal(Irradiance<double>.FromWattsPerSquareMeter(2), 2.WattsPerSquareMeter());

    }
}
