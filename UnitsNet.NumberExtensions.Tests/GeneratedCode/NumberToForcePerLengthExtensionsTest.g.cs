//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToForcePerLength;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToForcePerLengthExtensionsTests
    {
        [Fact]
        public void NumberToCentinewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromCentinewtonsPerCentimeter(2), 2.CentinewtonsPerCentimeter());

        [Fact]
        public void NumberToCentinewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromCentinewtonsPerMeter(2), 2.CentinewtonsPerMeter());

        [Fact]
        public void NumberToCentinewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromCentinewtonsPerMillimeter(2), 2.CentinewtonsPerMillimeter());

        [Fact]
        public void NumberToDecanewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromDecanewtonsPerCentimeter(2), 2.DecanewtonsPerCentimeter());

        [Fact]
        public void NumberToDecanewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromDecanewtonsPerMeter(2), 2.DecanewtonsPerMeter());

        [Fact]
        public void NumberToDecanewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromDecanewtonsPerMillimeter(2), 2.DecanewtonsPerMillimeter());

        [Fact]
        public void NumberToDecinewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromDecinewtonsPerCentimeter(2), 2.DecinewtonsPerCentimeter());

        [Fact]
        public void NumberToDecinewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromDecinewtonsPerMeter(2), 2.DecinewtonsPerMeter());

        [Fact]
        public void NumberToDecinewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromDecinewtonsPerMillimeter(2), 2.DecinewtonsPerMillimeter());

        [Fact]
        public void NumberToKilogramsForcePerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilogramsForcePerCentimeter(2), 2.KilogramsForcePerCentimeter());

        [Fact]
        public void NumberToKilogramsForcePerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilogramsForcePerMeter(2), 2.KilogramsForcePerMeter());

        [Fact]
        public void NumberToKilogramsForcePerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilogramsForcePerMillimeter(2), 2.KilogramsForcePerMillimeter());

        [Fact]
        public void NumberToKilonewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilonewtonsPerCentimeter(2), 2.KilonewtonsPerCentimeter());

        [Fact]
        public void NumberToKilonewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilonewtonsPerMeter(2), 2.KilonewtonsPerMeter());

        [Fact]
        public void NumberToKilonewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilonewtonsPerMillimeter(2), 2.KilonewtonsPerMillimeter());

        [Fact]
        public void NumberToKilopoundsForcePerFootTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilopoundsForcePerFoot(2), 2.KilopoundsForcePerFoot());

        [Fact]
        public void NumberToKilopoundsForcePerInchTest() =>
            Assert.Equal(ForcePerLength<double>.FromKilopoundsForcePerInch(2), 2.KilopoundsForcePerInch());

        [Fact]
        public void NumberToMeganewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMeganewtonsPerCentimeter(2), 2.MeganewtonsPerCentimeter());

        [Fact]
        public void NumberToMeganewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMeganewtonsPerMeter(2), 2.MeganewtonsPerMeter());

        [Fact]
        public void NumberToMeganewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMeganewtonsPerMillimeter(2), 2.MeganewtonsPerMillimeter());

        [Fact]
        public void NumberToMicronewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMicronewtonsPerCentimeter(2), 2.MicronewtonsPerCentimeter());

        [Fact]
        public void NumberToMicronewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMicronewtonsPerMeter(2), 2.MicronewtonsPerMeter());

        [Fact]
        public void NumberToMicronewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMicronewtonsPerMillimeter(2), 2.MicronewtonsPerMillimeter());

        [Fact]
        public void NumberToMillinewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMillinewtonsPerCentimeter(2), 2.MillinewtonsPerCentimeter());

        [Fact]
        public void NumberToMillinewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMillinewtonsPerMeter(2), 2.MillinewtonsPerMeter());

        [Fact]
        public void NumberToMillinewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromMillinewtonsPerMillimeter(2), 2.MillinewtonsPerMillimeter());

        [Fact]
        public void NumberToNanonewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromNanonewtonsPerCentimeter(2), 2.NanonewtonsPerCentimeter());

        [Fact]
        public void NumberToNanonewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromNanonewtonsPerMeter(2), 2.NanonewtonsPerMeter());

        [Fact]
        public void NumberToNanonewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromNanonewtonsPerMillimeter(2), 2.NanonewtonsPerMillimeter());

        [Fact]
        public void NumberToNewtonsPerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromNewtonsPerCentimeter(2), 2.NewtonsPerCentimeter());

        [Fact]
        public void NumberToNewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromNewtonsPerMeter(2), 2.NewtonsPerMeter());

        [Fact]
        public void NumberToNewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromNewtonsPerMillimeter(2), 2.NewtonsPerMillimeter());

        [Fact]
        public void NumberToPoundsForcePerFootTest() =>
            Assert.Equal(ForcePerLength<double>.FromPoundsForcePerFoot(2), 2.PoundsForcePerFoot());

        [Fact]
        public void NumberToPoundsForcePerInchTest() =>
            Assert.Equal(ForcePerLength<double>.FromPoundsForcePerInch(2), 2.PoundsForcePerInch());

        [Fact]
        public void NumberToPoundsForcePerYardTest() =>
            Assert.Equal(ForcePerLength<double>.FromPoundsForcePerYard(2), 2.PoundsForcePerYard());

        [Fact]
        public void NumberToTonnesForcePerCentimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromTonnesForcePerCentimeter(2), 2.TonnesForcePerCentimeter());

        [Fact]
        public void NumberToTonnesForcePerMeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromTonnesForcePerMeter(2), 2.TonnesForcePerMeter());

        [Fact]
        public void NumberToTonnesForcePerMillimeterTest() =>
            Assert.Equal(ForcePerLength<double>.FromTonnesForcePerMillimeter(2), 2.TonnesForcePerMillimeter());

    }
}
