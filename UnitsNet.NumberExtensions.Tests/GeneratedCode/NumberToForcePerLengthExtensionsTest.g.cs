//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToForcePerLength;
using Xunit;

namespace UnitsNet.Tests
{    
    public class NumberToForcePerLengthExtensionsTests
    {
        [Fact]
        public void NumberToCentinewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromCentinewtonsPerMeter(2), 2.CentinewtonsPerMeter());

        [Fact]
        public void NumberToDecinewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromDecinewtonsPerMeter(2), 2.DecinewtonsPerMeter());

        [Fact]
        public void NumberToKilogramsForcePerMeterTest() =>
            Assert.Equal(ForcePerLength.FromKilogramsForcePerMeter(2), 2.KilogramsForcePerMeter());

        [Fact]
        public void NumberToKilonewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromKilonewtonsPerMeter(2), 2.KilonewtonsPerMeter());

        [Fact]
        public void NumberToKilopoundsForcePerFootTest() =>
            Assert.Equal(ForcePerLength.FromKilopoundsForcePerFoot(2), 2.KilopoundsForcePerFoot());

        [Fact]
        public void NumberToMeganewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromMeganewtonsPerMeter(2), 2.MeganewtonsPerMeter());

        [Fact]
        public void NumberToMicronewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromMicronewtonsPerMeter(2), 2.MicronewtonsPerMeter());

        [Fact]
        public void NumberToMillinewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromMillinewtonsPerMeter(2), 2.MillinewtonsPerMeter());

        [Fact]
        public void NumberToNanonewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromNanonewtonsPerMeter(2), 2.NanonewtonsPerMeter());

        [Fact]
        public void NumberToNewtonsPerMeterTest() =>
            Assert.Equal(ForcePerLength.FromNewtonsPerMeter(2), 2.NewtonsPerMeter());

        [Fact]
        public void NumberToNewtonsPerMillimeterTest() =>
            Assert.Equal(ForcePerLength.FromNewtonsPerMillimeter(2), 2.NewtonsPerMillimeter());

        [Fact]
        public void NumberToPoundsForcePerFootTest() =>
            Assert.Equal(ForcePerLength.FromPoundsForcePerFoot(2), 2.PoundsForcePerFoot());

        [Fact]
        public void NumberToPoundsForcePerInchTest() =>
            Assert.Equal(ForcePerLength.FromPoundsForcePerInch(2), 2.PoundsForcePerInch());

        [Fact]
        public void NumberToPoundsForcePerYardTest() =>
            Assert.Equal(ForcePerLength.FromPoundsForcePerYard(2), 2.PoundsForcePerYard());

    }
}
