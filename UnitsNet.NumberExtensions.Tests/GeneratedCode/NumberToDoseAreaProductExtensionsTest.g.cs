//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToDoseAreaProduct;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToDoseAreaProductExtensionsTests
    {
        [Fact]
        public void NumberToCentigrayPerSquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigrayPerSquareCentimeters(2), 2.CentigrayPerSquareCentimeters());

        [Fact]
        public void NumberToCentigrayPerSquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigrayPerSquareDecimeters(2), 2.CentigrayPerSquareDecimeters());

        [Fact]
        public void NumberToCentigrayPerSquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigrayPerSquareMeters(2), 2.CentigrayPerSquareMeters());

        [Fact]
        public void NumberToCentigrayPerSquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigrayPerSquareMillimeters(2), 2.CentigrayPerSquareMillimeters());

        [Fact]
        public void NumberToDecigrayPerSquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigrayPerSquareCentimeters(2), 2.DecigrayPerSquareCentimeters());

        [Fact]
        public void NumberToDecigrayPerSquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigrayPerSquareDecimeters(2), 2.DecigrayPerSquareDecimeters());

        [Fact]
        public void NumberToDecigrayPerSquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigrayPerSquareMeters(2), 2.DecigrayPerSquareMeters());

        [Fact]
        public void NumberToDecigrayPerSquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigrayPerSquareMillimeters(2), 2.DecigrayPerSquareMillimeters());

        [Fact]
        public void NumberToGrayPerSquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGrayPerSquareCentimeters(2), 2.GrayPerSquareCentimeters());

        [Fact]
        public void NumberToGrayPerSquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGrayPerSquareDecimeters(2), 2.GrayPerSquareDecimeters());

        [Fact]
        public void NumberToGrayPerSquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGrayPerSquareMeters(2), 2.GrayPerSquareMeters());

        [Fact]
        public void NumberToGrayPerSquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGrayPerSquareMillimeters(2), 2.GrayPerSquareMillimeters());

        [Fact]
        public void NumberToMicrograyPerSquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograyPerSquareCentimeters(2), 2.MicrograyPerSquareCentimeters());

        [Fact]
        public void NumberToMicrograyPerSquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograyPerSquareDecimeters(2), 2.MicrograyPerSquareDecimeters());

        [Fact]
        public void NumberToMicrograyPerSquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograyPerSquareMeters(2), 2.MicrograyPerSquareMeters());

        [Fact]
        public void NumberToMicrograyPerSquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograyPerSquareMillimeters(2), 2.MicrograyPerSquareMillimeters());

        [Fact]
        public void NumberToMilligrayPerSquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligrayPerSquareCentimeters(2), 2.MilligrayPerSquareCentimeters());

        [Fact]
        public void NumberToMilligrayPerSquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligrayPerSquareDecimeters(2), 2.MilligrayPerSquareDecimeters());

        [Fact]
        public void NumberToMilligrayPerSquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligrayPerSquareMeters(2), 2.MilligrayPerSquareMeters());

        [Fact]
        public void NumberToMilligrayPerSquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligrayPerSquareMillimeters(2), 2.MilligrayPerSquareMillimeters());

    }
}
