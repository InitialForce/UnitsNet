//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToSpecificEnergy;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToSpecificEnergyExtensionsTests
    {
        [Fact]
        public void NumberToBtuPerPoundTest() =>
            Assert.Equal(SpecificEnergy<double>.FromBtuPerPound(2), 2.BtuPerPound());

        [Fact]
        public void NumberToCaloriesPerGramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromCaloriesPerGram(2), 2.CaloriesPerGram());

        [Fact]
        public void NumberToGigawattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromGigawattDaysPerKilogram(2), 2.GigawattDaysPerKilogram());

        [Fact]
        public void NumberToGigawattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy<double>.FromGigawattDaysPerShortTon(2), 2.GigawattDaysPerShortTon());

        [Fact]
        public void NumberToGigawattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy<double>.FromGigawattDaysPerTonne(2), 2.GigawattDaysPerTonne());

        [Fact]
        public void NumberToGigawattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromGigawattHoursPerKilogram(2), 2.GigawattHoursPerKilogram());

        [Fact]
        public void NumberToJoulesPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromJoulesPerKilogram(2), 2.JoulesPerKilogram());

        [Fact]
        public void NumberToKilocaloriesPerGramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromKilocaloriesPerGram(2), 2.KilocaloriesPerGram());

        [Fact]
        public void NumberToKilojoulesPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromKilojoulesPerKilogram(2), 2.KilojoulesPerKilogram());

        [Fact]
        public void NumberToKilowattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromKilowattDaysPerKilogram(2), 2.KilowattDaysPerKilogram());

        [Fact]
        public void NumberToKilowattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy<double>.FromKilowattDaysPerShortTon(2), 2.KilowattDaysPerShortTon());

        [Fact]
        public void NumberToKilowattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy<double>.FromKilowattDaysPerTonne(2), 2.KilowattDaysPerTonne());

        [Fact]
        public void NumberToKilowattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromKilowattHoursPerKilogram(2), 2.KilowattHoursPerKilogram());

        [Fact]
        public void NumberToMegajoulesPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromMegajoulesPerKilogram(2), 2.MegajoulesPerKilogram());

        [Fact]
        public void NumberToMegawattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromMegawattDaysPerKilogram(2), 2.MegawattDaysPerKilogram());

        [Fact]
        public void NumberToMegawattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy<double>.FromMegawattDaysPerShortTon(2), 2.MegawattDaysPerShortTon());

        [Fact]
        public void NumberToMegawattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy<double>.FromMegawattDaysPerTonne(2), 2.MegawattDaysPerTonne());

        [Fact]
        public void NumberToMegawattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromMegawattHoursPerKilogram(2), 2.MegawattHoursPerKilogram());

        [Fact]
        public void NumberToTerawattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromTerawattDaysPerKilogram(2), 2.TerawattDaysPerKilogram());

        [Fact]
        public void NumberToTerawattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy<double>.FromTerawattDaysPerShortTon(2), 2.TerawattDaysPerShortTon());

        [Fact]
        public void NumberToTerawattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy<double>.FromTerawattDaysPerTonne(2), 2.TerawattDaysPerTonne());

        [Fact]
        public void NumberToWattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromWattDaysPerKilogram(2), 2.WattDaysPerKilogram());

        [Fact]
        public void NumberToWattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy<double>.FromWattDaysPerShortTon(2), 2.WattDaysPerShortTon());

        [Fact]
        public void NumberToWattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy<double>.FromWattDaysPerTonne(2), 2.WattDaysPerTonne());

        [Fact]
        public void NumberToWattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy<double>.FromWattHoursPerKilogram(2), 2.WattHoursPerKilogram());

    }
}
