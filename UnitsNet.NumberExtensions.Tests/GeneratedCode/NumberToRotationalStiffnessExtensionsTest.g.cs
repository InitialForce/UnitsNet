//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToRotationalStiffness;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToRotationalStiffnessExtensionsTests
    {
        [Fact]
        public void NumberToCentinewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromCentinewtonMetersPerDegree(2), 2.CentinewtonMetersPerDegree());

        [Fact]
        public void NumberToCentinewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromCentinewtonMillimetersPerDegree(2), 2.CentinewtonMillimetersPerDegree());

        [Fact]
        public void NumberToCentinewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromCentinewtonMillimetersPerRadian(2), 2.CentinewtonMillimetersPerRadian());

        [Fact]
        public void NumberToDecanewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromDecanewtonMetersPerDegree(2), 2.DecanewtonMetersPerDegree());

        [Fact]
        public void NumberToDecanewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromDecanewtonMillimetersPerDegree(2), 2.DecanewtonMillimetersPerDegree());

        [Fact]
        public void NumberToDecanewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromDecanewtonMillimetersPerRadian(2), 2.DecanewtonMillimetersPerRadian());

        [Fact]
        public void NumberToDecinewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromDecinewtonMetersPerDegree(2), 2.DecinewtonMetersPerDegree());

        [Fact]
        public void NumberToDecinewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromDecinewtonMillimetersPerDegree(2), 2.DecinewtonMillimetersPerDegree());

        [Fact]
        public void NumberToDecinewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromDecinewtonMillimetersPerRadian(2), 2.DecinewtonMillimetersPerRadian());

        [Fact]
        public void NumberToKilonewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromKilonewtonMetersPerDegree(2), 2.KilonewtonMetersPerDegree());

        [Fact]
        public void NumberToKilonewtonMetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromKilonewtonMetersPerRadian(2), 2.KilonewtonMetersPerRadian());

        [Fact]
        public void NumberToKilonewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromKilonewtonMillimetersPerDegree(2), 2.KilonewtonMillimetersPerDegree());

        [Fact]
        public void NumberToKilonewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromKilonewtonMillimetersPerRadian(2), 2.KilonewtonMillimetersPerRadian());

        [Fact]
        public void NumberToKilopoundForceFeetPerDegreesTest() =>
            Assert.Equal(RotationalStiffness<double>.FromKilopoundForceFeetPerDegrees(2), 2.KilopoundForceFeetPerDegrees());

        [Fact]
        public void NumberToMeganewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMeganewtonMetersPerDegree(2), 2.MeganewtonMetersPerDegree());

        [Fact]
        public void NumberToMeganewtonMetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMeganewtonMetersPerRadian(2), 2.MeganewtonMetersPerRadian());

        [Fact]
        public void NumberToMeganewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMeganewtonMillimetersPerDegree(2), 2.MeganewtonMillimetersPerDegree());

        [Fact]
        public void NumberToMeganewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMeganewtonMillimetersPerRadian(2), 2.MeganewtonMillimetersPerRadian());

        [Fact]
        public void NumberToMicronewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMicronewtonMetersPerDegree(2), 2.MicronewtonMetersPerDegree());

        [Fact]
        public void NumberToMicronewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMicronewtonMillimetersPerDegree(2), 2.MicronewtonMillimetersPerDegree());

        [Fact]
        public void NumberToMicronewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMicronewtonMillimetersPerRadian(2), 2.MicronewtonMillimetersPerRadian());

        [Fact]
        public void NumberToMillinewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMillinewtonMetersPerDegree(2), 2.MillinewtonMetersPerDegree());

        [Fact]
        public void NumberToMillinewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMillinewtonMillimetersPerDegree(2), 2.MillinewtonMillimetersPerDegree());

        [Fact]
        public void NumberToMillinewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromMillinewtonMillimetersPerRadian(2), 2.MillinewtonMillimetersPerRadian());

        [Fact]
        public void NumberToNanonewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromNanonewtonMetersPerDegree(2), 2.NanonewtonMetersPerDegree());

        [Fact]
        public void NumberToNanonewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromNanonewtonMillimetersPerDegree(2), 2.NanonewtonMillimetersPerDegree());

        [Fact]
        public void NumberToNanonewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromNanonewtonMillimetersPerRadian(2), 2.NanonewtonMillimetersPerRadian());

        [Fact]
        public void NumberToNewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromNewtonMetersPerDegree(2), 2.NewtonMetersPerDegree());

        [Fact]
        public void NumberToNewtonMetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromNewtonMetersPerRadian(2), 2.NewtonMetersPerRadian());

        [Fact]
        public void NumberToNewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness<double>.FromNewtonMillimetersPerDegree(2), 2.NewtonMillimetersPerDegree());

        [Fact]
        public void NumberToNewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromNewtonMillimetersPerRadian(2), 2.NewtonMillimetersPerRadian());

        [Fact]
        public void NumberToPoundForceFeetPerRadianTest() =>
            Assert.Equal(RotationalStiffness<double>.FromPoundForceFeetPerRadian(2), 2.PoundForceFeetPerRadian());

        [Fact]
        public void NumberToPoundForceFeetPerDegreesTest() =>
            Assert.Equal(RotationalStiffness<double>.FromPoundForceFeetPerDegrees(2), 2.PoundForceFeetPerDegrees());

    }
}
