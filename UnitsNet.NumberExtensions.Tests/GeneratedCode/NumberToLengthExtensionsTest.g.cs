//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToLength;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToLengthExtensionsTests
    {
        [Fact]
        public void NumberToAstronomicalUnitsTest() =>
            Assert.Equal(Length<double>.FromAstronomicalUnits(2), 2.AstronomicalUnits());

        [Fact]
        public void NumberToCentimetersTest() =>
            Assert.Equal(Length<double>.FromCentimeters(2), 2.Centimeters());

        [Fact]
        public void NumberToChainsTest() =>
            Assert.Equal(Length<double>.FromChains(2), 2.Chains());

        [Fact]
        public void NumberToDecimetersTest() =>
            Assert.Equal(Length<double>.FromDecimeters(2), 2.Decimeters());

        [Fact]
        public void NumberToDtpPicasTest() =>
            Assert.Equal(Length<double>.FromDtpPicas(2), 2.DtpPicas());

        [Fact]
        public void NumberToDtpPointsTest() =>
            Assert.Equal(Length<double>.FromDtpPoints(2), 2.DtpPoints());

        [Fact]
        public void NumberToFathomsTest() =>
            Assert.Equal(Length<double>.FromFathoms(2), 2.Fathoms());

        [Fact]
        public void NumberToFeetTest() =>
            Assert.Equal(Length<double>.FromFeet(2), 2.Feet());

        [Fact]
        public void NumberToHandsTest() =>
            Assert.Equal(Length<double>.FromHands(2), 2.Hands());

        [Fact]
        public void NumberToHectometersTest() =>
            Assert.Equal(Length<double>.FromHectometers(2), 2.Hectometers());

        [Fact]
        public void NumberToInchesTest() =>
            Assert.Equal(Length<double>.FromInches(2), 2.Inches());

        [Fact]
        public void NumberToKilolightYearsTest() =>
            Assert.Equal(Length<double>.FromKilolightYears(2), 2.KilolightYears());

        [Fact]
        public void NumberToKilometersTest() =>
            Assert.Equal(Length<double>.FromKilometers(2), 2.Kilometers());

        [Fact]
        public void NumberToKiloparsecsTest() =>
            Assert.Equal(Length<double>.FromKiloparsecs(2), 2.Kiloparsecs());

        [Fact]
        public void NumberToLightYearsTest() =>
            Assert.Equal(Length<double>.FromLightYears(2), 2.LightYears());

        [Fact]
        public void NumberToMegalightYearsTest() =>
            Assert.Equal(Length<double>.FromMegalightYears(2), 2.MegalightYears());

        [Fact]
        public void NumberToMegaparsecsTest() =>
            Assert.Equal(Length<double>.FromMegaparsecs(2), 2.Megaparsecs());

        [Fact]
        public void NumberToMetersTest() =>
            Assert.Equal(Length<double>.FromMeters(2), 2.Meters());

        [Fact]
        public void NumberToMicroinchesTest() =>
            Assert.Equal(Length<double>.FromMicroinches(2), 2.Microinches());

        [Fact]
        public void NumberToMicrometersTest() =>
            Assert.Equal(Length<double>.FromMicrometers(2), 2.Micrometers());

        [Fact]
        public void NumberToMilsTest() =>
            Assert.Equal(Length<double>.FromMils(2), 2.Mils());

        [Fact]
        public void NumberToMilesTest() =>
            Assert.Equal(Length<double>.FromMiles(2), 2.Miles());

        [Fact]
        public void NumberToMillimetersTest() =>
            Assert.Equal(Length<double>.FromMillimeters(2), 2.Millimeters());

        [Fact]
        public void NumberToNanometersTest() =>
            Assert.Equal(Length<double>.FromNanometers(2), 2.Nanometers());

        [Fact]
        public void NumberToNauticalMilesTest() =>
            Assert.Equal(Length<double>.FromNauticalMiles(2), 2.NauticalMiles());

        [Fact]
        public void NumberToParsecsTest() =>
            Assert.Equal(Length<double>.FromParsecs(2), 2.Parsecs());

        [Fact]
        public void NumberToPrinterPicasTest() =>
            Assert.Equal(Length<double>.FromPrinterPicas(2), 2.PrinterPicas());

        [Fact]
        public void NumberToPrinterPointsTest() =>
            Assert.Equal(Length<double>.FromPrinterPoints(2), 2.PrinterPoints());

        [Fact]
        public void NumberToShacklesTest() =>
            Assert.Equal(Length<double>.FromShackles(2), 2.Shackles());

        [Fact]
        public void NumberToSolarRadiusesTest() =>
            Assert.Equal(Length<double>.FromSolarRadiuses(2), 2.SolarRadiuses());

        [Fact]
        public void NumberToTwipsTest() =>
            Assert.Equal(Length<double>.FromTwips(2), 2.Twips());

        [Fact]
        public void NumberToUsSurveyFeetTest() =>
            Assert.Equal(Length<double>.FromUsSurveyFeet(2), 2.UsSurveyFeet());

        [Fact]
        public void NumberToYardsTest() =>
            Assert.Equal(Length<double>.FromYards(2), 2.Yards());

    }
}
