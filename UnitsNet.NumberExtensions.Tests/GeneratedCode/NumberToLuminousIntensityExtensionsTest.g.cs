//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToLuminousIntensity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToLuminousIntensityExtensionsTests
    {
        [Fact]
        public void NumberToCandelaTest() =>
            Assert.Equal(LuminousIntensity.FromCandela(2), 2.Candela());

        [Fact]
        public void NumberToCenticandelaTest() =>
            Assert.Equal(LuminousIntensity.FromCenticandela(2), 2.Centicandela());

        [Fact]
        public void NumberToDecacandelaTest() =>
            Assert.Equal(LuminousIntensity.FromDecacandela(2), 2.Decacandela());

        [Fact]
        public void NumberToDecicandelaTest() =>
            Assert.Equal(LuminousIntensity.FromDecicandela(2), 2.Decicandela());

        [Fact]
        public void NumberToHectocandelaTest() =>
            Assert.Equal(LuminousIntensity.FromHectocandela(2), 2.Hectocandela());

        [Fact]
        public void NumberToKilocandelaTest() =>
            Assert.Equal(LuminousIntensity.FromKilocandela(2), 2.Kilocandela());

        [Fact]
        public void NumberToMegacandelaTest() =>
            Assert.Equal(LuminousIntensity.FromMegacandela(2), 2.Megacandela());

        [Fact]
        public void NumberToMicrocandelaTest() =>
            Assert.Equal(LuminousIntensity.FromMicrocandela(2), 2.Microcandela());

        [Fact]
        public void NumberToMillicandelaTest() =>
            Assert.Equal(LuminousIntensity.FromMillicandela(2), 2.Millicandela());

        [Fact]
        public void NumberToNanocandelaTest() =>
            Assert.Equal(LuminousIntensity.FromNanocandela(2), 2.Nanocandela());

    }
}
