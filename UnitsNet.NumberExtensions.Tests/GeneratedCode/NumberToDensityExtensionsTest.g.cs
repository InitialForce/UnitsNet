//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToDensity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToDensityExtensionsTests
    {
        [Fact]
        public void NumberToCentigramsPerDeciLiterTest() =>
            Assert.Equal(Density<double>.FromCentigramsPerDeciLiter(2), 2.CentigramsPerDeciLiter());

        [Fact]
        public void NumberToCentigramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromCentigramsPerLiter(2), 2.CentigramsPerLiter());

        [Fact]
        public void NumberToCentigramsPerMilliliterTest() =>
            Assert.Equal(Density<double>.FromCentigramsPerMilliliter(2), 2.CentigramsPerMilliliter());

        [Fact]
        public void NumberToDecigramsPerDeciLiterTest() =>
            Assert.Equal(Density<double>.FromDecigramsPerDeciLiter(2), 2.DecigramsPerDeciLiter());

        [Fact]
        public void NumberToDecigramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromDecigramsPerLiter(2), 2.DecigramsPerLiter());

        [Fact]
        public void NumberToDecigramsPerMilliliterTest() =>
            Assert.Equal(Density<double>.FromDecigramsPerMilliliter(2), 2.DecigramsPerMilliliter());

        [Fact]
        public void NumberToGramsPerCubicCentimeterTest() =>
            Assert.Equal(Density<double>.FromGramsPerCubicCentimeter(2), 2.GramsPerCubicCentimeter());

        [Fact]
        public void NumberToGramsPerCubicMeterTest() =>
            Assert.Equal(Density<double>.FromGramsPerCubicMeter(2), 2.GramsPerCubicMeter());

        [Fact]
        public void NumberToGramsPerCubicMillimeterTest() =>
            Assert.Equal(Density<double>.FromGramsPerCubicMillimeter(2), 2.GramsPerCubicMillimeter());

        [Fact]
        public void NumberToGramsPerDeciLiterTest() =>
            Assert.Equal(Density<double>.FromGramsPerDeciLiter(2), 2.GramsPerDeciLiter());

        [Fact]
        public void NumberToGramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromGramsPerLiter(2), 2.GramsPerLiter());

        [Fact]
        public void NumberToGramsPerMilliliterTest() =>
            Assert.Equal(Density<double>.FromGramsPerMilliliter(2), 2.GramsPerMilliliter());

        [Fact]
        public void NumberToKilogramsPerCubicCentimeterTest() =>
            Assert.Equal(Density<double>.FromKilogramsPerCubicCentimeter(2), 2.KilogramsPerCubicCentimeter());

        [Fact]
        public void NumberToKilogramsPerCubicMeterTest() =>
            Assert.Equal(Density<double>.FromKilogramsPerCubicMeter(2), 2.KilogramsPerCubicMeter());

        [Fact]
        public void NumberToKilogramsPerCubicMillimeterTest() =>
            Assert.Equal(Density<double>.FromKilogramsPerCubicMillimeter(2), 2.KilogramsPerCubicMillimeter());

        [Fact]
        public void NumberToKilogramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromKilogramsPerLiter(2), 2.KilogramsPerLiter());

        [Fact]
        public void NumberToKilopoundsPerCubicFootTest() =>
            Assert.Equal(Density<double>.FromKilopoundsPerCubicFoot(2), 2.KilopoundsPerCubicFoot());

        [Fact]
        public void NumberToKilopoundsPerCubicInchTest() =>
            Assert.Equal(Density<double>.FromKilopoundsPerCubicInch(2), 2.KilopoundsPerCubicInch());

        [Fact]
        public void NumberToMicrogramsPerCubicMeterTest() =>
            Assert.Equal(Density<double>.FromMicrogramsPerCubicMeter(2), 2.MicrogramsPerCubicMeter());

        [Fact]
        public void NumberToMicrogramsPerDeciLiterTest() =>
            Assert.Equal(Density<double>.FromMicrogramsPerDeciLiter(2), 2.MicrogramsPerDeciLiter());

        [Fact]
        public void NumberToMicrogramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromMicrogramsPerLiter(2), 2.MicrogramsPerLiter());

        [Fact]
        public void NumberToMicrogramsPerMilliliterTest() =>
            Assert.Equal(Density<double>.FromMicrogramsPerMilliliter(2), 2.MicrogramsPerMilliliter());

        [Fact]
        public void NumberToMilligramsPerCubicMeterTest() =>
            Assert.Equal(Density<double>.FromMilligramsPerCubicMeter(2), 2.MilligramsPerCubicMeter());

        [Fact]
        public void NumberToMilligramsPerDeciLiterTest() =>
            Assert.Equal(Density<double>.FromMilligramsPerDeciLiter(2), 2.MilligramsPerDeciLiter());

        [Fact]
        public void NumberToMilligramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromMilligramsPerLiter(2), 2.MilligramsPerLiter());

        [Fact]
        public void NumberToMilligramsPerMilliliterTest() =>
            Assert.Equal(Density<double>.FromMilligramsPerMilliliter(2), 2.MilligramsPerMilliliter());

        [Fact]
        public void NumberToNanogramsPerDeciLiterTest() =>
            Assert.Equal(Density<double>.FromNanogramsPerDeciLiter(2), 2.NanogramsPerDeciLiter());

        [Fact]
        public void NumberToNanogramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromNanogramsPerLiter(2), 2.NanogramsPerLiter());

        [Fact]
        public void NumberToNanogramsPerMilliliterTest() =>
            Assert.Equal(Density<double>.FromNanogramsPerMilliliter(2), 2.NanogramsPerMilliliter());

        [Fact]
        public void NumberToPicogramsPerDeciLiterTest() =>
            Assert.Equal(Density<double>.FromPicogramsPerDeciLiter(2), 2.PicogramsPerDeciLiter());

        [Fact]
        public void NumberToPicogramsPerLiterTest() =>
            Assert.Equal(Density<double>.FromPicogramsPerLiter(2), 2.PicogramsPerLiter());

        [Fact]
        public void NumberToPicogramsPerMilliliterTest() =>
            Assert.Equal(Density<double>.FromPicogramsPerMilliliter(2), 2.PicogramsPerMilliliter());

        [Fact]
        public void NumberToPoundsPerCubicFootTest() =>
            Assert.Equal(Density<double>.FromPoundsPerCubicFoot(2), 2.PoundsPerCubicFoot());

        [Fact]
        public void NumberToPoundsPerCubicInchTest() =>
            Assert.Equal(Density<double>.FromPoundsPerCubicInch(2), 2.PoundsPerCubicInch());

        [Fact]
        public void NumberToPoundsPerImperialGallonTest() =>
            Assert.Equal(Density<double>.FromPoundsPerImperialGallon(2), 2.PoundsPerImperialGallon());

        [Fact]
        public void NumberToPoundsPerUSGallonTest() =>
            Assert.Equal(Density<double>.FromPoundsPerUSGallon(2), 2.PoundsPerUSGallon());

        [Fact]
        public void NumberToSlugsPerCubicFootTest() =>
            Assert.Equal(Density<double>.FromSlugsPerCubicFoot(2), 2.SlugsPerCubicFoot());

        [Fact]
        public void NumberToTonnesPerCubicCentimeterTest() =>
            Assert.Equal(Density<double>.FromTonnesPerCubicCentimeter(2), 2.TonnesPerCubicCentimeter());

        [Fact]
        public void NumberToTonnesPerCubicMeterTest() =>
            Assert.Equal(Density<double>.FromTonnesPerCubicMeter(2), 2.TonnesPerCubicMeter());

        [Fact]
        public void NumberToTonnesPerCubicMillimeterTest() =>
            Assert.Equal(Density<double>.FromTonnesPerCubicMillimeter(2), 2.TonnesPerCubicMillimeter());

    }
}
