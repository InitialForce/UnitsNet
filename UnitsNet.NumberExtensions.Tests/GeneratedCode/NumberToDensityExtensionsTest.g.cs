//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToDensity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToDensityExtensionsTests
    {
        [Fact]
        public void NumberToBarsPerMeterEqTest() =>
            Assert.Equal(Density.FromBarsPerMeterEq(2), 2.BarsPerMeterEq());

        [Fact]
        public void NumberToCentigramsPerDeciLiterTest() =>
            Assert.Equal(Density.FromCentigramsPerDeciLiter(2), 2.CentigramsPerDeciLiter());

        [Fact]
        public void NumberToCentigramsPerLiterTest() =>
            Assert.Equal(Density.FromCentigramsPerLiter(2), 2.CentigramsPerLiter());

        [Fact]
        public void NumberToCentigramsPerMilliliterTest() =>
            Assert.Equal(Density.FromCentigramsPerMilliliter(2), 2.CentigramsPerMilliliter());

        [Fact]
        public void NumberToDecigramsPerDeciLiterTest() =>
            Assert.Equal(Density.FromDecigramsPerDeciLiter(2), 2.DecigramsPerDeciLiter());

        [Fact]
        public void NumberToDecigramsPerLiterTest() =>
            Assert.Equal(Density.FromDecigramsPerLiter(2), 2.DecigramsPerLiter());

        [Fact]
        public void NumberToDecigramsPerMilliliterTest() =>
            Assert.Equal(Density.FromDecigramsPerMilliliter(2), 2.DecigramsPerMilliliter());

        [Fact]
        public void NumberToDegreeApisTest() =>
            Assert.Equal(Density.FromDegreeApis(2), 2.DegreeApis());

        [Fact]
        public void NumberToGramsPerCubicCentimeterTest() =>
            Assert.Equal(Density.FromGramsPerCubicCentimeter(2), 2.GramsPerCubicCentimeter());

        [Fact]
        public void NumberToGramsPerCubicMeterTest() =>
            Assert.Equal(Density.FromGramsPerCubicMeter(2), 2.GramsPerCubicMeter());

        [Fact]
        public void NumberToGramsPerCubicMillimeterTest() =>
            Assert.Equal(Density.FromGramsPerCubicMillimeter(2), 2.GramsPerCubicMillimeter());

        [Fact]
        public void NumberToGramsPerDeciLiterTest() =>
            Assert.Equal(Density.FromGramsPerDeciLiter(2), 2.GramsPerDeciLiter());

        [Fact]
        public void NumberToGramsPerLiterTest() =>
            Assert.Equal(Density.FromGramsPerLiter(2), 2.GramsPerLiter());

        [Fact]
        public void NumberToGramsPerMilliliterTest() =>
            Assert.Equal(Density.FromGramsPerMilliliter(2), 2.GramsPerMilliliter());

        [Fact]
        public void NumberToKilogramsPerCubicCentimeterTest() =>
            Assert.Equal(Density.FromKilogramsPerCubicCentimeter(2), 2.KilogramsPerCubicCentimeter());

        [Fact]
        public void NumberToKilogramsPerCubicMeterTest() =>
            Assert.Equal(Density.FromKilogramsPerCubicMeter(2), 2.KilogramsPerCubicMeter());

        [Fact]
        public void NumberToKilogramsPerCubicMillimeterTest() =>
            Assert.Equal(Density.FromKilogramsPerCubicMillimeter(2), 2.KilogramsPerCubicMillimeter());

        [Fact]
        public void NumberToKilogramsPerLiterTest() =>
            Assert.Equal(Density.FromKilogramsPerLiter(2), 2.KilogramsPerLiter());

        [Fact]
        public void NumberToKilogramsPerSquareCentimeterPerFootTest() =>
            Assert.Equal(Density.FromKilogramsPerSquareCentimeterPerFoot(2), 2.KilogramsPerSquareCentimeterPerFoot());

        [Fact]
        public void NumberToKilogramsPerSquareCentimeterPerMeterTest() =>
            Assert.Equal(Density.FromKilogramsPerSquareCentimeterPerMeter(2), 2.KilogramsPerSquareCentimeterPerMeter());

        [Fact]
        public void NumberToKilopascalsPerFootEqTest() =>
            Assert.Equal(Density.FromKilopascalsPerFootEq(2), 2.KilopascalsPerFootEq());

        [Fact]
        public void NumberToKilopascalsPerMeterEqTest() =>
            Assert.Equal(Density.FromKilopascalsPerMeterEq(2), 2.KilopascalsPerMeterEq());

        [Fact]
        public void NumberToKilopoundsPerCubicFootTest() =>
            Assert.Equal(Density.FromKilopoundsPerCubicFoot(2), 2.KilopoundsPerCubicFoot());

        [Fact]
        public void NumberToKilopoundsPerCubicInchTest() =>
            Assert.Equal(Density.FromKilopoundsPerCubicInch(2), 2.KilopoundsPerCubicInch());

        [Fact]
        public void NumberToMicrogramsPerCubicMeterTest() =>
            Assert.Equal(Density.FromMicrogramsPerCubicMeter(2), 2.MicrogramsPerCubicMeter());

        [Fact]
        public void NumberToMicrogramsPerDeciLiterTest() =>
            Assert.Equal(Density.FromMicrogramsPerDeciLiter(2), 2.MicrogramsPerDeciLiter());

        [Fact]
        public void NumberToMicrogramsPerLiterTest() =>
            Assert.Equal(Density.FromMicrogramsPerLiter(2), 2.MicrogramsPerLiter());

        [Fact]
        public void NumberToMicrogramsPerMilliliterTest() =>
            Assert.Equal(Density.FromMicrogramsPerMilliliter(2), 2.MicrogramsPerMilliliter());

        [Fact]
        public void NumberToMilligramsPerCubicMeterTest() =>
            Assert.Equal(Density.FromMilligramsPerCubicMeter(2), 2.MilligramsPerCubicMeter());

        [Fact]
        public void NumberToMilligramsPerDeciLiterTest() =>
            Assert.Equal(Density.FromMilligramsPerDeciLiter(2), 2.MilligramsPerDeciLiter());

        [Fact]
        public void NumberToMilligramsPerLiterTest() =>
            Assert.Equal(Density.FromMilligramsPerLiter(2), 2.MilligramsPerLiter());

        [Fact]
        public void NumberToMilligramsPerMilliliterTest() =>
            Assert.Equal(Density.FromMilligramsPerMilliliter(2), 2.MilligramsPerMilliliter());

        [Fact]
        public void NumberToNanogramsPerDeciLiterTest() =>
            Assert.Equal(Density.FromNanogramsPerDeciLiter(2), 2.NanogramsPerDeciLiter());

        [Fact]
        public void NumberToNanogramsPerLiterTest() =>
            Assert.Equal(Density.FromNanogramsPerLiter(2), 2.NanogramsPerLiter());

        [Fact]
        public void NumberToNanogramsPerMilliliterTest() =>
            Assert.Equal(Density.FromNanogramsPerMilliliter(2), 2.NanogramsPerMilliliter());

        [Fact]
        public void NumberToPascalsPerMeterEqTest() =>
            Assert.Equal(Density.FromPascalsPerMeterEq(2), 2.PascalsPerMeterEq());

        [Fact]
        public void NumberToPicogramsPerDeciLiterTest() =>
            Assert.Equal(Density.FromPicogramsPerDeciLiter(2), 2.PicogramsPerDeciLiter());

        [Fact]
        public void NumberToPicogramsPerLiterTest() =>
            Assert.Equal(Density.FromPicogramsPerLiter(2), 2.PicogramsPerLiter());

        [Fact]
        public void NumberToPicogramsPerMilliliterTest() =>
            Assert.Equal(Density.FromPicogramsPerMilliliter(2), 2.PicogramsPerMilliliter());

        [Fact]
        public void NumberToPoundForcesPerSquareInchPerFootTest() =>
            Assert.Equal(Density.FromPoundForcesPerSquareInchPerFoot(2), 2.PoundForcesPerSquareInchPerFoot());

        [Fact]
        public void NumberToPoundForcesPerSquareInchPerMeterTest() =>
            Assert.Equal(Density.FromPoundForcesPerSquareInchPerMeter(2), 2.PoundForcesPerSquareInchPerMeter());

        [Fact]
        public void NumberToPoundForcesPerSquareInchPerThousandFootTest() =>
            Assert.Equal(Density.FromPoundForcesPerSquareInchPerThousandFoot(2), 2.PoundForcesPerSquareInchPerThousandFoot());

        [Fact]
        public void NumberToPoundsPerBarrelTest() =>
            Assert.Equal(Density.FromPoundsPerBarrel(2), 2.PoundsPerBarrel());

        [Fact]
        public void NumberToPoundsPerCubicFootTest() =>
            Assert.Equal(Density.FromPoundsPerCubicFoot(2), 2.PoundsPerCubicFoot());

        [Fact]
        public void NumberToPoundsPerCubicInchTest() =>
            Assert.Equal(Density.FromPoundsPerCubicInch(2), 2.PoundsPerCubicInch());

        [Fact]
        public void NumberToPoundsPerGallonTest() =>
            Assert.Equal(Density.FromPoundsPerGallon(2), 2.PoundsPerGallon());

        [Fact]
        public void NumberToPoundsPerImperialGallonTest() =>
            Assert.Equal(Density.FromPoundsPerImperialGallon(2), 2.PoundsPerImperialGallon());

        [Fact]
        public void NumberToPoundsPerUSGallonTest() =>
            Assert.Equal(Density.FromPoundsPerUSGallon(2), 2.PoundsPerUSGallon());

        [Fact]
        public void NumberToSlugsPerCubicFootTest() =>
            Assert.Equal(Density.FromSlugsPerCubicFoot(2), 2.SlugsPerCubicFoot());

        [Fact]
        public void NumberToSpecificGravitysTest() =>
            Assert.Equal(Density.FromSpecificGravitys(2), 2.SpecificGravitys());

        [Fact]
        public void NumberToSpecificGravityApiDefsTest() =>
            Assert.Equal(Density.FromSpecificGravityApiDefs(2), 2.SpecificGravityApiDefs());

        [Fact]
        public void NumberToSpecificGravityToAirsTest() =>
            Assert.Equal(Density.FromSpecificGravityToAirs(2), 2.SpecificGravityToAirs());

        [Fact]
        public void NumberToTonnesPerCubicCentimeterTest() =>
            Assert.Equal(Density.FromTonnesPerCubicCentimeter(2), 2.TonnesPerCubicCentimeter());

        [Fact]
        public void NumberToTonnesPerCubicMeterTest() =>
            Assert.Equal(Density.FromTonnesPerCubicMeter(2), 2.TonnesPerCubicMeter());

        [Fact]
        public void NumberToTonnesPerCubicMillimeterTest() =>
            Assert.Equal(Density.FromTonnesPerCubicMillimeter(2), 2.TonnesPerCubicMillimeter());

        [Fact]
        public void NumberToTonsPerCubicMeterTest() =>
            Assert.Equal(Density.FromTonsPerCubicMeter(2), 2.TonsPerCubicMeter());

    }
}
