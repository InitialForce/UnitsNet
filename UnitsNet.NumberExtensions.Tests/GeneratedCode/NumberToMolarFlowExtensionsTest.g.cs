//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToMolarFlow;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToMolarFlowExtensionsTests
    {
        [Fact]
        public void NumberToCentimolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromCentimolesPerDay(2), 2.CentimolesPerDay());

        [Fact]
        public void NumberToCentimolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromCentimolesPerSecond(2), 2.CentimolesPerSecond());

        [Fact]
        public void NumberToDecamolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromDecamolesPerDay(2), 2.DecamolesPerDay());

        [Fact]
        public void NumberToDecamolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromDecamolesPerSecond(2), 2.DecamolesPerSecond());

        [Fact]
        public void NumberToDecimolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromDecimolesPerDay(2), 2.DecimolesPerDay());

        [Fact]
        public void NumberToDecimolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromDecimolesPerSecond(2), 2.DecimolesPerSecond());

        [Fact]
        public void NumberToHectomolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromHectomolesPerDay(2), 2.HectomolesPerDay());

        [Fact]
        public void NumberToHectomolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromHectomolesPerSecond(2), 2.HectomolesPerSecond());

        [Fact]
        public void NumberToKilomolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromKilomolesPerDay(2), 2.KilomolesPerDay());

        [Fact]
        public void NumberToKilomolesPerHourTest() =>
            Assert.Equal(MolarFlow.FromKilomolesPerHour(2), 2.KilomolesPerHour());

        [Fact]
        public void NumberToKilomolesPerMinuteTest() =>
            Assert.Equal(MolarFlow.FromKilomolesPerMinute(2), 2.KilomolesPerMinute());

        [Fact]
        public void NumberToKilomolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromKilomolesPerSecond(2), 2.KilomolesPerSecond());

        [Fact]
        public void NumberToMegamolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromMegamolesPerDay(2), 2.MegamolesPerDay());

        [Fact]
        public void NumberToMicromolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromMicromolesPerDay(2), 2.MicromolesPerDay());

        [Fact]
        public void NumberToMicromolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromMicromolesPerSecond(2), 2.MicromolesPerSecond());

        [Fact]
        public void NumberToMillimolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromMillimolesPerDay(2), 2.MillimolesPerDay());

        [Fact]
        public void NumberToMillimolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromMillimolesPerSecond(2), 2.MillimolesPerSecond());

        [Fact]
        public void NumberToMolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromMolesPerDay(2), 2.MolesPerDay());

        [Fact]
        public void NumberToMolesPerHourTest() =>
            Assert.Equal(MolarFlow.FromMolesPerHour(2), 2.MolesPerHour());

        [Fact]
        public void NumberToMolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromMolesPerSecond(2), 2.MolesPerSecond());

        [Fact]
        public void NumberToNanomolesPerDayTest() =>
            Assert.Equal(MolarFlow.FromNanomolesPerDay(2), 2.NanomolesPerDay());

        [Fact]
        public void NumberToNanomolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromNanomolesPerSecond(2), 2.NanomolesPerSecond());

    }
}
