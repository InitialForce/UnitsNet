//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Molar flow is the ratio of the mole change to the time during which the change occurred (value of mole changes per unit time).
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class MolarFlow : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MolarFlowUnit? _unit;

        static MolarFlow()
        {
            BaseDimensions = new BaseDimensions(0, 0, -1, 0, 0, 1, 0);
            Info = new QuantityInfo(QuantityType.MolarFlow, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit MolePerSecond.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public MolarFlow()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private MolarFlow(double value, MolarFlowUnit unit)
        {
            if(unit == MolarFlowUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of MolarFlow, which is MolePerSecond. All conversions go via this value.
        /// </summary>
        public static MolarFlowUnit BaseUnit { get; } = MolarFlowUnit.MolePerSecond;

        /// <summary>
        /// Represents the largest possible value of MolarFlow
        /// </summary>
        public static MolarFlow MaxValue { get; } = new MolarFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of MolarFlow
        /// </summary>
        public static MolarFlow MinValue { get; } = new MolarFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.MolarFlow;

        /// <summary>
        ///     All units of measurement for the MolarFlow quantity.
        /// </summary>
        public static MolarFlowUnit[] Units { get; } = Enum.GetValues(typeof(MolarFlowUnit)).Cast<MolarFlowUnit>().Except(new MolarFlowUnit[]{ MolarFlowUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MolePerSecond.
        /// </summary>
        public static MolarFlow Zero { get; } = new MolarFlow(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public MolarFlowUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => MolarFlow.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => MolarFlow.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get MolarFlow in CentimolesPerDay.
        /// </summary>
        public double CentimolesPerDay => As(MolarFlowUnit.CentimolePerDay);

        /// <summary>
        ///     Get MolarFlow in CentimolesPerSecond.
        /// </summary>
        public double CentimolesPerSecond => As(MolarFlowUnit.CentimolePerSecond);

        /// <summary>
        ///     Get MolarFlow in DecamolesPerDay.
        /// </summary>
        public double DecamolesPerDay => As(MolarFlowUnit.DecamolePerDay);

        /// <summary>
        ///     Get MolarFlow in DecamolesPerSecond.
        /// </summary>
        public double DecamolesPerSecond => As(MolarFlowUnit.DecamolePerSecond);

        /// <summary>
        ///     Get MolarFlow in DecimolesPerDay.
        /// </summary>
        public double DecimolesPerDay => As(MolarFlowUnit.DecimolePerDay);

        /// <summary>
        ///     Get MolarFlow in DecimolesPerSecond.
        /// </summary>
        public double DecimolesPerSecond => As(MolarFlowUnit.DecimolePerSecond);

        /// <summary>
        ///     Get MolarFlow in HectomolesPerDay.
        /// </summary>
        public double HectomolesPerDay => As(MolarFlowUnit.HectomolePerDay);

        /// <summary>
        ///     Get MolarFlow in HectomolesPerSecond.
        /// </summary>
        public double HectomolesPerSecond => As(MolarFlowUnit.HectomolePerSecond);

        /// <summary>
        ///     Get MolarFlow in KilomolesPerDay.
        /// </summary>
        public double KilomolesPerDay => As(MolarFlowUnit.KilomolePerDay);

        /// <summary>
        ///     Get MolarFlow in KilomolesPerHour.
        /// </summary>
        public double KilomolesPerHour => As(MolarFlowUnit.KilomolePerHour);

        /// <summary>
        ///     Get MolarFlow in KilomolesPerMinute.
        /// </summary>
        public double KilomolesPerMinute => As(MolarFlowUnit.KilomolePerMinute);

        /// <summary>
        ///     Get MolarFlow in KilomolesPerSecond.
        /// </summary>
        public double KilomolesPerSecond => As(MolarFlowUnit.KilomolePerSecond);

        /// <summary>
        ///     Get MolarFlow in MegamolesPerDay.
        /// </summary>
        public double MegamolesPerDay => As(MolarFlowUnit.MegamolePerDay);

        /// <summary>
        ///     Get MolarFlow in MicromolesPerDay.
        /// </summary>
        public double MicromolesPerDay => As(MolarFlowUnit.MicromolePerDay);

        /// <summary>
        ///     Get MolarFlow in MicromolesPerSecond.
        /// </summary>
        public double MicromolesPerSecond => As(MolarFlowUnit.MicromolePerSecond);

        /// <summary>
        ///     Get MolarFlow in MillimolesPerDay.
        /// </summary>
        public double MillimolesPerDay => As(MolarFlowUnit.MillimolePerDay);

        /// <summary>
        ///     Get MolarFlow in MillimolesPerSecond.
        /// </summary>
        public double MillimolesPerSecond => As(MolarFlowUnit.MillimolePerSecond);

        /// <summary>
        ///     Get MolarFlow in MolesPerDay.
        /// </summary>
        public double MolesPerDay => As(MolarFlowUnit.MolePerDay);

        /// <summary>
        ///     Get MolarFlow in MolesPerHour.
        /// </summary>
        public double MolesPerHour => As(MolarFlowUnit.MolePerHour);

        /// <summary>
        ///     Get MolarFlow in MolesPerSecond.
        /// </summary>
        public double MolesPerSecond => As(MolarFlowUnit.MolePerSecond);

        /// <summary>
        ///     Get MolarFlow in NanomolesPerDay.
        /// </summary>
        public double NanomolesPerDay => As(MolarFlowUnit.NanomolePerDay);

        /// <summary>
        ///     Get MolarFlow in NanomolesPerSecond.
        /// </summary>
        public double NanomolesPerSecond => As(MolarFlowUnit.NanomolePerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(MolarFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(MolarFlowUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get MolarFlow from CentimolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromCentimolesPerDay(double centimolesperday)
        {
            double value = (double) centimolesperday;
            return new MolarFlow(value, MolarFlowUnit.CentimolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from CentimolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromCentimolesPerSecond(double centimolespersecond)
        {
            double value = (double) centimolespersecond;
            return new MolarFlow(value, MolarFlowUnit.CentimolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from DecamolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromDecamolesPerDay(double decamolesperday)
        {
            double value = (double) decamolesperday;
            return new MolarFlow(value, MolarFlowUnit.DecamolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from DecamolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromDecamolesPerSecond(double decamolespersecond)
        {
            double value = (double) decamolespersecond;
            return new MolarFlow(value, MolarFlowUnit.DecamolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from DecimolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromDecimolesPerDay(double decimolesperday)
        {
            double value = (double) decimolesperday;
            return new MolarFlow(value, MolarFlowUnit.DecimolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from DecimolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromDecimolesPerSecond(double decimolespersecond)
        {
            double value = (double) decimolespersecond;
            return new MolarFlow(value, MolarFlowUnit.DecimolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from HectomolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromHectomolesPerDay(double hectomolesperday)
        {
            double value = (double) hectomolesperday;
            return new MolarFlow(value, MolarFlowUnit.HectomolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from HectomolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromHectomolesPerSecond(double hectomolespersecond)
        {
            double value = (double) hectomolespersecond;
            return new MolarFlow(value, MolarFlowUnit.HectomolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from KilomolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromKilomolesPerDay(double kilomolesperday)
        {
            double value = (double) kilomolesperday;
            return new MolarFlow(value, MolarFlowUnit.KilomolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from KilomolesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromKilomolesPerHour(double kilomolesperhour)
        {
            double value = (double) kilomolesperhour;
            return new MolarFlow(value, MolarFlowUnit.KilomolePerHour);
        }
        /// <summary>
        ///     Get MolarFlow from KilomolesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromKilomolesPerMinute(double kilomolesperminute)
        {
            double value = (double) kilomolesperminute;
            return new MolarFlow(value, MolarFlowUnit.KilomolePerMinute);
        }
        /// <summary>
        ///     Get MolarFlow from KilomolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromKilomolesPerSecond(double kilomolespersecond)
        {
            double value = (double) kilomolespersecond;
            return new MolarFlow(value, MolarFlowUnit.KilomolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from MegamolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMegamolesPerDay(double megamolesperday)
        {
            double value = (double) megamolesperday;
            return new MolarFlow(value, MolarFlowUnit.MegamolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from MicromolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMicromolesPerDay(double micromolesperday)
        {
            double value = (double) micromolesperday;
            return new MolarFlow(value, MolarFlowUnit.MicromolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from MicromolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMicromolesPerSecond(double micromolespersecond)
        {
            double value = (double) micromolespersecond;
            return new MolarFlow(value, MolarFlowUnit.MicromolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from MillimolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMillimolesPerDay(double millimolesperday)
        {
            double value = (double) millimolesperday;
            return new MolarFlow(value, MolarFlowUnit.MillimolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from MillimolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMillimolesPerSecond(double millimolespersecond)
        {
            double value = (double) millimolespersecond;
            return new MolarFlow(value, MolarFlowUnit.MillimolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from MolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMolesPerDay(double molesperday)
        {
            double value = (double) molesperday;
            return new MolarFlow(value, MolarFlowUnit.MolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from MolesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMolesPerHour(double molesperhour)
        {
            double value = (double) molesperhour;
            return new MolarFlow(value, MolarFlowUnit.MolePerHour);
        }
        /// <summary>
        ///     Get MolarFlow from MolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromMolesPerSecond(double molespersecond)
        {
            double value = (double) molespersecond;
            return new MolarFlow(value, MolarFlowUnit.MolePerSecond);
        }
        /// <summary>
        ///     Get MolarFlow from NanomolesPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromNanomolesPerDay(double nanomolesperday)
        {
            double value = (double) nanomolesperday;
            return new MolarFlow(value, MolarFlowUnit.NanomolePerDay);
        }
        /// <summary>
        ///     Get MolarFlow from NanomolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarFlow FromNanomolesPerSecond(double nanomolespersecond)
        {
            double value = (double) nanomolespersecond;
            return new MolarFlow(value, MolarFlowUnit.NanomolePerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarFlowUnit" /> to <see cref="MolarFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarFlow unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static MolarFlow From(double value, MolarFlowUnit fromUnit)
        {
            return new MolarFlow((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MolarFlow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static MolarFlow Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<MolarFlow, MolarFlowUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MolarFlow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out MolarFlow result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<MolarFlow, MolarFlowUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MolarFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static MolarFlowUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<MolarFlowUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out MolarFlowUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out MolarFlowUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<MolarFlowUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is MolarFlow objMolarFlow)) throw new ArgumentException("Expected type MolarFlow.", nameof(obj));

            return CompareTo(objMolarFlow);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(MolarFlow other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is MolarFlow objMolarFlow))
                return false;

            return Equals(objMolarFlow);
        }

        public bool Equals(MolarFlow other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another MolarFlow within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(MolarFlow other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current MolarFlow.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((MolarFlowUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MolarFlowUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this MolarFlow to another MolarFlow with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A MolarFlow with the specified unit.</returns>
        public MolarFlow ToUnit(MolarFlowUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new MolarFlow(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case MolarFlowUnit.CentimolePerDay: return (_value/86400) * 1e-2d;
                case MolarFlowUnit.CentimolePerSecond: return (_value) * 1e-2d;
                case MolarFlowUnit.DecamolePerDay: return (_value/86400) * 1e1d;
                case MolarFlowUnit.DecamolePerSecond: return (_value) * 1e1d;
                case MolarFlowUnit.DecimolePerDay: return (_value/86400) * 1e-1d;
                case MolarFlowUnit.DecimolePerSecond: return (_value) * 1e-1d;
                case MolarFlowUnit.HectomolePerDay: return (_value/86400) * 1e2d;
                case MolarFlowUnit.HectomolePerSecond: return (_value) * 1e2d;
                case MolarFlowUnit.KilomolePerDay: return (_value/86400) * 1e3d;
                case MolarFlowUnit.KilomolePerHour: return _value/3.6;
                case MolarFlowUnit.KilomolePerMinute: return _value/0.06;
                case MolarFlowUnit.KilomolePerSecond: return (_value) * 1e3d;
                case MolarFlowUnit.MegamolePerDay: return (_value/86400) * 1e6d;
                case MolarFlowUnit.MicromolePerDay: return (_value/86400) * 1e-6d;
                case MolarFlowUnit.MicromolePerSecond: return (_value) * 1e-6d;
                case MolarFlowUnit.MillimolePerDay: return (_value/86400) * 1e-3d;
                case MolarFlowUnit.MillimolePerSecond: return (_value) * 1e-3d;
                case MolarFlowUnit.MolePerDay: return _value/86400;
                case MolarFlowUnit.MolePerHour: return _value/3600;
                case MolarFlowUnit.MolePerSecond: return _value;
                case MolarFlowUnit.NanomolePerDay: return (_value/86400) * 1e-9d;
                case MolarFlowUnit.NanomolePerSecond: return (_value) * 1e-9d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(MolarFlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case MolarFlowUnit.CentimolePerDay: return (baseUnitValue*86400) / 1e-2d;
                case MolarFlowUnit.CentimolePerSecond: return (baseUnitValue) / 1e-2d;
                case MolarFlowUnit.DecamolePerDay: return (baseUnitValue*86400) / 1e1d;
                case MolarFlowUnit.DecamolePerSecond: return (baseUnitValue) / 1e1d;
                case MolarFlowUnit.DecimolePerDay: return (baseUnitValue*86400) / 1e-1d;
                case MolarFlowUnit.DecimolePerSecond: return (baseUnitValue) / 1e-1d;
                case MolarFlowUnit.HectomolePerDay: return (baseUnitValue*86400) / 1e2d;
                case MolarFlowUnit.HectomolePerSecond: return (baseUnitValue) / 1e2d;
                case MolarFlowUnit.KilomolePerDay: return (baseUnitValue*86400) / 1e3d;
                case MolarFlowUnit.KilomolePerHour: return baseUnitValue*3.6;
                case MolarFlowUnit.KilomolePerMinute: return baseUnitValue*0.06;
                case MolarFlowUnit.KilomolePerSecond: return (baseUnitValue) / 1e3d;
                case MolarFlowUnit.MegamolePerDay: return (baseUnitValue*86400) / 1e6d;
                case MolarFlowUnit.MicromolePerDay: return (baseUnitValue*86400) / 1e-6d;
                case MolarFlowUnit.MicromolePerSecond: return (baseUnitValue) / 1e-6d;
                case MolarFlowUnit.MillimolePerDay: return (baseUnitValue*86400) / 1e-3d;
                case MolarFlowUnit.MillimolePerSecond: return (baseUnitValue) / 1e-3d;
                case MolarFlowUnit.MolePerDay: return baseUnitValue*86400;
                case MolarFlowUnit.MolePerHour: return baseUnitValue*3600;
                case MolarFlowUnit.MolePerSecond: return baseUnitValue;
                case MolarFlowUnit.NanomolePerDay: return (baseUnitValue*86400) / 1e-9d;
                case MolarFlowUnit.NanomolePerSecond: return (baseUnitValue) / 1e-9d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
