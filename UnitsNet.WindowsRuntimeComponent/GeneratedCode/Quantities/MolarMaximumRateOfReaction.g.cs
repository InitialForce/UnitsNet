//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In Michaelis�Menten kinetics, which describes the rate of enzymatic reactions, Vmax represents the maximum rate achieved by the system, happening at saturating substrate concentration.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Michaelis�Menten_kinetics
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class MolarMaximumRateOfReaction : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MolarMaximumRateOfReactionUnit? _unit;

        static MolarMaximumRateOfReaction()
        {
            BaseDimensions = new BaseDimensions(0, -1, -1, 0, 0, 1, 0);
            Info = new QuantityInfo(QuantityType.MolarMaximumRateOfReaction, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit MolePerSecondPerGram.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public MolarMaximumRateOfReaction()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private MolarMaximumRateOfReaction(double value, MolarMaximumRateOfReactionUnit unit)
        {
            if(unit == MolarMaximumRateOfReactionUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of MolarMaximumRateOfReaction, which is MolePerSecondPerGram. All conversions go via this value.
        /// </summary>
        public static MolarMaximumRateOfReactionUnit BaseUnit { get; } = MolarMaximumRateOfReactionUnit.MolePerSecondPerGram;

        /// <summary>
        /// Represents the largest possible value of MolarMaximumRateOfReaction
        /// </summary>
        public static MolarMaximumRateOfReaction MaxValue { get; } = new MolarMaximumRateOfReaction(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of MolarMaximumRateOfReaction
        /// </summary>
        public static MolarMaximumRateOfReaction MinValue { get; } = new MolarMaximumRateOfReaction(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.MolarMaximumRateOfReaction;

        /// <summary>
        ///     All units of measurement for the MolarMaximumRateOfReaction quantity.
        /// </summary>
        public static MolarMaximumRateOfReactionUnit[] Units { get; } = Enum.GetValues(typeof(MolarMaximumRateOfReactionUnit)).Cast<MolarMaximumRateOfReactionUnit>().Except(new MolarMaximumRateOfReactionUnit[]{ MolarMaximumRateOfReactionUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MolePerSecondPerGram.
        /// </summary>
        public static MolarMaximumRateOfReaction Zero { get; } = new MolarMaximumRateOfReaction(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public MolarMaximumRateOfReactionUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => MolarMaximumRateOfReaction.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => MolarMaximumRateOfReaction.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerHourPerGram.
        /// </summary>
        public double CentimolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.CentimolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerHourPerMicrogram.
        /// </summary>
        public double CentimolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.CentimolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerHourPerMilligram.
        /// </summary>
        public double CentimolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.CentimolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerMinutePerGram.
        /// </summary>
        public double CentimolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.CentimolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerMinutePerMicrogram.
        /// </summary>
        public double CentimolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerMinutePerMilligram.
        /// </summary>
        public double CentimolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerSecondPerGram.
        /// </summary>
        public double CentimolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.CentimolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerSecondPerMicrogram.
        /// </summary>
        public double CentimolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in CentimolesPerSecondPerMilligram.
        /// </summary>
        public double CentimolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerHourPerGram.
        /// </summary>
        public double DecamolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.DecamolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerHourPerMicrogram.
        /// </summary>
        public double DecamolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.DecamolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerHourPerMilligram.
        /// </summary>
        public double DecamolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.DecamolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerMinutePerGram.
        /// </summary>
        public double DecamolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.DecamolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerMinutePerMicrogram.
        /// </summary>
        public double DecamolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerMinutePerMilligram.
        /// </summary>
        public double DecamolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerSecondPerGram.
        /// </summary>
        public double DecamolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.DecamolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerSecondPerMicrogram.
        /// </summary>
        public double DecamolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecamolesPerSecondPerMilligram.
        /// </summary>
        public double DecamolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerHourPerGram.
        /// </summary>
        public double DecimolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.DecimolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerHourPerMicrogram.
        /// </summary>
        public double DecimolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.DecimolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerHourPerMilligram.
        /// </summary>
        public double DecimolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.DecimolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerMinutePerGram.
        /// </summary>
        public double DecimolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.DecimolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerMinutePerMicrogram.
        /// </summary>
        public double DecimolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerMinutePerMilligram.
        /// </summary>
        public double DecimolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerSecondPerGram.
        /// </summary>
        public double DecimolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.DecimolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerSecondPerMicrogram.
        /// </summary>
        public double DecimolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in DecimolesPerSecondPerMilligram.
        /// </summary>
        public double DecimolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerHourPerGram.
        /// </summary>
        public double HectomolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.HectomolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerHourPerMicrogram.
        /// </summary>
        public double HectomolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.HectomolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerHourPerMilligram.
        /// </summary>
        public double HectomolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.HectomolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerMinutePerGram.
        /// </summary>
        public double HectomolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.HectomolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerMinutePerMicrogram.
        /// </summary>
        public double HectomolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerMinutePerMilligram.
        /// </summary>
        public double HectomolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerSecondPerGram.
        /// </summary>
        public double HectomolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.HectomolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerSecondPerMicrogram.
        /// </summary>
        public double HectomolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in HectomolesPerSecondPerMilligram.
        /// </summary>
        public double HectomolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerHourPerGram.
        /// </summary>
        public double KilomolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.KilomolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerHourPerMicrogram.
        /// </summary>
        public double KilomolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.KilomolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerHourPerMilligram.
        /// </summary>
        public double KilomolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.KilomolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerMinutePerGram.
        /// </summary>
        public double KilomolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.KilomolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerMinutePerMicrogram.
        /// </summary>
        public double KilomolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerMinutePerMilligram.
        /// </summary>
        public double KilomolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerSecondPerGram.
        /// </summary>
        public double KilomolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.KilomolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerSecondPerMicrogram.
        /// </summary>
        public double KilomolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in KilomolesPerSecondPerMilligram.
        /// </summary>
        public double KilomolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerHourPerGram.
        /// </summary>
        public double MicromolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.MicromolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerHourPerMicrogram.
        /// </summary>
        public double MicromolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.MicromolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerHourPerMilligram.
        /// </summary>
        public double MicromolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.MicromolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerMinutePerGram.
        /// </summary>
        public double MicromolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.MicromolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerMinutePerMicrogram.
        /// </summary>
        public double MicromolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerMinutePerMilligram.
        /// </summary>
        public double MicromolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerSecondPerGram.
        /// </summary>
        public double MicromolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.MicromolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerSecondPerMicrogram.
        /// </summary>
        public double MicromolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MicromolesPerSecondPerMilligram.
        /// </summary>
        public double MicromolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerHourPerGram.
        /// </summary>
        public double MillimolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.MillimolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerHourPerMicrogram.
        /// </summary>
        public double MillimolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.MillimolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerHourPerMilligram.
        /// </summary>
        public double MillimolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.MillimolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerMinutePerGram.
        /// </summary>
        public double MillimolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.MillimolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerMinutePerMicrogram.
        /// </summary>
        public double MillimolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerMinutePerMilligram.
        /// </summary>
        public double MillimolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerSecondPerGram.
        /// </summary>
        public double MillimolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.MillimolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerSecondPerMicrogram.
        /// </summary>
        public double MillimolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MillimolesPerSecondPerMilligram.
        /// </summary>
        public double MillimolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerHourPerGram.
        /// </summary>
        public double MolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.MolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerHourPerMicrogram.
        /// </summary>
        public double MolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.MolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerHourPerMilligram.
        /// </summary>
        public double MolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.MolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerMinutePerGram.
        /// </summary>
        public double MolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.MolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerMinutePerMicrogram.
        /// </summary>
        public double MolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.MolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerMinutePerMilligram.
        /// </summary>
        public double MolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.MolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerSecondPerGram.
        /// </summary>
        public double MolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.MolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerSecondPerMicrogram.
        /// </summary>
        public double MolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.MolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in MolesPerSecondPerMilligram.
        /// </summary>
        public double MolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.MolePerSecondPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerHourPerGram.
        /// </summary>
        public double NanomolesPerHourPerGram => As(MolarMaximumRateOfReactionUnit.NanomolePerHourPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerHourPerMicrogram.
        /// </summary>
        public double NanomolesPerHourPerMicrogram => As(MolarMaximumRateOfReactionUnit.NanomolePerHourPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerHourPerMilligram.
        /// </summary>
        public double NanomolesPerHourPerMilligram => As(MolarMaximumRateOfReactionUnit.NanomolePerHourPerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerMinutePerGram.
        /// </summary>
        public double NanomolesPerMinutePerGram => As(MolarMaximumRateOfReactionUnit.NanomolePerMinutePerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerMinutePerMicrogram.
        /// </summary>
        public double NanomolesPerMinutePerMicrogram => As(MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerMinutePerMilligram.
        /// </summary>
        public double NanomolesPerMinutePerMilligram => As(MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMilligram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerSecondPerGram.
        /// </summary>
        public double NanomolesPerSecondPerGram => As(MolarMaximumRateOfReactionUnit.NanomolePerSecondPerGram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerSecondPerMicrogram.
        /// </summary>
        public double NanomolesPerSecondPerMicrogram => As(MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMicrogram);

        /// <summary>
        ///     Get MolarMaximumRateOfReaction in NanomolesPerSecondPerMilligram.
        /// </summary>
        public double NanomolesPerSecondPerMilligram => As(MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMilligram);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(MolarMaximumRateOfReactionUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(MolarMaximumRateOfReactionUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerHourPerGram(double centimolesperhourpergram)
        {
            double value = (double) centimolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerHourPerMicrogram(double centimolesperhourpermicrogram)
        {
            double value = (double) centimolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerHourPerMilligram(double centimolesperhourpermilligram)
        {
            double value = (double) centimolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerMinutePerGram(double centimolesperminutepergram)
        {
            double value = (double) centimolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerMinutePerMicrogram(double centimolesperminutepermicrogram)
        {
            double value = (double) centimolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerMinutePerMilligram(double centimolesperminutepermilligram)
        {
            double value = (double) centimolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerSecondPerGram(double centimolespersecondpergram)
        {
            double value = (double) centimolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerSecondPerMicrogram(double centimolespersecondpermicrogram)
        {
            double value = (double) centimolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from CentimolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromCentimolesPerSecondPerMilligram(double centimolespersecondpermilligram)
        {
            double value = (double) centimolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerHourPerGram(double decamolesperhourpergram)
        {
            double value = (double) decamolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerHourPerMicrogram(double decamolesperhourpermicrogram)
        {
            double value = (double) decamolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerHourPerMilligram(double decamolesperhourpermilligram)
        {
            double value = (double) decamolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerMinutePerGram(double decamolesperminutepergram)
        {
            double value = (double) decamolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerMinutePerMicrogram(double decamolesperminutepermicrogram)
        {
            double value = (double) decamolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerMinutePerMilligram(double decamolesperminutepermilligram)
        {
            double value = (double) decamolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerSecondPerGram(double decamolespersecondpergram)
        {
            double value = (double) decamolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerSecondPerMicrogram(double decamolespersecondpermicrogram)
        {
            double value = (double) decamolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecamolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecamolesPerSecondPerMilligram(double decamolespersecondpermilligram)
        {
            double value = (double) decamolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerHourPerGram(double decimolesperhourpergram)
        {
            double value = (double) decimolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerHourPerMicrogram(double decimolesperhourpermicrogram)
        {
            double value = (double) decimolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerHourPerMilligram(double decimolesperhourpermilligram)
        {
            double value = (double) decimolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerMinutePerGram(double decimolesperminutepergram)
        {
            double value = (double) decimolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerMinutePerMicrogram(double decimolesperminutepermicrogram)
        {
            double value = (double) decimolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerMinutePerMilligram(double decimolesperminutepermilligram)
        {
            double value = (double) decimolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerSecondPerGram(double decimolespersecondpergram)
        {
            double value = (double) decimolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerSecondPerMicrogram(double decimolespersecondpermicrogram)
        {
            double value = (double) decimolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from DecimolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromDecimolesPerSecondPerMilligram(double decimolespersecondpermilligram)
        {
            double value = (double) decimolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerHourPerGram(double hectomolesperhourpergram)
        {
            double value = (double) hectomolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerHourPerMicrogram(double hectomolesperhourpermicrogram)
        {
            double value = (double) hectomolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerHourPerMilligram(double hectomolesperhourpermilligram)
        {
            double value = (double) hectomolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerMinutePerGram(double hectomolesperminutepergram)
        {
            double value = (double) hectomolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerMinutePerMicrogram(double hectomolesperminutepermicrogram)
        {
            double value = (double) hectomolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerMinutePerMilligram(double hectomolesperminutepermilligram)
        {
            double value = (double) hectomolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerSecondPerGram(double hectomolespersecondpergram)
        {
            double value = (double) hectomolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerSecondPerMicrogram(double hectomolespersecondpermicrogram)
        {
            double value = (double) hectomolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from HectomolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromHectomolesPerSecondPerMilligram(double hectomolespersecondpermilligram)
        {
            double value = (double) hectomolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerHourPerGram(double kilomolesperhourpergram)
        {
            double value = (double) kilomolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerHourPerMicrogram(double kilomolesperhourpermicrogram)
        {
            double value = (double) kilomolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerHourPerMilligram(double kilomolesperhourpermilligram)
        {
            double value = (double) kilomolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerMinutePerGram(double kilomolesperminutepergram)
        {
            double value = (double) kilomolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerMinutePerMicrogram(double kilomolesperminutepermicrogram)
        {
            double value = (double) kilomolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerMinutePerMilligram(double kilomolesperminutepermilligram)
        {
            double value = (double) kilomolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerSecondPerGram(double kilomolespersecondpergram)
        {
            double value = (double) kilomolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerSecondPerMicrogram(double kilomolespersecondpermicrogram)
        {
            double value = (double) kilomolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from KilomolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromKilomolesPerSecondPerMilligram(double kilomolespersecondpermilligram)
        {
            double value = (double) kilomolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerHourPerGram(double micromolesperhourpergram)
        {
            double value = (double) micromolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerHourPerMicrogram(double micromolesperhourpermicrogram)
        {
            double value = (double) micromolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerHourPerMilligram(double micromolesperhourpermilligram)
        {
            double value = (double) micromolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerMinutePerGram(double micromolesperminutepergram)
        {
            double value = (double) micromolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerMinutePerMicrogram(double micromolesperminutepermicrogram)
        {
            double value = (double) micromolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerMinutePerMilligram(double micromolesperminutepermilligram)
        {
            double value = (double) micromolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerSecondPerGram(double micromolespersecondpergram)
        {
            double value = (double) micromolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerSecondPerMicrogram(double micromolespersecondpermicrogram)
        {
            double value = (double) micromolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MicromolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMicromolesPerSecondPerMilligram(double micromolespersecondpermilligram)
        {
            double value = (double) micromolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerHourPerGram(double millimolesperhourpergram)
        {
            double value = (double) millimolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerHourPerMicrogram(double millimolesperhourpermicrogram)
        {
            double value = (double) millimolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerHourPerMilligram(double millimolesperhourpermilligram)
        {
            double value = (double) millimolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerMinutePerGram(double millimolesperminutepergram)
        {
            double value = (double) millimolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerMinutePerMicrogram(double millimolesperminutepermicrogram)
        {
            double value = (double) millimolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerMinutePerMilligram(double millimolesperminutepermilligram)
        {
            double value = (double) millimolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerSecondPerGram(double millimolespersecondpergram)
        {
            double value = (double) millimolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerSecondPerMicrogram(double millimolespersecondpermicrogram)
        {
            double value = (double) millimolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MillimolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMillimolesPerSecondPerMilligram(double millimolespersecondpermilligram)
        {
            double value = (double) millimolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerHourPerGram(double molesperhourpergram)
        {
            double value = (double) molesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerHourPerMicrogram(double molesperhourpermicrogram)
        {
            double value = (double) molesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerHourPerMilligram(double molesperhourpermilligram)
        {
            double value = (double) molesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerMinutePerGram(double molesperminutepergram)
        {
            double value = (double) molesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerMinutePerMicrogram(double molesperminutepermicrogram)
        {
            double value = (double) molesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerMinutePerMilligram(double molesperminutepermilligram)
        {
            double value = (double) molesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerSecondPerGram(double molespersecondpergram)
        {
            double value = (double) molespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerSecondPerMicrogram(double molespersecondpermicrogram)
        {
            double value = (double) molespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from MolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromMolesPerSecondPerMilligram(double molespersecondpermilligram)
        {
            double value = (double) molespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.MolePerSecondPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerHourPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerHourPerGram(double nanomolesperhourpergram)
        {
            double value = (double) nanomolesperhourpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerHourPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerHourPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerHourPerMicrogram(double nanomolesperhourpermicrogram)
        {
            double value = (double) nanomolesperhourpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerHourPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerHourPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerHourPerMilligram(double nanomolesperhourpermilligram)
        {
            double value = (double) nanomolesperhourpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerHourPerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerMinutePerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerMinutePerGram(double nanomolesperminutepergram)
        {
            double value = (double) nanomolesperminutepergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerMinutePerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerMinutePerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerMinutePerMicrogram(double nanomolesperminutepermicrogram)
        {
            double value = (double) nanomolesperminutepermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerMinutePerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerMinutePerMilligram(double nanomolesperminutepermilligram)
        {
            double value = (double) nanomolesperminutepermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMilligram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerSecondPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerSecondPerGram(double nanomolespersecondpergram)
        {
            double value = (double) nanomolespersecondpergram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerSecondPerGram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerSecondPerMicrogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerSecondPerMicrogram(double nanomolespersecondpermicrogram)
        {
            double value = (double) nanomolespersecondpermicrogram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMicrogram);
        }
        /// <summary>
        ///     Get MolarMaximumRateOfReaction from NanomolesPerSecondPerMilligram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MolarMaximumRateOfReaction FromNanomolesPerSecondPerMilligram(double nanomolespersecondpermilligram)
        {
            double value = (double) nanomolespersecondpermilligram;
            return new MolarMaximumRateOfReaction(value, MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMilligram);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarMaximumRateOfReactionUnit" /> to <see cref="MolarMaximumRateOfReaction" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarMaximumRateOfReaction unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static MolarMaximumRateOfReaction From(double value, MolarMaximumRateOfReactionUnit fromUnit)
        {
            return new MolarMaximumRateOfReaction((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MolarMaximumRateOfReaction Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static MolarMaximumRateOfReaction Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<MolarMaximumRateOfReaction, MolarMaximumRateOfReactionUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MolarMaximumRateOfReaction result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out MolarMaximumRateOfReaction result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<MolarMaximumRateOfReaction, MolarMaximumRateOfReactionUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MolarMaximumRateOfReactionUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static MolarMaximumRateOfReactionUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<MolarMaximumRateOfReactionUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out MolarMaximumRateOfReactionUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out MolarMaximumRateOfReactionUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<MolarMaximumRateOfReactionUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is MolarMaximumRateOfReaction objMolarMaximumRateOfReaction)) throw new ArgumentException("Expected type MolarMaximumRateOfReaction.", nameof(obj));

            return CompareTo(objMolarMaximumRateOfReaction);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(MolarMaximumRateOfReaction other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is MolarMaximumRateOfReaction objMolarMaximumRateOfReaction))
                return false;

            return Equals(objMolarMaximumRateOfReaction);
        }

        public bool Equals(MolarMaximumRateOfReaction other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another MolarMaximumRateOfReaction within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(MolarMaximumRateOfReaction other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current MolarMaximumRateOfReaction.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((MolarMaximumRateOfReactionUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MolarMaximumRateOfReactionUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this MolarMaximumRateOfReaction to another MolarMaximumRateOfReaction with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A MolarMaximumRateOfReaction with the specified unit.</returns>
        public MolarMaximumRateOfReaction ToUnit(MolarMaximumRateOfReactionUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new MolarMaximumRateOfReaction(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case MolarMaximumRateOfReactionUnit.CentimolePerHourPerGram: return (_value/3600) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerHourPerMicrogram: return (_value*1e6/3600) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerHourPerMilligram: return (_value*1000/3600) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerMinutePerGram: return (_value/60) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMicrogram: return (_value*1e6/60) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMilligram: return (_value*1000/60) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerSecondPerGram: return (_value) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMicrogram: return (_value*1e6) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMilligram: return (_value*1000) * 1e-2d;
                case MolarMaximumRateOfReactionUnit.DecamolePerHourPerGram: return (_value/3600) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerHourPerMicrogram: return (_value*1e6/3600) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerHourPerMilligram: return (_value*1000/3600) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerMinutePerGram: return (_value/60) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMicrogram: return (_value*1e6/60) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMilligram: return (_value*1000/60) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerSecondPerGram: return (_value) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMicrogram: return (_value*1e6) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMilligram: return (_value*1000) * 1e1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerHourPerGram: return (_value/3600) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerHourPerMicrogram: return (_value*1e6/3600) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerHourPerMilligram: return (_value*1000/3600) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerMinutePerGram: return (_value/60) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMicrogram: return (_value*1e6/60) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMilligram: return (_value*1000/60) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerSecondPerGram: return (_value) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMicrogram: return (_value*1e6) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMilligram: return (_value*1000) * 1e-1d;
                case MolarMaximumRateOfReactionUnit.HectomolePerHourPerGram: return (_value/3600) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerHourPerMicrogram: return (_value*1e6/3600) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerHourPerMilligram: return (_value*1000/3600) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerMinutePerGram: return (_value/60) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMicrogram: return (_value*1e6/60) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMilligram: return (_value*1000/60) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerSecondPerGram: return (_value) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMicrogram: return (_value*1e6) * 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMilligram: return (_value*1000) * 1e2d;
                case MolarMaximumRateOfReactionUnit.KilomolePerHourPerGram: return (_value/3600) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerHourPerMicrogram: return (_value*1e6/3600) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerHourPerMilligram: return (_value*1000/3600) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerMinutePerGram: return (_value/60) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMicrogram: return (_value*1e6/60) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMilligram: return (_value*1000/60) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerSecondPerGram: return (_value) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMicrogram: return (_value*1e6) * 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMilligram: return (_value*1000) * 1e3d;
                case MolarMaximumRateOfReactionUnit.MicromolePerHourPerGram: return (_value/3600) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerHourPerMicrogram: return (_value*1e6/3600) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerHourPerMilligram: return (_value*1000/3600) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerMinutePerGram: return (_value/60) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMicrogram: return (_value*1e6/60) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMilligram: return (_value*1000/60) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerSecondPerGram: return (_value) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMicrogram: return (_value*1e6) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMilligram: return (_value*1000) * 1e-6d;
                case MolarMaximumRateOfReactionUnit.MillimolePerHourPerGram: return (_value/3600) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerHourPerMicrogram: return (_value*1e6/3600) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerHourPerMilligram: return (_value*1000/3600) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerMinutePerGram: return (_value/60) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMicrogram: return (_value*1e6/60) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMilligram: return (_value*1000/60) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerSecondPerGram: return (_value) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMicrogram: return (_value*1e6) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMilligram: return (_value*1000) * 1e-3d;
                case MolarMaximumRateOfReactionUnit.MolePerHourPerGram: return _value/3600;
                case MolarMaximumRateOfReactionUnit.MolePerHourPerMicrogram: return _value*1e6/3600;
                case MolarMaximumRateOfReactionUnit.MolePerHourPerMilligram: return _value*1000/3600;
                case MolarMaximumRateOfReactionUnit.MolePerMinutePerGram: return _value/60;
                case MolarMaximumRateOfReactionUnit.MolePerMinutePerMicrogram: return _value*1e6/60;
                case MolarMaximumRateOfReactionUnit.MolePerMinutePerMilligram: return _value*1000/60;
                case MolarMaximumRateOfReactionUnit.MolePerSecondPerGram: return _value;
                case MolarMaximumRateOfReactionUnit.MolePerSecondPerMicrogram: return _value*1e6;
                case MolarMaximumRateOfReactionUnit.MolePerSecondPerMilligram: return _value*1000;
                case MolarMaximumRateOfReactionUnit.NanomolePerHourPerGram: return (_value/3600) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerHourPerMicrogram: return (_value*1e6/3600) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerHourPerMilligram: return (_value*1000/3600) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerMinutePerGram: return (_value/60) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMicrogram: return (_value*1e6/60) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMilligram: return (_value*1000/60) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerSecondPerGram: return (_value) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMicrogram: return (_value*1e6) * 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMilligram: return (_value*1000) * 1e-9d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(MolarMaximumRateOfReactionUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case MolarMaximumRateOfReactionUnit.CentimolePerHourPerGram: return (baseUnitValue*3600) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerMinutePerGram: return (baseUnitValue*60) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerSecondPerGram: return (baseUnitValue) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.CentimolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e-2d;
                case MolarMaximumRateOfReactionUnit.DecamolePerHourPerGram: return (baseUnitValue*3600) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerMinutePerGram: return (baseUnitValue*60) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerSecondPerGram: return (baseUnitValue) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecamolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerHourPerGram: return (baseUnitValue*3600) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerMinutePerGram: return (baseUnitValue*60) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerSecondPerGram: return (baseUnitValue) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.DecimolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e-1d;
                case MolarMaximumRateOfReactionUnit.HectomolePerHourPerGram: return (baseUnitValue*3600) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerMinutePerGram: return (baseUnitValue*60) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerSecondPerGram: return (baseUnitValue) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e2d;
                case MolarMaximumRateOfReactionUnit.HectomolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e2d;
                case MolarMaximumRateOfReactionUnit.KilomolePerHourPerGram: return (baseUnitValue*3600) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerMinutePerGram: return (baseUnitValue*60) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerSecondPerGram: return (baseUnitValue) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e3d;
                case MolarMaximumRateOfReactionUnit.KilomolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e3d;
                case MolarMaximumRateOfReactionUnit.MicromolePerHourPerGram: return (baseUnitValue*3600) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerMinutePerGram: return (baseUnitValue*60) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerSecondPerGram: return (baseUnitValue) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MicromolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e-6d;
                case MolarMaximumRateOfReactionUnit.MillimolePerHourPerGram: return (baseUnitValue*3600) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerMinutePerGram: return (baseUnitValue*60) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerSecondPerGram: return (baseUnitValue) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MillimolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e-3d;
                case MolarMaximumRateOfReactionUnit.MolePerHourPerGram: return baseUnitValue*3600;
                case MolarMaximumRateOfReactionUnit.MolePerHourPerMicrogram: return baseUnitValue/1e6*3600;
                case MolarMaximumRateOfReactionUnit.MolePerHourPerMilligram: return baseUnitValue/1000*3600;
                case MolarMaximumRateOfReactionUnit.MolePerMinutePerGram: return baseUnitValue*60;
                case MolarMaximumRateOfReactionUnit.MolePerMinutePerMicrogram: return baseUnitValue/1e6*60;
                case MolarMaximumRateOfReactionUnit.MolePerMinutePerMilligram: return baseUnitValue/1000*60;
                case MolarMaximumRateOfReactionUnit.MolePerSecondPerGram: return baseUnitValue;
                case MolarMaximumRateOfReactionUnit.MolePerSecondPerMicrogram: return baseUnitValue/1e6;
                case MolarMaximumRateOfReactionUnit.MolePerSecondPerMilligram: return baseUnitValue/1000;
                case MolarMaximumRateOfReactionUnit.NanomolePerHourPerGram: return (baseUnitValue*3600) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerHourPerMicrogram: return (baseUnitValue/1e6*3600) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerHourPerMilligram: return (baseUnitValue/1000*3600) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerMinutePerGram: return (baseUnitValue*60) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMicrogram: return (baseUnitValue/1e6*60) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerMinutePerMilligram: return (baseUnitValue/1000*60) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerSecondPerGram: return (baseUnitValue) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMicrogram: return (baseUnitValue/1e6) / 1e-9d;
                case MolarMaximumRateOfReactionUnit.NanomolePerSecondPerMilligram: return (baseUnitValue/1000) / 1e-9d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
