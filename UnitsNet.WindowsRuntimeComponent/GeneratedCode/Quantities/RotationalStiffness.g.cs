//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class RotationalStiffness : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly RotationalStiffnessUnit? _unit;

        static RotationalStiffness()
        {
            BaseDimensions = new BaseDimensions(2, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.RotationalStiffness, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit NewtonMeterPerRadian.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public RotationalStiffness()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private RotationalStiffness(double value, RotationalStiffnessUnit unit)
        {
            if(unit == RotationalStiffnessUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of RotationalStiffness, which is NewtonMeterPerRadian. All conversions go via this value.
        /// </summary>
        public static RotationalStiffnessUnit BaseUnit { get; } = RotationalStiffnessUnit.NewtonMeterPerRadian;

        /// <summary>
        /// Represents the largest possible value of RotationalStiffness
        /// </summary>
        public static RotationalStiffness MaxValue { get; } = new RotationalStiffness(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of RotationalStiffness
        /// </summary>
        public static RotationalStiffness MinValue { get; } = new RotationalStiffness(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.RotationalStiffness;

        /// <summary>
        ///     All units of measurement for the RotationalStiffness quantity.
        /// </summary>
        public static RotationalStiffnessUnit[] Units { get; } = Enum.GetValues(typeof(RotationalStiffnessUnit)).Cast<RotationalStiffnessUnit>().Except(new RotationalStiffnessUnit[]{ RotationalStiffnessUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerRadian.
        /// </summary>
        public static RotationalStiffness Zero { get; } = new RotationalStiffness(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public RotationalStiffnessUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => RotationalStiffness.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => RotationalStiffness.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get RotationalStiffness in CentinewtonMeterPerDegrees.
        /// </summary>
        public double CentinewtonMeterPerDegrees => As(RotationalStiffnessUnit.CentinewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in CentinewtonMillimeterPerDegrees.
        /// </summary>
        public double CentinewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in CentinewtonMillimeterPerRadian.
        /// </summary>
        public double CentinewtonMillimeterPerRadian => As(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in DecanewtonMeterPerDegrees.
        /// </summary>
        public double DecanewtonMeterPerDegrees => As(RotationalStiffnessUnit.DecanewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in DecanewtonMillimeterPerDegrees.
        /// </summary>
        public double DecanewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in DecanewtonMillimeterPerRadian.
        /// </summary>
        public double DecanewtonMillimeterPerRadian => As(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in DecinewtonMeterPerDegrees.
        /// </summary>
        public double DecinewtonMeterPerDegrees => As(RotationalStiffnessUnit.DecinewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in DecinewtonMillimeterPerDegrees.
        /// </summary>
        public double DecinewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in DecinewtonMillimeterPerRadian.
        /// </summary>
        public double DecinewtonMillimeterPerRadian => As(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMeterPerDegrees.
        /// </summary>
        public double KilonewtonMeterPerDegrees => As(RotationalStiffnessUnit.KilonewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMetersPerRadian.
        /// </summary>
        public double KilonewtonMetersPerRadian => As(RotationalStiffnessUnit.KilonewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMillimeterPerDegrees.
        /// </summary>
        public double KilonewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in KilonewtonMillimeterPerRadian.
        /// </summary>
        public double KilonewtonMillimeterPerRadian => As(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in KilopoundForceFeetPerDegrees.
        /// </summary>
        public double KilopoundForceFeetPerDegrees => As(RotationalStiffnessUnit.KilopoundForceFootPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMeterPerDegrees.
        /// </summary>
        public double MeganewtonMeterPerDegrees => As(RotationalStiffnessUnit.MeganewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMetersPerRadian.
        /// </summary>
        public double MeganewtonMetersPerRadian => As(RotationalStiffnessUnit.MeganewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMillimeterPerDegrees.
        /// </summary>
        public double MeganewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MeganewtonMillimeterPerRadian.
        /// </summary>
        public double MeganewtonMillimeterPerRadian => As(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in MicronewtonMeterPerDegrees.
        /// </summary>
        public double MicronewtonMeterPerDegrees => As(RotationalStiffnessUnit.MicronewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MicronewtonMillimeterPerDegrees.
        /// </summary>
        public double MicronewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MicronewtonMillimeterPerRadian.
        /// </summary>
        public double MicronewtonMillimeterPerRadian => As(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in MillinewtonMeterPerDegrees.
        /// </summary>
        public double MillinewtonMeterPerDegrees => As(RotationalStiffnessUnit.MillinewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MillinewtonMillimeterPerDegrees.
        /// </summary>
        public double MillinewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in MillinewtonMillimeterPerRadian.
        /// </summary>
        public double MillinewtonMillimeterPerRadian => As(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in NanonewtonMeterPerDegrees.
        /// </summary>
        public double NanonewtonMeterPerDegrees => As(RotationalStiffnessUnit.NanonewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in NanonewtonMillimeterPerDegrees.
        /// </summary>
        public double NanonewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in NanonewtonMillimeterPerRadian.
        /// </summary>
        public double NanonewtonMillimeterPerRadian => As(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMeterPerDegrees.
        /// </summary>
        public double NewtonMeterPerDegrees => As(RotationalStiffnessUnit.NewtonMeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMetersPerRadian.
        /// </summary>
        public double NewtonMetersPerRadian => As(RotationalStiffnessUnit.NewtonMeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMillimeterPerDegrees.
        /// </summary>
        public double NewtonMillimeterPerDegrees => As(RotationalStiffnessUnit.NewtonMillimeterPerDegrees);

        /// <summary>
        ///     Get RotationalStiffness in NewtonMillimeterPerRadian.
        /// </summary>
        public double NewtonMillimeterPerRadian => As(RotationalStiffnessUnit.NewtonMillimeterPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in PoundForceFeetPerRadian.
        /// </summary>
        public double PoundForceFeetPerRadian => As(RotationalStiffnessUnit.PoundForceFeetPerRadian);

        /// <summary>
        ///     Get RotationalStiffness in PoundForceFeetPerDegrees.
        /// </summary>
        public double PoundForceFeetPerDegrees => As(RotationalStiffnessUnit.PoundForceFootPerDegrees);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(RotationalStiffnessUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(RotationalStiffnessUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get RotationalStiffness from CentinewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromCentinewtonMeterPerDegrees(double centinewtonmeterperdegrees)
        {
            double value = (double) centinewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.CentinewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from CentinewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromCentinewtonMillimeterPerDegrees(double centinewtonmillimeterperdegrees)
        {
            double value = (double) centinewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from CentinewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromCentinewtonMillimeterPerRadian(double centinewtonmillimeterperradian)
        {
            double value = (double) centinewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from DecanewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromDecanewtonMeterPerDegrees(double decanewtonmeterperdegrees)
        {
            double value = (double) decanewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.DecanewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from DecanewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromDecanewtonMillimeterPerDegrees(double decanewtonmillimeterperdegrees)
        {
            double value = (double) decanewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from DecanewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromDecanewtonMillimeterPerRadian(double decanewtonmillimeterperradian)
        {
            double value = (double) decanewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from DecinewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromDecinewtonMeterPerDegrees(double decinewtonmeterperdegrees)
        {
            double value = (double) decinewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.DecinewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from DecinewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromDecinewtonMillimeterPerDegrees(double decinewtonmillimeterperdegrees)
        {
            double value = (double) decinewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from DecinewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromDecinewtonMillimeterPerRadian(double decinewtonmillimeterperradian)
        {
            double value = (double) decinewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromKilonewtonMeterPerDegrees(double kilonewtonmeterperdegrees)
        {
            double value = (double) kilonewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.KilonewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromKilonewtonMetersPerRadian(double kilonewtonmetersperradian)
        {
            double value = (double) kilonewtonmetersperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.KilonewtonMeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromKilonewtonMillimeterPerDegrees(double kilonewtonmillimeterperdegrees)
        {
            double value = (double) kilonewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from KilonewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromKilonewtonMillimeterPerRadian(double kilonewtonmillimeterperradian)
        {
            double value = (double) kilonewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from KilopoundForceFeetPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromKilopoundForceFeetPerDegrees(double kilopoundforcefeetperdegrees)
        {
            double value = (double) kilopoundforcefeetperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.KilopoundForceFootPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMeganewtonMeterPerDegrees(double meganewtonmeterperdegrees)
        {
            double value = (double) meganewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MeganewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMeganewtonMetersPerRadian(double meganewtonmetersperradian)
        {
            double value = (double) meganewtonmetersperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MeganewtonMeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMeganewtonMillimeterPerDegrees(double meganewtonmillimeterperdegrees)
        {
            double value = (double) meganewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from MeganewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMeganewtonMillimeterPerRadian(double meganewtonmillimeterperradian)
        {
            double value = (double) meganewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from MicronewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMicronewtonMeterPerDegrees(double micronewtonmeterperdegrees)
        {
            double value = (double) micronewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MicronewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from MicronewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMicronewtonMillimeterPerDegrees(double micronewtonmillimeterperdegrees)
        {
            double value = (double) micronewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from MicronewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMicronewtonMillimeterPerRadian(double micronewtonmillimeterperradian)
        {
            double value = (double) micronewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from MillinewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMillinewtonMeterPerDegrees(double millinewtonmeterperdegrees)
        {
            double value = (double) millinewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MillinewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from MillinewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMillinewtonMillimeterPerDegrees(double millinewtonmillimeterperdegrees)
        {
            double value = (double) millinewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from MillinewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromMillinewtonMillimeterPerRadian(double millinewtonmillimeterperradian)
        {
            double value = (double) millinewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from NanonewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromNanonewtonMeterPerDegrees(double nanonewtonmeterperdegrees)
        {
            double value = (double) nanonewtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.NanonewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from NanonewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromNanonewtonMillimeterPerDegrees(double nanonewtonmillimeterperdegrees)
        {
            double value = (double) nanonewtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from NanonewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromNanonewtonMillimeterPerRadian(double nanonewtonmillimeterperradian)
        {
            double value = (double) nanonewtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from NewtonMeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromNewtonMeterPerDegrees(double newtonmeterperdegrees)
        {
            double value = (double) newtonmeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.NewtonMeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from NewtonMetersPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromNewtonMetersPerRadian(double newtonmetersperradian)
        {
            double value = (double) newtonmetersperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.NewtonMeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from NewtonMillimeterPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromNewtonMillimeterPerDegrees(double newtonmillimeterperdegrees)
        {
            double value = (double) newtonmillimeterperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.NewtonMillimeterPerDegrees);
        }
        /// <summary>
        ///     Get RotationalStiffness from NewtonMillimeterPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromNewtonMillimeterPerRadian(double newtonmillimeterperradian)
        {
            double value = (double) newtonmillimeterperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.NewtonMillimeterPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from PoundForceFeetPerRadian.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromPoundForceFeetPerRadian(double poundforcefeetperradian)
        {
            double value = (double) poundforcefeetperradian;
            return new RotationalStiffness(value, RotationalStiffnessUnit.PoundForceFeetPerRadian);
        }
        /// <summary>
        ///     Get RotationalStiffness from PoundForceFeetPerDegrees.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalStiffness FromPoundForceFeetPerDegrees(double poundforcefeetperdegrees)
        {
            double value = (double) poundforcefeetperdegrees;
            return new RotationalStiffness(value, RotationalStiffnessUnit.PoundForceFootPerDegrees);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RotationalStiffnessUnit" /> to <see cref="RotationalStiffness" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RotationalStiffness unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static RotationalStiffness From(double value, RotationalStiffnessUnit fromUnit)
        {
            return new RotationalStiffness((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static RotationalStiffness Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static RotationalStiffness Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<RotationalStiffness, RotationalStiffnessUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out RotationalStiffness result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out RotationalStiffness result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<RotationalStiffness, RotationalStiffnessUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static RotationalStiffnessUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static RotationalStiffnessUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<RotationalStiffnessUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out RotationalStiffnessUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out RotationalStiffnessUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<RotationalStiffnessUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is RotationalStiffness objRotationalStiffness)) throw new ArgumentException("Expected type RotationalStiffness.", nameof(obj));

            return CompareTo(objRotationalStiffness);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(RotationalStiffness other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is RotationalStiffness objRotationalStiffness))
                return false;

            return Equals(objRotationalStiffness);
        }

        public bool Equals(RotationalStiffness other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another RotationalStiffness within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(RotationalStiffness other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current RotationalStiffness.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((RotationalStiffnessUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(RotationalStiffnessUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this RotationalStiffness to another RotationalStiffness with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A RotationalStiffness with the specified unit.</returns>
        public RotationalStiffness ToUnit(RotationalStiffnessUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new RotationalStiffness(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case RotationalStiffnessUnit.CentinewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerRadian: return (_value*0.001) * 1e-2d;
                case RotationalStiffnessUnit.DecanewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerRadian: return (_value*0.001) * 1e1d;
                case RotationalStiffnessUnit.DecinewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerRadian: return (_value*0.001) * 1e-1d;
                case RotationalStiffnessUnit.KilonewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e3d;
                case RotationalStiffnessUnit.KilonewtonMeterPerRadian: return (_value) * 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerRadian: return (_value*0.001) * 1e3d;
                case RotationalStiffnessUnit.KilopoundForceFootPerDegrees: return _value*77682.6;
                case RotationalStiffnessUnit.MeganewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e6d;
                case RotationalStiffnessUnit.MeganewtonMeterPerRadian: return (_value) * 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerRadian: return (_value*0.001) * 1e6d;
                case RotationalStiffnessUnit.MicronewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerRadian: return (_value*0.001) * 1e-6d;
                case RotationalStiffnessUnit.MillinewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerRadian: return (_value*0.001) * 1e-3d;
                case RotationalStiffnessUnit.NanonewtonMeterPerDegrees: return (_value*(180/Math.PI)) * 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees: return (_value*180/Math.PI*0.001) * 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerRadian: return (_value*0.001) * 1e-9d;
                case RotationalStiffnessUnit.NewtonMeterPerDegrees: return _value*(180/Math.PI);
                case RotationalStiffnessUnit.NewtonMeterPerRadian: return _value;
                case RotationalStiffnessUnit.NewtonMillimeterPerDegrees: return _value*180/Math.PI*0.001;
                case RotationalStiffnessUnit.NewtonMillimeterPerRadian: return _value*0.001;
                case RotationalStiffnessUnit.PoundForceFeetPerRadian: return _value*1.3558179483314;
                case RotationalStiffnessUnit.PoundForceFootPerDegrees: return _value*77.6826;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(RotationalStiffnessUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case RotationalStiffnessUnit.CentinewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e-2d;
                case RotationalStiffnessUnit.CentinewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-2d;
                case RotationalStiffnessUnit.DecanewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e1d;
                case RotationalStiffnessUnit.DecanewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e1d;
                case RotationalStiffnessUnit.DecinewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e-1d;
                case RotationalStiffnessUnit.DecinewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-1d;
                case RotationalStiffnessUnit.KilonewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e3d;
                case RotationalStiffnessUnit.KilonewtonMeterPerRadian: return (baseUnitValue) / 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e3d;
                case RotationalStiffnessUnit.KilonewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e3d;
                case RotationalStiffnessUnit.KilopoundForceFootPerDegrees: return baseUnitValue/77682.6;
                case RotationalStiffnessUnit.MeganewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e6d;
                case RotationalStiffnessUnit.MeganewtonMeterPerRadian: return (baseUnitValue) / 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e6d;
                case RotationalStiffnessUnit.MeganewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e6d;
                case RotationalStiffnessUnit.MicronewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e-6d;
                case RotationalStiffnessUnit.MicronewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-6d;
                case RotationalStiffnessUnit.MillinewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e-3d;
                case RotationalStiffnessUnit.MillinewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-3d;
                case RotationalStiffnessUnit.NanonewtonMeterPerDegrees: return (baseUnitValue/(180/Math.PI)) / 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees: return (baseUnitValue/180*Math.PI*1000) / 1e-9d;
                case RotationalStiffnessUnit.NanonewtonMillimeterPerRadian: return (baseUnitValue*1000) / 1e-9d;
                case RotationalStiffnessUnit.NewtonMeterPerDegrees: return baseUnitValue/(180/Math.PI);
                case RotationalStiffnessUnit.NewtonMeterPerRadian: return baseUnitValue;
                case RotationalStiffnessUnit.NewtonMillimeterPerDegrees: return baseUnitValue/180*Math.PI*1000;
                case RotationalStiffnessUnit.NewtonMillimeterPerRadian: return baseUnitValue*1000;
                case RotationalStiffnessUnit.PoundForceFeetPerRadian: return baseUnitValue/1.3558179483314;
                case RotationalStiffnessUnit.PoundForceFootPerDegrees: return baseUnitValue/77.6826;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
