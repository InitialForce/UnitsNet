//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Luminance is a photometric measure of the luminous intensity per unit area of light travelling in a given direction.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Luminance
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Luminance : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LuminanceUnit? _unit;

        static Luminance()
        {
            BaseDimensions = new BaseDimensions(-2, 0, 0, 0, 0, 0, 1);
            BaseUnit = LuminanceUnit.CandelaPerSquareMeter;
            MaxValue = new Luminance(double.MaxValue, BaseUnit);
            MinValue = new Luminance(double.MinValue, BaseUnit);
            QuantityType = QuantityType.Luminance;
            Units = Enum.GetValues(typeof(LuminanceUnit)).Cast<LuminanceUnit>().Except(new LuminanceUnit[]{ LuminanceUnit.Undefined }).ToArray();
            Zero = new Luminance(0, BaseUnit);
            Info = new QuantityInfo(QuantityType.Luminance, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit CandelaPerSquareMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Luminance()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Luminance(double value, LuminanceUnit unit)
        {
            if (unit == LuminanceUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Luminance, which is CandelaPerSquareMeter. All conversions go via this value.
        /// </summary>
        public static LuminanceUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of Luminance
        /// </summary>
        public static Luminance MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of Luminance
        /// </summary>
        public static Luminance MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the Luminance quantity.
        /// </summary>
        public static LuminanceUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CandelaPerSquareMeter.
        /// </summary>
        public static Luminance Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public LuminanceUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => Luminance.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Luminance.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareFoot"/>
        /// </summary>
        public double CandelasPerSquareFoot => As(LuminanceUnit.CandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareInch"/>
        /// </summary>
        public double CandelasPerSquareInch => As(LuminanceUnit.CandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareMeter"/>
        /// </summary>
        public double CandelasPerSquareMeter => As(LuminanceUnit.CandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecacandelaPerSquareFoot"/>
        /// </summary>
        public double DecacandelasPerSquareFoot => As(LuminanceUnit.DecacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecacandelaPerSquareInch"/>
        /// </summary>
        public double DecacandelasPerSquareInch => As(LuminanceUnit.DecacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecacandelaPerSquareMeter"/>
        /// </summary>
        public double DecacandelasPerSquareMeter => As(LuminanceUnit.DecacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecicandelaPerSquareFoot"/>
        /// </summary>
        public double DecicandelasPerSquareFoot => As(LuminanceUnit.DecicandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecicandelaPerSquareInch"/>
        /// </summary>
        public double DecicandelasPerSquareInch => As(LuminanceUnit.DecicandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecicandelaPerSquareMeter"/>
        /// </summary>
        public double DecicandelasPerSquareMeter => As(LuminanceUnit.DecicandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.FemtocandelaPerSquareFoot"/>
        /// </summary>
        public double FemtocandelasPerSquareFoot => As(LuminanceUnit.FemtocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.FemtocandelaPerSquareInch"/>
        /// </summary>
        public double FemtocandelasPerSquareInch => As(LuminanceUnit.FemtocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.FemtocandelaPerSquareMeter"/>
        /// </summary>
        public double FemtocandelasPerSquareMeter => As(LuminanceUnit.FemtocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.GigacandelaPerSquareFoot"/>
        /// </summary>
        public double GigacandelasPerSquareFoot => As(LuminanceUnit.GigacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.GigacandelaPerSquareInch"/>
        /// </summary>
        public double GigacandelasPerSquareInch => As(LuminanceUnit.GigacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.GigacandelaPerSquareMeter"/>
        /// </summary>
        public double GigacandelasPerSquareMeter => As(LuminanceUnit.GigacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.KilocandelaPerSquareFoot"/>
        /// </summary>
        public double KilocandelasPerSquareFoot => As(LuminanceUnit.KilocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.KilocandelaPerSquareInch"/>
        /// </summary>
        public double KilocandelasPerSquareInch => As(LuminanceUnit.KilocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.KilocandelaPerSquareMeter"/>
        /// </summary>
        public double KilocandelasPerSquareMeter => As(LuminanceUnit.KilocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MegacandelaPerSquareFoot"/>
        /// </summary>
        public double MegacandelasPerSquareFoot => As(LuminanceUnit.MegacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MegacandelaPerSquareInch"/>
        /// </summary>
        public double MegacandelasPerSquareInch => As(LuminanceUnit.MegacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MegacandelaPerSquareMeter"/>
        /// </summary>
        public double MegacandelasPerSquareMeter => As(LuminanceUnit.MegacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MicrocandelaPerSquareFoot"/>
        /// </summary>
        public double MicrocandelasPerSquareFoot => As(LuminanceUnit.MicrocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MicrocandelaPerSquareInch"/>
        /// </summary>
        public double MicrocandelasPerSquareInch => As(LuminanceUnit.MicrocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MicrocandelaPerSquareMeter"/>
        /// </summary>
        public double MicrocandelasPerSquareMeter => As(LuminanceUnit.MicrocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MillicandelaPerSquareFoot"/>
        /// </summary>
        public double MillicandelasPerSquareFoot => As(LuminanceUnit.MillicandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MillicandelaPerSquareInch"/>
        /// </summary>
        public double MillicandelasPerSquareInch => As(LuminanceUnit.MillicandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MillicandelaPerSquareMeter"/>
        /// </summary>
        public double MillicandelasPerSquareMeter => As(LuminanceUnit.MillicandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.NanocandelaPerSquareFoot"/>
        /// </summary>
        public double NanocandelasPerSquareFoot => As(LuminanceUnit.NanocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.NanocandelaPerSquareInch"/>
        /// </summary>
        public double NanocandelasPerSquareInch => As(LuminanceUnit.NanocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.NanocandelaPerSquareMeter"/>
        /// </summary>
        public double NanocandelasPerSquareMeter => As(LuminanceUnit.NanocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.Nit"/>
        /// </summary>
        public double Nits => As(LuminanceUnit.Nit);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PetacandelaPerSquareFoot"/>
        /// </summary>
        public double PetacandelasPerSquareFoot => As(LuminanceUnit.PetacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PetacandelaPerSquareInch"/>
        /// </summary>
        public double PetacandelasPerSquareInch => As(LuminanceUnit.PetacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PetacandelaPerSquareMeter"/>
        /// </summary>
        public double PetacandelasPerSquareMeter => As(LuminanceUnit.PetacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PicocandelaPerSquareFoot"/>
        /// </summary>
        public double PicocandelasPerSquareFoot => As(LuminanceUnit.PicocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PicocandelaPerSquareInch"/>
        /// </summary>
        public double PicocandelasPerSquareInch => As(LuminanceUnit.PicocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PicocandelaPerSquareMeter"/>
        /// </summary>
        public double PicocandelasPerSquareMeter => As(LuminanceUnit.PicocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.TeracandelaPerSquareFoot"/>
        /// </summary>
        public double TeracandelasPerSquareFoot => As(LuminanceUnit.TeracandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.TeracandelaPerSquareInch"/>
        /// </summary>
        public double TeracandelasPerSquareInch => As(LuminanceUnit.TeracandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.TeracandelaPerSquareMeter"/>
        /// </summary>
        public double TeracandelasPerSquareMeter => As(LuminanceUnit.TeracandelaPerSquareMeter);

        #endregion

        #region Static Methods

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.CandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"Cd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.CandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"Cd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.CandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"Cd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"daCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"daCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"daCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecicandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"dCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecicandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"dCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecicandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"dCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.FemtocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"fCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.FemtocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"fCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.FemtocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"fCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.GigacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"GCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.GigacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"GCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.GigacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"GCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.KilocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"kCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.KilocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"kCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.KilocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"kCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MegacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"MCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MegacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"MCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MegacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"MCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MicrocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"µCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MicrocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"µCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MicrocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"µCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MillicandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"mCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MillicandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"mCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MillicandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"mCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.NanocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"nCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.NanocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"nCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.NanocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"nCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.Nit, new CultureInfo("en-US"), false, true, new string[]{"L⊙"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PetacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"PCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PetacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"PCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PetacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"PCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PicocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"pCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PicocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"pCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PicocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"pCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.TeracandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"TCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.TeracandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"TCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.TeracandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"TCd"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(LuminanceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(LuminanceUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromCandelasPerSquareFoot(double candelaspersquarefoot)
        {
            double value = (double) candelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.CandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromCandelasPerSquareInch(double candelaspersquareinch)
        {
            double value = (double) candelaspersquareinch;
            return new Luminance(value, LuminanceUnit.CandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromCandelasPerSquareMeter(double candelaspersquaremeter)
        {
            double value = (double) candelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.CandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromDecacandelasPerSquareFoot(double decacandelaspersquarefoot)
        {
            double value = (double) decacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.DecacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromDecacandelasPerSquareInch(double decacandelaspersquareinch)
        {
            double value = (double) decacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.DecacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromDecacandelasPerSquareMeter(double decacandelaspersquaremeter)
        {
            double value = (double) decacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.DecacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecicandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromDecicandelasPerSquareFoot(double decicandelaspersquarefoot)
        {
            double value = (double) decicandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.DecicandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecicandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromDecicandelasPerSquareInch(double decicandelaspersquareinch)
        {
            double value = (double) decicandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.DecicandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecicandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromDecicandelasPerSquareMeter(double decicandelaspersquaremeter)
        {
            double value = (double) decicandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.DecicandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.FemtocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromFemtocandelasPerSquareFoot(double femtocandelaspersquarefoot)
        {
            double value = (double) femtocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.FemtocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.FemtocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromFemtocandelasPerSquareInch(double femtocandelaspersquareinch)
        {
            double value = (double) femtocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.FemtocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.FemtocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromFemtocandelasPerSquareMeter(double femtocandelaspersquaremeter)
        {
            double value = (double) femtocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.FemtocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.GigacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromGigacandelasPerSquareFoot(double gigacandelaspersquarefoot)
        {
            double value = (double) gigacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.GigacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.GigacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromGigacandelasPerSquareInch(double gigacandelaspersquareinch)
        {
            double value = (double) gigacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.GigacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.GigacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromGigacandelasPerSquareMeter(double gigacandelaspersquaremeter)
        {
            double value = (double) gigacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.GigacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.KilocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromKilocandelasPerSquareFoot(double kilocandelaspersquarefoot)
        {
            double value = (double) kilocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.KilocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.KilocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromKilocandelasPerSquareInch(double kilocandelaspersquareinch)
        {
            double value = (double) kilocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.KilocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.KilocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromKilocandelasPerSquareMeter(double kilocandelaspersquaremeter)
        {
            double value = (double) kilocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.KilocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MegacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMegacandelasPerSquareFoot(double megacandelaspersquarefoot)
        {
            double value = (double) megacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.MegacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MegacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMegacandelasPerSquareInch(double megacandelaspersquareinch)
        {
            double value = (double) megacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.MegacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MegacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMegacandelasPerSquareMeter(double megacandelaspersquaremeter)
        {
            double value = (double) megacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.MegacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MicrocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMicrocandelasPerSquareFoot(double microcandelaspersquarefoot)
        {
            double value = (double) microcandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.MicrocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MicrocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMicrocandelasPerSquareInch(double microcandelaspersquareinch)
        {
            double value = (double) microcandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.MicrocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MicrocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMicrocandelasPerSquareMeter(double microcandelaspersquaremeter)
        {
            double value = (double) microcandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.MicrocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MillicandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMillicandelasPerSquareFoot(double millicandelaspersquarefoot)
        {
            double value = (double) millicandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.MillicandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MillicandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMillicandelasPerSquareInch(double millicandelaspersquareinch)
        {
            double value = (double) millicandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.MillicandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MillicandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromMillicandelasPerSquareMeter(double millicandelaspersquaremeter)
        {
            double value = (double) millicandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.MillicandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.NanocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromNanocandelasPerSquareFoot(double nanocandelaspersquarefoot)
        {
            double value = (double) nanocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.NanocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.NanocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromNanocandelasPerSquareInch(double nanocandelaspersquareinch)
        {
            double value = (double) nanocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.NanocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.NanocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromNanocandelasPerSquareMeter(double nanocandelaspersquaremeter)
        {
            double value = (double) nanocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.NanocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.Nit"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromNits(double nits)
        {
            double value = (double) nits;
            return new Luminance(value, LuminanceUnit.Nit);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PetacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromPetacandelasPerSquareFoot(double petacandelaspersquarefoot)
        {
            double value = (double) petacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.PetacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PetacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromPetacandelasPerSquareInch(double petacandelaspersquareinch)
        {
            double value = (double) petacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.PetacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PetacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromPetacandelasPerSquareMeter(double petacandelaspersquaremeter)
        {
            double value = (double) petacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.PetacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PicocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromPicocandelasPerSquareFoot(double picocandelaspersquarefoot)
        {
            double value = (double) picocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.PicocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PicocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromPicocandelasPerSquareInch(double picocandelaspersquareinch)
        {
            double value = (double) picocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.PicocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PicocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromPicocandelasPerSquareMeter(double picocandelaspersquaremeter)
        {
            double value = (double) picocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.PicocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.TeracandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromTeracandelasPerSquareFoot(double teracandelaspersquarefoot)
        {
            double value = (double) teracandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.TeracandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.TeracandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromTeracandelasPerSquareInch(double teracandelaspersquareinch)
        {
            double value = (double) teracandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.TeracandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.TeracandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Luminance FromTeracandelasPerSquareMeter(double teracandelaspersquaremeter)
        {
            double value = (double) teracandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.TeracandelaPerSquareMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LuminanceUnit" /> to <see cref="Luminance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Luminance unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Luminance From(double value, LuminanceUnit fromUnit)
        {
            return new Luminance((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Luminance Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Luminance Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Luminance, LuminanceUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Luminance result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Luminance result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Luminance, LuminanceUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LuminanceUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static LuminanceUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<LuminanceUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out LuminanceUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out LuminanceUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<LuminanceUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Luminance objLuminance)) throw new ArgumentException("Expected type Luminance.", nameof(obj));

            return CompareTo(objLuminance);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Luminance other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is Luminance objLuminance))
                return false;

            return Equals(objLuminance);
        }

        public bool Equals(Luminance other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Luminance within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Luminance other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Luminance.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((LuminanceUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(LuminanceUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Luminance to another Luminance with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Luminance with the specified unit.</returns>
        public Luminance ToUnit(LuminanceUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Luminance(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case LuminanceUnit.CandelaPerSquareFoot: return _value* 9.290304e-2;
                case LuminanceUnit.CandelaPerSquareInch: return _value* 0.00064516;
                case LuminanceUnit.CandelaPerSquareMeter: return _value;
                case LuminanceUnit.DecacandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e1d;
                case LuminanceUnit.DecacandelaPerSquareInch: return (_value* 0.00064516) * 1e1d;
                case LuminanceUnit.DecacandelaPerSquareMeter: return (_value) * 1e1d;
                case LuminanceUnit.DecicandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e-1d;
                case LuminanceUnit.DecicandelaPerSquareInch: return (_value* 0.00064516) * 1e-1d;
                case LuminanceUnit.DecicandelaPerSquareMeter: return (_value) * 1e-1d;
                case LuminanceUnit.FemtocandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e-15d;
                case LuminanceUnit.FemtocandelaPerSquareInch: return (_value* 0.00064516) * 1e-15d;
                case LuminanceUnit.FemtocandelaPerSquareMeter: return (_value) * 1e-15d;
                case LuminanceUnit.GigacandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e9d;
                case LuminanceUnit.GigacandelaPerSquareInch: return (_value* 0.00064516) * 1e9d;
                case LuminanceUnit.GigacandelaPerSquareMeter: return (_value) * 1e9d;
                case LuminanceUnit.KilocandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e3d;
                case LuminanceUnit.KilocandelaPerSquareInch: return (_value* 0.00064516) * 1e3d;
                case LuminanceUnit.KilocandelaPerSquareMeter: return (_value) * 1e3d;
                case LuminanceUnit.MegacandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e6d;
                case LuminanceUnit.MegacandelaPerSquareInch: return (_value* 0.00064516) * 1e6d;
                case LuminanceUnit.MegacandelaPerSquareMeter: return (_value) * 1e6d;
                case LuminanceUnit.MicrocandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e-6d;
                case LuminanceUnit.MicrocandelaPerSquareInch: return (_value* 0.00064516) * 1e-6d;
                case LuminanceUnit.MicrocandelaPerSquareMeter: return (_value) * 1e-6d;
                case LuminanceUnit.MillicandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e-3d;
                case LuminanceUnit.MillicandelaPerSquareInch: return (_value* 0.00064516) * 1e-3d;
                case LuminanceUnit.MillicandelaPerSquareMeter: return (_value) * 1e-3d;
                case LuminanceUnit.NanocandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e-9d;
                case LuminanceUnit.NanocandelaPerSquareInch: return (_value* 0.00064516) * 1e-9d;
                case LuminanceUnit.NanocandelaPerSquareMeter: return (_value) * 1e-9d;
                case LuminanceUnit.Nit: return _value;
                case LuminanceUnit.PetacandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e15d;
                case LuminanceUnit.PetacandelaPerSquareInch: return (_value* 0.00064516) * 1e15d;
                case LuminanceUnit.PetacandelaPerSquareMeter: return (_value) * 1e15d;
                case LuminanceUnit.PicocandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e-12d;
                case LuminanceUnit.PicocandelaPerSquareInch: return (_value* 0.00064516) * 1e-12d;
                case LuminanceUnit.PicocandelaPerSquareMeter: return (_value) * 1e-12d;
                case LuminanceUnit.TeracandelaPerSquareFoot: return (_value* 9.290304e-2) * 1e12d;
                case LuminanceUnit.TeracandelaPerSquareInch: return (_value* 0.00064516) * 1e12d;
                case LuminanceUnit.TeracandelaPerSquareMeter: return (_value) * 1e12d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(LuminanceUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case LuminanceUnit.CandelaPerSquareFoot: return baseUnitValue/ 9.290304e-2;
                case LuminanceUnit.CandelaPerSquareInch: return baseUnitValue/ 0.00064516;
                case LuminanceUnit.CandelaPerSquareMeter: return baseUnitValue;
                case LuminanceUnit.DecacandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e1d;
                case LuminanceUnit.DecacandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e1d;
                case LuminanceUnit.DecacandelaPerSquareMeter: return (baseUnitValue) / 1e1d;
                case LuminanceUnit.DecicandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e-1d;
                case LuminanceUnit.DecicandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e-1d;
                case LuminanceUnit.DecicandelaPerSquareMeter: return (baseUnitValue) / 1e-1d;
                case LuminanceUnit.FemtocandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e-15d;
                case LuminanceUnit.FemtocandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e-15d;
                case LuminanceUnit.FemtocandelaPerSquareMeter: return (baseUnitValue) / 1e-15d;
                case LuminanceUnit.GigacandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e9d;
                case LuminanceUnit.GigacandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e9d;
                case LuminanceUnit.GigacandelaPerSquareMeter: return (baseUnitValue) / 1e9d;
                case LuminanceUnit.KilocandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e3d;
                case LuminanceUnit.KilocandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e3d;
                case LuminanceUnit.KilocandelaPerSquareMeter: return (baseUnitValue) / 1e3d;
                case LuminanceUnit.MegacandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e6d;
                case LuminanceUnit.MegacandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e6d;
                case LuminanceUnit.MegacandelaPerSquareMeter: return (baseUnitValue) / 1e6d;
                case LuminanceUnit.MicrocandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e-6d;
                case LuminanceUnit.MicrocandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e-6d;
                case LuminanceUnit.MicrocandelaPerSquareMeter: return (baseUnitValue) / 1e-6d;
                case LuminanceUnit.MillicandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e-3d;
                case LuminanceUnit.MillicandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e-3d;
                case LuminanceUnit.MillicandelaPerSquareMeter: return (baseUnitValue) / 1e-3d;
                case LuminanceUnit.NanocandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e-9d;
                case LuminanceUnit.NanocandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e-9d;
                case LuminanceUnit.NanocandelaPerSquareMeter: return (baseUnitValue) / 1e-9d;
                case LuminanceUnit.Nit: return baseUnitValue;
                case LuminanceUnit.PetacandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e15d;
                case LuminanceUnit.PetacandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e15d;
                case LuminanceUnit.PetacandelaPerSquareMeter: return (baseUnitValue) / 1e15d;
                case LuminanceUnit.PicocandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e-12d;
                case LuminanceUnit.PicocandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e-12d;
                case LuminanceUnit.PicocandelaPerSquareMeter: return (baseUnitValue) / 1e-12d;
                case LuminanceUnit.TeracandelaPerSquareFoot: return (baseUnitValue/ 9.290304e-2) / 1e12d;
                case LuminanceUnit.TeracandelaPerSquareInch: return (baseUnitValue/ 0.00064516) / 1e12d;
                case LuminanceUnit.TeracandelaPerSquareMeter: return (baseUnitValue) / 1e12d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
