//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Duration
#else
    public partial struct Duration : IComparable, IComparable<Duration>
#endif
    {
        /// <summary>
        ///     Base unit of Duration.
        /// </summary>
        private readonly double _seconds;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Duration() : this(0)
        {
        }
#endif

        public Duration(double seconds)
        {
            _seconds = Convert.ToDouble(seconds);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        Duration(long seconds)
        {
            _seconds = Convert.ToDouble(seconds);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        Duration(decimal seconds)
        {
            _seconds = Convert.ToDouble(seconds);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Duration;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static DurationUnit BaseUnit
        {
            get { return DurationUnit.Second; }
        }

        /// <summary>
        ///     All units of measurement for the Duration quantity.
        /// </summary>
        public static DurationUnit[] Units { get; } = Enum.GetValues(typeof(DurationUnit)).Cast<DurationUnit>().ToArray();

        /// <summary>
        ///     Get Duration in Days.
        /// </summary>
        public double Days
        {
            get { return _seconds/(24*3600); }
        }

        /// <summary>
        ///     Get Duration in Hours.
        /// </summary>
        public double Hours
        {
            get { return _seconds/3600; }
        }

        /// <summary>
        ///     Get Duration in Microseconds.
        /// </summary>
        public double Microseconds
        {
            get { return _seconds*1e6; }
        }

        /// <summary>
        ///     Get Duration in Milliseconds.
        /// </summary>
        public double Milliseconds
        {
            get { return _seconds*1e3; }
        }

        /// <summary>
        ///     Get Duration in Minutes.
        /// </summary>
        public double Minutes
        {
            get { return _seconds/60; }
        }

        /// <summary>
        ///     Get Duration in Months.
        /// </summary>
        public double Months
        {
            get { return _seconds/(30*24*3600); }
        }

        /// <summary>
        ///     Get Duration in Nanoseconds.
        /// </summary>
        public double Nanoseconds
        {
            get { return _seconds*1e9; }
        }

        /// <summary>
        ///     Get Duration in Seconds.
        /// </summary>
        public double Seconds
        {
            get { return _seconds; }
        }

        /// <summary>
        ///     Get Duration in Weeks.
        /// </summary>
        public double Weeks
        {
            get { return _seconds/(7*24*3600); }
        }

        /// <summary>
        ///     Get Duration in Years.
        /// </summary>
        public double Years
        {
            get { return _seconds/(365*24*3600); }
        }

        #endregion

        #region Static

        public static Duration Zero
        {
            get { return new Duration(); }
        }

        /// <summary>
        ///     Get Duration from Days.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromDays(double days)
        {
            return new Duration(days*24*3600);
        }

        /// <summary>
        ///     Get Duration from Days.
        /// </summary>
        public static Duration FromDays(int days)
        {
            return new Duration(days*24*3600);
        }

        /// <summary>
        ///     Get Duration from Days.
        /// </summary>
        public static Duration FromDays(long days)
        {
            return new Duration(days*24*3600);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Days of type decimal.
        /// </summary>
        public static Duration FromDays(decimal days)
        {
            return new Duration(Convert.ToDouble(days)*24*3600);
        }
#endif

        /// <summary>
        ///     Get Duration from Hours.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromHours(double hours)
        {
            return new Duration(hours*3600);
        }

        /// <summary>
        ///     Get Duration from Hours.
        /// </summary>
        public static Duration FromHours(int hours)
        {
            return new Duration(hours*3600);
        }

        /// <summary>
        ///     Get Duration from Hours.
        /// </summary>
        public static Duration FromHours(long hours)
        {
            return new Duration(hours*3600);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Hours of type decimal.
        /// </summary>
        public static Duration FromHours(decimal hours)
        {
            return new Duration(Convert.ToDouble(hours)*3600);
        }
#endif

        /// <summary>
        ///     Get Duration from Microseconds.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromMicroseconds(double microseconds)
        {
            return new Duration(microseconds/1e6);
        }

        /// <summary>
        ///     Get Duration from Microseconds.
        /// </summary>
        public static Duration FromMicroseconds(int microseconds)
        {
            return new Duration(microseconds/1e6);
        }

        /// <summary>
        ///     Get Duration from Microseconds.
        /// </summary>
        public static Duration FromMicroseconds(long microseconds)
        {
            return new Duration(microseconds/1e6);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Microseconds of type decimal.
        /// </summary>
        public static Duration FromMicroseconds(decimal microseconds)
        {
            return new Duration(Convert.ToDouble(microseconds)/1e6);
        }
#endif

        /// <summary>
        ///     Get Duration from Milliseconds.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromMilliseconds(double milliseconds)
        {
            return new Duration(milliseconds/1e3);
        }

        /// <summary>
        ///     Get Duration from Milliseconds.
        /// </summary>
        public static Duration FromMilliseconds(int milliseconds)
        {
            return new Duration(milliseconds/1e3);
        }

        /// <summary>
        ///     Get Duration from Milliseconds.
        /// </summary>
        public static Duration FromMilliseconds(long milliseconds)
        {
            return new Duration(milliseconds/1e3);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Milliseconds of type decimal.
        /// </summary>
        public static Duration FromMilliseconds(decimal milliseconds)
        {
            return new Duration(Convert.ToDouble(milliseconds)/1e3);
        }
#endif

        /// <summary>
        ///     Get Duration from Minutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromMinutes(double minutes)
        {
            return new Duration(minutes*60);
        }

        /// <summary>
        ///     Get Duration from Minutes.
        /// </summary>
        public static Duration FromMinutes(int minutes)
        {
            return new Duration(minutes*60);
        }

        /// <summary>
        ///     Get Duration from Minutes.
        /// </summary>
        public static Duration FromMinutes(long minutes)
        {
            return new Duration(minutes*60);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Minutes of type decimal.
        /// </summary>
        public static Duration FromMinutes(decimal minutes)
        {
            return new Duration(Convert.ToDouble(minutes)*60);
        }
#endif

        /// <summary>
        ///     Get Duration from Months.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromMonths(double months)
        {
            return new Duration(months*30*24*3600);
        }

        /// <summary>
        ///     Get Duration from Months.
        /// </summary>
        public static Duration FromMonths(int months)
        {
            return new Duration(months*30*24*3600);
        }

        /// <summary>
        ///     Get Duration from Months.
        /// </summary>
        public static Duration FromMonths(long months)
        {
            return new Duration(months*30*24*3600);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Months of type decimal.
        /// </summary>
        public static Duration FromMonths(decimal months)
        {
            return new Duration(Convert.ToDouble(months)*30*24*3600);
        }
#endif

        /// <summary>
        ///     Get Duration from Nanoseconds.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromNanoseconds(double nanoseconds)
        {
            return new Duration(nanoseconds/1e9);
        }

        /// <summary>
        ///     Get Duration from Nanoseconds.
        /// </summary>
        public static Duration FromNanoseconds(int nanoseconds)
        {
            return new Duration(nanoseconds/1e9);
        }

        /// <summary>
        ///     Get Duration from Nanoseconds.
        /// </summary>
        public static Duration FromNanoseconds(long nanoseconds)
        {
            return new Duration(nanoseconds/1e9);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Nanoseconds of type decimal.
        /// </summary>
        public static Duration FromNanoseconds(decimal nanoseconds)
        {
            return new Duration(Convert.ToDouble(nanoseconds)/1e9);
        }
#endif

        /// <summary>
        ///     Get Duration from Seconds.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromSeconds(double seconds)
        {
            return new Duration(seconds);
        }

        /// <summary>
        ///     Get Duration from Seconds.
        /// </summary>
        public static Duration FromSeconds(int seconds)
        {
            return new Duration(seconds);
        }

        /// <summary>
        ///     Get Duration from Seconds.
        /// </summary>
        public static Duration FromSeconds(long seconds)
        {
            return new Duration(seconds);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Seconds of type decimal.
        /// </summary>
        public static Duration FromSeconds(decimal seconds)
        {
            return new Duration(Convert.ToDouble(seconds));
        }
#endif

        /// <summary>
        ///     Get Duration from Weeks.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromWeeks(double weeks)
        {
            return new Duration(weeks*7*24*3600);
        }

        /// <summary>
        ///     Get Duration from Weeks.
        /// </summary>
        public static Duration FromWeeks(int weeks)
        {
            return new Duration(weeks*7*24*3600);
        }

        /// <summary>
        ///     Get Duration from Weeks.
        /// </summary>
        public static Duration FromWeeks(long weeks)
        {
            return new Duration(weeks*7*24*3600);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Weeks of type decimal.
        /// </summary>
        public static Duration FromWeeks(decimal weeks)
        {
            return new Duration(Convert.ToDouble(weeks)*7*24*3600);
        }
#endif

        /// <summary>
        ///     Get Duration from Years.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Duration FromYears(double years)
        {
            return new Duration(years*365*24*3600);
        }

        /// <summary>
        ///     Get Duration from Years.
        /// </summary>
        public static Duration FromYears(int years)
        {
            return new Duration(years*365*24*3600);
        }

        /// <summary>
        ///     Get Duration from Years.
        /// </summary>
        public static Duration FromYears(long years)
        {
            return new Duration(years*365*24*3600);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Duration from Years of type decimal.
        /// </summary>
        public static Duration FromYears(decimal years)
        {
            return new Duration(Convert.ToDouble(years)*365*24*3600);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Duration from nullable Days.
        /// </summary>
        public static Duration? FromDays(double? days)
        {
            if (days.HasValue)
            {
                return FromDays(days.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Days.
        /// </summary>
        public static Duration? FromDays(int? days)
        {
            if (days.HasValue)
            {
                return FromDays(days.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Days.
        /// </summary>
        public static Duration? FromDays(long? days)
        {
            if (days.HasValue)
            {
                return FromDays(days.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Days of type decimal.
        /// </summary>
        public static Duration? FromDays(decimal? days)
        {
            if (days.HasValue)
            {
                return FromDays(days.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Hours.
        /// </summary>
        public static Duration? FromHours(double? hours)
        {
            if (hours.HasValue)
            {
                return FromHours(hours.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Hours.
        /// </summary>
        public static Duration? FromHours(int? hours)
        {
            if (hours.HasValue)
            {
                return FromHours(hours.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Hours.
        /// </summary>
        public static Duration? FromHours(long? hours)
        {
            if (hours.HasValue)
            {
                return FromHours(hours.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Hours of type decimal.
        /// </summary>
        public static Duration? FromHours(decimal? hours)
        {
            if (hours.HasValue)
            {
                return FromHours(hours.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Microseconds.
        /// </summary>
        public static Duration? FromMicroseconds(double? microseconds)
        {
            if (microseconds.HasValue)
            {
                return FromMicroseconds(microseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Microseconds.
        /// </summary>
        public static Duration? FromMicroseconds(int? microseconds)
        {
            if (microseconds.HasValue)
            {
                return FromMicroseconds(microseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Microseconds.
        /// </summary>
        public static Duration? FromMicroseconds(long? microseconds)
        {
            if (microseconds.HasValue)
            {
                return FromMicroseconds(microseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Microseconds of type decimal.
        /// </summary>
        public static Duration? FromMicroseconds(decimal? microseconds)
        {
            if (microseconds.HasValue)
            {
                return FromMicroseconds(microseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Milliseconds.
        /// </summary>
        public static Duration? FromMilliseconds(double? milliseconds)
        {
            if (milliseconds.HasValue)
            {
                return FromMilliseconds(milliseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Milliseconds.
        /// </summary>
        public static Duration? FromMilliseconds(int? milliseconds)
        {
            if (milliseconds.HasValue)
            {
                return FromMilliseconds(milliseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Milliseconds.
        /// </summary>
        public static Duration? FromMilliseconds(long? milliseconds)
        {
            if (milliseconds.HasValue)
            {
                return FromMilliseconds(milliseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Milliseconds of type decimal.
        /// </summary>
        public static Duration? FromMilliseconds(decimal? milliseconds)
        {
            if (milliseconds.HasValue)
            {
                return FromMilliseconds(milliseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Minutes.
        /// </summary>
        public static Duration? FromMinutes(double? minutes)
        {
            if (minutes.HasValue)
            {
                return FromMinutes(minutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Minutes.
        /// </summary>
        public static Duration? FromMinutes(int? minutes)
        {
            if (minutes.HasValue)
            {
                return FromMinutes(minutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Minutes.
        /// </summary>
        public static Duration? FromMinutes(long? minutes)
        {
            if (minutes.HasValue)
            {
                return FromMinutes(minutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Minutes of type decimal.
        /// </summary>
        public static Duration? FromMinutes(decimal? minutes)
        {
            if (minutes.HasValue)
            {
                return FromMinutes(minutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Months.
        /// </summary>
        public static Duration? FromMonths(double? months)
        {
            if (months.HasValue)
            {
                return FromMonths(months.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Months.
        /// </summary>
        public static Duration? FromMonths(int? months)
        {
            if (months.HasValue)
            {
                return FromMonths(months.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Months.
        /// </summary>
        public static Duration? FromMonths(long? months)
        {
            if (months.HasValue)
            {
                return FromMonths(months.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Months of type decimal.
        /// </summary>
        public static Duration? FromMonths(decimal? months)
        {
            if (months.HasValue)
            {
                return FromMonths(months.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Nanoseconds.
        /// </summary>
        public static Duration? FromNanoseconds(double? nanoseconds)
        {
            if (nanoseconds.HasValue)
            {
                return FromNanoseconds(nanoseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Nanoseconds.
        /// </summary>
        public static Duration? FromNanoseconds(int? nanoseconds)
        {
            if (nanoseconds.HasValue)
            {
                return FromNanoseconds(nanoseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Nanoseconds.
        /// </summary>
        public static Duration? FromNanoseconds(long? nanoseconds)
        {
            if (nanoseconds.HasValue)
            {
                return FromNanoseconds(nanoseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Nanoseconds of type decimal.
        /// </summary>
        public static Duration? FromNanoseconds(decimal? nanoseconds)
        {
            if (nanoseconds.HasValue)
            {
                return FromNanoseconds(nanoseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Seconds.
        /// </summary>
        public static Duration? FromSeconds(double? seconds)
        {
            if (seconds.HasValue)
            {
                return FromSeconds(seconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Seconds.
        /// </summary>
        public static Duration? FromSeconds(int? seconds)
        {
            if (seconds.HasValue)
            {
                return FromSeconds(seconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Seconds.
        /// </summary>
        public static Duration? FromSeconds(long? seconds)
        {
            if (seconds.HasValue)
            {
                return FromSeconds(seconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Seconds of type decimal.
        /// </summary>
        public static Duration? FromSeconds(decimal? seconds)
        {
            if (seconds.HasValue)
            {
                return FromSeconds(seconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Weeks.
        /// </summary>
        public static Duration? FromWeeks(double? weeks)
        {
            if (weeks.HasValue)
            {
                return FromWeeks(weeks.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Weeks.
        /// </summary>
        public static Duration? FromWeeks(int? weeks)
        {
            if (weeks.HasValue)
            {
                return FromWeeks(weeks.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Weeks.
        /// </summary>
        public static Duration? FromWeeks(long? weeks)
        {
            if (weeks.HasValue)
            {
                return FromWeeks(weeks.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Weeks of type decimal.
        /// </summary>
        public static Duration? FromWeeks(decimal? weeks)
        {
            if (weeks.HasValue)
            {
                return FromWeeks(weeks.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Years.
        /// </summary>
        public static Duration? FromYears(double? years)
        {
            if (years.HasValue)
            {
                return FromYears(years.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Years.
        /// </summary>
        public static Duration? FromYears(int? years)
        {
            if (years.HasValue)
            {
                return FromYears(years.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from nullable Years.
        /// </summary>
        public static Duration? FromYears(long? years)
        {
            if (years.HasValue)
            {
                return FromYears(years.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Duration from Years of type decimal.
        /// </summary>
        public static Duration? FromYears(decimal? years)
        {
            if (years.HasValue)
            {
                return FromYears(years.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DurationUnit" /> to <see cref="Duration" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Duration unit value.</returns>
        public static Duration From(double val, DurationUnit fromUnit)
        {
            switch (fromUnit)
            {
                case DurationUnit.Day:
                    return FromDays(val);
                case DurationUnit.Hour:
                    return FromHours(val);
                case DurationUnit.Microsecond:
                    return FromMicroseconds(val);
                case DurationUnit.Millisecond:
                    return FromMilliseconds(val);
                case DurationUnit.Minute:
                    return FromMinutes(val);
                case DurationUnit.Month:
                    return FromMonths(val);
                case DurationUnit.Nanosecond:
                    return FromNanoseconds(val);
                case DurationUnit.Second:
                    return FromSeconds(val);
                case DurationUnit.Week:
                    return FromWeeks(val);
                case DurationUnit.Year:
                    return FromYears(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DurationUnit" /> to <see cref="Duration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Duration unit value.</returns>
        public static Duration? From(double? value, DurationUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case DurationUnit.Day:
                    return FromDays(value.Value);
                case DurationUnit.Hour:
                    return FromHours(value.Value);
                case DurationUnit.Microsecond:
                    return FromMicroseconds(value.Value);
                case DurationUnit.Millisecond:
                    return FromMilliseconds(value.Value);
                case DurationUnit.Minute:
                    return FromMinutes(value.Value);
                case DurationUnit.Month:
                    return FromMonths(value.Value);
                case DurationUnit.Nanosecond:
                    return FromNanoseconds(value.Value);
                case DurationUnit.Second:
                    return FromSeconds(value.Value);
                case DurationUnit.Week:
                    return FromWeeks(value.Value);
                case DurationUnit.Year:
                    return FromYears(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(DurationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(DurationUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Duration operator -(Duration right)
        {
            return new Duration(-right._seconds);
        }

        public static Duration operator +(Duration left, Duration right)
        {
            return new Duration(left._seconds + right._seconds);
        }

        public static Duration operator -(Duration left, Duration right)
        {
            return new Duration(left._seconds - right._seconds);
        }

        public static Duration operator *(double left, Duration right)
        {
            return new Duration(left*right._seconds);
        }

        public static Duration operator *(Duration left, double right)
        {
            return new Duration(left._seconds*(double)right);
        }

        public static Duration operator /(Duration left, double right)
        {
            return new Duration(left._seconds/(double)right);
        }

        public static double operator /(Duration left, Duration right)
        {
            return Convert.ToDouble(left._seconds/right._seconds);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Duration)) throw new ArgumentException("Expected type Duration.", "obj");
            return CompareTo((Duration) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Duration other)
        {
            return _seconds.CompareTo(other._seconds);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Duration left, Duration right)
        {
            return left._seconds <= right._seconds;
        }

        public static bool operator >=(Duration left, Duration right)
        {
            return left._seconds >= right._seconds;
        }

        public static bool operator <(Duration left, Duration right)
        {
            return left._seconds < right._seconds;
        }

        public static bool operator >(Duration left, Duration right)
        {
            return left._seconds > right._seconds;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Duration left, Duration right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._seconds == right._seconds;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Duration left, Duration right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._seconds != right._seconds;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _seconds.Equals(((Duration) obj)._seconds);
        }

        /// <summary>
        ///     Compare equality to another Duration by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Duration other, Duration maxError)
        {
            return Math.Abs(_seconds - other._seconds) <= maxError._seconds;
        }

        public override int GetHashCode()
        {
            return _seconds.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(DurationUnit unit)
        {
            switch (unit)
            {
                case DurationUnit.Day:
                    return Days;
                case DurationUnit.Hour:
                    return Hours;
                case DurationUnit.Microsecond:
                    return Microseconds;
                case DurationUnit.Millisecond:
                    return Milliseconds;
                case DurationUnit.Minute:
                    return Minutes;
                case DurationUnit.Month:
                    return Months;
                case DurationUnit.Nanosecond:
                    return Nanoseconds;
                case DurationUnit.Second:
                    return Seconds;
                case DurationUnit.Week:
                    return Weeks;
                case DurationUnit.Year:
                    return Years;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Duration Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Duration Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<Duration, DurationUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    DurationUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromSeconds(x.Seconds + y.Seconds));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Duration result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Duration result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Duration);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DurationUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DurationUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static DurationUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<DurationUnit>(str.Trim());

            if (unit == DurationUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized DurationUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is Second
        /// </summary>
        public static DurationUnit ToStringDefaultUnit { get; set; } = DurationUnit.Second;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(DurationUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(DurationUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(DurationUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(DurationUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Duration MaxValue
        {
            get
            {
                return new Duration(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Duration MinValue
        {
            get
            {
                return new Duration(double.MinValue);
            }
        }
    }
}
