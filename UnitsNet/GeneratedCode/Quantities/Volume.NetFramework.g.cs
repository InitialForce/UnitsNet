//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct Volume : IComparable, IComparable<Volume>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable Volume from nullable AuTablespoons.
        /// </summary>
        public static Volume? FromAuTablespoons(QuantityValue? autablespoons)
        {
            return autablespoons.HasValue ? FromAuTablespoons(autablespoons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Centiliters.
        /// </summary>
        public static Volume? FromCentiliters(QuantityValue? centiliters)
        {
            return centiliters.HasValue ? FromCentiliters(centiliters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicCentimeters.
        /// </summary>
        public static Volume? FromCubicCentimeters(QuantityValue? cubiccentimeters)
        {
            return cubiccentimeters.HasValue ? FromCubicCentimeters(cubiccentimeters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicDecimeters.
        /// </summary>
        public static Volume? FromCubicDecimeters(QuantityValue? cubicdecimeters)
        {
            return cubicdecimeters.HasValue ? FromCubicDecimeters(cubicdecimeters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicFeet.
        /// </summary>
        public static Volume? FromCubicFeet(QuantityValue? cubicfeet)
        {
            return cubicfeet.HasValue ? FromCubicFeet(cubicfeet.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicInches.
        /// </summary>
        public static Volume? FromCubicInches(QuantityValue? cubicinches)
        {
            return cubicinches.HasValue ? FromCubicInches(cubicinches.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicKilometers.
        /// </summary>
        public static Volume? FromCubicKilometers(QuantityValue? cubickilometers)
        {
            return cubickilometers.HasValue ? FromCubicKilometers(cubickilometers.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMeters.
        /// </summary>
        public static Volume? FromCubicMeters(QuantityValue? cubicmeters)
        {
            return cubicmeters.HasValue ? FromCubicMeters(cubicmeters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMicrometers.
        /// </summary>
        public static Volume? FromCubicMicrometers(QuantityValue? cubicmicrometers)
        {
            return cubicmicrometers.HasValue ? FromCubicMicrometers(cubicmicrometers.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMiles.
        /// </summary>
        public static Volume? FromCubicMiles(QuantityValue? cubicmiles)
        {
            return cubicmiles.HasValue ? FromCubicMiles(cubicmiles.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMillimeters.
        /// </summary>
        public static Volume? FromCubicMillimeters(QuantityValue? cubicmillimeters)
        {
            return cubicmillimeters.HasValue ? FromCubicMillimeters(cubicmillimeters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicYards.
        /// </summary>
        public static Volume? FromCubicYards(QuantityValue? cubicyards)
        {
            return cubicyards.HasValue ? FromCubicYards(cubicyards.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Deciliters.
        /// </summary>
        public static Volume? FromDeciliters(QuantityValue? deciliters)
        {
            return deciliters.HasValue ? FromDeciliters(deciliters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable HectocubicFeet.
        /// </summary>
        public static Volume? FromHectocubicFeet(QuantityValue? hectocubicfeet)
        {
            return hectocubicfeet.HasValue ? FromHectocubicFeet(hectocubicfeet.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable HectocubicMeters.
        /// </summary>
        public static Volume? FromHectocubicMeters(QuantityValue? hectocubicmeters)
        {
            return hectocubicmeters.HasValue ? FromHectocubicMeters(hectocubicmeters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Hectoliters.
        /// </summary>
        public static Volume? FromHectoliters(QuantityValue? hectoliters)
        {
            return hectoliters.HasValue ? FromHectoliters(hectoliters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable ImperialBeerBarrels.
        /// </summary>
        public static Volume? FromImperialBeerBarrels(QuantityValue? imperialbeerbarrels)
        {
            return imperialbeerbarrels.HasValue ? FromImperialBeerBarrels(imperialbeerbarrels.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable ImperialGallons.
        /// </summary>
        public static Volume? FromImperialGallons(QuantityValue? imperialgallons)
        {
            return imperialgallons.HasValue ? FromImperialGallons(imperialgallons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable ImperialOunces.
        /// </summary>
        public static Volume? FromImperialOunces(QuantityValue? imperialounces)
        {
            return imperialounces.HasValue ? FromImperialOunces(imperialounces.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable KilocubicFeet.
        /// </summary>
        public static Volume? FromKilocubicFeet(QuantityValue? kilocubicfeet)
        {
            return kilocubicfeet.HasValue ? FromKilocubicFeet(kilocubicfeet.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable KilocubicMeters.
        /// </summary>
        public static Volume? FromKilocubicMeters(QuantityValue? kilocubicmeters)
        {
            return kilocubicmeters.HasValue ? FromKilocubicMeters(kilocubicmeters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable KiloimperialGallons.
        /// </summary>
        public static Volume? FromKiloimperialGallons(QuantityValue? kiloimperialgallons)
        {
            return kiloimperialgallons.HasValue ? FromKiloimperialGallons(kiloimperialgallons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable KilousGallons.
        /// </summary>
        public static Volume? FromKilousGallons(QuantityValue? kilousgallons)
        {
            return kilousgallons.HasValue ? FromKilousGallons(kilousgallons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Liters.
        /// </summary>
        public static Volume? FromLiters(QuantityValue? liters)
        {
            return liters.HasValue ? FromLiters(liters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable MegacubicFeet.
        /// </summary>
        public static Volume? FromMegacubicFeet(QuantityValue? megacubicfeet)
        {
            return megacubicfeet.HasValue ? FromMegacubicFeet(megacubicfeet.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable MegaimperialGallons.
        /// </summary>
        public static Volume? FromMegaimperialGallons(QuantityValue? megaimperialgallons)
        {
            return megaimperialgallons.HasValue ? FromMegaimperialGallons(megaimperialgallons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable MegausGallons.
        /// </summary>
        public static Volume? FromMegausGallons(QuantityValue? megausgallons)
        {
            return megausgallons.HasValue ? FromMegausGallons(megausgallons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable MetricCups.
        /// </summary>
        public static Volume? FromMetricCups(QuantityValue? metriccups)
        {
            return metriccups.HasValue ? FromMetricCups(metriccups.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable MetricTeaspoons.
        /// </summary>
        public static Volume? FromMetricTeaspoons(QuantityValue? metricteaspoons)
        {
            return metricteaspoons.HasValue ? FromMetricTeaspoons(metricteaspoons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Microliters.
        /// </summary>
        public static Volume? FromMicroliters(QuantityValue? microliters)
        {
            return microliters.HasValue ? FromMicroliters(microliters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Milliliters.
        /// </summary>
        public static Volume? FromMilliliters(QuantityValue? milliliters)
        {
            return milliliters.HasValue ? FromMilliliters(milliliters.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable OilBarrels.
        /// </summary>
        public static Volume? FromOilBarrels(QuantityValue? oilbarrels)
        {
            return oilbarrels.HasValue ? FromOilBarrels(oilbarrels.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Tablespoons.
        /// </summary>
        public static Volume? FromTablespoons(QuantityValue? tablespoons)
        {
            return tablespoons.HasValue ? FromTablespoons(tablespoons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable Teaspoons.
        /// </summary>
        public static Volume? FromTeaspoons(QuantityValue? teaspoons)
        {
            return teaspoons.HasValue ? FromTeaspoons(teaspoons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UkTablespoons.
        /// </summary>
        public static Volume? FromUkTablespoons(QuantityValue? uktablespoons)
        {
            return uktablespoons.HasValue ? FromUkTablespoons(uktablespoons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsBeerBarrels.
        /// </summary>
        public static Volume? FromUsBeerBarrels(QuantityValue? usbeerbarrels)
        {
            return usbeerbarrels.HasValue ? FromUsBeerBarrels(usbeerbarrels.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsCustomaryCups.
        /// </summary>
        public static Volume? FromUsCustomaryCups(QuantityValue? uscustomarycups)
        {
            return uscustomarycups.HasValue ? FromUsCustomaryCups(uscustomarycups.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsGallons.
        /// </summary>
        public static Volume? FromUsGallons(QuantityValue? usgallons)
        {
            return usgallons.HasValue ? FromUsGallons(usgallons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsLegalCups.
        /// </summary>
        public static Volume? FromUsLegalCups(QuantityValue? uslegalcups)
        {
            return uslegalcups.HasValue ? FromUsLegalCups(uslegalcups.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsOunces.
        /// </summary>
        public static Volume? FromUsOunces(QuantityValue? usounces)
        {
            return usounces.HasValue ? FromUsOunces(usounces.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsPints.
        /// </summary>
        public static Volume? FromUsPints(QuantityValue? uspints)
        {
            return uspints.HasValue ? FromUsPints(uspints.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsQuarts.
        /// </summary>
        public static Volume? FromUsQuarts(QuantityValue? usquarts)
        {
            return usquarts.HasValue ? FromUsQuarts(usquarts.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsTablespoons.
        /// </summary>
        public static Volume? FromUsTablespoons(QuantityValue? ustablespoons)
        {
            return ustablespoons.HasValue ? FromUsTablespoons(ustablespoons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsTeaspoons.
        /// </summary>
        public static Volume? FromUsTeaspoons(QuantityValue? usteaspoons)
        {
            return usteaspoons.HasValue ? FromUsTeaspoons(usteaspoons.Value) : default(Volume?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        public static Volume? From(QuantityValue? value, VolumeUnit fromUnit)
        {
            return value.HasValue ? new Volume((double)value.Value, fromUnit) : default(Volume?);
        }

        #endregion

        #region Arithmetic Operators

        public static Volume operator -(Volume right)
        {
            return new Volume(-right.Value, right.Unit);
        }

        public static Volume operator +(Volume left, Volume right)
        {
            return new Volume(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Volume operator -(Volume left, Volume right)
        {
            return new Volume(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Volume operator *(double left, Volume right)
        {
            return new Volume(left * right.Value, right.Unit);
        }

        public static Volume operator *(Volume left, double right)
        {
            return new Volume(left.Value * right, left.Unit);
        }

        public static Volume operator /(Volume left, double right)
        {
            return new Volume(left.Value / right, left.Unit);
        }

        public static double operator /(Volume left, Volume right)
        {
            return left.CubicMeters / right.CubicMeters;
        }

        #endregion

        public static bool operator <=(Volume left, Volume right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Volume left, Volume right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Volume left, Volume right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Volume left, Volume right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Volume left, Volume right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Volume left, Volume right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
