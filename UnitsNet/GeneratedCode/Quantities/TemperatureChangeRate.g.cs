//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Temperature change rate is the ratio of the temperature change to the time during which the change occurred (value of temperature changes per unit time).
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class TemperatureChangeRate
#else
    public partial struct TemperatureChangeRate : IComparable, IComparable<TemperatureChangeRate>
#endif
    {
        /// <summary>
        ///     Base unit of TemperatureChangeRate.
        /// </summary>
        private readonly double _degreesCelsiusPerSecond;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public TemperatureChangeRate() : this(0)
        {
        }
#endif

        public TemperatureChangeRate(double degreescelsiuspersecond)
        {
            _degreesCelsiusPerSecond = Convert.ToDouble(degreescelsiuspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        TemperatureChangeRate(long degreescelsiuspersecond)
        {
            _degreesCelsiusPerSecond = Convert.ToDouble(degreescelsiuspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        TemperatureChangeRate(decimal degreescelsiuspersecond)
        {
            _degreesCelsiusPerSecond = Convert.ToDouble(degreescelsiuspersecond);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.TemperatureChangeRate;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static TemperatureChangeRateUnit BaseUnit
        {
            get { return TemperatureChangeRateUnit.DegreeCelsiusPerSecond; }
        }

        /// <summary>
        ///     All units of measurement for the TemperatureChangeRate quantity.
        /// </summary>
        public static TemperatureChangeRateUnit[] Units { get; } = Enum.GetValues(typeof(TemperatureChangeRateUnit)).Cast<TemperatureChangeRateUnit>().ToArray();

        /// <summary>
        ///     Get TemperatureChangeRate in CentidegreesCelsiusPerSecond.
        /// </summary>
        public double CentidegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e-2d; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in DecadegreesCelsiusPerSecond.
        /// </summary>
        public double DecadegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e1d; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in DecidegreesCelsiusPerSecond.
        /// </summary>
        public double DecidegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e-1d; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in DegreesCelsiusPerMinute.
        /// </summary>
        public double DegreesCelsiusPerMinute
        {
            get { return _degreesCelsiusPerSecond*60; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in DegreesCelsiusPerSecond.
        /// </summary>
        public double DegreesCelsiusPerSecond
        {
            get { return _degreesCelsiusPerSecond; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in HectodegreesCelsiusPerSecond.
        /// </summary>
        public double HectodegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e2d; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in KilodegreesCelsiusPerSecond.
        /// </summary>
        public double KilodegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e3d; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in MicrodegreesCelsiusPerSecond.
        /// </summary>
        public double MicrodegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e-6d; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in MillidegreesCelsiusPerSecond.
        /// </summary>
        public double MillidegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e-3d; }
        }

        /// <summary>
        ///     Get TemperatureChangeRate in NanodegreesCelsiusPerSecond.
        /// </summary>
        public double NanodegreesCelsiusPerSecond
        {
            get { return (_degreesCelsiusPerSecond) / 1e-9d; }
        }

        #endregion

        #region Static

        public static TemperatureChangeRate Zero
        {
            get { return new TemperatureChangeRate(); }
        }

        /// <summary>
        ///     Get TemperatureChangeRate from CentidegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromCentidegreesCelsiusPerSecond(double centidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((centidegreescelsiuspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from CentidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromCentidegreesCelsiusPerSecond(int centidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((centidegreescelsiuspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from CentidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromCentidegreesCelsiusPerSecond(long centidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((centidegreescelsiuspersecond) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from CentidegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromCentidegreesCelsiusPerSecond(decimal centidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(centidegreescelsiuspersecond)) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from DecadegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromDecadegreesCelsiusPerSecond(double decadegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((decadegreescelsiuspersecond) * 1e1d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DecadegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromDecadegreesCelsiusPerSecond(int decadegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((decadegreescelsiuspersecond) * 1e1d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DecadegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromDecadegreesCelsiusPerSecond(long decadegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((decadegreescelsiuspersecond) * 1e1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from DecadegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromDecadegreesCelsiusPerSecond(decimal decadegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(decadegreescelsiuspersecond)) * 1e1d);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from DecidegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromDecidegreesCelsiusPerSecond(double decidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((decidegreescelsiuspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DecidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromDecidegreesCelsiusPerSecond(int decidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((decidegreescelsiuspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DecidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromDecidegreesCelsiusPerSecond(long decidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((decidegreescelsiuspersecond) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from DecidegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromDecidegreesCelsiusPerSecond(decimal decidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(decidegreescelsiuspersecond)) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerMinute.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromDegreesCelsiusPerMinute(double degreescelsiusperminute)
        {
            return new TemperatureChangeRate(degreescelsiusperminute/60);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerMinute.
        /// </summary>
        public static TemperatureChangeRate FromDegreesCelsiusPerMinute(int degreescelsiusperminute)
        {
            return new TemperatureChangeRate(degreescelsiusperminute/60);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerMinute.
        /// </summary>
        public static TemperatureChangeRate FromDegreesCelsiusPerMinute(long degreescelsiusperminute)
        {
            return new TemperatureChangeRate(degreescelsiusperminute/60);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerMinute of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromDegreesCelsiusPerMinute(decimal degreescelsiusperminute)
        {
            return new TemperatureChangeRate(Convert.ToDouble(degreescelsiusperminute)/60);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromDegreesCelsiusPerSecond(double degreescelsiuspersecond)
        {
            return new TemperatureChangeRate(degreescelsiuspersecond);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromDegreesCelsiusPerSecond(int degreescelsiuspersecond)
        {
            return new TemperatureChangeRate(degreescelsiuspersecond);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromDegreesCelsiusPerSecond(long degreescelsiuspersecond)
        {
            return new TemperatureChangeRate(degreescelsiuspersecond);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from DegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromDegreesCelsiusPerSecond(decimal degreescelsiuspersecond)
        {
            return new TemperatureChangeRate(Convert.ToDouble(degreescelsiuspersecond));
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from HectodegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromHectodegreesCelsiusPerSecond(double hectodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((hectodegreescelsiuspersecond) * 1e2d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from HectodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromHectodegreesCelsiusPerSecond(int hectodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((hectodegreescelsiuspersecond) * 1e2d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from HectodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromHectodegreesCelsiusPerSecond(long hectodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((hectodegreescelsiuspersecond) * 1e2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from HectodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromHectodegreesCelsiusPerSecond(decimal hectodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(hectodegreescelsiuspersecond)) * 1e2d);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from KilodegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromKilodegreesCelsiusPerSecond(double kilodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((kilodegreescelsiuspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from KilodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromKilodegreesCelsiusPerSecond(int kilodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((kilodegreescelsiuspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from KilodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromKilodegreesCelsiusPerSecond(long kilodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((kilodegreescelsiuspersecond) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from KilodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromKilodegreesCelsiusPerSecond(decimal kilodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(kilodegreescelsiuspersecond)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from MicrodegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromMicrodegreesCelsiusPerSecond(double microdegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((microdegreescelsiuspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from MicrodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromMicrodegreesCelsiusPerSecond(int microdegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((microdegreescelsiuspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from MicrodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromMicrodegreesCelsiusPerSecond(long microdegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((microdegreescelsiuspersecond) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from MicrodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromMicrodegreesCelsiusPerSecond(decimal microdegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(microdegreescelsiuspersecond)) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from MillidegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromMillidegreesCelsiusPerSecond(double millidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((millidegreescelsiuspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from MillidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromMillidegreesCelsiusPerSecond(int millidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((millidegreescelsiuspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from MillidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromMillidegreesCelsiusPerSecond(long millidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((millidegreescelsiuspersecond) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from MillidegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromMillidegreesCelsiusPerSecond(decimal millidegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(millidegreescelsiuspersecond)) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get TemperatureChangeRate from NanodegreesCelsiusPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static TemperatureChangeRate FromNanodegreesCelsiusPerSecond(double nanodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((nanodegreescelsiuspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from NanodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromNanodegreesCelsiusPerSecond(int nanodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((nanodegreescelsiuspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get TemperatureChangeRate from NanodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate FromNanodegreesCelsiusPerSecond(long nanodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((nanodegreescelsiuspersecond) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get TemperatureChangeRate from NanodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate FromNanodegreesCelsiusPerSecond(decimal nanodegreescelsiuspersecond)
        {
            return new TemperatureChangeRate((Convert.ToDouble(nanodegreescelsiuspersecond)) * 1e-9d);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable CentidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromCentidegreesCelsiusPerSecond(double? centidegreescelsiuspersecond)
        {
            if (centidegreescelsiuspersecond.HasValue)
            {
                return FromCentidegreesCelsiusPerSecond(centidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable CentidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromCentidegreesCelsiusPerSecond(int? centidegreescelsiuspersecond)
        {
            if (centidegreescelsiuspersecond.HasValue)
            {
                return FromCentidegreesCelsiusPerSecond(centidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable CentidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromCentidegreesCelsiusPerSecond(long? centidegreescelsiuspersecond)
        {
            if (centidegreescelsiuspersecond.HasValue)
            {
                return FromCentidegreesCelsiusPerSecond(centidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from CentidegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromCentidegreesCelsiusPerSecond(decimal? centidegreescelsiuspersecond)
        {
            if (centidegreescelsiuspersecond.HasValue)
            {
                return FromCentidegreesCelsiusPerSecond(centidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DecadegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDecadegreesCelsiusPerSecond(double? decadegreescelsiuspersecond)
        {
            if (decadegreescelsiuspersecond.HasValue)
            {
                return FromDecadegreesCelsiusPerSecond(decadegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DecadegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDecadegreesCelsiusPerSecond(int? decadegreescelsiuspersecond)
        {
            if (decadegreescelsiuspersecond.HasValue)
            {
                return FromDecadegreesCelsiusPerSecond(decadegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DecadegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDecadegreesCelsiusPerSecond(long? decadegreescelsiuspersecond)
        {
            if (decadegreescelsiuspersecond.HasValue)
            {
                return FromDecadegreesCelsiusPerSecond(decadegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from DecadegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromDecadegreesCelsiusPerSecond(decimal? decadegreescelsiuspersecond)
        {
            if (decadegreescelsiuspersecond.HasValue)
            {
                return FromDecadegreesCelsiusPerSecond(decadegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DecidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDecidegreesCelsiusPerSecond(double? decidegreescelsiuspersecond)
        {
            if (decidegreescelsiuspersecond.HasValue)
            {
                return FromDecidegreesCelsiusPerSecond(decidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DecidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDecidegreesCelsiusPerSecond(int? decidegreescelsiuspersecond)
        {
            if (decidegreescelsiuspersecond.HasValue)
            {
                return FromDecidegreesCelsiusPerSecond(decidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DecidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDecidegreesCelsiusPerSecond(long? decidegreescelsiuspersecond)
        {
            if (decidegreescelsiuspersecond.HasValue)
            {
                return FromDecidegreesCelsiusPerSecond(decidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from DecidegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromDecidegreesCelsiusPerSecond(decimal? decidegreescelsiuspersecond)
        {
            if (decidegreescelsiuspersecond.HasValue)
            {
                return FromDecidegreesCelsiusPerSecond(decidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DegreesCelsiusPerMinute.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerMinute(double? degreescelsiusperminute)
        {
            if (degreescelsiusperminute.HasValue)
            {
                return FromDegreesCelsiusPerMinute(degreescelsiusperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DegreesCelsiusPerMinute.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerMinute(int? degreescelsiusperminute)
        {
            if (degreescelsiusperminute.HasValue)
            {
                return FromDegreesCelsiusPerMinute(degreescelsiusperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DegreesCelsiusPerMinute.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerMinute(long? degreescelsiusperminute)
        {
            if (degreescelsiusperminute.HasValue)
            {
                return FromDegreesCelsiusPerMinute(degreescelsiusperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from DegreesCelsiusPerMinute of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerMinute(decimal? degreescelsiusperminute)
        {
            if (degreescelsiusperminute.HasValue)
            {
                return FromDegreesCelsiusPerMinute(degreescelsiusperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerSecond(double? degreescelsiuspersecond)
        {
            if (degreescelsiuspersecond.HasValue)
            {
                return FromDegreesCelsiusPerSecond(degreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerSecond(int? degreescelsiuspersecond)
        {
            if (degreescelsiuspersecond.HasValue)
            {
                return FromDegreesCelsiusPerSecond(degreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable DegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerSecond(long? degreescelsiuspersecond)
        {
            if (degreescelsiuspersecond.HasValue)
            {
                return FromDegreesCelsiusPerSecond(degreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from DegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromDegreesCelsiusPerSecond(decimal? degreescelsiuspersecond)
        {
            if (degreescelsiuspersecond.HasValue)
            {
                return FromDegreesCelsiusPerSecond(degreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable HectodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromHectodegreesCelsiusPerSecond(double? hectodegreescelsiuspersecond)
        {
            if (hectodegreescelsiuspersecond.HasValue)
            {
                return FromHectodegreesCelsiusPerSecond(hectodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable HectodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromHectodegreesCelsiusPerSecond(int? hectodegreescelsiuspersecond)
        {
            if (hectodegreescelsiuspersecond.HasValue)
            {
                return FromHectodegreesCelsiusPerSecond(hectodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable HectodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromHectodegreesCelsiusPerSecond(long? hectodegreescelsiuspersecond)
        {
            if (hectodegreescelsiuspersecond.HasValue)
            {
                return FromHectodegreesCelsiusPerSecond(hectodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from HectodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromHectodegreesCelsiusPerSecond(decimal? hectodegreescelsiuspersecond)
        {
            if (hectodegreescelsiuspersecond.HasValue)
            {
                return FromHectodegreesCelsiusPerSecond(hectodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable KilodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromKilodegreesCelsiusPerSecond(double? kilodegreescelsiuspersecond)
        {
            if (kilodegreescelsiuspersecond.HasValue)
            {
                return FromKilodegreesCelsiusPerSecond(kilodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable KilodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromKilodegreesCelsiusPerSecond(int? kilodegreescelsiuspersecond)
        {
            if (kilodegreescelsiuspersecond.HasValue)
            {
                return FromKilodegreesCelsiusPerSecond(kilodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable KilodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromKilodegreesCelsiusPerSecond(long? kilodegreescelsiuspersecond)
        {
            if (kilodegreescelsiuspersecond.HasValue)
            {
                return FromKilodegreesCelsiusPerSecond(kilodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from KilodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromKilodegreesCelsiusPerSecond(decimal? kilodegreescelsiuspersecond)
        {
            if (kilodegreescelsiuspersecond.HasValue)
            {
                return FromKilodegreesCelsiusPerSecond(kilodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable MicrodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromMicrodegreesCelsiusPerSecond(double? microdegreescelsiuspersecond)
        {
            if (microdegreescelsiuspersecond.HasValue)
            {
                return FromMicrodegreesCelsiusPerSecond(microdegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable MicrodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromMicrodegreesCelsiusPerSecond(int? microdegreescelsiuspersecond)
        {
            if (microdegreescelsiuspersecond.HasValue)
            {
                return FromMicrodegreesCelsiusPerSecond(microdegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable MicrodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromMicrodegreesCelsiusPerSecond(long? microdegreescelsiuspersecond)
        {
            if (microdegreescelsiuspersecond.HasValue)
            {
                return FromMicrodegreesCelsiusPerSecond(microdegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from MicrodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromMicrodegreesCelsiusPerSecond(decimal? microdegreescelsiuspersecond)
        {
            if (microdegreescelsiuspersecond.HasValue)
            {
                return FromMicrodegreesCelsiusPerSecond(microdegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable MillidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromMillidegreesCelsiusPerSecond(double? millidegreescelsiuspersecond)
        {
            if (millidegreescelsiuspersecond.HasValue)
            {
                return FromMillidegreesCelsiusPerSecond(millidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable MillidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromMillidegreesCelsiusPerSecond(int? millidegreescelsiuspersecond)
        {
            if (millidegreescelsiuspersecond.HasValue)
            {
                return FromMillidegreesCelsiusPerSecond(millidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable MillidegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromMillidegreesCelsiusPerSecond(long? millidegreescelsiuspersecond)
        {
            if (millidegreescelsiuspersecond.HasValue)
            {
                return FromMillidegreesCelsiusPerSecond(millidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from MillidegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromMillidegreesCelsiusPerSecond(decimal? millidegreescelsiuspersecond)
        {
            if (millidegreescelsiuspersecond.HasValue)
            {
                return FromMillidegreesCelsiusPerSecond(millidegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable NanodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromNanodegreesCelsiusPerSecond(double? nanodegreescelsiuspersecond)
        {
            if (nanodegreescelsiuspersecond.HasValue)
            {
                return FromNanodegreesCelsiusPerSecond(nanodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable NanodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromNanodegreesCelsiusPerSecond(int? nanodegreescelsiuspersecond)
        {
            if (nanodegreescelsiuspersecond.HasValue)
            {
                return FromNanodegreesCelsiusPerSecond(nanodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from nullable NanodegreesCelsiusPerSecond.
        /// </summary>
        public static TemperatureChangeRate? FromNanodegreesCelsiusPerSecond(long? nanodegreescelsiuspersecond)
        {
            if (nanodegreescelsiuspersecond.HasValue)
            {
                return FromNanodegreesCelsiusPerSecond(nanodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable TemperatureChangeRate from NanodegreesCelsiusPerSecond of type decimal.
        /// </summary>
        public static TemperatureChangeRate? FromNanodegreesCelsiusPerSecond(decimal? nanodegreescelsiuspersecond)
        {
            if (nanodegreescelsiuspersecond.HasValue)
            {
                return FromNanodegreesCelsiusPerSecond(nanodegreescelsiuspersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TemperatureChangeRateUnit" /> to <see cref="TemperatureChangeRate" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>TemperatureChangeRate unit value.</returns>
        public static TemperatureChangeRate From(double val, TemperatureChangeRateUnit fromUnit)
        {
            switch (fromUnit)
            {
                case TemperatureChangeRateUnit.CentidegreeCelsiusPerSecond:
                    return FromCentidegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.DecadegreeCelsiusPerSecond:
                    return FromDecadegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.DecidegreeCelsiusPerSecond:
                    return FromDecidegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.DegreeCelsiusPerMinute:
                    return FromDegreesCelsiusPerMinute(val);
                case TemperatureChangeRateUnit.DegreeCelsiusPerSecond:
                    return FromDegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.HectodegreeCelsiusPerSecond:
                    return FromHectodegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.KilodegreeCelsiusPerSecond:
                    return FromKilodegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.MicrodegreeCelsiusPerSecond:
                    return FromMicrodegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.MillidegreeCelsiusPerSecond:
                    return FromMillidegreesCelsiusPerSecond(val);
                case TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond:
                    return FromNanodegreesCelsiusPerSecond(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TemperatureChangeRateUnit" /> to <see cref="TemperatureChangeRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>TemperatureChangeRate unit value.</returns>
        public static TemperatureChangeRate? From(double? value, TemperatureChangeRateUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case TemperatureChangeRateUnit.CentidegreeCelsiusPerSecond:
                    return FromCentidegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.DecadegreeCelsiusPerSecond:
                    return FromDecadegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.DecidegreeCelsiusPerSecond:
                    return FromDecidegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.DegreeCelsiusPerMinute:
                    return FromDegreesCelsiusPerMinute(value.Value);
                case TemperatureChangeRateUnit.DegreeCelsiusPerSecond:
                    return FromDegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.HectodegreeCelsiusPerSecond:
                    return FromHectodegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.KilodegreeCelsiusPerSecond:
                    return FromKilodegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.MicrodegreeCelsiusPerSecond:
                    return FromMicrodegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.MillidegreeCelsiusPerSecond:
                    return FromMillidegreesCelsiusPerSecond(value.Value);
                case TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond:
                    return FromNanodegreesCelsiusPerSecond(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(TemperatureChangeRateUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(TemperatureChangeRateUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static TemperatureChangeRate operator -(TemperatureChangeRate right)
        {
            return new TemperatureChangeRate(-right._degreesCelsiusPerSecond);
        }

        public static TemperatureChangeRate operator +(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            return new TemperatureChangeRate(left._degreesCelsiusPerSecond + right._degreesCelsiusPerSecond);
        }

        public static TemperatureChangeRate operator -(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            return new TemperatureChangeRate(left._degreesCelsiusPerSecond - right._degreesCelsiusPerSecond);
        }

        public static TemperatureChangeRate operator *(double left, TemperatureChangeRate right)
        {
            return new TemperatureChangeRate(left*right._degreesCelsiusPerSecond);
        }

        public static TemperatureChangeRate operator *(TemperatureChangeRate left, double right)
        {
            return new TemperatureChangeRate(left._degreesCelsiusPerSecond*(double)right);
        }

        public static TemperatureChangeRate operator /(TemperatureChangeRate left, double right)
        {
            return new TemperatureChangeRate(left._degreesCelsiusPerSecond/(double)right);
        }

        public static double operator /(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            return Convert.ToDouble(left._degreesCelsiusPerSecond/right._degreesCelsiusPerSecond);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is TemperatureChangeRate)) throw new ArgumentException("Expected type TemperatureChangeRate.", "obj");
            return CompareTo((TemperatureChangeRate) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(TemperatureChangeRate other)
        {
            return _degreesCelsiusPerSecond.CompareTo(other._degreesCelsiusPerSecond);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            return left._degreesCelsiusPerSecond <= right._degreesCelsiusPerSecond;
        }

        public static bool operator >=(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            return left._degreesCelsiusPerSecond >= right._degreesCelsiusPerSecond;
        }

        public static bool operator <(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            return left._degreesCelsiusPerSecond < right._degreesCelsiusPerSecond;
        }

        public static bool operator >(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            return left._degreesCelsiusPerSecond > right._degreesCelsiusPerSecond;
        }

        public static bool operator ==(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._degreesCelsiusPerSecond == right._degreesCelsiusPerSecond;
        }

        public static bool operator !=(TemperatureChangeRate left, TemperatureChangeRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._degreesCelsiusPerSecond != right._degreesCelsiusPerSecond;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _degreesCelsiusPerSecond.Equals(((TemperatureChangeRate) obj)._degreesCelsiusPerSecond);
        }

        public override int GetHashCode()
        {
            return _degreesCelsiusPerSecond.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(TemperatureChangeRateUnit unit)
        {
            switch (unit)
            {
                case TemperatureChangeRateUnit.CentidegreeCelsiusPerSecond:
                    return CentidegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.DecadegreeCelsiusPerSecond:
                    return DecadegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.DecidegreeCelsiusPerSecond:
                    return DecidegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.DegreeCelsiusPerMinute:
                    return DegreesCelsiusPerMinute;
                case TemperatureChangeRateUnit.DegreeCelsiusPerSecond:
                    return DegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.HectodegreeCelsiusPerSecond:
                    return HectodegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.KilodegreeCelsiusPerSecond:
                    return KilodegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.MicrodegreeCelsiusPerSecond:
                    return MicrodegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.MillidegreeCelsiusPerSecond:
                    return MillidegreesCelsiusPerSecond;
                case TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond:
                    return NanodegreesCelsiusPerSecond;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static TemperatureChangeRate Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static TemperatureChangeRate Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<TemperatureChangeRate, TemperatureChangeRateUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    TemperatureChangeRateUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromDegreesCelsiusPerSecond(x.DegreesCelsiusPerSecond + y.DegreesCelsiusPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out TemperatureChangeRate result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out TemperatureChangeRate result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(TemperatureChangeRate);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TemperatureChangeRateUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TemperatureChangeRateUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static TemperatureChangeRateUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<TemperatureChangeRateUnit>(str.Trim());

            if (unit == TemperatureChangeRateUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized TemperatureChangeRateUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is DegreeCelsiusPerSecond
        /// </summary>
        public static TemperatureChangeRateUnit ToStringDefaultUnit { get; set; } = TemperatureChangeRateUnit.DegreeCelsiusPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(TemperatureChangeRateUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(TemperatureChangeRateUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(TemperatureChangeRateUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(TemperatureChangeRateUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of TemperatureChangeRate
        /// </summary>
        public static TemperatureChangeRate MaxValue
        {
            get
            {
                return new TemperatureChangeRate(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of TemperatureChangeRate
        /// </summary>
        public static TemperatureChangeRate MinValue
        {
            get
            {
                return new TemperatureChangeRate(double.MinValue);
            }
        }
    }
}
