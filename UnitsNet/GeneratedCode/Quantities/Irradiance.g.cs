//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In radiometry, irradiance is the radiant flux (power) received by a surface per unit area.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Irradiance
#else
    public partial struct Irradiance : IComparable, IComparable<Irradiance>
#endif
    {
        /// <summary>
        ///     Base unit of Irradiance.
        /// </summary>
        private readonly double _wattsPerSquareMeter;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Irradiance() : this(0)
        {
        }
#endif

        public Irradiance(double wattspersquaremeter)
        {
            _wattsPerSquareMeter = Convert.ToDouble(wattspersquaremeter);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        Irradiance(long wattspersquaremeter)
        {
            _wattsPerSquareMeter = Convert.ToDouble(wattspersquaremeter);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        Irradiance(decimal wattspersquaremeter)
        {
            _wattsPerSquareMeter = Convert.ToDouble(wattspersquaremeter);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Irradiance;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static IrradianceUnit BaseUnit
        {
            get { return IrradianceUnit.WattPerSquareMeter; }
        }

        /// <summary>
        ///     All units of measurement for the Irradiance quantity.
        /// </summary>
        public static IrradianceUnit[] Units { get; } = Enum.GetValues(typeof(IrradianceUnit)).Cast<IrradianceUnit>().ToArray();

        /// <summary>
        ///     Get Irradiance in KilowattsPerSquareCentimeter.
        /// </summary>
        public double KilowattsPerSquareCentimeter
        {
            get { return (_wattsPerSquareMeter*0.0001) / 1e3d; }
        }

        /// <summary>
        ///     Get Irradiance in KilowattsPerSquareMeter.
        /// </summary>
        public double KilowattsPerSquareMeter
        {
            get { return (_wattsPerSquareMeter) / 1e3d; }
        }

        /// <summary>
        ///     Get Irradiance in MegawattsPerSquareCentimeter.
        /// </summary>
        public double MegawattsPerSquareCentimeter
        {
            get { return (_wattsPerSquareMeter*0.0001) / 1e6d; }
        }

        /// <summary>
        ///     Get Irradiance in MegawattsPerSquareMeter.
        /// </summary>
        public double MegawattsPerSquareMeter
        {
            get { return (_wattsPerSquareMeter) / 1e6d; }
        }

        /// <summary>
        ///     Get Irradiance in MicrowattsPerSquareCentimeter.
        /// </summary>
        public double MicrowattsPerSquareCentimeter
        {
            get { return (_wattsPerSquareMeter*0.0001) / 1e-6d; }
        }

        /// <summary>
        ///     Get Irradiance in MicrowattsPerSquareMeter.
        /// </summary>
        public double MicrowattsPerSquareMeter
        {
            get { return (_wattsPerSquareMeter) / 1e-6d; }
        }

        /// <summary>
        ///     Get Irradiance in MilliwattsPerSquareCentimeter.
        /// </summary>
        public double MilliwattsPerSquareCentimeter
        {
            get { return (_wattsPerSquareMeter*0.0001) / 1e-3d; }
        }

        /// <summary>
        ///     Get Irradiance in MilliwattsPerSquareMeter.
        /// </summary>
        public double MilliwattsPerSquareMeter
        {
            get { return (_wattsPerSquareMeter) / 1e-3d; }
        }

        /// <summary>
        ///     Get Irradiance in NanowattsPerSquareCentimeter.
        /// </summary>
        public double NanowattsPerSquareCentimeter
        {
            get { return (_wattsPerSquareMeter*0.0001) / 1e-9d; }
        }

        /// <summary>
        ///     Get Irradiance in NanowattsPerSquareMeter.
        /// </summary>
        public double NanowattsPerSquareMeter
        {
            get { return (_wattsPerSquareMeter) / 1e-9d; }
        }

        /// <summary>
        ///     Get Irradiance in PicowattsPerSquareCentimeter.
        /// </summary>
        public double PicowattsPerSquareCentimeter
        {
            get { return (_wattsPerSquareMeter*0.0001) / 1e-12d; }
        }

        /// <summary>
        ///     Get Irradiance in PicowattsPerSquareMeter.
        /// </summary>
        public double PicowattsPerSquareMeter
        {
            get { return (_wattsPerSquareMeter) / 1e-12d; }
        }

        /// <summary>
        ///     Get Irradiance in WattsPerSquareCentimeter.
        /// </summary>
        public double WattsPerSquareCentimeter
        {
            get { return _wattsPerSquareMeter*0.0001; }
        }

        /// <summary>
        ///     Get Irradiance in WattsPerSquareMeter.
        /// </summary>
        public double WattsPerSquareMeter
        {
            get { return _wattsPerSquareMeter; }
        }

        #endregion

        #region Static

        public static Irradiance Zero
        {
            get { return new Irradiance(); }
        }

        /// <summary>
        ///     Get Irradiance from KilowattsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromKilowattsPerSquareCentimeter(double kilowattspersquarecentimeter)
        {
            double value = (double) kilowattspersquarecentimeter;
            return new Irradiance((value*10000) * 1e3d);
        }
#else
        public static Irradiance FromKilowattsPerSquareCentimeter(QuantityValue kilowattspersquarecentimeter)
        {
            double value = (double) kilowattspersquarecentimeter;
            return new Irradiance(((value*10000) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from KilowattsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromKilowattsPerSquareMeter(double kilowattspersquaremeter)
        {
            double value = (double) kilowattspersquaremeter;
            return new Irradiance((value) * 1e3d);
        }
#else
        public static Irradiance FromKilowattsPerSquareMeter(QuantityValue kilowattspersquaremeter)
        {
            double value = (double) kilowattspersquaremeter;
            return new Irradiance(((value) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from MegawattsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromMegawattsPerSquareCentimeter(double megawattspersquarecentimeter)
        {
            double value = (double) megawattspersquarecentimeter;
            return new Irradiance((value*10000) * 1e6d);
        }
#else
        public static Irradiance FromMegawattsPerSquareCentimeter(QuantityValue megawattspersquarecentimeter)
        {
            double value = (double) megawattspersquarecentimeter;
            return new Irradiance(((value*10000) * 1e6d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from MegawattsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromMegawattsPerSquareMeter(double megawattspersquaremeter)
        {
            double value = (double) megawattspersquaremeter;
            return new Irradiance((value) * 1e6d);
        }
#else
        public static Irradiance FromMegawattsPerSquareMeter(QuantityValue megawattspersquaremeter)
        {
            double value = (double) megawattspersquaremeter;
            return new Irradiance(((value) * 1e6d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from MicrowattsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromMicrowattsPerSquareCentimeter(double microwattspersquarecentimeter)
        {
            double value = (double) microwattspersquarecentimeter;
            return new Irradiance((value*10000) * 1e-6d);
        }
#else
        public static Irradiance FromMicrowattsPerSquareCentimeter(QuantityValue microwattspersquarecentimeter)
        {
            double value = (double) microwattspersquarecentimeter;
            return new Irradiance(((value*10000) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from MicrowattsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromMicrowattsPerSquareMeter(double microwattspersquaremeter)
        {
            double value = (double) microwattspersquaremeter;
            return new Irradiance((value) * 1e-6d);
        }
#else
        public static Irradiance FromMicrowattsPerSquareMeter(QuantityValue microwattspersquaremeter)
        {
            double value = (double) microwattspersquaremeter;
            return new Irradiance(((value) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from MilliwattsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromMilliwattsPerSquareCentimeter(double milliwattspersquarecentimeter)
        {
            double value = (double) milliwattspersquarecentimeter;
            return new Irradiance((value*10000) * 1e-3d);
        }
#else
        public static Irradiance FromMilliwattsPerSquareCentimeter(QuantityValue milliwattspersquarecentimeter)
        {
            double value = (double) milliwattspersquarecentimeter;
            return new Irradiance(((value*10000) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from MilliwattsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromMilliwattsPerSquareMeter(double milliwattspersquaremeter)
        {
            double value = (double) milliwattspersquaremeter;
            return new Irradiance((value) * 1e-3d);
        }
#else
        public static Irradiance FromMilliwattsPerSquareMeter(QuantityValue milliwattspersquaremeter)
        {
            double value = (double) milliwattspersquaremeter;
            return new Irradiance(((value) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from NanowattsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromNanowattsPerSquareCentimeter(double nanowattspersquarecentimeter)
        {
            double value = (double) nanowattspersquarecentimeter;
            return new Irradiance((value*10000) * 1e-9d);
        }
#else
        public static Irradiance FromNanowattsPerSquareCentimeter(QuantityValue nanowattspersquarecentimeter)
        {
            double value = (double) nanowattspersquarecentimeter;
            return new Irradiance(((value*10000) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from NanowattsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromNanowattsPerSquareMeter(double nanowattspersquaremeter)
        {
            double value = (double) nanowattspersquaremeter;
            return new Irradiance((value) * 1e-9d);
        }
#else
        public static Irradiance FromNanowattsPerSquareMeter(QuantityValue nanowattspersquaremeter)
        {
            double value = (double) nanowattspersquaremeter;
            return new Irradiance(((value) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from PicowattsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromPicowattsPerSquareCentimeter(double picowattspersquarecentimeter)
        {
            double value = (double) picowattspersquarecentimeter;
            return new Irradiance((value*10000) * 1e-12d);
        }
#else
        public static Irradiance FromPicowattsPerSquareCentimeter(QuantityValue picowattspersquarecentimeter)
        {
            double value = (double) picowattspersquarecentimeter;
            return new Irradiance(((value*10000) * 1e-12d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from PicowattsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromPicowattsPerSquareMeter(double picowattspersquaremeter)
        {
            double value = (double) picowattspersquaremeter;
            return new Irradiance((value) * 1e-12d);
        }
#else
        public static Irradiance FromPicowattsPerSquareMeter(QuantityValue picowattspersquaremeter)
        {
            double value = (double) picowattspersquaremeter;
            return new Irradiance(((value) * 1e-12d));
        }
#endif

        /// <summary>
        ///     Get Irradiance from WattsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromWattsPerSquareCentimeter(double wattspersquarecentimeter)
        {
            double value = (double) wattspersquarecentimeter;
            return new Irradiance(value*10000);
        }
#else
        public static Irradiance FromWattsPerSquareCentimeter(QuantityValue wattspersquarecentimeter)
        {
            double value = (double) wattspersquarecentimeter;
            return new Irradiance((value*10000));
        }
#endif

        /// <summary>
        ///     Get Irradiance from WattsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiance FromWattsPerSquareMeter(double wattspersquaremeter)
        {
            double value = (double) wattspersquaremeter;
            return new Irradiance(value);
        }
#else
        public static Irradiance FromWattsPerSquareMeter(QuantityValue wattspersquaremeter)
        {
            double value = (double) wattspersquaremeter;
            return new Irradiance((value));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Irradiance from nullable KilowattsPerSquareCentimeter.
        /// </summary>
        public static Irradiance? FromKilowattsPerSquareCentimeter(QuantityValue? kilowattspersquarecentimeter)
        {
            if (kilowattspersquarecentimeter.HasValue)
            {
                return FromKilowattsPerSquareCentimeter(kilowattspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable KilowattsPerSquareMeter.
        /// </summary>
        public static Irradiance? FromKilowattsPerSquareMeter(QuantityValue? kilowattspersquaremeter)
        {
            if (kilowattspersquaremeter.HasValue)
            {
                return FromKilowattsPerSquareMeter(kilowattspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable MegawattsPerSquareCentimeter.
        /// </summary>
        public static Irradiance? FromMegawattsPerSquareCentimeter(QuantityValue? megawattspersquarecentimeter)
        {
            if (megawattspersquarecentimeter.HasValue)
            {
                return FromMegawattsPerSquareCentimeter(megawattspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable MegawattsPerSquareMeter.
        /// </summary>
        public static Irradiance? FromMegawattsPerSquareMeter(QuantityValue? megawattspersquaremeter)
        {
            if (megawattspersquaremeter.HasValue)
            {
                return FromMegawattsPerSquareMeter(megawattspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable MicrowattsPerSquareCentimeter.
        /// </summary>
        public static Irradiance? FromMicrowattsPerSquareCentimeter(QuantityValue? microwattspersquarecentimeter)
        {
            if (microwattspersquarecentimeter.HasValue)
            {
                return FromMicrowattsPerSquareCentimeter(microwattspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable MicrowattsPerSquareMeter.
        /// </summary>
        public static Irradiance? FromMicrowattsPerSquareMeter(QuantityValue? microwattspersquaremeter)
        {
            if (microwattspersquaremeter.HasValue)
            {
                return FromMicrowattsPerSquareMeter(microwattspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable MilliwattsPerSquareCentimeter.
        /// </summary>
        public static Irradiance? FromMilliwattsPerSquareCentimeter(QuantityValue? milliwattspersquarecentimeter)
        {
            if (milliwattspersquarecentimeter.HasValue)
            {
                return FromMilliwattsPerSquareCentimeter(milliwattspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable MilliwattsPerSquareMeter.
        /// </summary>
        public static Irradiance? FromMilliwattsPerSquareMeter(QuantityValue? milliwattspersquaremeter)
        {
            if (milliwattspersquaremeter.HasValue)
            {
                return FromMilliwattsPerSquareMeter(milliwattspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable NanowattsPerSquareCentimeter.
        /// </summary>
        public static Irradiance? FromNanowattsPerSquareCentimeter(QuantityValue? nanowattspersquarecentimeter)
        {
            if (nanowattspersquarecentimeter.HasValue)
            {
                return FromNanowattsPerSquareCentimeter(nanowattspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable NanowattsPerSquareMeter.
        /// </summary>
        public static Irradiance? FromNanowattsPerSquareMeter(QuantityValue? nanowattspersquaremeter)
        {
            if (nanowattspersquaremeter.HasValue)
            {
                return FromNanowattsPerSquareMeter(nanowattspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable PicowattsPerSquareCentimeter.
        /// </summary>
        public static Irradiance? FromPicowattsPerSquareCentimeter(QuantityValue? picowattspersquarecentimeter)
        {
            if (picowattspersquarecentimeter.HasValue)
            {
                return FromPicowattsPerSquareCentimeter(picowattspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable PicowattsPerSquareMeter.
        /// </summary>
        public static Irradiance? FromPicowattsPerSquareMeter(QuantityValue? picowattspersquaremeter)
        {
            if (picowattspersquaremeter.HasValue)
            {
                return FromPicowattsPerSquareMeter(picowattspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable WattsPerSquareCentimeter.
        /// </summary>
        public static Irradiance? FromWattsPerSquareCentimeter(QuantityValue? wattspersquarecentimeter)
        {
            if (wattspersquarecentimeter.HasValue)
            {
                return FromWattsPerSquareCentimeter(wattspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Irradiance from nullable WattsPerSquareMeter.
        /// </summary>
        public static Irradiance? FromWattsPerSquareMeter(QuantityValue? wattspersquaremeter)
        {
            if (wattspersquaremeter.HasValue)
            {
                return FromWattsPerSquareMeter(wattspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="IrradianceUnit" /> to <see cref="Irradiance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Irradiance unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Irradiance From(double value, IrradianceUnit fromUnit)
#else
        public static Irradiance From(QuantityValue value, IrradianceUnit fromUnit)
#endif
        {
            switch (fromUnit)
            {
                case IrradianceUnit.KilowattPerSquareCentimeter:
                    return FromKilowattsPerSquareCentimeter(value);
                case IrradianceUnit.KilowattPerSquareMeter:
                    return FromKilowattsPerSquareMeter(value);
                case IrradianceUnit.MegawattPerSquareCentimeter:
                    return FromMegawattsPerSquareCentimeter(value);
                case IrradianceUnit.MegawattPerSquareMeter:
                    return FromMegawattsPerSquareMeter(value);
                case IrradianceUnit.MicrowattPerSquareCentimeter:
                    return FromMicrowattsPerSquareCentimeter(value);
                case IrradianceUnit.MicrowattPerSquareMeter:
                    return FromMicrowattsPerSquareMeter(value);
                case IrradianceUnit.MilliwattPerSquareCentimeter:
                    return FromMilliwattsPerSquareCentimeter(value);
                case IrradianceUnit.MilliwattPerSquareMeter:
                    return FromMilliwattsPerSquareMeter(value);
                case IrradianceUnit.NanowattPerSquareCentimeter:
                    return FromNanowattsPerSquareCentimeter(value);
                case IrradianceUnit.NanowattPerSquareMeter:
                    return FromNanowattsPerSquareMeter(value);
                case IrradianceUnit.PicowattPerSquareCentimeter:
                    return FromPicowattsPerSquareCentimeter(value);
                case IrradianceUnit.PicowattPerSquareMeter:
                    return FromPicowattsPerSquareMeter(value);
                case IrradianceUnit.WattPerSquareCentimeter:
                    return FromWattsPerSquareCentimeter(value);
                case IrradianceUnit.WattPerSquareMeter:
                    return FromWattsPerSquareMeter(value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="IrradianceUnit" /> to <see cref="Irradiance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Irradiance unit value.</returns>
        public static Irradiance? From(QuantityValue? value, IrradianceUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case IrradianceUnit.KilowattPerSquareCentimeter:
                    return FromKilowattsPerSquareCentimeter(value.Value);
                case IrradianceUnit.KilowattPerSquareMeter:
                    return FromKilowattsPerSquareMeter(value.Value);
                case IrradianceUnit.MegawattPerSquareCentimeter:
                    return FromMegawattsPerSquareCentimeter(value.Value);
                case IrradianceUnit.MegawattPerSquareMeter:
                    return FromMegawattsPerSquareMeter(value.Value);
                case IrradianceUnit.MicrowattPerSquareCentimeter:
                    return FromMicrowattsPerSquareCentimeter(value.Value);
                case IrradianceUnit.MicrowattPerSquareMeter:
                    return FromMicrowattsPerSquareMeter(value.Value);
                case IrradianceUnit.MilliwattPerSquareCentimeter:
                    return FromMilliwattsPerSquareCentimeter(value.Value);
                case IrradianceUnit.MilliwattPerSquareMeter:
                    return FromMilliwattsPerSquareMeter(value.Value);
                case IrradianceUnit.NanowattPerSquareCentimeter:
                    return FromNanowattsPerSquareCentimeter(value.Value);
                case IrradianceUnit.NanowattPerSquareMeter:
                    return FromNanowattsPerSquareMeter(value.Value);
                case IrradianceUnit.PicowattPerSquareCentimeter:
                    return FromPicowattsPerSquareCentimeter(value.Value);
                case IrradianceUnit.PicowattPerSquareMeter:
                    return FromPicowattsPerSquareMeter(value.Value);
                case IrradianceUnit.WattPerSquareCentimeter:
                    return FromWattsPerSquareCentimeter(value.Value);
                case IrradianceUnit.WattPerSquareMeter:
                    return FromWattsPerSquareMeter(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(IrradianceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(IrradianceUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Irradiance operator -(Irradiance right)
        {
            return new Irradiance(-right._wattsPerSquareMeter);
        }

        public static Irradiance operator +(Irradiance left, Irradiance right)
        {
            return new Irradiance(left._wattsPerSquareMeter + right._wattsPerSquareMeter);
        }

        public static Irradiance operator -(Irradiance left, Irradiance right)
        {
            return new Irradiance(left._wattsPerSquareMeter - right._wattsPerSquareMeter);
        }

        public static Irradiance operator *(double left, Irradiance right)
        {
            return new Irradiance(left*right._wattsPerSquareMeter);
        }

        public static Irradiance operator *(Irradiance left, double right)
        {
            return new Irradiance(left._wattsPerSquareMeter*(double)right);
        }

        public static Irradiance operator /(Irradiance left, double right)
        {
            return new Irradiance(left._wattsPerSquareMeter/(double)right);
        }

        public static double operator /(Irradiance left, Irradiance right)
        {
            return Convert.ToDouble(left._wattsPerSquareMeter/right._wattsPerSquareMeter);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Irradiance)) throw new ArgumentException("Expected type Irradiance.", "obj");
            return CompareTo((Irradiance) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Irradiance other)
        {
            return _wattsPerSquareMeter.CompareTo(other._wattsPerSquareMeter);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Irradiance left, Irradiance right)
        {
            return left._wattsPerSquareMeter <= right._wattsPerSquareMeter;
        }

        public static bool operator >=(Irradiance left, Irradiance right)
        {
            return left._wattsPerSquareMeter >= right._wattsPerSquareMeter;
        }

        public static bool operator <(Irradiance left, Irradiance right)
        {
            return left._wattsPerSquareMeter < right._wattsPerSquareMeter;
        }

        public static bool operator >(Irradiance left, Irradiance right)
        {
            return left._wattsPerSquareMeter > right._wattsPerSquareMeter;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Irradiance left, Irradiance right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._wattsPerSquareMeter == right._wattsPerSquareMeter;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Irradiance left, Irradiance right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._wattsPerSquareMeter != right._wattsPerSquareMeter;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _wattsPerSquareMeter.Equals(((Irradiance) obj)._wattsPerSquareMeter);
        }

        /// <summary>
        ///     Compare equality to another Irradiance by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Irradiance other, Irradiance maxError)
        {
            return Math.Abs(_wattsPerSquareMeter - other._wattsPerSquareMeter) <= maxError._wattsPerSquareMeter;
        }

        public override int GetHashCode()
        {
            return _wattsPerSquareMeter.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(IrradianceUnit unit)
        {
            switch (unit)
            {
                case IrradianceUnit.KilowattPerSquareCentimeter:
                    return KilowattsPerSquareCentimeter;
                case IrradianceUnit.KilowattPerSquareMeter:
                    return KilowattsPerSquareMeter;
                case IrradianceUnit.MegawattPerSquareCentimeter:
                    return MegawattsPerSquareCentimeter;
                case IrradianceUnit.MegawattPerSquareMeter:
                    return MegawattsPerSquareMeter;
                case IrradianceUnit.MicrowattPerSquareCentimeter:
                    return MicrowattsPerSquareCentimeter;
                case IrradianceUnit.MicrowattPerSquareMeter:
                    return MicrowattsPerSquareMeter;
                case IrradianceUnit.MilliwattPerSquareCentimeter:
                    return MilliwattsPerSquareCentimeter;
                case IrradianceUnit.MilliwattPerSquareMeter:
                    return MilliwattsPerSquareMeter;
                case IrradianceUnit.NanowattPerSquareCentimeter:
                    return NanowattsPerSquareCentimeter;
                case IrradianceUnit.NanowattPerSquareMeter:
                    return NanowattsPerSquareMeter;
                case IrradianceUnit.PicowattPerSquareCentimeter:
                    return PicowattsPerSquareCentimeter;
                case IrradianceUnit.PicowattPerSquareMeter:
                    return PicowattsPerSquareMeter;
                case IrradianceUnit.WattPerSquareCentimeter:
                    return WattsPerSquareCentimeter;
                case IrradianceUnit.WattPerSquareMeter:
                    return WattsPerSquareMeter;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Irradiance Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Irradiance Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<Irradiance, IrradianceUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    IrradianceUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromWattsPerSquareMeter(x.WattsPerSquareMeter + y.WattsPerSquareMeter));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Irradiance result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Irradiance result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Irradiance);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static IrradianceUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static IrradianceUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static IrradianceUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<IrradianceUnit>(str.Trim());

            if (unit == IrradianceUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized IrradianceUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is WattPerSquareMeter
        /// </summary>
        public static IrradianceUnit ToStringDefaultUnit { get; set; } = IrradianceUnit.WattPerSquareMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(IrradianceUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(IrradianceUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(IrradianceUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(IrradianceUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Irradiance
        /// </summary>
        public static Irradiance MaxValue
        {
            get
            {
                return new Irradiance(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Irradiance
        /// </summary>
        public static Irradiance MinValue
        {
            get
            {
                return new Irradiance(double.MinValue);
            }
        }
    }
}
