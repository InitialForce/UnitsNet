//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Mass flow is the ratio of the mass change to the time during which the change occurred (value of mass changes per unit time).
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class MassFlow
#else
    public partial struct MassFlow : IComparable, IComparable<MassFlow>
#endif
    {
        /// <summary>
        ///     Base unit of MassFlow.
        /// </summary>
        private readonly double _gramsPerSecond;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public MassFlow() : this(0)
        {
        }
#endif

        public MassFlow(double gramspersecond)
        {
            _gramsPerSecond = Convert.ToDouble(gramspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        MassFlow(long gramspersecond)
        {
            _gramsPerSecond = Convert.ToDouble(gramspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        MassFlow(decimal gramspersecond)
        {
            _gramsPerSecond = Convert.ToDouble(gramspersecond);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.MassFlow;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static MassFlowUnit BaseUnit
        {
            get { return MassFlowUnit.GramPerSecond; }
        }

        /// <summary>
        ///     All units of measurement for the MassFlow quantity.
        /// </summary>
        public static MassFlowUnit[] Units { get; } = Enum.GetValues(typeof(MassFlowUnit)).Cast<MassFlowUnit>().ToArray();

        /// <summary>
        ///     Get MassFlow in CentigramsPerSecond.
        /// </summary>
        public double CentigramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e-2d; }
        }

        /// <summary>
        ///     Get MassFlow in DecagramsPerSecond.
        /// </summary>
        public double DecagramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e1d; }
        }

        /// <summary>
        ///     Get MassFlow in DecigramsPerSecond.
        /// </summary>
        public double DecigramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e-1d; }
        }

        /// <summary>
        ///     Get MassFlow in GramsPerSecond.
        /// </summary>
        public double GramsPerSecond
        {
            get { return _gramsPerSecond; }
        }

        /// <summary>
        ///     Get MassFlow in HectogramsPerSecond.
        /// </summary>
        public double HectogramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e2d; }
        }

        /// <summary>
        ///     Get MassFlow in KilogramsPerHour.
        /// </summary>
        public double KilogramsPerHour
        {
            get { return _gramsPerSecond*3.6; }
        }

        /// <summary>
        ///     Get MassFlow in KilogramsPerSecond.
        /// </summary>
        public double KilogramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e3d; }
        }

        /// <summary>
        ///     Get MassFlow in MegapoundsPerHour.
        /// </summary>
        public double MegapoundsPerHour
        {
            get { return (_gramsPerSecond*7.93664) / 1e6d; }
        }

        /// <summary>
        ///     Get MassFlow in MicrogramsPerSecond.
        /// </summary>
        public double MicrogramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e-6d; }
        }

        /// <summary>
        ///     Get MassFlow in MilligramsPerSecond.
        /// </summary>
        public double MilligramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e-3d; }
        }

        /// <summary>
        ///     Get MassFlow in NanogramsPerSecond.
        /// </summary>
        public double NanogramsPerSecond
        {
            get { return (_gramsPerSecond) / 1e-9d; }
        }

        /// <summary>
        ///     Get MassFlow in PoundsPerHour.
        /// </summary>
        public double PoundsPerHour
        {
            get { return _gramsPerSecond*7.93664; }
        }

        /// <summary>
        ///     Get MassFlow in ShortTonsPerHour.
        /// </summary>
        public double ShortTonsPerHour
        {
            get { return _gramsPerSecond/251.9957611; }
        }

        /// <summary>
        ///     Get MassFlow in TonnesPerDay.
        /// </summary>
        public double TonnesPerDay
        {
            get { return _gramsPerSecond*0.0864000; }
        }

        #endregion

        #region Static

        public static MassFlow Zero
        {
            get { return new MassFlow(); }
        }

        /// <summary>
        ///     Get MassFlow from CentigramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromCentigramsPerSecond(double centigramspersecond)
        {
            return new MassFlow((centigramspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get MassFlow from CentigramsPerSecond.
        /// </summary>
        public static MassFlow FromCentigramsPerSecond(int centigramspersecond)
        {
            return new MassFlow((centigramspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get MassFlow from CentigramsPerSecond.
        /// </summary>
        public static MassFlow FromCentigramsPerSecond(long centigramspersecond)
        {
            return new MassFlow((centigramspersecond) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from CentigramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromCentigramsPerSecond(decimal centigramspersecond)
        {
            return new MassFlow((Convert.ToDouble(centigramspersecond)) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from DecagramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromDecagramsPerSecond(double decagramspersecond)
        {
            return new MassFlow((decagramspersecond) * 1e1d);
        }

        /// <summary>
        ///     Get MassFlow from DecagramsPerSecond.
        /// </summary>
        public static MassFlow FromDecagramsPerSecond(int decagramspersecond)
        {
            return new MassFlow((decagramspersecond) * 1e1d);
        }

        /// <summary>
        ///     Get MassFlow from DecagramsPerSecond.
        /// </summary>
        public static MassFlow FromDecagramsPerSecond(long decagramspersecond)
        {
            return new MassFlow((decagramspersecond) * 1e1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from DecagramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromDecagramsPerSecond(decimal decagramspersecond)
        {
            return new MassFlow((Convert.ToDouble(decagramspersecond)) * 1e1d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from DecigramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromDecigramsPerSecond(double decigramspersecond)
        {
            return new MassFlow((decigramspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get MassFlow from DecigramsPerSecond.
        /// </summary>
        public static MassFlow FromDecigramsPerSecond(int decigramspersecond)
        {
            return new MassFlow((decigramspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get MassFlow from DecigramsPerSecond.
        /// </summary>
        public static MassFlow FromDecigramsPerSecond(long decigramspersecond)
        {
            return new MassFlow((decigramspersecond) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from DecigramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromDecigramsPerSecond(decimal decigramspersecond)
        {
            return new MassFlow((Convert.ToDouble(decigramspersecond)) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from GramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromGramsPerSecond(double gramspersecond)
        {
            return new MassFlow(gramspersecond);
        }

        /// <summary>
        ///     Get MassFlow from GramsPerSecond.
        /// </summary>
        public static MassFlow FromGramsPerSecond(int gramspersecond)
        {
            return new MassFlow(gramspersecond);
        }

        /// <summary>
        ///     Get MassFlow from GramsPerSecond.
        /// </summary>
        public static MassFlow FromGramsPerSecond(long gramspersecond)
        {
            return new MassFlow(gramspersecond);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from GramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromGramsPerSecond(decimal gramspersecond)
        {
            return new MassFlow(Convert.ToDouble(gramspersecond));
        }
#endif

        /// <summary>
        ///     Get MassFlow from HectogramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromHectogramsPerSecond(double hectogramspersecond)
        {
            return new MassFlow((hectogramspersecond) * 1e2d);
        }

        /// <summary>
        ///     Get MassFlow from HectogramsPerSecond.
        /// </summary>
        public static MassFlow FromHectogramsPerSecond(int hectogramspersecond)
        {
            return new MassFlow((hectogramspersecond) * 1e2d);
        }

        /// <summary>
        ///     Get MassFlow from HectogramsPerSecond.
        /// </summary>
        public static MassFlow FromHectogramsPerSecond(long hectogramspersecond)
        {
            return new MassFlow((hectogramspersecond) * 1e2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from HectogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromHectogramsPerSecond(decimal hectogramspersecond)
        {
            return new MassFlow((Convert.ToDouble(hectogramspersecond)) * 1e2d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from KilogramsPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromKilogramsPerHour(double kilogramsperhour)
        {
            return new MassFlow(kilogramsperhour/3.6);
        }

        /// <summary>
        ///     Get MassFlow from KilogramsPerHour.
        /// </summary>
        public static MassFlow FromKilogramsPerHour(int kilogramsperhour)
        {
            return new MassFlow(kilogramsperhour/3.6);
        }

        /// <summary>
        ///     Get MassFlow from KilogramsPerHour.
        /// </summary>
        public static MassFlow FromKilogramsPerHour(long kilogramsperhour)
        {
            return new MassFlow(kilogramsperhour/3.6);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from KilogramsPerHour of type decimal.
        /// </summary>
        public static MassFlow FromKilogramsPerHour(decimal kilogramsperhour)
        {
            return new MassFlow(Convert.ToDouble(kilogramsperhour)/3.6);
        }
#endif

        /// <summary>
        ///     Get MassFlow from KilogramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromKilogramsPerSecond(double kilogramspersecond)
        {
            return new MassFlow((kilogramspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get MassFlow from KilogramsPerSecond.
        /// </summary>
        public static MassFlow FromKilogramsPerSecond(int kilogramspersecond)
        {
            return new MassFlow((kilogramspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get MassFlow from KilogramsPerSecond.
        /// </summary>
        public static MassFlow FromKilogramsPerSecond(long kilogramspersecond)
        {
            return new MassFlow((kilogramspersecond) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from KilogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromKilogramsPerSecond(decimal kilogramspersecond)
        {
            return new MassFlow((Convert.ToDouble(kilogramspersecond)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from MegapoundsPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromMegapoundsPerHour(double megapoundsperhour)
        {
            return new MassFlow((megapoundsperhour/7.93664) * 1e6d);
        }

        /// <summary>
        ///     Get MassFlow from MegapoundsPerHour.
        /// </summary>
        public static MassFlow FromMegapoundsPerHour(int megapoundsperhour)
        {
            return new MassFlow((megapoundsperhour/7.93664) * 1e6d);
        }

        /// <summary>
        ///     Get MassFlow from MegapoundsPerHour.
        /// </summary>
        public static MassFlow FromMegapoundsPerHour(long megapoundsperhour)
        {
            return new MassFlow((megapoundsperhour/7.93664) * 1e6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from MegapoundsPerHour of type decimal.
        /// </summary>
        public static MassFlow FromMegapoundsPerHour(decimal megapoundsperhour)
        {
            return new MassFlow((Convert.ToDouble(megapoundsperhour)/7.93664) * 1e6d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from MicrogramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromMicrogramsPerSecond(double microgramspersecond)
        {
            return new MassFlow((microgramspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get MassFlow from MicrogramsPerSecond.
        /// </summary>
        public static MassFlow FromMicrogramsPerSecond(int microgramspersecond)
        {
            return new MassFlow((microgramspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get MassFlow from MicrogramsPerSecond.
        /// </summary>
        public static MassFlow FromMicrogramsPerSecond(long microgramspersecond)
        {
            return new MassFlow((microgramspersecond) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from MicrogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromMicrogramsPerSecond(decimal microgramspersecond)
        {
            return new MassFlow((Convert.ToDouble(microgramspersecond)) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from MilligramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromMilligramsPerSecond(double milligramspersecond)
        {
            return new MassFlow((milligramspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get MassFlow from MilligramsPerSecond.
        /// </summary>
        public static MassFlow FromMilligramsPerSecond(int milligramspersecond)
        {
            return new MassFlow((milligramspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get MassFlow from MilligramsPerSecond.
        /// </summary>
        public static MassFlow FromMilligramsPerSecond(long milligramspersecond)
        {
            return new MassFlow((milligramspersecond) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from MilligramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromMilligramsPerSecond(decimal milligramspersecond)
        {
            return new MassFlow((Convert.ToDouble(milligramspersecond)) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from NanogramsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromNanogramsPerSecond(double nanogramspersecond)
        {
            return new MassFlow((nanogramspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get MassFlow from NanogramsPerSecond.
        /// </summary>
        public static MassFlow FromNanogramsPerSecond(int nanogramspersecond)
        {
            return new MassFlow((nanogramspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get MassFlow from NanogramsPerSecond.
        /// </summary>
        public static MassFlow FromNanogramsPerSecond(long nanogramspersecond)
        {
            return new MassFlow((nanogramspersecond) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from NanogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow FromNanogramsPerSecond(decimal nanogramspersecond)
        {
            return new MassFlow((Convert.ToDouble(nanogramspersecond)) * 1e-9d);
        }
#endif

        /// <summary>
        ///     Get MassFlow from PoundsPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromPoundsPerHour(double poundsperhour)
        {
            return new MassFlow(poundsperhour/7.93664);
        }

        /// <summary>
        ///     Get MassFlow from PoundsPerHour.
        /// </summary>
        public static MassFlow FromPoundsPerHour(int poundsperhour)
        {
            return new MassFlow(poundsperhour/7.93664);
        }

        /// <summary>
        ///     Get MassFlow from PoundsPerHour.
        /// </summary>
        public static MassFlow FromPoundsPerHour(long poundsperhour)
        {
            return new MassFlow(poundsperhour/7.93664);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from PoundsPerHour of type decimal.
        /// </summary>
        public static MassFlow FromPoundsPerHour(decimal poundsperhour)
        {
            return new MassFlow(Convert.ToDouble(poundsperhour)/7.93664);
        }
#endif

        /// <summary>
        ///     Get MassFlow from ShortTonsPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromShortTonsPerHour(double shorttonsperhour)
        {
            return new MassFlow(shorttonsperhour*251.9957611);
        }

        /// <summary>
        ///     Get MassFlow from ShortTonsPerHour.
        /// </summary>
        public static MassFlow FromShortTonsPerHour(int shorttonsperhour)
        {
            return new MassFlow(shorttonsperhour*251.9957611);
        }

        /// <summary>
        ///     Get MassFlow from ShortTonsPerHour.
        /// </summary>
        public static MassFlow FromShortTonsPerHour(long shorttonsperhour)
        {
            return new MassFlow(shorttonsperhour*251.9957611);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from ShortTonsPerHour of type decimal.
        /// </summary>
        public static MassFlow FromShortTonsPerHour(decimal shorttonsperhour)
        {
            return new MassFlow(Convert.ToDouble(shorttonsperhour)*251.9957611);
        }
#endif

        /// <summary>
        ///     Get MassFlow from TonnesPerDay.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MassFlow FromTonnesPerDay(double tonnesperday)
        {
            return new MassFlow(tonnesperday/0.0864000);
        }

        /// <summary>
        ///     Get MassFlow from TonnesPerDay.
        /// </summary>
        public static MassFlow FromTonnesPerDay(int tonnesperday)
        {
            return new MassFlow(tonnesperday/0.0864000);
        }

        /// <summary>
        ///     Get MassFlow from TonnesPerDay.
        /// </summary>
        public static MassFlow FromTonnesPerDay(long tonnesperday)
        {
            return new MassFlow(tonnesperday/0.0864000);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MassFlow from TonnesPerDay of type decimal.
        /// </summary>
        public static MassFlow FromTonnesPerDay(decimal tonnesperday)
        {
            return new MassFlow(Convert.ToDouble(tonnesperday)/0.0864000);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable MassFlow from nullable CentigramsPerSecond.
        /// </summary>
        public static MassFlow? FromCentigramsPerSecond(double? centigramspersecond)
        {
            if (centigramspersecond.HasValue)
            {
                return FromCentigramsPerSecond(centigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable CentigramsPerSecond.
        /// </summary>
        public static MassFlow? FromCentigramsPerSecond(int? centigramspersecond)
        {
            if (centigramspersecond.HasValue)
            {
                return FromCentigramsPerSecond(centigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable CentigramsPerSecond.
        /// </summary>
        public static MassFlow? FromCentigramsPerSecond(long? centigramspersecond)
        {
            if (centigramspersecond.HasValue)
            {
                return FromCentigramsPerSecond(centigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from CentigramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromCentigramsPerSecond(decimal? centigramspersecond)
        {
            if (centigramspersecond.HasValue)
            {
                return FromCentigramsPerSecond(centigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecagramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecagramsPerSecond(double? decagramspersecond)
        {
            if (decagramspersecond.HasValue)
            {
                return FromDecagramsPerSecond(decagramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecagramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecagramsPerSecond(int? decagramspersecond)
        {
            if (decagramspersecond.HasValue)
            {
                return FromDecagramsPerSecond(decagramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecagramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecagramsPerSecond(long? decagramspersecond)
        {
            if (decagramspersecond.HasValue)
            {
                return FromDecagramsPerSecond(decagramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from DecagramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromDecagramsPerSecond(decimal? decagramspersecond)
        {
            if (decagramspersecond.HasValue)
            {
                return FromDecagramsPerSecond(decagramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecigramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecigramsPerSecond(double? decigramspersecond)
        {
            if (decigramspersecond.HasValue)
            {
                return FromDecigramsPerSecond(decigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecigramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecigramsPerSecond(int? decigramspersecond)
        {
            if (decigramspersecond.HasValue)
            {
                return FromDecigramsPerSecond(decigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecigramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecigramsPerSecond(long? decigramspersecond)
        {
            if (decigramspersecond.HasValue)
            {
                return FromDecigramsPerSecond(decigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from DecigramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromDecigramsPerSecond(decimal? decigramspersecond)
        {
            if (decigramspersecond.HasValue)
            {
                return FromDecigramsPerSecond(decigramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable GramsPerSecond.
        /// </summary>
        public static MassFlow? FromGramsPerSecond(double? gramspersecond)
        {
            if (gramspersecond.HasValue)
            {
                return FromGramsPerSecond(gramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable GramsPerSecond.
        /// </summary>
        public static MassFlow? FromGramsPerSecond(int? gramspersecond)
        {
            if (gramspersecond.HasValue)
            {
                return FromGramsPerSecond(gramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable GramsPerSecond.
        /// </summary>
        public static MassFlow? FromGramsPerSecond(long? gramspersecond)
        {
            if (gramspersecond.HasValue)
            {
                return FromGramsPerSecond(gramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from GramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromGramsPerSecond(decimal? gramspersecond)
        {
            if (gramspersecond.HasValue)
            {
                return FromGramsPerSecond(gramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable HectogramsPerSecond.
        /// </summary>
        public static MassFlow? FromHectogramsPerSecond(double? hectogramspersecond)
        {
            if (hectogramspersecond.HasValue)
            {
                return FromHectogramsPerSecond(hectogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable HectogramsPerSecond.
        /// </summary>
        public static MassFlow? FromHectogramsPerSecond(int? hectogramspersecond)
        {
            if (hectogramspersecond.HasValue)
            {
                return FromHectogramsPerSecond(hectogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable HectogramsPerSecond.
        /// </summary>
        public static MassFlow? FromHectogramsPerSecond(long? hectogramspersecond)
        {
            if (hectogramspersecond.HasValue)
            {
                return FromHectogramsPerSecond(hectogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from HectogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromHectogramsPerSecond(decimal? hectogramspersecond)
        {
            if (hectogramspersecond.HasValue)
            {
                return FromHectogramsPerSecond(hectogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerHour.
        /// </summary>
        public static MassFlow? FromKilogramsPerHour(double? kilogramsperhour)
        {
            if (kilogramsperhour.HasValue)
            {
                return FromKilogramsPerHour(kilogramsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerHour.
        /// </summary>
        public static MassFlow? FromKilogramsPerHour(int? kilogramsperhour)
        {
            if (kilogramsperhour.HasValue)
            {
                return FromKilogramsPerHour(kilogramsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerHour.
        /// </summary>
        public static MassFlow? FromKilogramsPerHour(long? kilogramsperhour)
        {
            if (kilogramsperhour.HasValue)
            {
                return FromKilogramsPerHour(kilogramsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from KilogramsPerHour of type decimal.
        /// </summary>
        public static MassFlow? FromKilogramsPerHour(decimal? kilogramsperhour)
        {
            if (kilogramsperhour.HasValue)
            {
                return FromKilogramsPerHour(kilogramsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerSecond.
        /// </summary>
        public static MassFlow? FromKilogramsPerSecond(double? kilogramspersecond)
        {
            if (kilogramspersecond.HasValue)
            {
                return FromKilogramsPerSecond(kilogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerSecond.
        /// </summary>
        public static MassFlow? FromKilogramsPerSecond(int? kilogramspersecond)
        {
            if (kilogramspersecond.HasValue)
            {
                return FromKilogramsPerSecond(kilogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerSecond.
        /// </summary>
        public static MassFlow? FromKilogramsPerSecond(long? kilogramspersecond)
        {
            if (kilogramspersecond.HasValue)
            {
                return FromKilogramsPerSecond(kilogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from KilogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromKilogramsPerSecond(decimal? kilogramspersecond)
        {
            if (kilogramspersecond.HasValue)
            {
                return FromKilogramsPerSecond(kilogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MegapoundsPerHour.
        /// </summary>
        public static MassFlow? FromMegapoundsPerHour(double? megapoundsperhour)
        {
            if (megapoundsperhour.HasValue)
            {
                return FromMegapoundsPerHour(megapoundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MegapoundsPerHour.
        /// </summary>
        public static MassFlow? FromMegapoundsPerHour(int? megapoundsperhour)
        {
            if (megapoundsperhour.HasValue)
            {
                return FromMegapoundsPerHour(megapoundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MegapoundsPerHour.
        /// </summary>
        public static MassFlow? FromMegapoundsPerHour(long? megapoundsperhour)
        {
            if (megapoundsperhour.HasValue)
            {
                return FromMegapoundsPerHour(megapoundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from MegapoundsPerHour of type decimal.
        /// </summary>
        public static MassFlow? FromMegapoundsPerHour(decimal? megapoundsperhour)
        {
            if (megapoundsperhour.HasValue)
            {
                return FromMegapoundsPerHour(megapoundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MicrogramsPerSecond.
        /// </summary>
        public static MassFlow? FromMicrogramsPerSecond(double? microgramspersecond)
        {
            if (microgramspersecond.HasValue)
            {
                return FromMicrogramsPerSecond(microgramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MicrogramsPerSecond.
        /// </summary>
        public static MassFlow? FromMicrogramsPerSecond(int? microgramspersecond)
        {
            if (microgramspersecond.HasValue)
            {
                return FromMicrogramsPerSecond(microgramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MicrogramsPerSecond.
        /// </summary>
        public static MassFlow? FromMicrogramsPerSecond(long? microgramspersecond)
        {
            if (microgramspersecond.HasValue)
            {
                return FromMicrogramsPerSecond(microgramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from MicrogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromMicrogramsPerSecond(decimal? microgramspersecond)
        {
            if (microgramspersecond.HasValue)
            {
                return FromMicrogramsPerSecond(microgramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MilligramsPerSecond.
        /// </summary>
        public static MassFlow? FromMilligramsPerSecond(double? milligramspersecond)
        {
            if (milligramspersecond.HasValue)
            {
                return FromMilligramsPerSecond(milligramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MilligramsPerSecond.
        /// </summary>
        public static MassFlow? FromMilligramsPerSecond(int? milligramspersecond)
        {
            if (milligramspersecond.HasValue)
            {
                return FromMilligramsPerSecond(milligramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MilligramsPerSecond.
        /// </summary>
        public static MassFlow? FromMilligramsPerSecond(long? milligramspersecond)
        {
            if (milligramspersecond.HasValue)
            {
                return FromMilligramsPerSecond(milligramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from MilligramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromMilligramsPerSecond(decimal? milligramspersecond)
        {
            if (milligramspersecond.HasValue)
            {
                return FromMilligramsPerSecond(milligramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable NanogramsPerSecond.
        /// </summary>
        public static MassFlow? FromNanogramsPerSecond(double? nanogramspersecond)
        {
            if (nanogramspersecond.HasValue)
            {
                return FromNanogramsPerSecond(nanogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable NanogramsPerSecond.
        /// </summary>
        public static MassFlow? FromNanogramsPerSecond(int? nanogramspersecond)
        {
            if (nanogramspersecond.HasValue)
            {
                return FromNanogramsPerSecond(nanogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable NanogramsPerSecond.
        /// </summary>
        public static MassFlow? FromNanogramsPerSecond(long? nanogramspersecond)
        {
            if (nanogramspersecond.HasValue)
            {
                return FromNanogramsPerSecond(nanogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from NanogramsPerSecond of type decimal.
        /// </summary>
        public static MassFlow? FromNanogramsPerSecond(decimal? nanogramspersecond)
        {
            if (nanogramspersecond.HasValue)
            {
                return FromNanogramsPerSecond(nanogramspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable PoundsPerHour.
        /// </summary>
        public static MassFlow? FromPoundsPerHour(double? poundsperhour)
        {
            if (poundsperhour.HasValue)
            {
                return FromPoundsPerHour(poundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable PoundsPerHour.
        /// </summary>
        public static MassFlow? FromPoundsPerHour(int? poundsperhour)
        {
            if (poundsperhour.HasValue)
            {
                return FromPoundsPerHour(poundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable PoundsPerHour.
        /// </summary>
        public static MassFlow? FromPoundsPerHour(long? poundsperhour)
        {
            if (poundsperhour.HasValue)
            {
                return FromPoundsPerHour(poundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from PoundsPerHour of type decimal.
        /// </summary>
        public static MassFlow? FromPoundsPerHour(decimal? poundsperhour)
        {
            if (poundsperhour.HasValue)
            {
                return FromPoundsPerHour(poundsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable ShortTonsPerHour.
        /// </summary>
        public static MassFlow? FromShortTonsPerHour(double? shorttonsperhour)
        {
            if (shorttonsperhour.HasValue)
            {
                return FromShortTonsPerHour(shorttonsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable ShortTonsPerHour.
        /// </summary>
        public static MassFlow? FromShortTonsPerHour(int? shorttonsperhour)
        {
            if (shorttonsperhour.HasValue)
            {
                return FromShortTonsPerHour(shorttonsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable ShortTonsPerHour.
        /// </summary>
        public static MassFlow? FromShortTonsPerHour(long? shorttonsperhour)
        {
            if (shorttonsperhour.HasValue)
            {
                return FromShortTonsPerHour(shorttonsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from ShortTonsPerHour of type decimal.
        /// </summary>
        public static MassFlow? FromShortTonsPerHour(decimal? shorttonsperhour)
        {
            if (shorttonsperhour.HasValue)
            {
                return FromShortTonsPerHour(shorttonsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable TonnesPerDay.
        /// </summary>
        public static MassFlow? FromTonnesPerDay(double? tonnesperday)
        {
            if (tonnesperday.HasValue)
            {
                return FromTonnesPerDay(tonnesperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable TonnesPerDay.
        /// </summary>
        public static MassFlow? FromTonnesPerDay(int? tonnesperday)
        {
            if (tonnesperday.HasValue)
            {
                return FromTonnesPerDay(tonnesperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable TonnesPerDay.
        /// </summary>
        public static MassFlow? FromTonnesPerDay(long? tonnesperday)
        {
            if (tonnesperday.HasValue)
            {
                return FromTonnesPerDay(tonnesperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassFlow from TonnesPerDay of type decimal.
        /// </summary>
        public static MassFlow? FromTonnesPerDay(decimal? tonnesperday)
        {
            if (tonnesperday.HasValue)
            {
                return FromTonnesPerDay(tonnesperday.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassFlowUnit" /> to <see cref="MassFlow" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassFlow unit value.</returns>
        public static MassFlow From(double val, MassFlowUnit fromUnit)
        {
            switch (fromUnit)
            {
                case MassFlowUnit.CentigramPerSecond:
                    return FromCentigramsPerSecond(val);
                case MassFlowUnit.DecagramPerSecond:
                    return FromDecagramsPerSecond(val);
                case MassFlowUnit.DecigramPerSecond:
                    return FromDecigramsPerSecond(val);
                case MassFlowUnit.GramPerSecond:
                    return FromGramsPerSecond(val);
                case MassFlowUnit.HectogramPerSecond:
                    return FromHectogramsPerSecond(val);
                case MassFlowUnit.KilogramPerHour:
                    return FromKilogramsPerHour(val);
                case MassFlowUnit.KilogramPerSecond:
                    return FromKilogramsPerSecond(val);
                case MassFlowUnit.MegapoundPerHour:
                    return FromMegapoundsPerHour(val);
                case MassFlowUnit.MicrogramPerSecond:
                    return FromMicrogramsPerSecond(val);
                case MassFlowUnit.MilligramPerSecond:
                    return FromMilligramsPerSecond(val);
                case MassFlowUnit.NanogramPerSecond:
                    return FromNanogramsPerSecond(val);
                case MassFlowUnit.PoundPerHour:
                    return FromPoundsPerHour(val);
                case MassFlowUnit.ShortTonPerHour:
                    return FromShortTonsPerHour(val);
                case MassFlowUnit.TonnePerDay:
                    return FromTonnesPerDay(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassFlowUnit" /> to <see cref="MassFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassFlow unit value.</returns>
        public static MassFlow? From(double? value, MassFlowUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case MassFlowUnit.CentigramPerSecond:
                    return FromCentigramsPerSecond(value.Value);
                case MassFlowUnit.DecagramPerSecond:
                    return FromDecagramsPerSecond(value.Value);
                case MassFlowUnit.DecigramPerSecond:
                    return FromDecigramsPerSecond(value.Value);
                case MassFlowUnit.GramPerSecond:
                    return FromGramsPerSecond(value.Value);
                case MassFlowUnit.HectogramPerSecond:
                    return FromHectogramsPerSecond(value.Value);
                case MassFlowUnit.KilogramPerHour:
                    return FromKilogramsPerHour(value.Value);
                case MassFlowUnit.KilogramPerSecond:
                    return FromKilogramsPerSecond(value.Value);
                case MassFlowUnit.MegapoundPerHour:
                    return FromMegapoundsPerHour(value.Value);
                case MassFlowUnit.MicrogramPerSecond:
                    return FromMicrogramsPerSecond(value.Value);
                case MassFlowUnit.MilligramPerSecond:
                    return FromMilligramsPerSecond(value.Value);
                case MassFlowUnit.NanogramPerSecond:
                    return FromNanogramsPerSecond(value.Value);
                case MassFlowUnit.PoundPerHour:
                    return FromPoundsPerHour(value.Value);
                case MassFlowUnit.ShortTonPerHour:
                    return FromShortTonsPerHour(value.Value);
                case MassFlowUnit.TonnePerDay:
                    return FromTonnesPerDay(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(MassFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(MassFlowUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static MassFlow operator -(MassFlow right)
        {
            return new MassFlow(-right._gramsPerSecond);
        }

        public static MassFlow operator +(MassFlow left, MassFlow right)
        {
            return new MassFlow(left._gramsPerSecond + right._gramsPerSecond);
        }

        public static MassFlow operator -(MassFlow left, MassFlow right)
        {
            return new MassFlow(left._gramsPerSecond - right._gramsPerSecond);
        }

        public static MassFlow operator *(double left, MassFlow right)
        {
            return new MassFlow(left*right._gramsPerSecond);
        }

        public static MassFlow operator *(MassFlow left, double right)
        {
            return new MassFlow(left._gramsPerSecond*(double)right);
        }

        public static MassFlow operator /(MassFlow left, double right)
        {
            return new MassFlow(left._gramsPerSecond/(double)right);
        }

        public static double operator /(MassFlow left, MassFlow right)
        {
            return Convert.ToDouble(left._gramsPerSecond/right._gramsPerSecond);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is MassFlow)) throw new ArgumentException("Expected type MassFlow.", "obj");
            return CompareTo((MassFlow) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(MassFlow other)
        {
            return _gramsPerSecond.CompareTo(other._gramsPerSecond);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(MassFlow left, MassFlow right)
        {
            return left._gramsPerSecond <= right._gramsPerSecond;
        }

        public static bool operator >=(MassFlow left, MassFlow right)
        {
            return left._gramsPerSecond >= right._gramsPerSecond;
        }

        public static bool operator <(MassFlow left, MassFlow right)
        {
            return left._gramsPerSecond < right._gramsPerSecond;
        }

        public static bool operator >(MassFlow left, MassFlow right)
        {
            return left._gramsPerSecond > right._gramsPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(MassFlow left, MassFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._gramsPerSecond == right._gramsPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(MassFlow left, MassFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._gramsPerSecond != right._gramsPerSecond;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _gramsPerSecond.Equals(((MassFlow) obj)._gramsPerSecond);
        }

        /// <summary>
        ///     Compare equality to another MassFlow by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(MassFlow other, MassFlow maxError)
        {
            return Math.Abs(_gramsPerSecond - other._gramsPerSecond) <= maxError._gramsPerSecond;
        }

        public override int GetHashCode()
        {
            return _gramsPerSecond.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(MassFlowUnit unit)
        {
            switch (unit)
            {
                case MassFlowUnit.CentigramPerSecond:
                    return CentigramsPerSecond;
                case MassFlowUnit.DecagramPerSecond:
                    return DecagramsPerSecond;
                case MassFlowUnit.DecigramPerSecond:
                    return DecigramsPerSecond;
                case MassFlowUnit.GramPerSecond:
                    return GramsPerSecond;
                case MassFlowUnit.HectogramPerSecond:
                    return HectogramsPerSecond;
                case MassFlowUnit.KilogramPerHour:
                    return KilogramsPerHour;
                case MassFlowUnit.KilogramPerSecond:
                    return KilogramsPerSecond;
                case MassFlowUnit.MegapoundPerHour:
                    return MegapoundsPerHour;
                case MassFlowUnit.MicrogramPerSecond:
                    return MicrogramsPerSecond;
                case MassFlowUnit.MilligramPerSecond:
                    return MilligramsPerSecond;
                case MassFlowUnit.NanogramPerSecond:
                    return NanogramsPerSecond;
                case MassFlowUnit.PoundPerHour:
                    return PoundsPerHour;
                case MassFlowUnit.ShortTonPerHour:
                    return ShortTonsPerHour;
                case MassFlowUnit.TonnePerDay:
                    return TonnesPerDay;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MassFlow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MassFlow Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<MassFlow, MassFlowUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    MassFlowUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromGramsPerSecond(x.GramsPerSecond + y.GramsPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MassFlow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out MassFlow result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(MassFlow);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassFlowUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static MassFlowUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<MassFlowUnit>(str.Trim());

            if (unit == MassFlowUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized MassFlowUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is GramPerSecond
        /// </summary>
        public static MassFlowUnit ToStringDefaultUnit { get; set; } = MassFlowUnit.GramPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(MassFlowUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(MassFlowUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(MassFlowUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(MassFlowUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of MassFlow
        /// </summary>
        public static MassFlow MaxValue
        {
            get
            {
                return new MassFlow(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of MassFlow
        /// </summary>
        public static MassFlow MinValue
        {
            get
            {
                return new MassFlow(double.MinValue);
            }
        }
    }
}
