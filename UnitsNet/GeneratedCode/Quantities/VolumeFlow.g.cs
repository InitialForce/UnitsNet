//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    public partial struct VolumeFlow<T> : IQuantity<VolumeFlowUnit>, IEquatable<VolumeFlow<T>>, IComparable, IComparable<VolumeFlow<T>>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeFlowUnit? _unit;

        static VolumeFlow()
        {
            BaseDimensions = new BaseDimensions(3, 0, -1, 0, 0, 0, 0);

            Info = new QuantityInfo<VolumeFlowUnit>(QuantityType.VolumeFlow,
                new UnitInfo<VolumeFlowUnit>[] {
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CentiliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CentiliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicDecimeterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicFootPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicFootPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicFootPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMillimeterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.DeciliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.DeciliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.KiloliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.KiloliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.KilousGallonPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MegaliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MegaukGallonPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MicroliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MicroliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MilliliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MilliliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MillionUsGallonsPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.NanoliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.NanoliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UkGallonPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UkGallonPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UkGallonPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UkGallonPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerSecond, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public VolumeFlow(double value, VolumeFlowUnit unit)
        {
            if(unit == VolumeFlowUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public VolumeFlow(double value, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<VolumeFlowUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of <see cref="VolumeFlow{T}" />, which is CubicMeterPerSecond. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit { get; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of <see cref="VolumeFlow{T}" />
        /// </summary>
        public static VolumeFlow<T> MaxValue { get; } = new VolumeFlow<T>(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of <see cref="VolumeFlow{T}" />
        /// </summary>
        public static VolumeFlow<T> MinValue { get; } = new VolumeFlow<T>(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.VolumeFlow;

        /// <summary>
        ///     All units of measurement for the <see cref="VolumeFlow{T}" /> quantity.
        /// </summary>
        public static VolumeFlowUnit[] Units { get; } = Enum.GetValues(typeof(VolumeFlowUnit)).Cast<VolumeFlowUnit>().Except(new VolumeFlowUnit[]{ VolumeFlowUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerSecond.
        /// </summary>
        public static VolumeFlow<T> Zero { get; } = new VolumeFlow<T>(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public VolumeFlowUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<VolumeFlowUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => VolumeFlow<T>.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => VolumeFlow<T>.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in AcreFeetPerDay.
        /// </summary>
        public double AcreFeetPerDay => As(VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in AcreFeetPerHour.
        /// </summary>
        public double AcreFeetPerHour => As(VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in AcreFeetPerMinute.
        /// </summary>
        public double AcreFeetPerMinute => As(VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in AcreFeetPerSecond.
        /// </summary>
        public double AcreFeetPerSecond => As(VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CentilitersPerDay.
        /// </summary>
        public double CentilitersPerDay => As(VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute => As(VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicDecimetersPerMinute.
        /// </summary>
        public double CubicDecimetersPerMinute => As(VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicFeetPerHour.
        /// </summary>
        public double CubicFeetPerHour => As(VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicFeetPerMinute.
        /// </summary>
        public double CubicFeetPerMinute => As(VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicFeetPerSecond.
        /// </summary>
        public double CubicFeetPerSecond => As(VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicMetersPerDay.
        /// </summary>
        public double CubicMetersPerDay => As(VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicMetersPerHour.
        /// </summary>
        public double CubicMetersPerHour => As(VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicMetersPerMinute.
        /// </summary>
        public double CubicMetersPerMinute => As(VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicMetersPerSecond.
        /// </summary>
        public double CubicMetersPerSecond => As(VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicMillimetersPerSecond.
        /// </summary>
        public double CubicMillimetersPerSecond => As(VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicYardsPerDay.
        /// </summary>
        public double CubicYardsPerDay => As(VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicYardsPerHour.
        /// </summary>
        public double CubicYardsPerHour => As(VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicYardsPerMinute.
        /// </summary>
        public double CubicYardsPerMinute => As(VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in CubicYardsPerSecond.
        /// </summary>
        public double CubicYardsPerSecond => As(VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in DecilitersPerDay.
        /// </summary>
        public double DecilitersPerDay => As(VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute => As(VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in KilolitersPerDay.
        /// </summary>
        public double KilolitersPerDay => As(VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute => As(VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in KilousGallonsPerMinute.
        /// </summary>
        public double KilousGallonsPerMinute => As(VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in LitersPerDay.
        /// </summary>
        public double LitersPerDay => As(VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in LitersPerHour.
        /// </summary>
        public double LitersPerHour => As(VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in LitersPerMinute.
        /// </summary>
        public double LitersPerMinute => As(VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in LitersPerSecond.
        /// </summary>
        public double LitersPerSecond => As(VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in MegalitersPerDay.
        /// </summary>
        public double MegalitersPerDay => As(VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in MegaukGallonsPerSecond.
        /// </summary>
        public double MegaukGallonsPerSecond => As(VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in MicrolitersPerDay.
        /// </summary>
        public double MicrolitersPerDay => As(VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute => As(VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in MillilitersPerDay.
        /// </summary>
        public double MillilitersPerDay => As(VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute => As(VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in MillionUsGallonsPerDay.
        /// </summary>
        public double MillionUsGallonsPerDay => As(VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in NanolitersPerDay.
        /// </summary>
        public double NanolitersPerDay => As(VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute => As(VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in OilBarrelsPerDay.
        /// </summary>
        public double OilBarrelsPerDay => As(VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in OilBarrelsPerHour.
        /// </summary>
        public double OilBarrelsPerHour => As(VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in OilBarrelsPerMinute.
        /// </summary>
        public double OilBarrelsPerMinute => As(VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in OilBarrelsPerSecond.
        /// </summary>
        public double OilBarrelsPerSecond => As(VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UkGallonsPerDay.
        /// </summary>
        public double UkGallonsPerDay => As(VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UkGallonsPerHour.
        /// </summary>
        public double UkGallonsPerHour => As(VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UkGallonsPerMinute.
        /// </summary>
        public double UkGallonsPerMinute => As(VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UkGallonsPerSecond.
        /// </summary>
        public double UkGallonsPerSecond => As(VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UsGallonsPerDay.
        /// </summary>
        public double UsGallonsPerDay => As(VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UsGallonsPerHour.
        /// </summary>
        public double UsGallonsPerHour => As(VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UsGallonsPerMinute.
        /// </summary>
        public double UsGallonsPerMinute => As(VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> in UsGallonsPerSecond.
        /// </summary>
        public double UsGallonsPerSecond => As(VolumeFlowUnit.UsGallonPerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(VolumeFlowUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from AcreFeetPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromAcreFeetPerDay(QuantityValue acrefeetperday)
        {
            double value = (double) acrefeetperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.AcreFootPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from AcreFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromAcreFeetPerHour(QuantityValue acrefeetperhour)
        {
            double value = (double) acrefeetperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.AcreFootPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from AcreFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromAcreFeetPerMinute(QuantityValue acrefeetperminute)
        {
            double value = (double) acrefeetperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.AcreFootPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from AcreFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromAcreFeetPerSecond(QuantityValue acrefeetpersecond)
        {
            double value = (double) acrefeetpersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.AcreFootPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CentilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCentilitersPerDay(QuantityValue centilitersperday)
        {
            double value = (double) centilitersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CentiliterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CentilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCentilitersPerMinute(QuantityValue centilitersperminute)
        {
            double value = (double) centilitersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CentiliterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicDecimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicDecimetersPerMinute(QuantityValue cubicdecimetersperminute)
        {
            double value = (double) cubicdecimetersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicDecimeterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicFeetPerHour(QuantityValue cubicfeetperhour)
        {
            double value = (double) cubicfeetperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicFootPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicFeetPerMinute(QuantityValue cubicfeetperminute)
        {
            double value = (double) cubicfeetperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicFootPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicFeetPerSecond(QuantityValue cubicfeetpersecond)
        {
            double value = (double) cubicfeetpersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicFootPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicMetersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicMetersPerDay(QuantityValue cubicmetersperday)
        {
            double value = (double) cubicmetersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicMeterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicMetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicMetersPerHour(QuantityValue cubicmetersperhour)
        {
            double value = (double) cubicmetersperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicMeterPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicMetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicMetersPerMinute(QuantityValue cubicmetersperminute)
        {
            double value = (double) cubicmetersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicMeterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicMetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicMetersPerSecond(QuantityValue cubicmeterspersecond)
        {
            double value = (double) cubicmeterspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicMeterPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicMillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicMillimetersPerSecond(QuantityValue cubicmillimeterspersecond)
        {
            double value = (double) cubicmillimeterspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicMillimeterPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicYardsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicYardsPerDay(QuantityValue cubicyardsperday)
        {
            double value = (double) cubicyardsperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicYardPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicYardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicYardsPerHour(QuantityValue cubicyardsperhour)
        {
            double value = (double) cubicyardsperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicYardPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicYardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicYardsPerMinute(QuantityValue cubicyardsperminute)
        {
            double value = (double) cubicyardsperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicYardPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from CubicYardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromCubicYardsPerSecond(QuantityValue cubicyardspersecond)
        {
            double value = (double) cubicyardspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.CubicYardPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from DecilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromDecilitersPerDay(QuantityValue decilitersperday)
        {
            double value = (double) decilitersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.DeciliterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from DecilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromDecilitersPerMinute(QuantityValue decilitersperminute)
        {
            double value = (double) decilitersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.DeciliterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from KilolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromKilolitersPerDay(QuantityValue kilolitersperday)
        {
            double value = (double) kilolitersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.KiloliterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from KilolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromKilolitersPerMinute(QuantityValue kilolitersperminute)
        {
            double value = (double) kilolitersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.KiloliterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from KilousGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromKilousGallonsPerMinute(QuantityValue kilousgallonsperminute)
        {
            double value = (double) kilousgallonsperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.KilousGallonPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from LitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromLitersPerDay(QuantityValue litersperday)
        {
            double value = (double) litersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.LiterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from LitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromLitersPerHour(QuantityValue litersperhour)
        {
            double value = (double) litersperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.LiterPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from LitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromLitersPerMinute(QuantityValue litersperminute)
        {
            double value = (double) litersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.LiterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from LitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromLitersPerSecond(QuantityValue literspersecond)
        {
            double value = (double) literspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.LiterPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from MegalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromMegalitersPerDay(QuantityValue megalitersperday)
        {
            double value = (double) megalitersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.MegaliterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from MegaukGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromMegaukGallonsPerSecond(QuantityValue megaukgallonspersecond)
        {
            double value = (double) megaukgallonspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.MegaukGallonPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from MicrolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromMicrolitersPerDay(QuantityValue microlitersperday)
        {
            double value = (double) microlitersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.MicroliterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from MicrolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromMicrolitersPerMinute(QuantityValue microlitersperminute)
        {
            double value = (double) microlitersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.MicroliterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from MillilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromMillilitersPerDay(QuantityValue millilitersperday)
        {
            double value = (double) millilitersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.MilliliterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from MillilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromMillilitersPerMinute(QuantityValue millilitersperminute)
        {
            double value = (double) millilitersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.MilliliterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from MillionUsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromMillionUsGallonsPerDay(QuantityValue millionusgallonsperday)
        {
            double value = (double) millionusgallonsperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.MillionUsGallonsPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from NanolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromNanolitersPerDay(QuantityValue nanolitersperday)
        {
            double value = (double) nanolitersperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.NanoliterPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from NanolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromNanolitersPerMinute(QuantityValue nanolitersperminute)
        {
            double value = (double) nanolitersperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.NanoliterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from OilBarrelsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromOilBarrelsPerDay(QuantityValue oilbarrelsperday)
        {
            double value = (double) oilbarrelsperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.OilBarrelPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from OilBarrelsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromOilBarrelsPerHour(QuantityValue oilbarrelsperhour)
        {
            double value = (double) oilbarrelsperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.OilBarrelPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from OilBarrelsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromOilBarrelsPerMinute(QuantityValue oilbarrelsperminute)
        {
            double value = (double) oilbarrelsperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.OilBarrelPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from OilBarrelsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromOilBarrelsPerSecond(QuantityValue oilbarrelspersecond)
        {
            double value = (double) oilbarrelspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.OilBarrelPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UkGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUkGallonsPerDay(QuantityValue ukgallonsperday)
        {
            double value = (double) ukgallonsperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UkGallonPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UkGallonsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUkGallonsPerHour(QuantityValue ukgallonsperhour)
        {
            double value = (double) ukgallonsperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UkGallonPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UkGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUkGallonsPerMinute(QuantityValue ukgallonsperminute)
        {
            double value = (double) ukgallonsperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UkGallonPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UkGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUkGallonsPerSecond(QuantityValue ukgallonspersecond)
        {
            double value = (double) ukgallonspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UkGallonPerSecond);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUsGallonsPerDay(QuantityValue usgallonsperday)
        {
            double value = (double) usgallonsperday;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UsGallonPerDay);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UsGallonsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUsGallonsPerHour(QuantityValue usgallonsperhour)
        {
            double value = (double) usgallonsperhour;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UsGallonPerHour);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UsGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUsGallonsPerMinute(QuantityValue usgallonsperminute)
        {
            double value = (double) usgallonsperminute;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UsGallonPerMinute);
        }
        /// <summary>
        ///     Get <see cref="VolumeFlow{T}" /> from UsGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow<T> FromUsGallonsPerSecond(QuantityValue usgallonspersecond)
        {
            double value = (double) usgallonspersecond;
            return new VolumeFlow<T>(value, VolumeFlowUnit.UsGallonPerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow{T}" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><see cref="VolumeFlow{T}" /> unit value.</returns>
        public static VolumeFlow<T> From(QuantityValue value, VolumeFlowUnit fromUnit)
        {
            return new VolumeFlow<T>((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeFlow<T> Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static VolumeFlow<T> Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<VolumeFlow<T>, VolumeFlowUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out VolumeFlow<T> result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out VolumeFlow<T> result)
        {
            return QuantityParser.Default.TryParse<VolumeFlow<T>, VolumeFlowUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeFlowUnit ParseUnit(string str, [CanBeNull] IFormatProvider provider)
        {
            return UnitParser.Default.Parse<VolumeFlowUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.VolumeFlowUnit)"/>
        public static bool TryParseUnit(string str, out VolumeFlowUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out VolumeFlowUnit unit)
        {
            return UnitParser.Default.TryParse<VolumeFlowUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static VolumeFlow<T> operator -(VolumeFlow<T> right)
        {
            return new VolumeFlow<T>(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow{T}"/> from adding two <see cref="VolumeFlow{T}"/>.</summary>
        public static VolumeFlow<T> operator +(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return new VolumeFlow<T>(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow{T}"/> from subtracting two <see cref="VolumeFlow{T}"/>.</summary>
        public static VolumeFlow<T> operator -(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return new VolumeFlow<T>(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow{T}"/> from multiplying value and <see cref="VolumeFlow{T}"/>.</summary>
        public static VolumeFlow<T> operator *(double left, VolumeFlow<T> right)
        {
            return new VolumeFlow<T>(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow{T}"/> from multiplying value and <see cref="VolumeFlow{T}"/>.</summary>
        public static VolumeFlow<T> operator *(VolumeFlow<T> left, double right)
        {
            return new VolumeFlow<T>(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow{T}"/> from dividing <see cref="VolumeFlow{T}"/> by value.</summary>
        public static VolumeFlow<T> operator /(VolumeFlow<T> left, double right)
        {
            return new VolumeFlow<T>(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="VolumeFlow{T}"/> by <see cref="VolumeFlow{T}"/>.</summary>
        public static double operator /(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return left.CubicMetersPerSecond / right.CubicMetersPerSecond;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(VolumeFlow{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(VolumeFlow{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(VolumeFlow<T> left, VolumeFlow<T> right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is VolumeFlow<T> objVolumeFlow)) throw new ArgumentException("Expected type VolumeFlow.", nameof(obj));

            return CompareTo(objVolumeFlow);
        }

        /// <inheritdoc />
        public int CompareTo(VolumeFlow<T> other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(VolumeFlow{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is VolumeFlow<T> objVolumeFlow))
                return false;

            return Equals(objVolumeFlow);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(VolumeFlow{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(VolumeFlow<T> other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another <see cref="VolumeFlow{T}" /> within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(VolumeFlow<T> other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="VolumeFlow{T}" />.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeFlowUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is VolumeFlowUnit unitAsVolumeFlowUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeFlowUnit)} is supported.", nameof(unit));

            return As(unitAsVolumeFlowUnit);
        }

        /// <summary>
        ///     Converts this <see cref="VolumeFlow{T}" /> to another <see cref="VolumeFlow{T}" /> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A <see cref="VolumeFlow{T}" /> with the specified unit.</returns>
        public VolumeFlow<T> ToUnit(VolumeFlowUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new VolumeFlow<T>(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is VolumeFlowUnit unitAsVolumeFlowUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeFlowUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsVolumeFlowUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public VolumeFlow<T> ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<VolumeFlowUnit> IQuantity<VolumeFlowUnit>.ToUnit(VolumeFlowUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<VolumeFlowUnit> IQuantity<VolumeFlowUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return _value/70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return _value/2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return _value/0.0486427916;
                case VolumeFlowUnit.AcreFootPerSecond: return _value/0.000810713194;
                case VolumeFlowUnit.CentiliterPerDay: return (_value/86400000) * 1e-2d;
                case VolumeFlowUnit.CentiliterPerMinute: return (_value/60000.00000) * 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return _value/2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return _value/35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return _value/86400;
                case VolumeFlowUnit.CubicMeterPerHour: return _value/3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return _value/60;
                case VolumeFlowUnit.CubicMeterPerSecond: return _value;
                case VolumeFlowUnit.CubicMillimeterPerSecond: return _value*1e-9;
                case VolumeFlowUnit.CubicYardPerDay: return _value/113007;
                case VolumeFlowUnit.CubicYardPerHour: return _value*2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return _value*0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return _value*0.764554857984;
                case VolumeFlowUnit.DeciliterPerDay: return (_value/86400000) * 1e-1d;
                case VolumeFlowUnit.DeciliterPerMinute: return (_value/60000.00000) * 1e-1d;
                case VolumeFlowUnit.KiloliterPerDay: return (_value/86400000) * 1e3d;
                case VolumeFlowUnit.KiloliterPerMinute: return (_value/60000.00000) * 1e3d;
                case VolumeFlowUnit.KilousGallonPerMinute: return _value/15.850323141489;
                case VolumeFlowUnit.LiterPerDay: return _value/86400000;
                case VolumeFlowUnit.LiterPerHour: return _value/3600000.000;
                case VolumeFlowUnit.LiterPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.LiterPerSecond: return _value/1000;
                case VolumeFlowUnit.MegaliterPerDay: return (_value/86400000) * 1e6d;
                case VolumeFlowUnit.MegaukGallonPerSecond: return (_value/219.969) * 1e6d;
                case VolumeFlowUnit.MicroliterPerDay: return (_value/86400000) * 1e-6d;
                case VolumeFlowUnit.MicroliterPerMinute: return (_value/60000.00000) * 1e-6d;
                case VolumeFlowUnit.MilliliterPerDay: return (_value/86400000) * 1e-3d;
                case VolumeFlowUnit.MilliliterPerMinute: return (_value/60000.00000) * 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return _value/22.824465227;
                case VolumeFlowUnit.NanoliterPerDay: return (_value/86400000) * 1e-9d;
                case VolumeFlowUnit.NanoliterPerMinute: return (_value/60000.00000) * 1e-9d;
                case VolumeFlowUnit.OilBarrelPerDay: return _value*1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelPerHour: return _value*4.41631375e-5;
                case VolumeFlowUnit.OilBarrelPerMinute: return _value*2.64978825e-3;
                case VolumeFlowUnit.OilBarrelPerSecond: return _value/6.28981;
                case VolumeFlowUnit.UkGallonPerDay: return _value/19005304;
                case VolumeFlowUnit.UkGallonPerHour: return _value/791887.667;
                case VolumeFlowUnit.UkGallonPerMinute: return _value/13198.2;
                case VolumeFlowUnit.UkGallonPerSecond: return _value/219.969;
                case VolumeFlowUnit.UsGallonPerDay: return _value/22824465.227;
                case VolumeFlowUnit.UsGallonPerHour: return _value/951019.38848933424;
                case VolumeFlowUnit.UsGallonPerMinute: return _value/15850.323141489;
                case VolumeFlowUnit.UsGallonPerSecond: return _value/264.1720523581484;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal VolumeFlow<T> ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new VolumeFlow<T>(baseUnitValue, BaseUnit);
        }

        private double GetValueAs(VolumeFlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return baseUnitValue*70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return baseUnitValue*2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return baseUnitValue*0.0486427916;
                case VolumeFlowUnit.AcreFootPerSecond: return baseUnitValue*0.000810713194;
                case VolumeFlowUnit.CentiliterPerDay: return (baseUnitValue*86400000) / 1e-2d;
                case VolumeFlowUnit.CentiliterPerMinute: return (baseUnitValue*60000.00000) / 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return baseUnitValue*2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return baseUnitValue*35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return baseUnitValue*86400;
                case VolumeFlowUnit.CubicMeterPerHour: return baseUnitValue*3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return baseUnitValue*60;
                case VolumeFlowUnit.CubicMeterPerSecond: return baseUnitValue;
                case VolumeFlowUnit.CubicMillimeterPerSecond: return baseUnitValue/1e-9;
                case VolumeFlowUnit.CubicYardPerDay: return baseUnitValue*113007;
                case VolumeFlowUnit.CubicYardPerHour: return baseUnitValue/2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return baseUnitValue/0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return baseUnitValue/0.764554857984;
                case VolumeFlowUnit.DeciliterPerDay: return (baseUnitValue*86400000) / 1e-1d;
                case VolumeFlowUnit.DeciliterPerMinute: return (baseUnitValue*60000.00000) / 1e-1d;
                case VolumeFlowUnit.KiloliterPerDay: return (baseUnitValue*86400000) / 1e3d;
                case VolumeFlowUnit.KiloliterPerMinute: return (baseUnitValue*60000.00000) / 1e3d;
                case VolumeFlowUnit.KilousGallonPerMinute: return baseUnitValue*15.850323141489;
                case VolumeFlowUnit.LiterPerDay: return baseUnitValue*86400000;
                case VolumeFlowUnit.LiterPerHour: return baseUnitValue*3600000.000;
                case VolumeFlowUnit.LiterPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.LiterPerSecond: return baseUnitValue*1000;
                case VolumeFlowUnit.MegaliterPerDay: return (baseUnitValue*86400000) / 1e6d;
                case VolumeFlowUnit.MegaukGallonPerSecond: return (baseUnitValue*219.969) / 1e6d;
                case VolumeFlowUnit.MicroliterPerDay: return (baseUnitValue*86400000) / 1e-6d;
                case VolumeFlowUnit.MicroliterPerMinute: return (baseUnitValue*60000.00000) / 1e-6d;
                case VolumeFlowUnit.MilliliterPerDay: return (baseUnitValue*86400000) / 1e-3d;
                case VolumeFlowUnit.MilliliterPerMinute: return (baseUnitValue*60000.00000) / 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return baseUnitValue*22.824465227;
                case VolumeFlowUnit.NanoliterPerDay: return (baseUnitValue*86400000) / 1e-9d;
                case VolumeFlowUnit.NanoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-9d;
                case VolumeFlowUnit.OilBarrelPerDay: return baseUnitValue/1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelPerHour: return baseUnitValue/4.41631375e-5;
                case VolumeFlowUnit.OilBarrelPerMinute: return baseUnitValue/2.64978825e-3;
                case VolumeFlowUnit.OilBarrelPerSecond: return baseUnitValue*6.28981;
                case VolumeFlowUnit.UkGallonPerDay: return baseUnitValue*19005304;
                case VolumeFlowUnit.UkGallonPerHour: return baseUnitValue*791887.667;
                case VolumeFlowUnit.UkGallonPerMinute: return baseUnitValue*13198.2;
                case VolumeFlowUnit.UkGallonPerSecond: return baseUnitValue*219.969;
                case VolumeFlowUnit.UsGallonPerDay: return baseUnitValue*22824465.227;
                case VolumeFlowUnit.UsGallonPerHour: return baseUnitValue*951019.38848933424;
                case VolumeFlowUnit.UsGallonPerMinute: return baseUnitValue*15850.323141489;
                case VolumeFlowUnit.UsGallonPerSecond: return baseUnitValue*264.1720523581484;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<VolumeFlowUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(VolumeFlow<T>)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(VolumeFlow<T>)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(VolumeFlow<T>)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(VolumeFlow<T>))
                return this;
            else if(conversionType == typeof(VolumeFlowUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return VolumeFlow<T>.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return VolumeFlow<T>.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(VolumeFlow<T>)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
