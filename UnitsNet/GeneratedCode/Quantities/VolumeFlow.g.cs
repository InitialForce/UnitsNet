//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class VolumeFlow
#else
    public partial struct VolumeFlow : IComparable, IComparable<VolumeFlow>
#endif
    {
        /// <summary>
        ///     Base unit of VolumeFlow.
        /// </summary>
        private readonly double _cubicMetersPerSecond;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public VolumeFlow() : this(0)
        {
        }
#endif

        public VolumeFlow(double cubicmeterspersecond)
        {
            _cubicMetersPerSecond = Convert.ToDouble(cubicmeterspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        VolumeFlow(long cubicmeterspersecond)
        {
            _cubicMetersPerSecond = Convert.ToDouble(cubicmeterspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        VolumeFlow(decimal cubicmeterspersecond)
        {
            _cubicMetersPerSecond = Convert.ToDouble(cubicmeterspersecond);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.VolumeFlow;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit
        {
            get { return VolumeFlowUnit.CubicMeterPerSecond; }
        }

        /// <summary>
        ///     All units of measurement for the VolumeFlow quantity.
        /// </summary>
        public static VolumeFlowUnit[] Units { get; } = Enum.GetValues(typeof(VolumeFlowUnit)).Cast<VolumeFlowUnit>().ToArray();

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute
        {
            get { return (_cubicMetersPerSecond*60000.00000) / 1e-2d; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicDecimetersPerMinute.
        /// </summary>
        public double CubicDecimetersPerMinute
        {
            get { return _cubicMetersPerSecond*60000.00000; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerHour.
        /// </summary>
        public double CubicFeetPerHour
        {
            get { return _cubicMetersPerSecond/7.8657907199999087346816086183876e-6; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerMinute.
        /// </summary>
        public double CubicFeetPerMinute
        {
            get { return _cubicMetersPerSecond*2118.88000326; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerSecond.
        /// </summary>
        public double CubicFeetPerSecond
        {
            get { return _cubicMetersPerSecond*35.314666721; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerHour.
        /// </summary>
        public double CubicMetersPerHour
        {
            get { return _cubicMetersPerSecond*3600; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerMinute.
        /// </summary>
        public double CubicMetersPerMinute
        {
            get { return _cubicMetersPerSecond*60; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerSecond.
        /// </summary>
        public double CubicMetersPerSecond
        {
            get { return _cubicMetersPerSecond; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerHour.
        /// </summary>
        public double CubicYardsPerHour
        {
            get { return _cubicMetersPerSecond/2.1237634944E-4; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerMinute.
        /// </summary>
        public double CubicYardsPerMinute
        {
            get { return _cubicMetersPerSecond/0.0127425809664; }
        }

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerSecond.
        /// </summary>
        public double CubicYardsPerSecond
        {
            get { return _cubicMetersPerSecond/0.764554857984; }
        }

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute
        {
            get { return (_cubicMetersPerSecond*60000.00000) / 1e-1d; }
        }

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute
        {
            get { return (_cubicMetersPerSecond*60000.00000) / 1e3d; }
        }

        /// <summary>
        ///     Get VolumeFlow in LitersPerHour.
        /// </summary>
        public double LitersPerHour
        {
            get { return _cubicMetersPerSecond*3600000.000; }
        }

        /// <summary>
        ///     Get VolumeFlow in LitersPerMinute.
        /// </summary>
        public double LitersPerMinute
        {
            get { return _cubicMetersPerSecond*60000.00000; }
        }

        /// <summary>
        ///     Get VolumeFlow in LitersPerSecond.
        /// </summary>
        public double LitersPerSecond
        {
            get { return _cubicMetersPerSecond*1000; }
        }

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute
        {
            get { return (_cubicMetersPerSecond*60000.00000) / 1e-6d; }
        }

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute
        {
            get { return (_cubicMetersPerSecond*60000.00000) / 1e-3d; }
        }

        /// <summary>
        ///     Get VolumeFlow in MillionUsGallonsPerDay.
        /// </summary>
        public double MillionUsGallonsPerDay
        {
            get { return _cubicMetersPerSecond*22.824465227; }
        }

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute
        {
            get { return (_cubicMetersPerSecond*60000.00000) / 1e-9d; }
        }

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerDay.
        /// </summary>
        public double OilBarrelsPerDay
        {
            get { return _cubicMetersPerSecond/1.8401307283333333333333333333333e-6; }
        }

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerHour.
        /// </summary>
        public double UsGallonsPerHour
        {
            get { return _cubicMetersPerSecond*951019.38848933424; }
        }

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerMinute.
        /// </summary>
        public double UsGallonsPerMinute
        {
            get { return _cubicMetersPerSecond*15850.323141489; }
        }

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerSecond.
        /// </summary>
        public double UsGallonsPerSecond
        {
            get { return _cubicMetersPerSecond*264.1720523581484; }
        }

        #endregion

        #region Static

        public static VolumeFlow Zero
        {
            get { return new VolumeFlow(); }
        }

        /// <summary>
        ///     Get VolumeFlow from CentilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCentilitersPerMinute(double centilitersperminute)
        {
            double value = (double) centilitersperminute;
            return new VolumeFlow((value/60000.00000) * 1e-2d);
        }
#else
        public static VolumeFlow FromCentilitersPerMinute(QuantityValue centilitersperminute)
        {
            double value = (double) centilitersperminute;
            return new VolumeFlow(((value/60000.00000) * 1e-2d));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicDecimetersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicDecimetersPerMinute(double cubicdecimetersperminute)
        {
            double value = (double) cubicdecimetersperminute;
            return new VolumeFlow(value/60000.00000);
        }
#else
        public static VolumeFlow FromCubicDecimetersPerMinute(QuantityValue cubicdecimetersperminute)
        {
            double value = (double) cubicdecimetersperminute;
            return new VolumeFlow((value/60000.00000));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerHour(double cubicfeetperhour)
        {
            double value = (double) cubicfeetperhour;
            return new VolumeFlow(value*7.8657907199999087346816086183876e-6);
        }
#else
        public static VolumeFlow FromCubicFeetPerHour(QuantityValue cubicfeetperhour)
        {
            double value = (double) cubicfeetperhour;
            return new VolumeFlow((value*7.8657907199999087346816086183876e-6));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerMinute(double cubicfeetperminute)
        {
            double value = (double) cubicfeetperminute;
            return new VolumeFlow(value/2118.88000326);
        }
#else
        public static VolumeFlow FromCubicFeetPerMinute(QuantityValue cubicfeetperminute)
        {
            double value = (double) cubicfeetperminute;
            return new VolumeFlow((value/2118.88000326));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerSecond(double cubicfeetpersecond)
        {
            double value = (double) cubicfeetpersecond;
            return new VolumeFlow(value/35.314666721);
        }
#else
        public static VolumeFlow FromCubicFeetPerSecond(QuantityValue cubicfeetpersecond)
        {
            double value = (double) cubicfeetpersecond;
            return new VolumeFlow((value/35.314666721));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerHour(double cubicmetersperhour)
        {
            double value = (double) cubicmetersperhour;
            return new VolumeFlow(value/3600);
        }
#else
        public static VolumeFlow FromCubicMetersPerHour(QuantityValue cubicmetersperhour)
        {
            double value = (double) cubicmetersperhour;
            return new VolumeFlow((value/3600));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerMinute(double cubicmetersperminute)
        {
            double value = (double) cubicmetersperminute;
            return new VolumeFlow(value/60);
        }
#else
        public static VolumeFlow FromCubicMetersPerMinute(QuantityValue cubicmetersperminute)
        {
            double value = (double) cubicmetersperminute;
            return new VolumeFlow((value/60));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerSecond(double cubicmeterspersecond)
        {
            double value = (double) cubicmeterspersecond;
            return new VolumeFlow(value);
        }
#else
        public static VolumeFlow FromCubicMetersPerSecond(QuantityValue cubicmeterspersecond)
        {
            double value = (double) cubicmeterspersecond;
            return new VolumeFlow((value));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerHour(double cubicyardsperhour)
        {
            double value = (double) cubicyardsperhour;
            return new VolumeFlow(value*2.1237634944E-4);
        }
#else
        public static VolumeFlow FromCubicYardsPerHour(QuantityValue cubicyardsperhour)
        {
            double value = (double) cubicyardsperhour;
            return new VolumeFlow((value*2.1237634944E-4));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerMinute(double cubicyardsperminute)
        {
            double value = (double) cubicyardsperminute;
            return new VolumeFlow(value*0.0127425809664);
        }
#else
        public static VolumeFlow FromCubicYardsPerMinute(QuantityValue cubicyardsperminute)
        {
            double value = (double) cubicyardsperminute;
            return new VolumeFlow((value*0.0127425809664));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerSecond(double cubicyardspersecond)
        {
            double value = (double) cubicyardspersecond;
            return new VolumeFlow(value*0.764554857984);
        }
#else
        public static VolumeFlow FromCubicYardsPerSecond(QuantityValue cubicyardspersecond)
        {
            double value = (double) cubicyardspersecond;
            return new VolumeFlow((value*0.764554857984));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from DecilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecilitersPerMinute(double decilitersperminute)
        {
            double value = (double) decilitersperminute;
            return new VolumeFlow((value/60000.00000) * 1e-1d);
        }
#else
        public static VolumeFlow FromDecilitersPerMinute(QuantityValue decilitersperminute)
        {
            double value = (double) decilitersperminute;
            return new VolumeFlow(((value/60000.00000) * 1e-1d));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from KilolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromKilolitersPerMinute(double kilolitersperminute)
        {
            double value = (double) kilolitersperminute;
            return new VolumeFlow((value/60000.00000) * 1e3d);
        }
#else
        public static VolumeFlow FromKilolitersPerMinute(QuantityValue kilolitersperminute)
        {
            double value = (double) kilolitersperminute;
            return new VolumeFlow(((value/60000.00000) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from LitersPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerHour(double litersperhour)
        {
            double value = (double) litersperhour;
            return new VolumeFlow(value/3600000.000);
        }
#else
        public static VolumeFlow FromLitersPerHour(QuantityValue litersperhour)
        {
            double value = (double) litersperhour;
            return new VolumeFlow((value/3600000.000));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from LitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerMinute(double litersperminute)
        {
            double value = (double) litersperminute;
            return new VolumeFlow(value/60000.00000);
        }
#else
        public static VolumeFlow FromLitersPerMinute(QuantityValue litersperminute)
        {
            double value = (double) litersperminute;
            return new VolumeFlow((value/60000.00000));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from LitersPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerSecond(double literspersecond)
        {
            double value = (double) literspersecond;
            return new VolumeFlow(value/1000);
        }
#else
        public static VolumeFlow FromLitersPerSecond(QuantityValue literspersecond)
        {
            double value = (double) literspersecond;
            return new VolumeFlow((value/1000));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMicrolitersPerMinute(double microlitersperminute)
        {
            double value = (double) microlitersperminute;
            return new VolumeFlow((value/60000.00000) * 1e-6d);
        }
#else
        public static VolumeFlow FromMicrolitersPerMinute(QuantityValue microlitersperminute)
        {
            double value = (double) microlitersperminute;
            return new VolumeFlow(((value/60000.00000) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from MillilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillilitersPerMinute(double millilitersperminute)
        {
            double value = (double) millilitersperminute;
            return new VolumeFlow((value/60000.00000) * 1e-3d);
        }
#else
        public static VolumeFlow FromMillilitersPerMinute(QuantityValue millilitersperminute)
        {
            double value = (double) millilitersperminute;
            return new VolumeFlow(((value/60000.00000) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from MillionUsGallonsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillionUsGallonsPerDay(double millionusgallonsperday)
        {
            double value = (double) millionusgallonsperday;
            return new VolumeFlow(value/22.824465227);
        }
#else
        public static VolumeFlow FromMillionUsGallonsPerDay(QuantityValue millionusgallonsperday)
        {
            double value = (double) millionusgallonsperday;
            return new VolumeFlow((value/22.824465227));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from NanolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromNanolitersPerMinute(double nanolitersperminute)
        {
            double value = (double) nanolitersperminute;
            return new VolumeFlow((value/60000.00000) * 1e-9d);
        }
#else
        public static VolumeFlow FromNanolitersPerMinute(QuantityValue nanolitersperminute)
        {
            double value = (double) nanolitersperminute;
            return new VolumeFlow(((value/60000.00000) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromOilBarrelsPerDay(double oilbarrelsperday)
        {
            double value = (double) oilbarrelsperday;
            return new VolumeFlow(value*1.8401307283333333333333333333333e-6);
        }
#else
        public static VolumeFlow FromOilBarrelsPerDay(QuantityValue oilbarrelsperday)
        {
            double value = (double) oilbarrelsperday;
            return new VolumeFlow((value*1.8401307283333333333333333333333e-6));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerHour(double usgallonsperhour)
        {
            double value = (double) usgallonsperhour;
            return new VolumeFlow(value/951019.38848933424);
        }
#else
        public static VolumeFlow FromUsGallonsPerHour(QuantityValue usgallonsperhour)
        {
            double value = (double) usgallonsperhour;
            return new VolumeFlow((value/951019.38848933424));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerMinute(double usgallonsperminute)
        {
            double value = (double) usgallonsperminute;
            return new VolumeFlow(value/15850.323141489);
        }
#else
        public static VolumeFlow FromUsGallonsPerMinute(QuantityValue usgallonsperminute)
        {
            double value = (double) usgallonsperminute;
            return new VolumeFlow((value/15850.323141489));
        }
#endif

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerSecond(double usgallonspersecond)
        {
            double value = (double) usgallonspersecond;
            return new VolumeFlow(value/264.1720523581484);
        }
#else
        public static VolumeFlow FromUsGallonsPerSecond(QuantityValue usgallonspersecond)
        {
            double value = (double) usgallonspersecond;
            return new VolumeFlow((value/264.1720523581484));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable VolumeFlow from nullable CentilitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromCentilitersPerMinute(QuantityValue? centilitersperminute)
        {
            if (centilitersperminute.HasValue)
            {
                return FromCentilitersPerMinute(centilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicDecimetersPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicDecimetersPerMinute(QuantityValue? cubicdecimetersperminute)
        {
            if (cubicdecimetersperminute.HasValue)
            {
                return FromCubicDecimetersPerMinute(cubicdecimetersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicFeetPerHour.
        /// </summary>
        public static VolumeFlow? FromCubicFeetPerHour(QuantityValue? cubicfeetperhour)
        {
            if (cubicfeetperhour.HasValue)
            {
                return FromCubicFeetPerHour(cubicfeetperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicFeetPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicFeetPerMinute(QuantityValue? cubicfeetperminute)
        {
            if (cubicfeetperminute.HasValue)
            {
                return FromCubicFeetPerMinute(cubicfeetperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicFeetPerSecond.
        /// </summary>
        public static VolumeFlow? FromCubicFeetPerSecond(QuantityValue? cubicfeetpersecond)
        {
            if (cubicfeetpersecond.HasValue)
            {
                return FromCubicFeetPerSecond(cubicfeetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicMetersPerHour.
        /// </summary>
        public static VolumeFlow? FromCubicMetersPerHour(QuantityValue? cubicmetersperhour)
        {
            if (cubicmetersperhour.HasValue)
            {
                return FromCubicMetersPerHour(cubicmetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicMetersPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicMetersPerMinute(QuantityValue? cubicmetersperminute)
        {
            if (cubicmetersperminute.HasValue)
            {
                return FromCubicMetersPerMinute(cubicmetersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicMetersPerSecond.
        /// </summary>
        public static VolumeFlow? FromCubicMetersPerSecond(QuantityValue? cubicmeterspersecond)
        {
            if (cubicmeterspersecond.HasValue)
            {
                return FromCubicMetersPerSecond(cubicmeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicYardsPerHour.
        /// </summary>
        public static VolumeFlow? FromCubicYardsPerHour(QuantityValue? cubicyardsperhour)
        {
            if (cubicyardsperhour.HasValue)
            {
                return FromCubicYardsPerHour(cubicyardsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicYardsPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicYardsPerMinute(QuantityValue? cubicyardsperminute)
        {
            if (cubicyardsperminute.HasValue)
            {
                return FromCubicYardsPerMinute(cubicyardsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicYardsPerSecond.
        /// </summary>
        public static VolumeFlow? FromCubicYardsPerSecond(QuantityValue? cubicyardspersecond)
        {
            if (cubicyardspersecond.HasValue)
            {
                return FromCubicYardsPerSecond(cubicyardspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable DecilitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromDecilitersPerMinute(QuantityValue? decilitersperminute)
        {
            if (decilitersperminute.HasValue)
            {
                return FromDecilitersPerMinute(decilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable KilolitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromKilolitersPerMinute(QuantityValue? kilolitersperminute)
        {
            if (kilolitersperminute.HasValue)
            {
                return FromKilolitersPerMinute(kilolitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable LitersPerHour.
        /// </summary>
        public static VolumeFlow? FromLitersPerHour(QuantityValue? litersperhour)
        {
            if (litersperhour.HasValue)
            {
                return FromLitersPerHour(litersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable LitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromLitersPerMinute(QuantityValue? litersperminute)
        {
            if (litersperminute.HasValue)
            {
                return FromLitersPerMinute(litersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable LitersPerSecond.
        /// </summary>
        public static VolumeFlow? FromLitersPerSecond(QuantityValue? literspersecond)
        {
            if (literspersecond.HasValue)
            {
                return FromLitersPerSecond(literspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MicrolitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromMicrolitersPerMinute(QuantityValue? microlitersperminute)
        {
            if (microlitersperminute.HasValue)
            {
                return FromMicrolitersPerMinute(microlitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MillilitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromMillilitersPerMinute(QuantityValue? millilitersperminute)
        {
            if (millilitersperminute.HasValue)
            {
                return FromMillilitersPerMinute(millilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MillionUsGallonsPerDay.
        /// </summary>
        public static VolumeFlow? FromMillionUsGallonsPerDay(QuantityValue? millionusgallonsperday)
        {
            if (millionusgallonsperday.HasValue)
            {
                return FromMillionUsGallonsPerDay(millionusgallonsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable NanolitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromNanolitersPerMinute(QuantityValue? nanolitersperminute)
        {
            if (nanolitersperminute.HasValue)
            {
                return FromNanolitersPerMinute(nanolitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable OilBarrelsPerDay.
        /// </summary>
        public static VolumeFlow? FromOilBarrelsPerDay(QuantityValue? oilbarrelsperday)
        {
            if (oilbarrelsperday.HasValue)
            {
                return FromOilBarrelsPerDay(oilbarrelsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UsGallonsPerHour.
        /// </summary>
        public static VolumeFlow? FromUsGallonsPerHour(QuantityValue? usgallonsperhour)
        {
            if (usgallonsperhour.HasValue)
            {
                return FromUsGallonsPerHour(usgallonsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UsGallonsPerMinute.
        /// </summary>
        public static VolumeFlow? FromUsGallonsPerMinute(QuantityValue? usgallonsperminute)
        {
            if (usgallonsperminute.HasValue)
            {
                return FromUsGallonsPerMinute(usgallonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UsGallonsPerSecond.
        /// </summary>
        public static VolumeFlow? FromUsGallonsPerSecond(QuantityValue? usgallonspersecond)
        {
            if (usgallonspersecond.HasValue)
            {
                return FromUsGallonsPerSecond(usgallonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static VolumeFlow From(double value, VolumeFlowUnit fromUnit)
#else
        public static VolumeFlow From(QuantityValue value, VolumeFlowUnit fromUnit)
#endif
        {
            switch (fromUnit)
            {
                case VolumeFlowUnit.CentilitersPerMinute:
                    return FromCentilitersPerMinute(value);
                case VolumeFlowUnit.CubicDecimeterPerMinute:
                    return FromCubicDecimetersPerMinute(value);
                case VolumeFlowUnit.CubicFootPerHour:
                    return FromCubicFeetPerHour(value);
                case VolumeFlowUnit.CubicFootPerMinute:
                    return FromCubicFeetPerMinute(value);
                case VolumeFlowUnit.CubicFootPerSecond:
                    return FromCubicFeetPerSecond(value);
                case VolumeFlowUnit.CubicMeterPerHour:
                    return FromCubicMetersPerHour(value);
                case VolumeFlowUnit.CubicMeterPerMinute:
                    return FromCubicMetersPerMinute(value);
                case VolumeFlowUnit.CubicMeterPerSecond:
                    return FromCubicMetersPerSecond(value);
                case VolumeFlowUnit.CubicYardPerHour:
                    return FromCubicYardsPerHour(value);
                case VolumeFlowUnit.CubicYardPerMinute:
                    return FromCubicYardsPerMinute(value);
                case VolumeFlowUnit.CubicYardPerSecond:
                    return FromCubicYardsPerSecond(value);
                case VolumeFlowUnit.DecilitersPerMinute:
                    return FromDecilitersPerMinute(value);
                case VolumeFlowUnit.KilolitersPerMinute:
                    return FromKilolitersPerMinute(value);
                case VolumeFlowUnit.LitersPerHour:
                    return FromLitersPerHour(value);
                case VolumeFlowUnit.LitersPerMinute:
                    return FromLitersPerMinute(value);
                case VolumeFlowUnit.LitersPerSecond:
                    return FromLitersPerSecond(value);
                case VolumeFlowUnit.MicrolitersPerMinute:
                    return FromMicrolitersPerMinute(value);
                case VolumeFlowUnit.MillilitersPerMinute:
                    return FromMillilitersPerMinute(value);
                case VolumeFlowUnit.MillionUsGallonsPerDay:
                    return FromMillionUsGallonsPerDay(value);
                case VolumeFlowUnit.NanolitersPerMinute:
                    return FromNanolitersPerMinute(value);
                case VolumeFlowUnit.OilBarrelsPerDay:
                    return FromOilBarrelsPerDay(value);
                case VolumeFlowUnit.UsGallonsPerHour:
                    return FromUsGallonsPerHour(value);
                case VolumeFlowUnit.UsGallonsPerMinute:
                    return FromUsGallonsPerMinute(value);
                case VolumeFlowUnit.UsGallonsPerSecond:
                    return FromUsGallonsPerSecond(value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
        public static VolumeFlow? From(QuantityValue? value, VolumeFlowUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case VolumeFlowUnit.CentilitersPerMinute:
                    return FromCentilitersPerMinute(value.Value);
                case VolumeFlowUnit.CubicDecimeterPerMinute:
                    return FromCubicDecimetersPerMinute(value.Value);
                case VolumeFlowUnit.CubicFootPerHour:
                    return FromCubicFeetPerHour(value.Value);
                case VolumeFlowUnit.CubicFootPerMinute:
                    return FromCubicFeetPerMinute(value.Value);
                case VolumeFlowUnit.CubicFootPerSecond:
                    return FromCubicFeetPerSecond(value.Value);
                case VolumeFlowUnit.CubicMeterPerHour:
                    return FromCubicMetersPerHour(value.Value);
                case VolumeFlowUnit.CubicMeterPerMinute:
                    return FromCubicMetersPerMinute(value.Value);
                case VolumeFlowUnit.CubicMeterPerSecond:
                    return FromCubicMetersPerSecond(value.Value);
                case VolumeFlowUnit.CubicYardPerHour:
                    return FromCubicYardsPerHour(value.Value);
                case VolumeFlowUnit.CubicYardPerMinute:
                    return FromCubicYardsPerMinute(value.Value);
                case VolumeFlowUnit.CubicYardPerSecond:
                    return FromCubicYardsPerSecond(value.Value);
                case VolumeFlowUnit.DecilitersPerMinute:
                    return FromDecilitersPerMinute(value.Value);
                case VolumeFlowUnit.KilolitersPerMinute:
                    return FromKilolitersPerMinute(value.Value);
                case VolumeFlowUnit.LitersPerHour:
                    return FromLitersPerHour(value.Value);
                case VolumeFlowUnit.LitersPerMinute:
                    return FromLitersPerMinute(value.Value);
                case VolumeFlowUnit.LitersPerSecond:
                    return FromLitersPerSecond(value.Value);
                case VolumeFlowUnit.MicrolitersPerMinute:
                    return FromMicrolitersPerMinute(value.Value);
                case VolumeFlowUnit.MillilitersPerMinute:
                    return FromMillilitersPerMinute(value.Value);
                case VolumeFlowUnit.MillionUsGallonsPerDay:
                    return FromMillionUsGallonsPerDay(value.Value);
                case VolumeFlowUnit.NanolitersPerMinute:
                    return FromNanolitersPerMinute(value.Value);
                case VolumeFlowUnit.OilBarrelsPerDay:
                    return FromOilBarrelsPerDay(value.Value);
                case VolumeFlowUnit.UsGallonsPerHour:
                    return FromUsGallonsPerHour(value.Value);
                case VolumeFlowUnit.UsGallonsPerMinute:
                    return FromUsGallonsPerMinute(value.Value);
                case VolumeFlowUnit.UsGallonsPerSecond:
                    return FromUsGallonsPerSecond(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(VolumeFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(VolumeFlowUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static VolumeFlow operator -(VolumeFlow right)
        {
            return new VolumeFlow(-right._cubicMetersPerSecond);
        }

        public static VolumeFlow operator +(VolumeFlow left, VolumeFlow right)
        {
            return new VolumeFlow(left._cubicMetersPerSecond + right._cubicMetersPerSecond);
        }

        public static VolumeFlow operator -(VolumeFlow left, VolumeFlow right)
        {
            return new VolumeFlow(left._cubicMetersPerSecond - right._cubicMetersPerSecond);
        }

        public static VolumeFlow operator *(double left, VolumeFlow right)
        {
            return new VolumeFlow(left*right._cubicMetersPerSecond);
        }

        public static VolumeFlow operator *(VolumeFlow left, double right)
        {
            return new VolumeFlow(left._cubicMetersPerSecond*(double)right);
        }

        public static VolumeFlow operator /(VolumeFlow left, double right)
        {
            return new VolumeFlow(left._cubicMetersPerSecond/(double)right);
        }

        public static double operator /(VolumeFlow left, VolumeFlow right)
        {
            return Convert.ToDouble(left._cubicMetersPerSecond/right._cubicMetersPerSecond);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is VolumeFlow)) throw new ArgumentException("Expected type VolumeFlow.", "obj");
            return CompareTo((VolumeFlow) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(VolumeFlow other)
        {
            return _cubicMetersPerSecond.CompareTo(other._cubicMetersPerSecond);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(VolumeFlow left, VolumeFlow right)
        {
            return left._cubicMetersPerSecond <= right._cubicMetersPerSecond;
        }

        public static bool operator >=(VolumeFlow left, VolumeFlow right)
        {
            return left._cubicMetersPerSecond >= right._cubicMetersPerSecond;
        }

        public static bool operator <(VolumeFlow left, VolumeFlow right)
        {
            return left._cubicMetersPerSecond < right._cubicMetersPerSecond;
        }

        public static bool operator >(VolumeFlow left, VolumeFlow right)
        {
            return left._cubicMetersPerSecond > right._cubicMetersPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(VolumeFlow left, VolumeFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._cubicMetersPerSecond == right._cubicMetersPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(VolumeFlow left, VolumeFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._cubicMetersPerSecond != right._cubicMetersPerSecond;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _cubicMetersPerSecond.Equals(((VolumeFlow) obj)._cubicMetersPerSecond);
        }

        /// <summary>
        ///     Compare equality to another VolumeFlow by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(VolumeFlow other, VolumeFlow maxError)
        {
            return Math.Abs(_cubicMetersPerSecond - other._cubicMetersPerSecond) <= maxError._cubicMetersPerSecond;
        }

        public override int GetHashCode()
        {
            return _cubicMetersPerSecond.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(VolumeFlowUnit unit)
        {
            switch (unit)
            {
                case VolumeFlowUnit.CentilitersPerMinute:
                    return CentilitersPerMinute;
                case VolumeFlowUnit.CubicDecimeterPerMinute:
                    return CubicDecimetersPerMinute;
                case VolumeFlowUnit.CubicFootPerHour:
                    return CubicFeetPerHour;
                case VolumeFlowUnit.CubicFootPerMinute:
                    return CubicFeetPerMinute;
                case VolumeFlowUnit.CubicFootPerSecond:
                    return CubicFeetPerSecond;
                case VolumeFlowUnit.CubicMeterPerHour:
                    return CubicMetersPerHour;
                case VolumeFlowUnit.CubicMeterPerMinute:
                    return CubicMetersPerMinute;
                case VolumeFlowUnit.CubicMeterPerSecond:
                    return CubicMetersPerSecond;
                case VolumeFlowUnit.CubicYardPerHour:
                    return CubicYardsPerHour;
                case VolumeFlowUnit.CubicYardPerMinute:
                    return CubicYardsPerMinute;
                case VolumeFlowUnit.CubicYardPerSecond:
                    return CubicYardsPerSecond;
                case VolumeFlowUnit.DecilitersPerMinute:
                    return DecilitersPerMinute;
                case VolumeFlowUnit.KilolitersPerMinute:
                    return KilolitersPerMinute;
                case VolumeFlowUnit.LitersPerHour:
                    return LitersPerHour;
                case VolumeFlowUnit.LitersPerMinute:
                    return LitersPerMinute;
                case VolumeFlowUnit.LitersPerSecond:
                    return LitersPerSecond;
                case VolumeFlowUnit.MicrolitersPerMinute:
                    return MicrolitersPerMinute;
                case VolumeFlowUnit.MillilitersPerMinute:
                    return MillilitersPerMinute;
                case VolumeFlowUnit.MillionUsGallonsPerDay:
                    return MillionUsGallonsPerDay;
                case VolumeFlowUnit.NanolitersPerMinute:
                    return NanolitersPerMinute;
                case VolumeFlowUnit.OilBarrelsPerDay:
                    return OilBarrelsPerDay;
                case VolumeFlowUnit.UsGallonsPerHour:
                    return UsGallonsPerHour;
                case VolumeFlowUnit.UsGallonsPerMinute:
                    return UsGallonsPerMinute;
                case VolumeFlowUnit.UsGallonsPerSecond:
                    return UsGallonsPerSecond;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeFlow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeFlow Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<VolumeFlow, VolumeFlowUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    VolumeFlowUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromCubicMetersPerSecond(x.CubicMetersPerSecond + y.CubicMetersPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out VolumeFlow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out VolumeFlow result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(VolumeFlow);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeFlowUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static VolumeFlowUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<VolumeFlowUnit>(str.Trim());

            if (unit == VolumeFlowUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized VolumeFlowUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is CubicMeterPerSecond
        /// </summary>
        public static VolumeFlowUnit ToStringDefaultUnit { get; set; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(VolumeFlowUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(VolumeFlowUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(VolumeFlowUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(VolumeFlowUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MaxValue
        {
            get
            {
                return new VolumeFlow(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MinValue
        {
            get
            {
                return new VolumeFlow(double.MinValue);
            }
        }
    }
}
