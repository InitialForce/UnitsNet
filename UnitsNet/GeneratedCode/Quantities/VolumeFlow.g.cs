//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class VolumeFlow
#else
    public partial struct VolumeFlow : IComparable, IComparable<VolumeFlow>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeFlowUnit? _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeFlowUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public VolumeFlow()
        {
            _value = 0;
            _unit = BaseUnit;
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public VolumeFlow(double cubicmeterspersecond)
        {
            _value = Convert.ToDouble(cubicmeterspersecond);
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          VolumeFlow(double numericValue, VolumeFlowUnit unit)
        {
            _value = numericValue;
            _unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit CubicMeterPerSecond.
        /// </summary>
        /// <param name="cubicmeterspersecond">Value assuming base unit CubicMeterPerSecond.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        VolumeFlow(long cubicmeterspersecond) : this(Convert.ToDouble(cubicmeterspersecond), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit CubicMeterPerSecond.
        /// </summary>
        /// <param name="cubicmeterspersecond">Value assuming base unit CubicMeterPerSecond.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        VolumeFlow(decimal cubicmeterspersecond) : this(Convert.ToDouble(cubicmeterspersecond), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.VolumeFlow;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit => VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        ///     All units of measurement for the VolumeFlow quantity.
        /// </summary>
        public static VolumeFlowUnit[] Units { get; } = Enum.GetValues(typeof(VolumeFlowUnit)).Cast<VolumeFlowUnit>().ToArray();
        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerDay.
        /// </summary>
        public double AcreFeetPerDay => As(VolumeFlowUnit.AcreFootPerDay);
        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerHour.
        /// </summary>
        public double AcreFeetPerHour => As(VolumeFlowUnit.AcreFootPerHour);
        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerMinute.
        /// </summary>
        public double AcreFeetPerMinute => As(VolumeFlowUnit.AcreFootPerMinute);
        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerSecond.
        /// </summary>
        public double AcreFeetPerSecond => As(VolumeFlowUnit.AcreFootPerSecond);
        /// <summary>
        ///     Get VolumeFlow in CentilitersPerDay.
        /// </summary>
        public double CentilitersPerDay => As(VolumeFlowUnit.CentilitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute => As(VolumeFlowUnit.CentilitersPerMinute);
        /// <summary>
        ///     Get VolumeFlow in CubicDecimetersPerMinute.
        /// </summary>
        public double CubicDecimetersPerMinute => As(VolumeFlowUnit.CubicDecimeterPerMinute);
        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerHour.
        /// </summary>
        public double CubicFeetPerHour => As(VolumeFlowUnit.CubicFootPerHour);
        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerMinute.
        /// </summary>
        public double CubicFeetPerMinute => As(VolumeFlowUnit.CubicFootPerMinute);
        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerSecond.
        /// </summary>
        public double CubicFeetPerSecond => As(VolumeFlowUnit.CubicFootPerSecond);
        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerDay.
        /// </summary>
        public double CubicMetersPerDay => As(VolumeFlowUnit.CubicMeterPerDay);
        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerHour.
        /// </summary>
        public double CubicMetersPerHour => As(VolumeFlowUnit.CubicMeterPerHour);
        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerMinute.
        /// </summary>
        public double CubicMetersPerMinute => As(VolumeFlowUnit.CubicMeterPerMinute);
        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerSecond.
        /// </summary>
        public double CubicMetersPerSecond => As(VolumeFlowUnit.CubicMeterPerSecond);
        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerHour.
        /// </summary>
        public double CubicYardsPerHour => As(VolumeFlowUnit.CubicYardPerHour);
        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerMinute.
        /// </summary>
        public double CubicYardsPerMinute => As(VolumeFlowUnit.CubicYardPerMinute);
        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerSecond.
        /// </summary>
        public double CubicYardsPerSecond => As(VolumeFlowUnit.CubicYardPerSecond);
        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerDay.
        /// </summary>
        public double CubicYardsPerDay => As(VolumeFlowUnit.CubicYardsPerDay);
        /// <summary>
        ///     Get VolumeFlow in DecilitersPerDay.
        /// </summary>
        public double DecilitersPerDay => As(VolumeFlowUnit.DecilitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute => As(VolumeFlowUnit.DecilitersPerMinute);
        /// <summary>
        ///     Get VolumeFlow in KilolitersPerDay.
        /// </summary>
        public double KilolitersPerDay => As(VolumeFlowUnit.KilolitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute => As(VolumeFlowUnit.KilolitersPerMinute);
        /// <summary>
        ///     Get VolumeFlow in LitersPerDay.
        /// </summary>
        public double LitersPerDay => As(VolumeFlowUnit.LitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in LitersPerHour.
        /// </summary>
        public double LitersPerHour => As(VolumeFlowUnit.LitersPerHour);
        /// <summary>
        ///     Get VolumeFlow in LitersPerMinute.
        /// </summary>
        public double LitersPerMinute => As(VolumeFlowUnit.LitersPerMinute);
        /// <summary>
        ///     Get VolumeFlow in LitersPerSecond.
        /// </summary>
        public double LitersPerSecond => As(VolumeFlowUnit.LitersPerSecond);
        /// <summary>
        ///     Get VolumeFlow in MegalitersPerDay.
        /// </summary>
        public double MegalitersPerDay => As(VolumeFlowUnit.MegalitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in MegaukGallonsPerSecond.
        /// </summary>
        public double MegaukGallonsPerSecond => As(VolumeFlowUnit.MegaukGallonsPerSecond);
        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerDay.
        /// </summary>
        public double MicrolitersPerDay => As(VolumeFlowUnit.MicrolitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute => As(VolumeFlowUnit.MicrolitersPerMinute);
        /// <summary>
        ///     Get VolumeFlow in MillilitersPerDay.
        /// </summary>
        public double MillilitersPerDay => As(VolumeFlowUnit.MillilitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute => As(VolumeFlowUnit.MillilitersPerMinute);
        /// <summary>
        ///     Get VolumeFlow in MillionUsGallonsPerDay.
        /// </summary>
        public double MillionUsGallonsPerDay => As(VolumeFlowUnit.MillionUsGallonsPerDay);
        /// <summary>
        ///     Get VolumeFlow in NanolitersPerDay.
        /// </summary>
        public double NanolitersPerDay => As(VolumeFlowUnit.NanolitersPerDay);
        /// <summary>
        ///     Get VolumeFlow in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute => As(VolumeFlowUnit.NanolitersPerMinute);
        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerDay.
        /// </summary>
        public double OilBarrelsPerDay => As(VolumeFlowUnit.OilBarrelsPerDay);
        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerSecond.
        /// </summary>
        public double OilBarrelsPerSecond => As(VolumeFlowUnit.OilBarrelsPerSecond);
        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerDay.
        /// </summary>
        public double UkGallonsPerDay => As(VolumeFlowUnit.UkGallonsPerDay);
        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerMinute.
        /// </summary>
        public double UkGallonsPerMinute => As(VolumeFlowUnit.UkGallonsPerMinute);
        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerSecond.
        /// </summary>
        public double UkGallonsPerSecond => As(VolumeFlowUnit.UkGallonsPerSecond);
        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerDay.
        /// </summary>
        public double UsGallonsPerDay => As(VolumeFlowUnit.UsGallonsPerDay);
        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerHour.
        /// </summary>
        public double UsGallonsPerHour => As(VolumeFlowUnit.UsGallonsPerHour);
        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerMinute.
        /// </summary>
        public double UsGallonsPerMinute => As(VolumeFlowUnit.UsGallonsPerMinute);
        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerSecond.
        /// </summary>
        public double UsGallonsPerSecond => As(VolumeFlowUnit.UsGallonsPerSecond);

        #endregion

        #region Static

        public static VolumeFlow Zero => new VolumeFlow(0, BaseUnit);

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerDay(double acrefeetperday)
#else
        public static VolumeFlow FromAcreFeetPerDay(QuantityValue acrefeetperday)
#endif
        {
            double value = (double) acrefeetperday;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerHour(double acrefeetperhour)
#else
        public static VolumeFlow FromAcreFeetPerHour(QuantityValue acrefeetperhour)
#endif
        {
            double value = (double) acrefeetperhour;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerHour);
        }

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerMinute(double acrefeetperminute)
#else
        public static VolumeFlow FromAcreFeetPerMinute(QuantityValue acrefeetperminute)
#endif
        {
            double value = (double) acrefeetperminute;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerSecond(double acrefeetpersecond)
#else
        public static VolumeFlow FromAcreFeetPerSecond(QuantityValue acrefeetpersecond)
#endif
        {
            double value = (double) acrefeetpersecond;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from CentilitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCentilitersPerDay(double centilitersperday)
#else
        public static VolumeFlow FromCentilitersPerDay(QuantityValue centilitersperday)
#endif
        {
            double value = (double) centilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.CentilitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from CentilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCentilitersPerMinute(double centilitersperminute)
#else
        public static VolumeFlow FromCentilitersPerMinute(QuantityValue centilitersperminute)
#endif
        {
            double value = (double) centilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CentilitersPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicDecimetersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicDecimetersPerMinute(double cubicdecimetersperminute)
#else
        public static VolumeFlow FromCubicDecimetersPerMinute(QuantityValue cubicdecimetersperminute)
#endif
        {
            double value = (double) cubicdecimetersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicDecimeterPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerHour(double cubicfeetperhour)
#else
        public static VolumeFlow FromCubicFeetPerHour(QuantityValue cubicfeetperhour)
#endif
        {
            double value = (double) cubicfeetperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerHour);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerMinute(double cubicfeetperminute)
#else
        public static VolumeFlow FromCubicFeetPerMinute(QuantityValue cubicfeetperminute)
#endif
        {
            double value = (double) cubicfeetperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerSecond(double cubicfeetpersecond)
#else
        public static VolumeFlow FromCubicFeetPerSecond(QuantityValue cubicfeetpersecond)
#endif
        {
            double value = (double) cubicfeetpersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerDay(double cubicmetersperday)
#else
        public static VolumeFlow FromCubicMetersPerDay(QuantityValue cubicmetersperday)
#endif
        {
            double value = (double) cubicmetersperday;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerHour(double cubicmetersperhour)
#else
        public static VolumeFlow FromCubicMetersPerHour(QuantityValue cubicmetersperhour)
#endif
        {
            double value = (double) cubicmetersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerHour);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerMinute(double cubicmetersperminute)
#else
        public static VolumeFlow FromCubicMetersPerMinute(QuantityValue cubicmetersperminute)
#endif
        {
            double value = (double) cubicmetersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerSecond(double cubicmeterspersecond)
#else
        public static VolumeFlow FromCubicMetersPerSecond(QuantityValue cubicmeterspersecond)
#endif
        {
            double value = (double) cubicmeterspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerHour(double cubicyardsperhour)
#else
        public static VolumeFlow FromCubicYardsPerHour(QuantityValue cubicyardsperhour)
#endif
        {
            double value = (double) cubicyardsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerHour);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerMinute(double cubicyardsperminute)
#else
        public static VolumeFlow FromCubicYardsPerMinute(QuantityValue cubicyardsperminute)
#endif
        {
            double value = (double) cubicyardsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerSecond(double cubicyardspersecond)
#else
        public static VolumeFlow FromCubicYardsPerSecond(QuantityValue cubicyardspersecond)
#endif
        {
            double value = (double) cubicyardspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerDay(double cubicyardsperday)
#else
        public static VolumeFlow FromCubicYardsPerDay(QuantityValue cubicyardsperday)
#endif
        {
            double value = (double) cubicyardsperday;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardsPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from DecilitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecilitersPerDay(double decilitersperday)
#else
        public static VolumeFlow FromDecilitersPerDay(QuantityValue decilitersperday)
#endif
        {
            double value = (double) decilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.DecilitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from DecilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecilitersPerMinute(double decilitersperminute)
#else
        public static VolumeFlow FromDecilitersPerMinute(QuantityValue decilitersperminute)
#endif
        {
            double value = (double) decilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.DecilitersPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from KilolitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromKilolitersPerDay(double kilolitersperday)
#else
        public static VolumeFlow FromKilolitersPerDay(QuantityValue kilolitersperday)
#endif
        {
            double value = (double) kilolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.KilolitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from KilolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromKilolitersPerMinute(double kilolitersperminute)
#else
        public static VolumeFlow FromKilolitersPerMinute(QuantityValue kilolitersperminute)
#endif
        {
            double value = (double) kilolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.KilolitersPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from LitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerDay(double litersperday)
#else
        public static VolumeFlow FromLitersPerDay(QuantityValue litersperday)
#endif
        {
            double value = (double) litersperday;
            return new VolumeFlow(value, VolumeFlowUnit.LitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from LitersPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerHour(double litersperhour)
#else
        public static VolumeFlow FromLitersPerHour(QuantityValue litersperhour)
#endif
        {
            double value = (double) litersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.LitersPerHour);
        }

        /// <summary>
        ///     Get VolumeFlow from LitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerMinute(double litersperminute)
#else
        public static VolumeFlow FromLitersPerMinute(QuantityValue litersperminute)
#endif
        {
            double value = (double) litersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.LitersPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from LitersPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerSecond(double literspersecond)
#else
        public static VolumeFlow FromLitersPerSecond(QuantityValue literspersecond)
#endif
        {
            double value = (double) literspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.LitersPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from MegalitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMegalitersPerDay(double megalitersperday)
#else
        public static VolumeFlow FromMegalitersPerDay(QuantityValue megalitersperday)
#endif
        {
            double value = (double) megalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MegalitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from MegaukGallonsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMegaukGallonsPerSecond(double megaukgallonspersecond)
#else
        public static VolumeFlow FromMegaukGallonsPerSecond(QuantityValue megaukgallonspersecond)
#endif
        {
            double value = (double) megaukgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.MegaukGallonsPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMicrolitersPerDay(double microlitersperday)
#else
        public static VolumeFlow FromMicrolitersPerDay(QuantityValue microlitersperday)
#endif
        {
            double value = (double) microlitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MicrolitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMicrolitersPerMinute(double microlitersperminute)
#else
        public static VolumeFlow FromMicrolitersPerMinute(QuantityValue microlitersperminute)
#endif
        {
            double value = (double) microlitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.MicrolitersPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from MillilitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillilitersPerDay(double millilitersperday)
#else
        public static VolumeFlow FromMillilitersPerDay(QuantityValue millilitersperday)
#endif
        {
            double value = (double) millilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MillilitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from MillilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillilitersPerMinute(double millilitersperminute)
#else
        public static VolumeFlow FromMillilitersPerMinute(QuantityValue millilitersperminute)
#endif
        {
            double value = (double) millilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.MillilitersPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from MillionUsGallonsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillionUsGallonsPerDay(double millionusgallonsperday)
#else
        public static VolumeFlow FromMillionUsGallonsPerDay(QuantityValue millionusgallonsperday)
#endif
        {
            double value = (double) millionusgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.MillionUsGallonsPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from NanolitersPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromNanolitersPerDay(double nanolitersperday)
#else
        public static VolumeFlow FromNanolitersPerDay(QuantityValue nanolitersperday)
#endif
        {
            double value = (double) nanolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.NanolitersPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from NanolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromNanolitersPerMinute(double nanolitersperminute)
#else
        public static VolumeFlow FromNanolitersPerMinute(QuantityValue nanolitersperminute)
#endif
        {
            double value = (double) nanolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.NanolitersPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromOilBarrelsPerDay(double oilbarrelsperday)
#else
        public static VolumeFlow FromOilBarrelsPerDay(QuantityValue oilbarrelsperday)
#endif
        {
            double value = (double) oilbarrelsperday;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelsPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromOilBarrelsPerSecond(double oilbarrelspersecond)
#else
        public static VolumeFlow FromOilBarrelsPerSecond(QuantityValue oilbarrelspersecond)
#endif
        {
            double value = (double) oilbarrelspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelsPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUkGallonsPerDay(double ukgallonsperday)
#else
        public static VolumeFlow FromUkGallonsPerDay(QuantityValue ukgallonsperday)
#endif
        {
            double value = (double) ukgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonsPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUkGallonsPerMinute(double ukgallonsperminute)
#else
        public static VolumeFlow FromUkGallonsPerMinute(QuantityValue ukgallonsperminute)
#endif
        {
            double value = (double) ukgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonsPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUkGallonsPerSecond(double ukgallonspersecond)
#else
        public static VolumeFlow FromUkGallonsPerSecond(QuantityValue ukgallonspersecond)
#endif
        {
            double value = (double) ukgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonsPerSecond);
        }

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerDay(double usgallonsperday)
#else
        public static VolumeFlow FromUsGallonsPerDay(QuantityValue usgallonsperday)
#endif
        {
            double value = (double) usgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonsPerDay);
        }

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerHour(double usgallonsperhour)
#else
        public static VolumeFlow FromUsGallonsPerHour(QuantityValue usgallonsperhour)
#endif
        {
            double value = (double) usgallonsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonsPerHour);
        }

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerMinute(double usgallonsperminute)
#else
        public static VolumeFlow FromUsGallonsPerMinute(QuantityValue usgallonsperminute)
#endif
        {
            double value = (double) usgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonsPerMinute);
        }

        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerSecond(double usgallonspersecond)
#else
        public static VolumeFlow FromUsGallonsPerSecond(QuantityValue usgallonspersecond)
#endif
        {
            double value = (double) usgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonsPerSecond);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable VolumeFlow from nullable AcreFeetPerDay.
        /// </summary>
        public static VolumeFlow? FromAcreFeetPerDay(QuantityValue? acrefeetperday)
        {
            if (acrefeetperday.HasValue)
            {
                return FromAcreFeetPerDay(acrefeetperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable AcreFeetPerHour.
        /// </summary>
        public static VolumeFlow? FromAcreFeetPerHour(QuantityValue? acrefeetperhour)
        {
            if (acrefeetperhour.HasValue)
            {
                return FromAcreFeetPerHour(acrefeetperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable AcreFeetPerMinute.
        /// </summary>
        public static VolumeFlow? FromAcreFeetPerMinute(QuantityValue? acrefeetperminute)
        {
            if (acrefeetperminute.HasValue)
            {
                return FromAcreFeetPerMinute(acrefeetperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable AcreFeetPerSecond.
        /// </summary>
        public static VolumeFlow? FromAcreFeetPerSecond(QuantityValue? acrefeetpersecond)
        {
            if (acrefeetpersecond.HasValue)
            {
                return FromAcreFeetPerSecond(acrefeetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CentilitersPerDay.
        /// </summary>
        public static VolumeFlow? FromCentilitersPerDay(QuantityValue? centilitersperday)
        {
            if (centilitersperday.HasValue)
            {
                return FromCentilitersPerDay(centilitersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CentilitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromCentilitersPerMinute(QuantityValue? centilitersperminute)
        {
            if (centilitersperminute.HasValue)
            {
                return FromCentilitersPerMinute(centilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicDecimetersPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicDecimetersPerMinute(QuantityValue? cubicdecimetersperminute)
        {
            if (cubicdecimetersperminute.HasValue)
            {
                return FromCubicDecimetersPerMinute(cubicdecimetersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicFeetPerHour.
        /// </summary>
        public static VolumeFlow? FromCubicFeetPerHour(QuantityValue? cubicfeetperhour)
        {
            if (cubicfeetperhour.HasValue)
            {
                return FromCubicFeetPerHour(cubicfeetperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicFeetPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicFeetPerMinute(QuantityValue? cubicfeetperminute)
        {
            if (cubicfeetperminute.HasValue)
            {
                return FromCubicFeetPerMinute(cubicfeetperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicFeetPerSecond.
        /// </summary>
        public static VolumeFlow? FromCubicFeetPerSecond(QuantityValue? cubicfeetpersecond)
        {
            if (cubicfeetpersecond.HasValue)
            {
                return FromCubicFeetPerSecond(cubicfeetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicMetersPerDay.
        /// </summary>
        public static VolumeFlow? FromCubicMetersPerDay(QuantityValue? cubicmetersperday)
        {
            if (cubicmetersperday.HasValue)
            {
                return FromCubicMetersPerDay(cubicmetersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicMetersPerHour.
        /// </summary>
        public static VolumeFlow? FromCubicMetersPerHour(QuantityValue? cubicmetersperhour)
        {
            if (cubicmetersperhour.HasValue)
            {
                return FromCubicMetersPerHour(cubicmetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicMetersPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicMetersPerMinute(QuantityValue? cubicmetersperminute)
        {
            if (cubicmetersperminute.HasValue)
            {
                return FromCubicMetersPerMinute(cubicmetersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicMetersPerSecond.
        /// </summary>
        public static VolumeFlow? FromCubicMetersPerSecond(QuantityValue? cubicmeterspersecond)
        {
            if (cubicmeterspersecond.HasValue)
            {
                return FromCubicMetersPerSecond(cubicmeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicYardsPerHour.
        /// </summary>
        public static VolumeFlow? FromCubicYardsPerHour(QuantityValue? cubicyardsperhour)
        {
            if (cubicyardsperhour.HasValue)
            {
                return FromCubicYardsPerHour(cubicyardsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicYardsPerMinute.
        /// </summary>
        public static VolumeFlow? FromCubicYardsPerMinute(QuantityValue? cubicyardsperminute)
        {
            if (cubicyardsperminute.HasValue)
            {
                return FromCubicYardsPerMinute(cubicyardsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicYardsPerSecond.
        /// </summary>
        public static VolumeFlow? FromCubicYardsPerSecond(QuantityValue? cubicyardspersecond)
        {
            if (cubicyardspersecond.HasValue)
            {
                return FromCubicYardsPerSecond(cubicyardspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable CubicYardsPerDay.
        /// </summary>
        public static VolumeFlow? FromCubicYardsPerDay(QuantityValue? cubicyardsperday)
        {
            if (cubicyardsperday.HasValue)
            {
                return FromCubicYardsPerDay(cubicyardsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable DecilitersPerDay.
        /// </summary>
        public static VolumeFlow? FromDecilitersPerDay(QuantityValue? decilitersperday)
        {
            if (decilitersperday.HasValue)
            {
                return FromDecilitersPerDay(decilitersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable DecilitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromDecilitersPerMinute(QuantityValue? decilitersperminute)
        {
            if (decilitersperminute.HasValue)
            {
                return FromDecilitersPerMinute(decilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable KilolitersPerDay.
        /// </summary>
        public static VolumeFlow? FromKilolitersPerDay(QuantityValue? kilolitersperday)
        {
            if (kilolitersperday.HasValue)
            {
                return FromKilolitersPerDay(kilolitersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable KilolitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromKilolitersPerMinute(QuantityValue? kilolitersperminute)
        {
            if (kilolitersperminute.HasValue)
            {
                return FromKilolitersPerMinute(kilolitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable LitersPerDay.
        /// </summary>
        public static VolumeFlow? FromLitersPerDay(QuantityValue? litersperday)
        {
            if (litersperday.HasValue)
            {
                return FromLitersPerDay(litersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable LitersPerHour.
        /// </summary>
        public static VolumeFlow? FromLitersPerHour(QuantityValue? litersperhour)
        {
            if (litersperhour.HasValue)
            {
                return FromLitersPerHour(litersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable LitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromLitersPerMinute(QuantityValue? litersperminute)
        {
            if (litersperminute.HasValue)
            {
                return FromLitersPerMinute(litersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable LitersPerSecond.
        /// </summary>
        public static VolumeFlow? FromLitersPerSecond(QuantityValue? literspersecond)
        {
            if (literspersecond.HasValue)
            {
                return FromLitersPerSecond(literspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MegalitersPerDay.
        /// </summary>
        public static VolumeFlow? FromMegalitersPerDay(QuantityValue? megalitersperday)
        {
            if (megalitersperday.HasValue)
            {
                return FromMegalitersPerDay(megalitersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MegaukGallonsPerSecond.
        /// </summary>
        public static VolumeFlow? FromMegaukGallonsPerSecond(QuantityValue? megaukgallonspersecond)
        {
            if (megaukgallonspersecond.HasValue)
            {
                return FromMegaukGallonsPerSecond(megaukgallonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MicrolitersPerDay.
        /// </summary>
        public static VolumeFlow? FromMicrolitersPerDay(QuantityValue? microlitersperday)
        {
            if (microlitersperday.HasValue)
            {
                return FromMicrolitersPerDay(microlitersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MicrolitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromMicrolitersPerMinute(QuantityValue? microlitersperminute)
        {
            if (microlitersperminute.HasValue)
            {
                return FromMicrolitersPerMinute(microlitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MillilitersPerDay.
        /// </summary>
        public static VolumeFlow? FromMillilitersPerDay(QuantityValue? millilitersperday)
        {
            if (millilitersperday.HasValue)
            {
                return FromMillilitersPerDay(millilitersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MillilitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromMillilitersPerMinute(QuantityValue? millilitersperminute)
        {
            if (millilitersperminute.HasValue)
            {
                return FromMillilitersPerMinute(millilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable MillionUsGallonsPerDay.
        /// </summary>
        public static VolumeFlow? FromMillionUsGallonsPerDay(QuantityValue? millionusgallonsperday)
        {
            if (millionusgallonsperday.HasValue)
            {
                return FromMillionUsGallonsPerDay(millionusgallonsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable NanolitersPerDay.
        /// </summary>
        public static VolumeFlow? FromNanolitersPerDay(QuantityValue? nanolitersperday)
        {
            if (nanolitersperday.HasValue)
            {
                return FromNanolitersPerDay(nanolitersperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable NanolitersPerMinute.
        /// </summary>
        public static VolumeFlow? FromNanolitersPerMinute(QuantityValue? nanolitersperminute)
        {
            if (nanolitersperminute.HasValue)
            {
                return FromNanolitersPerMinute(nanolitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable OilBarrelsPerDay.
        /// </summary>
        public static VolumeFlow? FromOilBarrelsPerDay(QuantityValue? oilbarrelsperday)
        {
            if (oilbarrelsperday.HasValue)
            {
                return FromOilBarrelsPerDay(oilbarrelsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable OilBarrelsPerSecond.
        /// </summary>
        public static VolumeFlow? FromOilBarrelsPerSecond(QuantityValue? oilbarrelspersecond)
        {
            if (oilbarrelspersecond.HasValue)
            {
                return FromOilBarrelsPerSecond(oilbarrelspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UkGallonsPerDay.
        /// </summary>
        public static VolumeFlow? FromUkGallonsPerDay(QuantityValue? ukgallonsperday)
        {
            if (ukgallonsperday.HasValue)
            {
                return FromUkGallonsPerDay(ukgallonsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UkGallonsPerMinute.
        /// </summary>
        public static VolumeFlow? FromUkGallonsPerMinute(QuantityValue? ukgallonsperminute)
        {
            if (ukgallonsperminute.HasValue)
            {
                return FromUkGallonsPerMinute(ukgallonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UkGallonsPerSecond.
        /// </summary>
        public static VolumeFlow? FromUkGallonsPerSecond(QuantityValue? ukgallonspersecond)
        {
            if (ukgallonspersecond.HasValue)
            {
                return FromUkGallonsPerSecond(ukgallonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UsGallonsPerDay.
        /// </summary>
        public static VolumeFlow? FromUsGallonsPerDay(QuantityValue? usgallonsperday)
        {
            if (usgallonsperday.HasValue)
            {
                return FromUsGallonsPerDay(usgallonsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UsGallonsPerHour.
        /// </summary>
        public static VolumeFlow? FromUsGallonsPerHour(QuantityValue? usgallonsperhour)
        {
            if (usgallonsperhour.HasValue)
            {
                return FromUsGallonsPerHour(usgallonsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UsGallonsPerMinute.
        /// </summary>
        public static VolumeFlow? FromUsGallonsPerMinute(QuantityValue? usgallonsperminute)
        {
            if (usgallonsperminute.HasValue)
            {
                return FromUsGallonsPerMinute(usgallonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable VolumeFlow from nullable UsGallonsPerSecond.
        /// </summary>
        public static VolumeFlow? FromUsGallonsPerSecond(QuantityValue? usgallonspersecond)
        {
            if (usgallonspersecond.HasValue)
            {
                return FromUsGallonsPerSecond(usgallonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static VolumeFlow From(double value, VolumeFlowUnit fromUnit)
#else
        public static VolumeFlow From(QuantityValue value, VolumeFlowUnit fromUnit)
#endif
        {
            return new VolumeFlow((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
        public static VolumeFlow? From(QuantityValue? value, VolumeFlowUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new VolumeFlow((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(VolumeFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          VolumeFlowUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static VolumeFlow operator -(VolumeFlow right)
        {
            return new VolumeFlow(-right.Value, right.Unit);
        }

        public static VolumeFlow operator +(VolumeFlow left, VolumeFlow right)
        {
            return new VolumeFlow(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static VolumeFlow operator -(VolumeFlow left, VolumeFlow right)
        {
            return new VolumeFlow(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static VolumeFlow operator *(double left, VolumeFlow right)
        {
            return new VolumeFlow(left * right.Value, right.Unit);
        }

        public static VolumeFlow operator *(VolumeFlow left, double right)
        {
            return new VolumeFlow(left.Value * right, left.Unit);
        }

        public static VolumeFlow operator /(VolumeFlow left, double right)
        {
            return new VolumeFlow(left.Value / right, left.Unit);
        }

        public static double operator /(VolumeFlow left, VolumeFlow right)
        {
            return left.CubicMetersPerSecond / right.CubicMetersPerSecond;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is VolumeFlow)) throw new ArgumentException("Expected type VolumeFlow.", "obj");
            return CompareTo((VolumeFlow) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(VolumeFlow other)
        {
            return AsBaseUnitCubicMetersPerSecond().CompareTo(other.AsBaseUnitCubicMetersPerSecond());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(VolumeFlow left, VolumeFlow right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(VolumeFlow left, VolumeFlow right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(VolumeFlow left, VolumeFlow right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(VolumeFlow left, VolumeFlow right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(VolumeFlow left, VolumeFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(VolumeFlow left, VolumeFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitCubicMetersPerSecond().Equals(((VolumeFlow) obj).AsBaseUnitCubicMetersPerSecond());
        }

        /// <summary>
        ///     Compare equality to another VolumeFlow by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(VolumeFlow other, VolumeFlow maxError)
        {
            return Math.Abs(AsBaseUnitCubicMetersPerSecond() - other.AsBaseUnitCubicMetersPerSecond()) <= maxError.AsBaseUnitCubicMetersPerSecond();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeFlowUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitCubicMetersPerSecond();

            switch (unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return baseUnitValue*70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return baseUnitValue*2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return baseUnitValue*0.04864;
                case VolumeFlowUnit.AcreFootPerSecond: return baseUnitValue*0.0008107;
                case VolumeFlowUnit.CentilitersPerDay: return (baseUnitValue*86400000) / 1e-2d;
                case VolumeFlowUnit.CentilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return baseUnitValue*2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return baseUnitValue*35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return baseUnitValue*86400;
                case VolumeFlowUnit.CubicMeterPerHour: return baseUnitValue*3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return baseUnitValue*60;
                case VolumeFlowUnit.CubicMeterPerSecond: return baseUnitValue;
                case VolumeFlowUnit.CubicYardPerHour: return baseUnitValue/2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return baseUnitValue/0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return baseUnitValue/0.764554857984;
                case VolumeFlowUnit.CubicYardsPerDay: return baseUnitValue*113007;
                case VolumeFlowUnit.DecilitersPerDay: return (baseUnitValue*86400000) / 1e-1d;
                case VolumeFlowUnit.DecilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-1d;
                case VolumeFlowUnit.KilolitersPerDay: return (baseUnitValue*86400000) / 1e3d;
                case VolumeFlowUnit.KilolitersPerMinute: return (baseUnitValue*60000.00000) / 1e3d;
                case VolumeFlowUnit.LitersPerDay: return baseUnitValue*86400000;
                case VolumeFlowUnit.LitersPerHour: return baseUnitValue*3600000.000;
                case VolumeFlowUnit.LitersPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.LitersPerSecond: return baseUnitValue*1000;
                case VolumeFlowUnit.MegalitersPerDay: return (baseUnitValue*86400000) / 1e6d;
                case VolumeFlowUnit.MegaukGallonsPerSecond: return (baseUnitValue*219.969) / 1e6d;
                case VolumeFlowUnit.MicrolitersPerDay: return (baseUnitValue*86400000) / 1e-6d;
                case VolumeFlowUnit.MicrolitersPerMinute: return (baseUnitValue*60000.00000) / 1e-6d;
                case VolumeFlowUnit.MillilitersPerDay: return (baseUnitValue*86400000) / 1e-3d;
                case VolumeFlowUnit.MillilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return baseUnitValue*22.824465227;
                case VolumeFlowUnit.NanolitersPerDay: return (baseUnitValue*86400000) / 1e-9d;
                case VolumeFlowUnit.NanolitersPerMinute: return (baseUnitValue*60000.00000) / 1e-9d;
                case VolumeFlowUnit.OilBarrelsPerDay: return baseUnitValue/1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelsPerSecond: return baseUnitValue*6.28981;
                case VolumeFlowUnit.UkGallonsPerDay: return baseUnitValue*19005304;
                case VolumeFlowUnit.UkGallonsPerMinute: return baseUnitValue*13198.2;
                case VolumeFlowUnit.UkGallonsPerSecond: return baseUnitValue*219.969;
                case VolumeFlowUnit.UsGallonsPerDay: return baseUnitValue*22824465.227;
                case VolumeFlowUnit.UsGallonsPerHour: return baseUnitValue*951019.38848933424;
                case VolumeFlowUnit.UsGallonsPerMinute: return baseUnitValue*15850.323141489;
                case VolumeFlowUnit.UsGallonsPerSecond: return baseUnitValue*264.1720523581484;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeFlow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeFlow Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<VolumeFlow, VolumeFlowUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    VolumeFlowUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromCubicMetersPerSecond(x.CubicMetersPerSecond + y.CubicMetersPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out VolumeFlow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out VolumeFlow result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(VolumeFlow);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static VolumeFlowUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static VolumeFlowUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<VolumeFlowUnit>(str.Trim());

            if (unit == VolumeFlowUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized VolumeFlowUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is CubicMeterPerSecond
        /// </summary>
        public static VolumeFlowUnit ToStringDefaultUnit { get; set; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(VolumeFlowUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          VolumeFlowUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            VolumeFlowUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            VolumeFlowUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MaxValue => new VolumeFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MinValue => new VolumeFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitCubicMetersPerSecond()
        {
			if (Unit == VolumeFlowUnit.CubicMeterPerSecond) { return _value; }

            switch (Unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return _value/70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return _value/2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return _value/0.04864;
                case VolumeFlowUnit.AcreFootPerSecond: return _value/0.0008107;
                case VolumeFlowUnit.CentilitersPerDay: return (_value/86400000) * 1e-2d;
                case VolumeFlowUnit.CentilitersPerMinute: return (_value/60000.00000) * 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return _value/2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return _value/35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return _value/86400;
                case VolumeFlowUnit.CubicMeterPerHour: return _value/3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return _value/60;
                case VolumeFlowUnit.CubicMeterPerSecond: return _value;
                case VolumeFlowUnit.CubicYardPerHour: return _value*2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return _value*0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return _value*0.764554857984;
                case VolumeFlowUnit.CubicYardsPerDay: return _value/113007;
                case VolumeFlowUnit.DecilitersPerDay: return (_value/86400000) * 1e-1d;
                case VolumeFlowUnit.DecilitersPerMinute: return (_value/60000.00000) * 1e-1d;
                case VolumeFlowUnit.KilolitersPerDay: return (_value/86400000) * 1e3d;
                case VolumeFlowUnit.KilolitersPerMinute: return (_value/60000.00000) * 1e3d;
                case VolumeFlowUnit.LitersPerDay: return _value/86400000;
                case VolumeFlowUnit.LitersPerHour: return _value/3600000.000;
                case VolumeFlowUnit.LitersPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.LitersPerSecond: return _value/1000;
                case VolumeFlowUnit.MegalitersPerDay: return (_value/86400000) * 1e6d;
                case VolumeFlowUnit.MegaukGallonsPerSecond: return (_value/219.969) * 1e6d;
                case VolumeFlowUnit.MicrolitersPerDay: return (_value/86400000) * 1e-6d;
                case VolumeFlowUnit.MicrolitersPerMinute: return (_value/60000.00000) * 1e-6d;
                case VolumeFlowUnit.MillilitersPerDay: return (_value/86400000) * 1e-3d;
                case VolumeFlowUnit.MillilitersPerMinute: return (_value/60000.00000) * 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return _value/22.824465227;
                case VolumeFlowUnit.NanolitersPerDay: return (_value/86400000) * 1e-9d;
                case VolumeFlowUnit.NanolitersPerMinute: return (_value/60000.00000) * 1e-9d;
                case VolumeFlowUnit.OilBarrelsPerDay: return _value*1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelsPerSecond: return _value/6.28981;
                case VolumeFlowUnit.UkGallonsPerDay: return _value/19005304;
                case VolumeFlowUnit.UkGallonsPerMinute: return _value/13198.2;
                case VolumeFlowUnit.UkGallonsPerSecond: return _value/219.969;
                case VolumeFlowUnit.UsGallonsPerDay: return _value/22824465.227;
                case VolumeFlowUnit.UsGallonsPerHour: return _value/951019.38848933424;
                case VolumeFlowUnit.UsGallonsPerMinute: return _value/15850.323141489;
                case VolumeFlowUnit.UsGallonsPerSecond: return _value/264.1720523581484;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(VolumeFlowUnit unit) => Convert.ToDouble(As(unit));
	}
}
