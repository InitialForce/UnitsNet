//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Force change rate is the ratio of the force change to the time during which the change occurred (value of force changes per unit time).
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class ForceChangeRate
#else
    public partial struct ForceChangeRate : IComparable, IComparable<ForceChangeRate>
#endif
    {
        /// <summary>
        ///     Base unit of ForceChangeRate.
        /// </summary>
        private readonly double _newtonsPerSecond;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public ForceChangeRate() : this(0)
        {
        }
#endif

        public ForceChangeRate(double newtonspersecond)
        {
            _newtonsPerSecond = Convert.ToDouble(newtonspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        ForceChangeRate(long newtonspersecond)
        {
            _newtonsPerSecond = Convert.ToDouble(newtonspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        ForceChangeRate(decimal newtonspersecond)
        {
            _newtonsPerSecond = Convert.ToDouble(newtonspersecond);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.ForceChangeRate;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static ForceChangeRateUnit BaseUnit
        {
            get { return ForceChangeRateUnit.NewtonPerSecond; }
        }

        /// <summary>
        ///     All units of measurement for the ForceChangeRate quantity.
        /// </summary>
        public static ForceChangeRateUnit[] Units { get; } = Enum.GetValues(typeof(ForceChangeRateUnit)).Cast<ForceChangeRateUnit>().ToArray();

        /// <summary>
        ///     Get ForceChangeRate in CentinewtonsPerSecond.
        /// </summary>
        public double CentinewtonsPerSecond
        {
            get { return (_newtonsPerSecond) / 1e-2d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in DecanewtonsPerMinute.
        /// </summary>
        public double DecanewtonsPerMinute
        {
            get { return (_newtonsPerSecond*60) / 1e1d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in DecanewtonsPerSecond.
        /// </summary>
        public double DecanewtonsPerSecond
        {
            get { return (_newtonsPerSecond) / 1e1d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in DecinewtonsPerSecond.
        /// </summary>
        public double DecinewtonsPerSecond
        {
            get { return (_newtonsPerSecond) / 1e-1d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in KilonewtonsPerMinute.
        /// </summary>
        public double KilonewtonsPerMinute
        {
            get { return (_newtonsPerSecond*60) / 1e3d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in KilonewtonsPerSecond.
        /// </summary>
        public double KilonewtonsPerSecond
        {
            get { return (_newtonsPerSecond) / 1e3d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in MicronewtonsPerSecond.
        /// </summary>
        public double MicronewtonsPerSecond
        {
            get { return (_newtonsPerSecond) / 1e-6d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in MillinewtonsPerSecond.
        /// </summary>
        public double MillinewtonsPerSecond
        {
            get { return (_newtonsPerSecond) / 1e-3d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in NanonewtonsPerSecond.
        /// </summary>
        public double NanonewtonsPerSecond
        {
            get { return (_newtonsPerSecond) / 1e-9d; }
        }

        /// <summary>
        ///     Get ForceChangeRate in NewtonsPerMinute.
        /// </summary>
        public double NewtonsPerMinute
        {
            get { return _newtonsPerSecond*60; }
        }

        /// <summary>
        ///     Get ForceChangeRate in NewtonsPerSecond.
        /// </summary>
        public double NewtonsPerSecond
        {
            get { return _newtonsPerSecond; }
        }

        #endregion

        #region Static

        public static ForceChangeRate Zero
        {
            get { return new ForceChangeRate(); }
        }

        /// <summary>
        ///     Get ForceChangeRate from CentinewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromCentinewtonsPerSecond(double centinewtonspersecond)
        {
            return new ForceChangeRate((centinewtonspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get ForceChangeRate from CentinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromCentinewtonsPerSecond(int centinewtonspersecond)
        {
            return new ForceChangeRate((centinewtonspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get ForceChangeRate from CentinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromCentinewtonsPerSecond(long centinewtonspersecond)
        {
            return new ForceChangeRate((centinewtonspersecond) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from CentinewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromCentinewtonsPerSecond(decimal centinewtonspersecond)
        {
            return new ForceChangeRate((Convert.ToDouble(centinewtonspersecond)) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerMinute.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromDecanewtonsPerMinute(double decanewtonsperminute)
        {
            return new ForceChangeRate((decanewtonsperminute/60) * 1e1d);
        }

        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate FromDecanewtonsPerMinute(int decanewtonsperminute)
        {
            return new ForceChangeRate((decanewtonsperminute/60) * 1e1d);
        }

        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate FromDecanewtonsPerMinute(long decanewtonsperminute)
        {
            return new ForceChangeRate((decanewtonsperminute/60) * 1e1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerMinute of type decimal.
        /// </summary>
        public static ForceChangeRate FromDecanewtonsPerMinute(decimal decanewtonsperminute)
        {
            return new ForceChangeRate((Convert.ToDouble(decanewtonsperminute)/60) * 1e1d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromDecanewtonsPerSecond(double decanewtonspersecond)
        {
            return new ForceChangeRate((decanewtonspersecond) * 1e1d);
        }

        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromDecanewtonsPerSecond(int decanewtonspersecond)
        {
            return new ForceChangeRate((decanewtonspersecond) * 1e1d);
        }

        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromDecanewtonsPerSecond(long decanewtonspersecond)
        {
            return new ForceChangeRate((decanewtonspersecond) * 1e1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from DecanewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromDecanewtonsPerSecond(decimal decanewtonspersecond)
        {
            return new ForceChangeRate((Convert.ToDouble(decanewtonspersecond)) * 1e1d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from DecinewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromDecinewtonsPerSecond(double decinewtonspersecond)
        {
            return new ForceChangeRate((decinewtonspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get ForceChangeRate from DecinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromDecinewtonsPerSecond(int decinewtonspersecond)
        {
            return new ForceChangeRate((decinewtonspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get ForceChangeRate from DecinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromDecinewtonsPerSecond(long decinewtonspersecond)
        {
            return new ForceChangeRate((decinewtonspersecond) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from DecinewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromDecinewtonsPerSecond(decimal decinewtonspersecond)
        {
            return new ForceChangeRate((Convert.ToDouble(decinewtonspersecond)) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerMinute.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromKilonewtonsPerMinute(double kilonewtonsperminute)
        {
            return new ForceChangeRate((kilonewtonsperminute/60) * 1e3d);
        }

        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate FromKilonewtonsPerMinute(int kilonewtonsperminute)
        {
            return new ForceChangeRate((kilonewtonsperminute/60) * 1e3d);
        }

        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate FromKilonewtonsPerMinute(long kilonewtonsperminute)
        {
            return new ForceChangeRate((kilonewtonsperminute/60) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerMinute of type decimal.
        /// </summary>
        public static ForceChangeRate FromKilonewtonsPerMinute(decimal kilonewtonsperminute)
        {
            return new ForceChangeRate((Convert.ToDouble(kilonewtonsperminute)/60) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromKilonewtonsPerSecond(double kilonewtonspersecond)
        {
            return new ForceChangeRate((kilonewtonspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromKilonewtonsPerSecond(int kilonewtonspersecond)
        {
            return new ForceChangeRate((kilonewtonspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromKilonewtonsPerSecond(long kilonewtonspersecond)
        {
            return new ForceChangeRate((kilonewtonspersecond) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from KilonewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromKilonewtonsPerSecond(decimal kilonewtonspersecond)
        {
            return new ForceChangeRate((Convert.ToDouble(kilonewtonspersecond)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from MicronewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromMicronewtonsPerSecond(double micronewtonspersecond)
        {
            return new ForceChangeRate((micronewtonspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get ForceChangeRate from MicronewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromMicronewtonsPerSecond(int micronewtonspersecond)
        {
            return new ForceChangeRate((micronewtonspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get ForceChangeRate from MicronewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromMicronewtonsPerSecond(long micronewtonspersecond)
        {
            return new ForceChangeRate((micronewtonspersecond) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from MicronewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromMicronewtonsPerSecond(decimal micronewtonspersecond)
        {
            return new ForceChangeRate((Convert.ToDouble(micronewtonspersecond)) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from MillinewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromMillinewtonsPerSecond(double millinewtonspersecond)
        {
            return new ForceChangeRate((millinewtonspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get ForceChangeRate from MillinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromMillinewtonsPerSecond(int millinewtonspersecond)
        {
            return new ForceChangeRate((millinewtonspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get ForceChangeRate from MillinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromMillinewtonsPerSecond(long millinewtonspersecond)
        {
            return new ForceChangeRate((millinewtonspersecond) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from MillinewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromMillinewtonsPerSecond(decimal millinewtonspersecond)
        {
            return new ForceChangeRate((Convert.ToDouble(millinewtonspersecond)) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from NanonewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromNanonewtonsPerSecond(double nanonewtonspersecond)
        {
            return new ForceChangeRate((nanonewtonspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get ForceChangeRate from NanonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromNanonewtonsPerSecond(int nanonewtonspersecond)
        {
            return new ForceChangeRate((nanonewtonspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get ForceChangeRate from NanonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromNanonewtonsPerSecond(long nanonewtonspersecond)
        {
            return new ForceChangeRate((nanonewtonspersecond) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from NanonewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromNanonewtonsPerSecond(decimal nanonewtonspersecond)
        {
            return new ForceChangeRate((Convert.ToDouble(nanonewtonspersecond)) * 1e-9d);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerMinute.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromNewtonsPerMinute(double newtonsperminute)
        {
            return new ForceChangeRate(newtonsperminute/60);
        }

        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate FromNewtonsPerMinute(int newtonsperminute)
        {
            return new ForceChangeRate(newtonsperminute/60);
        }

        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate FromNewtonsPerMinute(long newtonsperminute)
        {
            return new ForceChangeRate(newtonsperminute/60);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerMinute of type decimal.
        /// </summary>
        public static ForceChangeRate FromNewtonsPerMinute(decimal newtonsperminute)
        {
            return new ForceChangeRate(Convert.ToDouble(newtonsperminute)/60);
        }
#endif

        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static ForceChangeRate FromNewtonsPerSecond(double newtonspersecond)
        {
            return new ForceChangeRate(newtonspersecond);
        }

        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromNewtonsPerSecond(int newtonspersecond)
        {
            return new ForceChangeRate(newtonspersecond);
        }

        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate FromNewtonsPerSecond(long newtonspersecond)
        {
            return new ForceChangeRate(newtonspersecond);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get ForceChangeRate from NewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate FromNewtonsPerSecond(decimal newtonspersecond)
        {
            return new ForceChangeRate(Convert.ToDouble(newtonspersecond));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable ForceChangeRate from nullable CentinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromCentinewtonsPerSecond(double? centinewtonspersecond)
        {
            if (centinewtonspersecond.HasValue)
            {
                return FromCentinewtonsPerSecond(centinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable CentinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromCentinewtonsPerSecond(int? centinewtonspersecond)
        {
            if (centinewtonspersecond.HasValue)
            {
                return FromCentinewtonsPerSecond(centinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable CentinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromCentinewtonsPerSecond(long? centinewtonspersecond)
        {
            if (centinewtonspersecond.HasValue)
            {
                return FromCentinewtonsPerSecond(centinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from CentinewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromCentinewtonsPerSecond(decimal? centinewtonspersecond)
        {
            if (centinewtonspersecond.HasValue)
            {
                return FromCentinewtonsPerSecond(centinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecanewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerMinute(double? decanewtonsperminute)
        {
            if (decanewtonsperminute.HasValue)
            {
                return FromDecanewtonsPerMinute(decanewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecanewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerMinute(int? decanewtonsperminute)
        {
            if (decanewtonsperminute.HasValue)
            {
                return FromDecanewtonsPerMinute(decanewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecanewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerMinute(long? decanewtonsperminute)
        {
            if (decanewtonsperminute.HasValue)
            {
                return FromDecanewtonsPerMinute(decanewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from DecanewtonsPerMinute of type decimal.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerMinute(decimal? decanewtonsperminute)
        {
            if (decanewtonsperminute.HasValue)
            {
                return FromDecanewtonsPerMinute(decanewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecanewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerSecond(double? decanewtonspersecond)
        {
            if (decanewtonspersecond.HasValue)
            {
                return FromDecanewtonsPerSecond(decanewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecanewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerSecond(int? decanewtonspersecond)
        {
            if (decanewtonspersecond.HasValue)
            {
                return FromDecanewtonsPerSecond(decanewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecanewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerSecond(long? decanewtonspersecond)
        {
            if (decanewtonspersecond.HasValue)
            {
                return FromDecanewtonsPerSecond(decanewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from DecanewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromDecanewtonsPerSecond(decimal? decanewtonspersecond)
        {
            if (decanewtonspersecond.HasValue)
            {
                return FromDecanewtonsPerSecond(decanewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromDecinewtonsPerSecond(double? decinewtonspersecond)
        {
            if (decinewtonspersecond.HasValue)
            {
                return FromDecinewtonsPerSecond(decinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromDecinewtonsPerSecond(int? decinewtonspersecond)
        {
            if (decinewtonspersecond.HasValue)
            {
                return FromDecinewtonsPerSecond(decinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable DecinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromDecinewtonsPerSecond(long? decinewtonspersecond)
        {
            if (decinewtonspersecond.HasValue)
            {
                return FromDecinewtonsPerSecond(decinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from DecinewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromDecinewtonsPerSecond(decimal? decinewtonspersecond)
        {
            if (decinewtonspersecond.HasValue)
            {
                return FromDecinewtonsPerSecond(decinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable KilonewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerMinute(double? kilonewtonsperminute)
        {
            if (kilonewtonsperminute.HasValue)
            {
                return FromKilonewtonsPerMinute(kilonewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable KilonewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerMinute(int? kilonewtonsperminute)
        {
            if (kilonewtonsperminute.HasValue)
            {
                return FromKilonewtonsPerMinute(kilonewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable KilonewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerMinute(long? kilonewtonsperminute)
        {
            if (kilonewtonsperminute.HasValue)
            {
                return FromKilonewtonsPerMinute(kilonewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from KilonewtonsPerMinute of type decimal.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerMinute(decimal? kilonewtonsperminute)
        {
            if (kilonewtonsperminute.HasValue)
            {
                return FromKilonewtonsPerMinute(kilonewtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable KilonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerSecond(double? kilonewtonspersecond)
        {
            if (kilonewtonspersecond.HasValue)
            {
                return FromKilonewtonsPerSecond(kilonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable KilonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerSecond(int? kilonewtonspersecond)
        {
            if (kilonewtonspersecond.HasValue)
            {
                return FromKilonewtonsPerSecond(kilonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable KilonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerSecond(long? kilonewtonspersecond)
        {
            if (kilonewtonspersecond.HasValue)
            {
                return FromKilonewtonsPerSecond(kilonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from KilonewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromKilonewtonsPerSecond(decimal? kilonewtonspersecond)
        {
            if (kilonewtonspersecond.HasValue)
            {
                return FromKilonewtonsPerSecond(kilonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable MicronewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromMicronewtonsPerSecond(double? micronewtonspersecond)
        {
            if (micronewtonspersecond.HasValue)
            {
                return FromMicronewtonsPerSecond(micronewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable MicronewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromMicronewtonsPerSecond(int? micronewtonspersecond)
        {
            if (micronewtonspersecond.HasValue)
            {
                return FromMicronewtonsPerSecond(micronewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable MicronewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromMicronewtonsPerSecond(long? micronewtonspersecond)
        {
            if (micronewtonspersecond.HasValue)
            {
                return FromMicronewtonsPerSecond(micronewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from MicronewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromMicronewtonsPerSecond(decimal? micronewtonspersecond)
        {
            if (micronewtonspersecond.HasValue)
            {
                return FromMicronewtonsPerSecond(micronewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable MillinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromMillinewtonsPerSecond(double? millinewtonspersecond)
        {
            if (millinewtonspersecond.HasValue)
            {
                return FromMillinewtonsPerSecond(millinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable MillinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromMillinewtonsPerSecond(int? millinewtonspersecond)
        {
            if (millinewtonspersecond.HasValue)
            {
                return FromMillinewtonsPerSecond(millinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable MillinewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromMillinewtonsPerSecond(long? millinewtonspersecond)
        {
            if (millinewtonspersecond.HasValue)
            {
                return FromMillinewtonsPerSecond(millinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from MillinewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromMillinewtonsPerSecond(decimal? millinewtonspersecond)
        {
            if (millinewtonspersecond.HasValue)
            {
                return FromMillinewtonsPerSecond(millinewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NanonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromNanonewtonsPerSecond(double? nanonewtonspersecond)
        {
            if (nanonewtonspersecond.HasValue)
            {
                return FromNanonewtonsPerSecond(nanonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NanonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromNanonewtonsPerSecond(int? nanonewtonspersecond)
        {
            if (nanonewtonspersecond.HasValue)
            {
                return FromNanonewtonsPerSecond(nanonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NanonewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromNanonewtonsPerSecond(long? nanonewtonspersecond)
        {
            if (nanonewtonspersecond.HasValue)
            {
                return FromNanonewtonsPerSecond(nanonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from NanonewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromNanonewtonsPerSecond(decimal? nanonewtonspersecond)
        {
            if (nanonewtonspersecond.HasValue)
            {
                return FromNanonewtonsPerSecond(nanonewtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerMinute(double? newtonsperminute)
        {
            if (newtonsperminute.HasValue)
            {
                return FromNewtonsPerMinute(newtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerMinute(int? newtonsperminute)
        {
            if (newtonsperminute.HasValue)
            {
                return FromNewtonsPerMinute(newtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NewtonsPerMinute.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerMinute(long? newtonsperminute)
        {
            if (newtonsperminute.HasValue)
            {
                return FromNewtonsPerMinute(newtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from NewtonsPerMinute of type decimal.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerMinute(decimal? newtonsperminute)
        {
            if (newtonsperminute.HasValue)
            {
                return FromNewtonsPerMinute(newtonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerSecond(double? newtonspersecond)
        {
            if (newtonspersecond.HasValue)
            {
                return FromNewtonsPerSecond(newtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerSecond(int? newtonspersecond)
        {
            if (newtonspersecond.HasValue)
            {
                return FromNewtonsPerSecond(newtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from nullable NewtonsPerSecond.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerSecond(long? newtonspersecond)
        {
            if (newtonspersecond.HasValue)
            {
                return FromNewtonsPerSecond(newtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ForceChangeRate from NewtonsPerSecond of type decimal.
        /// </summary>
        public static ForceChangeRate? FromNewtonsPerSecond(decimal? newtonspersecond)
        {
            if (newtonspersecond.HasValue)
            {
                return FromNewtonsPerSecond(newtonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ForceChangeRateUnit" /> to <see cref="ForceChangeRate" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ForceChangeRate unit value.</returns>
        public static ForceChangeRate From(double val, ForceChangeRateUnit fromUnit)
        {
            switch (fromUnit)
            {
                case ForceChangeRateUnit.CentinewtonPerSecond:
                    return FromCentinewtonsPerSecond(val);
                case ForceChangeRateUnit.DecanewtonPerMinute:
                    return FromDecanewtonsPerMinute(val);
                case ForceChangeRateUnit.DecanewtonPerSecond:
                    return FromDecanewtonsPerSecond(val);
                case ForceChangeRateUnit.DecinewtonPerSecond:
                    return FromDecinewtonsPerSecond(val);
                case ForceChangeRateUnit.KilonewtonPerMinute:
                    return FromKilonewtonsPerMinute(val);
                case ForceChangeRateUnit.KilonewtonPerSecond:
                    return FromKilonewtonsPerSecond(val);
                case ForceChangeRateUnit.MicronewtonPerSecond:
                    return FromMicronewtonsPerSecond(val);
                case ForceChangeRateUnit.MillinewtonPerSecond:
                    return FromMillinewtonsPerSecond(val);
                case ForceChangeRateUnit.NanonewtonPerSecond:
                    return FromNanonewtonsPerSecond(val);
                case ForceChangeRateUnit.NewtonPerMinute:
                    return FromNewtonsPerMinute(val);
                case ForceChangeRateUnit.NewtonPerSecond:
                    return FromNewtonsPerSecond(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ForceChangeRateUnit" /> to <see cref="ForceChangeRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ForceChangeRate unit value.</returns>
        public static ForceChangeRate? From(double? value, ForceChangeRateUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case ForceChangeRateUnit.CentinewtonPerSecond:
                    return FromCentinewtonsPerSecond(value.Value);
                case ForceChangeRateUnit.DecanewtonPerMinute:
                    return FromDecanewtonsPerMinute(value.Value);
                case ForceChangeRateUnit.DecanewtonPerSecond:
                    return FromDecanewtonsPerSecond(value.Value);
                case ForceChangeRateUnit.DecinewtonPerSecond:
                    return FromDecinewtonsPerSecond(value.Value);
                case ForceChangeRateUnit.KilonewtonPerMinute:
                    return FromKilonewtonsPerMinute(value.Value);
                case ForceChangeRateUnit.KilonewtonPerSecond:
                    return FromKilonewtonsPerSecond(value.Value);
                case ForceChangeRateUnit.MicronewtonPerSecond:
                    return FromMicronewtonsPerSecond(value.Value);
                case ForceChangeRateUnit.MillinewtonPerSecond:
                    return FromMillinewtonsPerSecond(value.Value);
                case ForceChangeRateUnit.NanonewtonPerSecond:
                    return FromNanonewtonsPerSecond(value.Value);
                case ForceChangeRateUnit.NewtonPerMinute:
                    return FromNewtonsPerMinute(value.Value);
                case ForceChangeRateUnit.NewtonPerSecond:
                    return FromNewtonsPerSecond(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ForceChangeRateUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ForceChangeRateUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static ForceChangeRate operator -(ForceChangeRate right)
        {
            return new ForceChangeRate(-right._newtonsPerSecond);
        }

        public static ForceChangeRate operator +(ForceChangeRate left, ForceChangeRate right)
        {
            return new ForceChangeRate(left._newtonsPerSecond + right._newtonsPerSecond);
        }

        public static ForceChangeRate operator -(ForceChangeRate left, ForceChangeRate right)
        {
            return new ForceChangeRate(left._newtonsPerSecond - right._newtonsPerSecond);
        }

        public static ForceChangeRate operator *(double left, ForceChangeRate right)
        {
            return new ForceChangeRate(left*right._newtonsPerSecond);
        }

        public static ForceChangeRate operator *(ForceChangeRate left, double right)
        {
            return new ForceChangeRate(left._newtonsPerSecond*(double)right);
        }

        public static ForceChangeRate operator /(ForceChangeRate left, double right)
        {
            return new ForceChangeRate(left._newtonsPerSecond/(double)right);
        }

        public static double operator /(ForceChangeRate left, ForceChangeRate right)
        {
            return Convert.ToDouble(left._newtonsPerSecond/right._newtonsPerSecond);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is ForceChangeRate)) throw new ArgumentException("Expected type ForceChangeRate.", "obj");
            return CompareTo((ForceChangeRate) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(ForceChangeRate other)
        {
            return _newtonsPerSecond.CompareTo(other._newtonsPerSecond);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(ForceChangeRate left, ForceChangeRate right)
        {
            return left._newtonsPerSecond <= right._newtonsPerSecond;
        }

        public static bool operator >=(ForceChangeRate left, ForceChangeRate right)
        {
            return left._newtonsPerSecond >= right._newtonsPerSecond;
        }

        public static bool operator <(ForceChangeRate left, ForceChangeRate right)
        {
            return left._newtonsPerSecond < right._newtonsPerSecond;
        }

        public static bool operator >(ForceChangeRate left, ForceChangeRate right)
        {
            return left._newtonsPerSecond > right._newtonsPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(ForceChangeRate left, ForceChangeRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._newtonsPerSecond == right._newtonsPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(ForceChangeRate left, ForceChangeRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._newtonsPerSecond != right._newtonsPerSecond;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _newtonsPerSecond.Equals(((ForceChangeRate) obj)._newtonsPerSecond);
        }

        /// <summary>
        ///     Compare equality to another ForceChangeRate by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(ForceChangeRate other, ForceChangeRate maxError)
        {
            return Math.Abs(_newtonsPerSecond - other._newtonsPerSecond) <= maxError._newtonsPerSecond;
        }

        public override int GetHashCode()
        {
            return _newtonsPerSecond.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(ForceChangeRateUnit unit)
        {
            switch (unit)
            {
                case ForceChangeRateUnit.CentinewtonPerSecond:
                    return CentinewtonsPerSecond;
                case ForceChangeRateUnit.DecanewtonPerMinute:
                    return DecanewtonsPerMinute;
                case ForceChangeRateUnit.DecanewtonPerSecond:
                    return DecanewtonsPerSecond;
                case ForceChangeRateUnit.DecinewtonPerSecond:
                    return DecinewtonsPerSecond;
                case ForceChangeRateUnit.KilonewtonPerMinute:
                    return KilonewtonsPerMinute;
                case ForceChangeRateUnit.KilonewtonPerSecond:
                    return KilonewtonsPerSecond;
                case ForceChangeRateUnit.MicronewtonPerSecond:
                    return MicronewtonsPerSecond;
                case ForceChangeRateUnit.MillinewtonPerSecond:
                    return MillinewtonsPerSecond;
                case ForceChangeRateUnit.NanonewtonPerSecond:
                    return NanonewtonsPerSecond;
                case ForceChangeRateUnit.NewtonPerMinute:
                    return NewtonsPerMinute;
                case ForceChangeRateUnit.NewtonPerSecond:
                    return NewtonsPerSecond;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ForceChangeRate Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ForceChangeRate Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<ForceChangeRate, ForceChangeRateUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    ForceChangeRateUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromNewtonsPerSecond(x.NewtonsPerSecond + y.NewtonsPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ForceChangeRate result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out ForceChangeRate result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(ForceChangeRate);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ForceChangeRateUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ForceChangeRateUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static ForceChangeRateUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<ForceChangeRateUnit>(str.Trim());

            if (unit == ForceChangeRateUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized ForceChangeRateUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is NewtonPerSecond
        /// </summary>
        public static ForceChangeRateUnit ToStringDefaultUnit { get; set; } = ForceChangeRateUnit.NewtonPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(ForceChangeRateUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(ForceChangeRateUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ForceChangeRateUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ForceChangeRateUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of ForceChangeRate
        /// </summary>
        public static ForceChangeRate MaxValue
        {
            get
            {
                return new ForceChangeRate(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of ForceChangeRate
        /// </summary>
        public static ForceChangeRate MinValue
        {
            get
            {
                return new ForceChangeRate(double.MinValue);
            }
        }
    }
}
