//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Electrical resistivity (also known as resistivity, specific electrical resistance, or volume resistivity) is a fundamental property that quantifies how strongly a given material opposes the flow of electric current.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class ElectricResistivity
#else
    public partial struct ElectricResistivity : IComparable, IComparable<ElectricResistivity>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricResistivityUnit? _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public ElectricResistivityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public ElectricResistivity()
        {
            _value = 0;
            _unit = BaseUnit;
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public ElectricResistivity(double ohmsmeters)
        {
            _value = Convert.ToDouble(ohmsmeters);
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          ElectricResistivity(double numericValue, ElectricResistivityUnit unit)
        {
            _value = numericValue;
            _unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit OhmMeter.
        /// </summary>
        /// <param name="ohmsmeters">Value assuming base unit OhmMeter.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        ElectricResistivity(long ohmsmeters) : this(Convert.ToDouble(ohmsmeters), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit OhmMeter.
        /// </summary>
        /// <param name="ohmsmeters">Value assuming base unit OhmMeter.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        ElectricResistivity(decimal ohmsmeters) : this(Convert.ToDouble(ohmsmeters), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.ElectricResistivity;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static ElectricResistivityUnit BaseUnit => ElectricResistivityUnit.OhmMeter;

        /// <summary>
        ///     All units of measurement for the ElectricResistivity quantity.
        /// </summary>
        public static ElectricResistivityUnit[] Units { get; } = Enum.GetValues(typeof(ElectricResistivityUnit)).Cast<ElectricResistivityUnit>().ToArray();
        /// <summary>
        ///     Get ElectricResistivity in KiloohmsCentimeter.
        /// </summary>
        public double KiloohmsCentimeter => As(ElectricResistivityUnit.KiloohmCentimeter);
        /// <summary>
        ///     Get ElectricResistivity in KiloohmsMeters.
        /// </summary>
        public double KiloohmsMeters => As(ElectricResistivityUnit.KiloohmMeter);
        /// <summary>
        ///     Get ElectricResistivity in MegaohmsCentimeter.
        /// </summary>
        public double MegaohmsCentimeter => As(ElectricResistivityUnit.MegaohmCentimeter);
        /// <summary>
        ///     Get ElectricResistivity in MegaohmsMeters.
        /// </summary>
        public double MegaohmsMeters => As(ElectricResistivityUnit.MegaohmMeter);
        /// <summary>
        ///     Get ElectricResistivity in MicroohmsCentimeter.
        /// </summary>
        public double MicroohmsCentimeter => As(ElectricResistivityUnit.MicroohmCentimeter);
        /// <summary>
        ///     Get ElectricResistivity in MicroohmsMeters.
        /// </summary>
        public double MicroohmsMeters => As(ElectricResistivityUnit.MicroohmMeter);
        /// <summary>
        ///     Get ElectricResistivity in MilliohmsCentimeter.
        /// </summary>
        public double MilliohmsCentimeter => As(ElectricResistivityUnit.MilliohmCentimeter);
        /// <summary>
        ///     Get ElectricResistivity in MilliohmsMeters.
        /// </summary>
        public double MilliohmsMeters => As(ElectricResistivityUnit.MilliohmMeter);
        /// <summary>
        ///     Get ElectricResistivity in NanoohmsCentimeter.
        /// </summary>
        public double NanoohmsCentimeter => As(ElectricResistivityUnit.NanoohmCentimeter);
        /// <summary>
        ///     Get ElectricResistivity in NanoohmsMeters.
        /// </summary>
        public double NanoohmsMeters => As(ElectricResistivityUnit.NanoohmMeter);
        /// <summary>
        ///     Get ElectricResistivity in OhmsCentimeter.
        /// </summary>
        public double OhmsCentimeter => As(ElectricResistivityUnit.OhmCentimeter);
        /// <summary>
        ///     Get ElectricResistivity in OhmsMeters.
        /// </summary>
        public double OhmsMeters => As(ElectricResistivityUnit.OhmMeter);
        /// <summary>
        ///     Get ElectricResistivity in PicoohmsCentimeter.
        /// </summary>
        public double PicoohmsCentimeter => As(ElectricResistivityUnit.PicoohmCentimeter);
        /// <summary>
        ///     Get ElectricResistivity in PicoohmsMeters.
        /// </summary>
        public double PicoohmsMeters => As(ElectricResistivityUnit.PicoohmMeter);

        #endregion

        #region Static

        public static ElectricResistivity Zero => new ElectricResistivity(0, BaseUnit);

        /// <summary>
        ///     Get ElectricResistivity from KiloohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromKiloohmsCentimeter(double kiloohmscentimeter)
#else
        public static ElectricResistivity FromKiloohmsCentimeter(QuantityValue kiloohmscentimeter)
#endif
        {
            double value = (double) kiloohmscentimeter;
            return new ElectricResistivity(value, ElectricResistivityUnit.KiloohmCentimeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from KiloohmsMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromKiloohmsMeters(double kiloohmsmeters)
#else
        public static ElectricResistivity FromKiloohmsMeters(QuantityValue kiloohmsmeters)
#endif
        {
            double value = (double) kiloohmsmeters;
            return new ElectricResistivity(value, ElectricResistivityUnit.KiloohmMeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from MegaohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMegaohmsCentimeter(double megaohmscentimeter)
#else
        public static ElectricResistivity FromMegaohmsCentimeter(QuantityValue megaohmscentimeter)
#endif
        {
            double value = (double) megaohmscentimeter;
            return new ElectricResistivity(value, ElectricResistivityUnit.MegaohmCentimeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from MegaohmsMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMegaohmsMeters(double megaohmsmeters)
#else
        public static ElectricResistivity FromMegaohmsMeters(QuantityValue megaohmsmeters)
#endif
        {
            double value = (double) megaohmsmeters;
            return new ElectricResistivity(value, ElectricResistivityUnit.MegaohmMeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from MicroohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMicroohmsCentimeter(double microohmscentimeter)
#else
        public static ElectricResistivity FromMicroohmsCentimeter(QuantityValue microohmscentimeter)
#endif
        {
            double value = (double) microohmscentimeter;
            return new ElectricResistivity(value, ElectricResistivityUnit.MicroohmCentimeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from MicroohmsMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMicroohmsMeters(double microohmsmeters)
#else
        public static ElectricResistivity FromMicroohmsMeters(QuantityValue microohmsmeters)
#endif
        {
            double value = (double) microohmsmeters;
            return new ElectricResistivity(value, ElectricResistivityUnit.MicroohmMeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from MilliohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMilliohmsCentimeter(double milliohmscentimeter)
#else
        public static ElectricResistivity FromMilliohmsCentimeter(QuantityValue milliohmscentimeter)
#endif
        {
            double value = (double) milliohmscentimeter;
            return new ElectricResistivity(value, ElectricResistivityUnit.MilliohmCentimeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from MilliohmsMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMilliohmsMeters(double milliohmsmeters)
#else
        public static ElectricResistivity FromMilliohmsMeters(QuantityValue milliohmsmeters)
#endif
        {
            double value = (double) milliohmsmeters;
            return new ElectricResistivity(value, ElectricResistivityUnit.MilliohmMeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from NanoohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromNanoohmsCentimeter(double nanoohmscentimeter)
#else
        public static ElectricResistivity FromNanoohmsCentimeter(QuantityValue nanoohmscentimeter)
#endif
        {
            double value = (double) nanoohmscentimeter;
            return new ElectricResistivity(value, ElectricResistivityUnit.NanoohmCentimeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from NanoohmsMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromNanoohmsMeters(double nanoohmsmeters)
#else
        public static ElectricResistivity FromNanoohmsMeters(QuantityValue nanoohmsmeters)
#endif
        {
            double value = (double) nanoohmsmeters;
            return new ElectricResistivity(value, ElectricResistivityUnit.NanoohmMeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from OhmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromOhmsCentimeter(double ohmscentimeter)
#else
        public static ElectricResistivity FromOhmsCentimeter(QuantityValue ohmscentimeter)
#endif
        {
            double value = (double) ohmscentimeter;
            return new ElectricResistivity(value, ElectricResistivityUnit.OhmCentimeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from OhmsMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromOhmsMeters(double ohmsmeters)
#else
        public static ElectricResistivity FromOhmsMeters(QuantityValue ohmsmeters)
#endif
        {
            double value = (double) ohmsmeters;
            return new ElectricResistivity(value, ElectricResistivityUnit.OhmMeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from PicoohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromPicoohmsCentimeter(double picoohmscentimeter)
#else
        public static ElectricResistivity FromPicoohmsCentimeter(QuantityValue picoohmscentimeter)
#endif
        {
            double value = (double) picoohmscentimeter;
            return new ElectricResistivity(value, ElectricResistivityUnit.PicoohmCentimeter);
        }

        /// <summary>
        ///     Get ElectricResistivity from PicoohmsMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromPicoohmsMeters(double picoohmsmeters)
#else
        public static ElectricResistivity FromPicoohmsMeters(QuantityValue picoohmsmeters)
#endif
        {
            double value = (double) picoohmsmeters;
            return new ElectricResistivity(value, ElectricResistivityUnit.PicoohmMeter);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable ElectricResistivity from nullable KiloohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromKiloohmsCentimeter(QuantityValue? kiloohmscentimeter)
        {
            if (kiloohmscentimeter.HasValue)
            {
                return FromKiloohmsCentimeter(kiloohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable KiloohmsMeters.
        /// </summary>
        public static ElectricResistivity? FromKiloohmsMeters(QuantityValue? kiloohmsmeters)
        {
            if (kiloohmsmeters.HasValue)
            {
                return FromKiloohmsMeters(kiloohmsmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MegaohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromMegaohmsCentimeter(QuantityValue? megaohmscentimeter)
        {
            if (megaohmscentimeter.HasValue)
            {
                return FromMegaohmsCentimeter(megaohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MegaohmsMeters.
        /// </summary>
        public static ElectricResistivity? FromMegaohmsMeters(QuantityValue? megaohmsmeters)
        {
            if (megaohmsmeters.HasValue)
            {
                return FromMegaohmsMeters(megaohmsmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MicroohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromMicroohmsCentimeter(QuantityValue? microohmscentimeter)
        {
            if (microohmscentimeter.HasValue)
            {
                return FromMicroohmsCentimeter(microohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MicroohmsMeters.
        /// </summary>
        public static ElectricResistivity? FromMicroohmsMeters(QuantityValue? microohmsmeters)
        {
            if (microohmsmeters.HasValue)
            {
                return FromMicroohmsMeters(microohmsmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MilliohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromMilliohmsCentimeter(QuantityValue? milliohmscentimeter)
        {
            if (milliohmscentimeter.HasValue)
            {
                return FromMilliohmsCentimeter(milliohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MilliohmsMeters.
        /// </summary>
        public static ElectricResistivity? FromMilliohmsMeters(QuantityValue? milliohmsmeters)
        {
            if (milliohmsmeters.HasValue)
            {
                return FromMilliohmsMeters(milliohmsmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable NanoohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromNanoohmsCentimeter(QuantityValue? nanoohmscentimeter)
        {
            if (nanoohmscentimeter.HasValue)
            {
                return FromNanoohmsCentimeter(nanoohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable NanoohmsMeters.
        /// </summary>
        public static ElectricResistivity? FromNanoohmsMeters(QuantityValue? nanoohmsmeters)
        {
            if (nanoohmsmeters.HasValue)
            {
                return FromNanoohmsMeters(nanoohmsmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable OhmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromOhmsCentimeter(QuantityValue? ohmscentimeter)
        {
            if (ohmscentimeter.HasValue)
            {
                return FromOhmsCentimeter(ohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable OhmsMeters.
        /// </summary>
        public static ElectricResistivity? FromOhmsMeters(QuantityValue? ohmsmeters)
        {
            if (ohmsmeters.HasValue)
            {
                return FromOhmsMeters(ohmsmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable PicoohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromPicoohmsCentimeter(QuantityValue? picoohmscentimeter)
        {
            if (picoohmscentimeter.HasValue)
            {
                return FromPicoohmsCentimeter(picoohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable PicoohmsMeters.
        /// </summary>
        public static ElectricResistivity? FromPicoohmsMeters(QuantityValue? picoohmsmeters)
        {
            if (picoohmsmeters.HasValue)
            {
                return FromPicoohmsMeters(picoohmsmeters.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricResistivityUnit" /> to <see cref="ElectricResistivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricResistivity unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static ElectricResistivity From(double value, ElectricResistivityUnit fromUnit)
#else
        public static ElectricResistivity From(QuantityValue value, ElectricResistivityUnit fromUnit)
#endif
        {
            return new ElectricResistivity((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricResistivityUnit" /> to <see cref="ElectricResistivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricResistivity unit value.</returns>
        public static ElectricResistivity? From(QuantityValue? value, ElectricResistivityUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new ElectricResistivity((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElectricResistivityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          ElectricResistivityUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static ElectricResistivity operator -(ElectricResistivity right)
        {
            return new ElectricResistivity(-right.Value, right.Unit);
        }

        public static ElectricResistivity operator +(ElectricResistivity left, ElectricResistivity right)
        {
            return new ElectricResistivity(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static ElectricResistivity operator -(ElectricResistivity left, ElectricResistivity right)
        {
            return new ElectricResistivity(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static ElectricResistivity operator *(double left, ElectricResistivity right)
        {
            return new ElectricResistivity(left * right.Value, right.Unit);
        }

        public static ElectricResistivity operator *(ElectricResistivity left, double right)
        {
            return new ElectricResistivity(left.Value * right, left.Unit);
        }

        public static ElectricResistivity operator /(ElectricResistivity left, double right)
        {
            return new ElectricResistivity(left.Value / right, left.Unit);
        }

        public static double operator /(ElectricResistivity left, ElectricResistivity right)
        {
            return left.OhmsMeters / right.OhmsMeters;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is ElectricResistivity)) throw new ArgumentException("Expected type ElectricResistivity.", "obj");
            return CompareTo((ElectricResistivity) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(ElectricResistivity other)
        {
            return AsBaseUnitOhmsMeters().CompareTo(other.AsBaseUnitOhmsMeters());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(ElectricResistivity left, ElectricResistivity right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(ElectricResistivity left, ElectricResistivity right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(ElectricResistivity left, ElectricResistivity right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(ElectricResistivity left, ElectricResistivity right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(ElectricResistivity left, ElectricResistivity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(ElectricResistivity left, ElectricResistivity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitOhmsMeters().Equals(((ElectricResistivity) obj).AsBaseUnitOhmsMeters());
        }

        /// <summary>
        ///     Compare equality to another ElectricResistivity by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(ElectricResistivity other, ElectricResistivity maxError)
        {
            return Math.Abs(AsBaseUnitOhmsMeters() - other.AsBaseUnitOhmsMeters()) <= maxError.AsBaseUnitOhmsMeters();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(ElectricResistivityUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitOhmsMeters();

            switch (unit)
            {
                case ElectricResistivityUnit.KiloohmCentimeter: return (baseUnitValue*100) / 1e3d;
                case ElectricResistivityUnit.KiloohmMeter: return (baseUnitValue) / 1e3d;
                case ElectricResistivityUnit.MegaohmCentimeter: return (baseUnitValue*100) / 1e6d;
                case ElectricResistivityUnit.MegaohmMeter: return (baseUnitValue) / 1e6d;
                case ElectricResistivityUnit.MicroohmCentimeter: return (baseUnitValue*100) / 1e-6d;
                case ElectricResistivityUnit.MicroohmMeter: return (baseUnitValue) / 1e-6d;
                case ElectricResistivityUnit.MilliohmCentimeter: return (baseUnitValue*100) / 1e-3d;
                case ElectricResistivityUnit.MilliohmMeter: return (baseUnitValue) / 1e-3d;
                case ElectricResistivityUnit.NanoohmCentimeter: return (baseUnitValue*100) / 1e-9d;
                case ElectricResistivityUnit.NanoohmMeter: return (baseUnitValue) / 1e-9d;
                case ElectricResistivityUnit.OhmCentimeter: return baseUnitValue*100;
                case ElectricResistivityUnit.OhmMeter: return baseUnitValue;
                case ElectricResistivityUnit.PicoohmCentimeter: return (baseUnitValue*100) / 1e-12d;
                case ElectricResistivityUnit.PicoohmMeter: return (baseUnitValue) / 1e-12d;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricResistivity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricResistivity Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<ElectricResistivity, ElectricResistivityUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    ElectricResistivityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromOhmsMeters(x.OhmsMeters + y.OhmsMeters));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ElectricResistivity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out ElectricResistivity result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(ElectricResistivity);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricResistivityUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static ElectricResistivityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static ElectricResistivityUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<ElectricResistivityUnit>(str.Trim());

            if (unit == ElectricResistivityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized ElectricResistivityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is OhmMeter
        /// </summary>
        public static ElectricResistivityUnit ToStringDefaultUnit { get; set; } = ElectricResistivityUnit.OhmMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElectricResistivityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          ElectricResistivityUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            ElectricResistivityUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            ElectricResistivityUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of ElectricResistivity
        /// </summary>
        public static ElectricResistivity MaxValue => new ElectricResistivity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ElectricResistivity
        /// </summary>
        public static ElectricResistivity MinValue => new ElectricResistivity(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitOhmsMeters()
        {
			if (Unit == ElectricResistivityUnit.OhmMeter) { return _value; }

            switch (Unit)
            {
                case ElectricResistivityUnit.KiloohmCentimeter: return (_value/100) * 1e3d;
                case ElectricResistivityUnit.KiloohmMeter: return (_value) * 1e3d;
                case ElectricResistivityUnit.MegaohmCentimeter: return (_value/100) * 1e6d;
                case ElectricResistivityUnit.MegaohmMeter: return (_value) * 1e6d;
                case ElectricResistivityUnit.MicroohmCentimeter: return (_value/100) * 1e-6d;
                case ElectricResistivityUnit.MicroohmMeter: return (_value) * 1e-6d;
                case ElectricResistivityUnit.MilliohmCentimeter: return (_value/100) * 1e-3d;
                case ElectricResistivityUnit.MilliohmMeter: return (_value) * 1e-3d;
                case ElectricResistivityUnit.NanoohmCentimeter: return (_value/100) * 1e-9d;
                case ElectricResistivityUnit.NanoohmMeter: return (_value) * 1e-9d;
                case ElectricResistivityUnit.OhmCentimeter: return _value/100;
                case ElectricResistivityUnit.OhmMeter: return _value;
                case ElectricResistivityUnit.PicoohmCentimeter: return (_value/100) * 1e-12d;
                case ElectricResistivityUnit.PicoohmMeter: return (_value) * 1e-12d;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(ElectricResistivityUnit unit) => Convert.ToDouble(As(unit));
	}
}
