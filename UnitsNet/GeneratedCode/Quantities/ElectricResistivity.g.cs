//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Electrical resistivity (also known as resistivity, specific electrical resistance, or volume resistivity) is a fundamental property that quantifies how strongly a given material opposes the flow of electric current.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class ElectricResistivity
#else
    public partial struct ElectricResistivity : IComparable, IComparable<ElectricResistivity>
#endif
    {
        /// <summary>
        ///     Base unit of ElectricResistivity.
        /// </summary>
        private readonly double _ohmsMeter;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public ElectricResistivity() : this(0)
        {
        }
#endif

        public ElectricResistivity(double ohmsmeter)
        {
            _ohmsMeter = Convert.ToDouble(ohmsmeter);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        ElectricResistivity(long ohmsmeter)
        {
            _ohmsMeter = Convert.ToDouble(ohmsmeter);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        ElectricResistivity(decimal ohmsmeter)
        {
            _ohmsMeter = Convert.ToDouble(ohmsmeter);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.ElectricResistivity;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static ElectricResistivityUnit BaseUnit
        {
            get { return ElectricResistivityUnit.OhmMeter; }
        }

        /// <summary>
        ///     All units of measurement for the ElectricResistivity quantity.
        /// </summary>
        public static ElectricResistivityUnit[] Units { get; } = Enum.GetValues(typeof(ElectricResistivityUnit)).Cast<ElectricResistivityUnit>().ToArray();

        /// <summary>
        ///     Get ElectricResistivity in KiloohmsCentimeter.
        /// </summary>
        public double KiloohmsCentimeter
        {
            get { return (_ohmsMeter*100) / 1e3d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in KiloohmsMeter.
        /// </summary>
        public double KiloohmsMeter
        {
            get { return (_ohmsMeter) / 1e3d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in MegaohmsCentimeter.
        /// </summary>
        public double MegaohmsCentimeter
        {
            get { return (_ohmsMeter*100) / 1e6d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in MegaohmsMeter.
        /// </summary>
        public double MegaohmsMeter
        {
            get { return (_ohmsMeter) / 1e6d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in MicroohmsCentimeter.
        /// </summary>
        public double MicroohmsCentimeter
        {
            get { return (_ohmsMeter*100) / 1e-6d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in MicroohmsMeter.
        /// </summary>
        public double MicroohmsMeter
        {
            get { return (_ohmsMeter) / 1e-6d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in MilliohmsCentimeter.
        /// </summary>
        public double MilliohmsCentimeter
        {
            get { return (_ohmsMeter*100) / 1e-3d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in MilliohmsMeter.
        /// </summary>
        public double MilliohmsMeter
        {
            get { return (_ohmsMeter) / 1e-3d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in NanoohmsCentimeter.
        /// </summary>
        public double NanoohmsCentimeter
        {
            get { return (_ohmsMeter*100) / 1e-9d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in NanoohmsMeter.
        /// </summary>
        public double NanoohmsMeter
        {
            get { return (_ohmsMeter) / 1e-9d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in OhmsCentimeter.
        /// </summary>
        public double OhmsCentimeter
        {
            get { return _ohmsMeter*100; }
        }

        /// <summary>
        ///     Get ElectricResistivity in OhmsMeter.
        /// </summary>
        public double OhmsMeter
        {
            get { return _ohmsMeter; }
        }

        /// <summary>
        ///     Get ElectricResistivity in PicoohmsCentimeter.
        /// </summary>
        public double PicoohmsCentimeter
        {
            get { return (_ohmsMeter*100) / 1e-12d; }
        }

        /// <summary>
        ///     Get ElectricResistivity in PicoohmsMeter.
        /// </summary>
        public double PicoohmsMeter
        {
            get { return (_ohmsMeter) / 1e-12d; }
        }

        #endregion

        #region Static

        public static ElectricResistivity Zero
        {
            get { return new ElectricResistivity(); }
        }

        /// <summary>
        ///     Get ElectricResistivity from KiloohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromKiloohmsCentimeter(double kiloohmscentimeter)
        {
            double value = (double) kiloohmscentimeter;
            return new ElectricResistivity((value/100) * 1e3d);
        }
#else
        public static ElectricResistivity FromKiloohmsCentimeter(QuantityValue kiloohmscentimeter)
        {
            double value = (double) kiloohmscentimeter;
            return new ElectricResistivity(((value/100) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from KiloohmsMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromKiloohmsMeter(double kiloohmsmeter)
        {
            double value = (double) kiloohmsmeter;
            return new ElectricResistivity((value) * 1e3d);
        }
#else
        public static ElectricResistivity FromKiloohmsMeter(QuantityValue kiloohmsmeter)
        {
            double value = (double) kiloohmsmeter;
            return new ElectricResistivity(((value) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from MegaohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMegaohmsCentimeter(double megaohmscentimeter)
        {
            double value = (double) megaohmscentimeter;
            return new ElectricResistivity((value/100) * 1e6d);
        }
#else
        public static ElectricResistivity FromMegaohmsCentimeter(QuantityValue megaohmscentimeter)
        {
            double value = (double) megaohmscentimeter;
            return new ElectricResistivity(((value/100) * 1e6d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from MegaohmsMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMegaohmsMeter(double megaohmsmeter)
        {
            double value = (double) megaohmsmeter;
            return new ElectricResistivity((value) * 1e6d);
        }
#else
        public static ElectricResistivity FromMegaohmsMeter(QuantityValue megaohmsmeter)
        {
            double value = (double) megaohmsmeter;
            return new ElectricResistivity(((value) * 1e6d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from MicroohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMicroohmsCentimeter(double microohmscentimeter)
        {
            double value = (double) microohmscentimeter;
            return new ElectricResistivity((value/100) * 1e-6d);
        }
#else
        public static ElectricResistivity FromMicroohmsCentimeter(QuantityValue microohmscentimeter)
        {
            double value = (double) microohmscentimeter;
            return new ElectricResistivity(((value/100) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from MicroohmsMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMicroohmsMeter(double microohmsmeter)
        {
            double value = (double) microohmsmeter;
            return new ElectricResistivity((value) * 1e-6d);
        }
#else
        public static ElectricResistivity FromMicroohmsMeter(QuantityValue microohmsmeter)
        {
            double value = (double) microohmsmeter;
            return new ElectricResistivity(((value) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from MilliohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMilliohmsCentimeter(double milliohmscentimeter)
        {
            double value = (double) milliohmscentimeter;
            return new ElectricResistivity((value/100) * 1e-3d);
        }
#else
        public static ElectricResistivity FromMilliohmsCentimeter(QuantityValue milliohmscentimeter)
        {
            double value = (double) milliohmscentimeter;
            return new ElectricResistivity(((value/100) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from MilliohmsMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromMilliohmsMeter(double milliohmsmeter)
        {
            double value = (double) milliohmsmeter;
            return new ElectricResistivity((value) * 1e-3d);
        }
#else
        public static ElectricResistivity FromMilliohmsMeter(QuantityValue milliohmsmeter)
        {
            double value = (double) milliohmsmeter;
            return new ElectricResistivity(((value) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from NanoohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromNanoohmsCentimeter(double nanoohmscentimeter)
        {
            double value = (double) nanoohmscentimeter;
            return new ElectricResistivity((value/100) * 1e-9d);
        }
#else
        public static ElectricResistivity FromNanoohmsCentimeter(QuantityValue nanoohmscentimeter)
        {
            double value = (double) nanoohmscentimeter;
            return new ElectricResistivity(((value/100) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from NanoohmsMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromNanoohmsMeter(double nanoohmsmeter)
        {
            double value = (double) nanoohmsmeter;
            return new ElectricResistivity((value) * 1e-9d);
        }
#else
        public static ElectricResistivity FromNanoohmsMeter(QuantityValue nanoohmsmeter)
        {
            double value = (double) nanoohmsmeter;
            return new ElectricResistivity(((value) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from OhmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromOhmsCentimeter(double ohmscentimeter)
        {
            double value = (double) ohmscentimeter;
            return new ElectricResistivity(value/100);
        }
#else
        public static ElectricResistivity FromOhmsCentimeter(QuantityValue ohmscentimeter)
        {
            double value = (double) ohmscentimeter;
            return new ElectricResistivity((value/100));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from OhmsMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromOhmsMeter(double ohmsmeter)
        {
            double value = (double) ohmsmeter;
            return new ElectricResistivity(value);
        }
#else
        public static ElectricResistivity FromOhmsMeter(QuantityValue ohmsmeter)
        {
            double value = (double) ohmsmeter;
            return new ElectricResistivity((value));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from PicoohmsCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromPicoohmsCentimeter(double picoohmscentimeter)
        {
            double value = (double) picoohmscentimeter;
            return new ElectricResistivity((value/100) * 1e-12d);
        }
#else
        public static ElectricResistivity FromPicoohmsCentimeter(QuantityValue picoohmscentimeter)
        {
            double value = (double) picoohmscentimeter;
            return new ElectricResistivity(((value/100) * 1e-12d));
        }
#endif

        /// <summary>
        ///     Get ElectricResistivity from PicoohmsMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricResistivity FromPicoohmsMeter(double picoohmsmeter)
        {
            double value = (double) picoohmsmeter;
            return new ElectricResistivity((value) * 1e-12d);
        }
#else
        public static ElectricResistivity FromPicoohmsMeter(QuantityValue picoohmsmeter)
        {
            double value = (double) picoohmsmeter;
            return new ElectricResistivity(((value) * 1e-12d));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable ElectricResistivity from nullable KiloohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromKiloohmsCentimeter(QuantityValue? kiloohmscentimeter)
        {
            if (kiloohmscentimeter.HasValue)
            {
                return FromKiloohmsCentimeter(kiloohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable KiloohmsMeter.
        /// </summary>
        public static ElectricResistivity? FromKiloohmsMeter(QuantityValue? kiloohmsmeter)
        {
            if (kiloohmsmeter.HasValue)
            {
                return FromKiloohmsMeter(kiloohmsmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MegaohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromMegaohmsCentimeter(QuantityValue? megaohmscentimeter)
        {
            if (megaohmscentimeter.HasValue)
            {
                return FromMegaohmsCentimeter(megaohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MegaohmsMeter.
        /// </summary>
        public static ElectricResistivity? FromMegaohmsMeter(QuantityValue? megaohmsmeter)
        {
            if (megaohmsmeter.HasValue)
            {
                return FromMegaohmsMeter(megaohmsmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MicroohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromMicroohmsCentimeter(QuantityValue? microohmscentimeter)
        {
            if (microohmscentimeter.HasValue)
            {
                return FromMicroohmsCentimeter(microohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MicroohmsMeter.
        /// </summary>
        public static ElectricResistivity? FromMicroohmsMeter(QuantityValue? microohmsmeter)
        {
            if (microohmsmeter.HasValue)
            {
                return FromMicroohmsMeter(microohmsmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MilliohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromMilliohmsCentimeter(QuantityValue? milliohmscentimeter)
        {
            if (milliohmscentimeter.HasValue)
            {
                return FromMilliohmsCentimeter(milliohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable MilliohmsMeter.
        /// </summary>
        public static ElectricResistivity? FromMilliohmsMeter(QuantityValue? milliohmsmeter)
        {
            if (milliohmsmeter.HasValue)
            {
                return FromMilliohmsMeter(milliohmsmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable NanoohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromNanoohmsCentimeter(QuantityValue? nanoohmscentimeter)
        {
            if (nanoohmscentimeter.HasValue)
            {
                return FromNanoohmsCentimeter(nanoohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable NanoohmsMeter.
        /// </summary>
        public static ElectricResistivity? FromNanoohmsMeter(QuantityValue? nanoohmsmeter)
        {
            if (nanoohmsmeter.HasValue)
            {
                return FromNanoohmsMeter(nanoohmsmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable OhmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromOhmsCentimeter(QuantityValue? ohmscentimeter)
        {
            if (ohmscentimeter.HasValue)
            {
                return FromOhmsCentimeter(ohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable OhmsMeter.
        /// </summary>
        public static ElectricResistivity? FromOhmsMeter(QuantityValue? ohmsmeter)
        {
            if (ohmsmeter.HasValue)
            {
                return FromOhmsMeter(ohmsmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable PicoohmsCentimeter.
        /// </summary>
        public static ElectricResistivity? FromPicoohmsCentimeter(QuantityValue? picoohmscentimeter)
        {
            if (picoohmscentimeter.HasValue)
            {
                return FromPicoohmsCentimeter(picoohmscentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricResistivity from nullable PicoohmsMeter.
        /// </summary>
        public static ElectricResistivity? FromPicoohmsMeter(QuantityValue? picoohmsmeter)
        {
            if (picoohmsmeter.HasValue)
            {
                return FromPicoohmsMeter(picoohmsmeter.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricResistivityUnit" /> to <see cref="ElectricResistivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricResistivity unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static ElectricResistivity From(double value, ElectricResistivityUnit fromUnit)
#else
        public static ElectricResistivity From(QuantityValue value, ElectricResistivityUnit fromUnit)
#endif
        {
            switch (fromUnit)
            {
                case ElectricResistivityUnit.KiloohmCentimeter:
                    return FromKiloohmsCentimeter(value);
                case ElectricResistivityUnit.KiloohmMeter:
                    return FromKiloohmsMeter(value);
                case ElectricResistivityUnit.MegaohmCentimeter:
                    return FromMegaohmsCentimeter(value);
                case ElectricResistivityUnit.MegaohmMeter:
                    return FromMegaohmsMeter(value);
                case ElectricResistivityUnit.MicroohmCentimeter:
                    return FromMicroohmsCentimeter(value);
                case ElectricResistivityUnit.MicroohmMeter:
                    return FromMicroohmsMeter(value);
                case ElectricResistivityUnit.MilliohmCentimeter:
                    return FromMilliohmsCentimeter(value);
                case ElectricResistivityUnit.MilliohmMeter:
                    return FromMilliohmsMeter(value);
                case ElectricResistivityUnit.NanoohmCentimeter:
                    return FromNanoohmsCentimeter(value);
                case ElectricResistivityUnit.NanoohmMeter:
                    return FromNanoohmsMeter(value);
                case ElectricResistivityUnit.OhmCentimeter:
                    return FromOhmsCentimeter(value);
                case ElectricResistivityUnit.OhmMeter:
                    return FromOhmsMeter(value);
                case ElectricResistivityUnit.PicoohmCentimeter:
                    return FromPicoohmsCentimeter(value);
                case ElectricResistivityUnit.PicoohmMeter:
                    return FromPicoohmsMeter(value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricResistivityUnit" /> to <see cref="ElectricResistivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricResistivity unit value.</returns>
        public static ElectricResistivity? From(QuantityValue? value, ElectricResistivityUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case ElectricResistivityUnit.KiloohmCentimeter:
                    return FromKiloohmsCentimeter(value.Value);
                case ElectricResistivityUnit.KiloohmMeter:
                    return FromKiloohmsMeter(value.Value);
                case ElectricResistivityUnit.MegaohmCentimeter:
                    return FromMegaohmsCentimeter(value.Value);
                case ElectricResistivityUnit.MegaohmMeter:
                    return FromMegaohmsMeter(value.Value);
                case ElectricResistivityUnit.MicroohmCentimeter:
                    return FromMicroohmsCentimeter(value.Value);
                case ElectricResistivityUnit.MicroohmMeter:
                    return FromMicroohmsMeter(value.Value);
                case ElectricResistivityUnit.MilliohmCentimeter:
                    return FromMilliohmsCentimeter(value.Value);
                case ElectricResistivityUnit.MilliohmMeter:
                    return FromMilliohmsMeter(value.Value);
                case ElectricResistivityUnit.NanoohmCentimeter:
                    return FromNanoohmsCentimeter(value.Value);
                case ElectricResistivityUnit.NanoohmMeter:
                    return FromNanoohmsMeter(value.Value);
                case ElectricResistivityUnit.OhmCentimeter:
                    return FromOhmsCentimeter(value.Value);
                case ElectricResistivityUnit.OhmMeter:
                    return FromOhmsMeter(value.Value);
                case ElectricResistivityUnit.PicoohmCentimeter:
                    return FromPicoohmsCentimeter(value.Value);
                case ElectricResistivityUnit.PicoohmMeter:
                    return FromPicoohmsMeter(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElectricResistivityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElectricResistivityUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static ElectricResistivity operator -(ElectricResistivity right)
        {
            return new ElectricResistivity(-right._ohmsMeter);
        }

        public static ElectricResistivity operator +(ElectricResistivity left, ElectricResistivity right)
        {
            return new ElectricResistivity(left._ohmsMeter + right._ohmsMeter);
        }

        public static ElectricResistivity operator -(ElectricResistivity left, ElectricResistivity right)
        {
            return new ElectricResistivity(left._ohmsMeter - right._ohmsMeter);
        }

        public static ElectricResistivity operator *(double left, ElectricResistivity right)
        {
            return new ElectricResistivity(left*right._ohmsMeter);
        }

        public static ElectricResistivity operator *(ElectricResistivity left, double right)
        {
            return new ElectricResistivity(left._ohmsMeter*(double)right);
        }

        public static ElectricResistivity operator /(ElectricResistivity left, double right)
        {
            return new ElectricResistivity(left._ohmsMeter/(double)right);
        }

        public static double operator /(ElectricResistivity left, ElectricResistivity right)
        {
            return Convert.ToDouble(left._ohmsMeter/right._ohmsMeter);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is ElectricResistivity)) throw new ArgumentException("Expected type ElectricResistivity.", "obj");
            return CompareTo((ElectricResistivity) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(ElectricResistivity other)
        {
            return _ohmsMeter.CompareTo(other._ohmsMeter);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(ElectricResistivity left, ElectricResistivity right)
        {
            return left._ohmsMeter <= right._ohmsMeter;
        }

        public static bool operator >=(ElectricResistivity left, ElectricResistivity right)
        {
            return left._ohmsMeter >= right._ohmsMeter;
        }

        public static bool operator <(ElectricResistivity left, ElectricResistivity right)
        {
            return left._ohmsMeter < right._ohmsMeter;
        }

        public static bool operator >(ElectricResistivity left, ElectricResistivity right)
        {
            return left._ohmsMeter > right._ohmsMeter;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(ElectricResistivity left, ElectricResistivity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._ohmsMeter == right._ohmsMeter;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(ElectricResistivity left, ElectricResistivity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._ohmsMeter != right._ohmsMeter;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _ohmsMeter.Equals(((ElectricResistivity) obj)._ohmsMeter);
        }

        /// <summary>
        ///     Compare equality to another ElectricResistivity by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(ElectricResistivity other, ElectricResistivity maxError)
        {
            return Math.Abs(_ohmsMeter - other._ohmsMeter) <= maxError._ohmsMeter;
        }

        public override int GetHashCode()
        {
            return _ohmsMeter.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(ElectricResistivityUnit unit)
        {
            switch (unit)
            {
                case ElectricResistivityUnit.KiloohmCentimeter:
                    return KiloohmsCentimeter;
                case ElectricResistivityUnit.KiloohmMeter:
                    return KiloohmsMeter;
                case ElectricResistivityUnit.MegaohmCentimeter:
                    return MegaohmsCentimeter;
                case ElectricResistivityUnit.MegaohmMeter:
                    return MegaohmsMeter;
                case ElectricResistivityUnit.MicroohmCentimeter:
                    return MicroohmsCentimeter;
                case ElectricResistivityUnit.MicroohmMeter:
                    return MicroohmsMeter;
                case ElectricResistivityUnit.MilliohmCentimeter:
                    return MilliohmsCentimeter;
                case ElectricResistivityUnit.MilliohmMeter:
                    return MilliohmsMeter;
                case ElectricResistivityUnit.NanoohmCentimeter:
                    return NanoohmsCentimeter;
                case ElectricResistivityUnit.NanoohmMeter:
                    return NanoohmsMeter;
                case ElectricResistivityUnit.OhmCentimeter:
                    return OhmsCentimeter;
                case ElectricResistivityUnit.OhmMeter:
                    return OhmsMeter;
                case ElectricResistivityUnit.PicoohmCentimeter:
                    return PicoohmsCentimeter;
                case ElectricResistivityUnit.PicoohmMeter:
                    return PicoohmsMeter;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricResistivity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricResistivity Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<ElectricResistivity, ElectricResistivityUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    ElectricResistivityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromOhmsMeter(x.OhmsMeter + y.OhmsMeter));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ElectricResistivity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out ElectricResistivity result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(ElectricResistivity);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricResistivityUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricResistivityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static ElectricResistivityUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<ElectricResistivityUnit>(str.Trim());

            if (unit == ElectricResistivityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized ElectricResistivityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is OhmMeter
        /// </summary>
        public static ElectricResistivityUnit ToStringDefaultUnit { get; set; } = ElectricResistivityUnit.OhmMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElectricResistivityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElectricResistivityUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElectricResistivityUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElectricResistivityUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of ElectricResistivity
        /// </summary>
        public static ElectricResistivity MaxValue
        {
            get
            {
                return new ElectricResistivity(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of ElectricResistivity
        /// </summary>
        public static ElectricResistivity MinValue
        {
            get
            {
                return new ElectricResistivity(double.MinValue);
            }
        }
    }
}
