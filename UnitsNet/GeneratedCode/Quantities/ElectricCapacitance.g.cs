//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Capacitance is the ability of a body to store an electric charge.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class ElectricCapacitance
#else
    public partial struct ElectricCapacitance : IComparable, IComparable<ElectricCapacitance>
#endif
    {
        /// <summary>
        ///     Base unit of ElectricCapacitance.
        /// </summary>
        private readonly double _farads;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public ElectricCapacitance() : this(0)
        {
        }
#endif

        public ElectricCapacitance(double farads)
        {
            _farads = Convert.ToDouble(farads);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        ElectricCapacitance(long farads)
        {
            _farads = Convert.ToDouble(farads);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        ElectricCapacitance(decimal farads)
        {
            _farads = Convert.ToDouble(farads);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.ElectricCapacitance;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static ElectricCapacitanceUnit BaseUnit
        {
            get { return ElectricCapacitanceUnit.Farad; }
        }

        /// <summary>
        ///     All units of measurement for the ElectricCapacitance quantity.
        /// </summary>
        public static ElectricCapacitanceUnit[] Units { get; } = Enum.GetValues(typeof(ElectricCapacitanceUnit)).Cast<ElectricCapacitanceUnit>().ToArray();

        /// <summary>
        ///     Get ElectricCapacitance in Farads.
        /// </summary>
        public double Farads
        {
            get { return _farads; }
        }

        /// <summary>
        ///     Get ElectricCapacitance in Kilofarads.
        /// </summary>
        public double Kilofarads
        {
            get { return (_farads) / 1e3d; }
        }

        /// <summary>
        ///     Get ElectricCapacitance in Megafarads.
        /// </summary>
        public double Megafarads
        {
            get { return (_farads) / 1e6d; }
        }

        /// <summary>
        ///     Get ElectricCapacitance in Microfarads.
        /// </summary>
        public double Microfarads
        {
            get { return (_farads) / 1e-6d; }
        }

        /// <summary>
        ///     Get ElectricCapacitance in Millifarads.
        /// </summary>
        public double Millifarads
        {
            get { return (_farads) / 1e-3d; }
        }

        /// <summary>
        ///     Get ElectricCapacitance in Nanofarads.
        /// </summary>
        public double Nanofarads
        {
            get { return (_farads) / 1e-9d; }
        }

        /// <summary>
        ///     Get ElectricCapacitance in Picofarads.
        /// </summary>
        public double Picofarads
        {
            get { return (_farads) / 1e-12d; }
        }

        #endregion

        #region Static

        public static ElectricCapacitance Zero
        {
            get { return new ElectricCapacitance(); }
        }

        /// <summary>
        ///     Get ElectricCapacitance from Farads.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricCapacitance FromFarads(double farads)
        {
            double value = (double) farads;
            return new ElectricCapacitance(value);
        }
#else
        public static ElectricCapacitance FromFarads(QuantityValue farads)
        {
            double value = (double) farads;
            return new ElectricCapacitance((value));
        }
#endif

        /// <summary>
        ///     Get ElectricCapacitance from Kilofarads.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricCapacitance FromKilofarads(double kilofarads)
        {
            double value = (double) kilofarads;
            return new ElectricCapacitance((value) * 1e3d);
        }
#else
        public static ElectricCapacitance FromKilofarads(QuantityValue kilofarads)
        {
            double value = (double) kilofarads;
            return new ElectricCapacitance(((value) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get ElectricCapacitance from Megafarads.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricCapacitance FromMegafarads(double megafarads)
        {
            double value = (double) megafarads;
            return new ElectricCapacitance((value) * 1e6d);
        }
#else
        public static ElectricCapacitance FromMegafarads(QuantityValue megafarads)
        {
            double value = (double) megafarads;
            return new ElectricCapacitance(((value) * 1e6d));
        }
#endif

        /// <summary>
        ///     Get ElectricCapacitance from Microfarads.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricCapacitance FromMicrofarads(double microfarads)
        {
            double value = (double) microfarads;
            return new ElectricCapacitance((value) * 1e-6d);
        }
#else
        public static ElectricCapacitance FromMicrofarads(QuantityValue microfarads)
        {
            double value = (double) microfarads;
            return new ElectricCapacitance(((value) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get ElectricCapacitance from Millifarads.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricCapacitance FromMillifarads(double millifarads)
        {
            double value = (double) millifarads;
            return new ElectricCapacitance((value) * 1e-3d);
        }
#else
        public static ElectricCapacitance FromMillifarads(QuantityValue millifarads)
        {
            double value = (double) millifarads;
            return new ElectricCapacitance(((value) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get ElectricCapacitance from Nanofarads.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricCapacitance FromNanofarads(double nanofarads)
        {
            double value = (double) nanofarads;
            return new ElectricCapacitance((value) * 1e-9d);
        }
#else
        public static ElectricCapacitance FromNanofarads(QuantityValue nanofarads)
        {
            double value = (double) nanofarads;
            return new ElectricCapacitance(((value) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get ElectricCapacitance from Picofarads.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricCapacitance FromPicofarads(double picofarads)
        {
            double value = (double) picofarads;
            return new ElectricCapacitance((value) * 1e-12d);
        }
#else
        public static ElectricCapacitance FromPicofarads(QuantityValue picofarads)
        {
            double value = (double) picofarads;
            return new ElectricCapacitance(((value) * 1e-12d));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable ElectricCapacitance from nullable Farads.
        /// </summary>
        public static ElectricCapacitance? FromFarads(QuantityValue? farads)
        {
            if (farads.HasValue)
            {
                return FromFarads(farads.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricCapacitance from nullable Kilofarads.
        /// </summary>
        public static ElectricCapacitance? FromKilofarads(QuantityValue? kilofarads)
        {
            if (kilofarads.HasValue)
            {
                return FromKilofarads(kilofarads.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricCapacitance from nullable Megafarads.
        /// </summary>
        public static ElectricCapacitance? FromMegafarads(QuantityValue? megafarads)
        {
            if (megafarads.HasValue)
            {
                return FromMegafarads(megafarads.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricCapacitance from nullable Microfarads.
        /// </summary>
        public static ElectricCapacitance? FromMicrofarads(QuantityValue? microfarads)
        {
            if (microfarads.HasValue)
            {
                return FromMicrofarads(microfarads.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricCapacitance from nullable Millifarads.
        /// </summary>
        public static ElectricCapacitance? FromMillifarads(QuantityValue? millifarads)
        {
            if (millifarads.HasValue)
            {
                return FromMillifarads(millifarads.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricCapacitance from nullable Nanofarads.
        /// </summary>
        public static ElectricCapacitance? FromNanofarads(QuantityValue? nanofarads)
        {
            if (nanofarads.HasValue)
            {
                return FromNanofarads(nanofarads.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricCapacitance from nullable Picofarads.
        /// </summary>
        public static ElectricCapacitance? FromPicofarads(QuantityValue? picofarads)
        {
            if (picofarads.HasValue)
            {
                return FromPicofarads(picofarads.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricCapacitanceUnit" /> to <see cref="ElectricCapacitance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricCapacitance unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static ElectricCapacitance From(double value, ElectricCapacitanceUnit fromUnit)
#else
        public static ElectricCapacitance From(QuantityValue value, ElectricCapacitanceUnit fromUnit)
#endif
        {
            switch (fromUnit)
            {
                case ElectricCapacitanceUnit.Farad:
                    return FromFarads(value);
                case ElectricCapacitanceUnit.Kilofarad:
                    return FromKilofarads(value);
                case ElectricCapacitanceUnit.Megafarad:
                    return FromMegafarads(value);
                case ElectricCapacitanceUnit.Microfarad:
                    return FromMicrofarads(value);
                case ElectricCapacitanceUnit.Millifarad:
                    return FromMillifarads(value);
                case ElectricCapacitanceUnit.Nanofarad:
                    return FromNanofarads(value);
                case ElectricCapacitanceUnit.Picofarad:
                    return FromPicofarads(value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricCapacitanceUnit" /> to <see cref="ElectricCapacitance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricCapacitance unit value.</returns>
        public static ElectricCapacitance? From(QuantityValue? value, ElectricCapacitanceUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case ElectricCapacitanceUnit.Farad:
                    return FromFarads(value.Value);
                case ElectricCapacitanceUnit.Kilofarad:
                    return FromKilofarads(value.Value);
                case ElectricCapacitanceUnit.Megafarad:
                    return FromMegafarads(value.Value);
                case ElectricCapacitanceUnit.Microfarad:
                    return FromMicrofarads(value.Value);
                case ElectricCapacitanceUnit.Millifarad:
                    return FromMillifarads(value.Value);
                case ElectricCapacitanceUnit.Nanofarad:
                    return FromNanofarads(value.Value);
                case ElectricCapacitanceUnit.Picofarad:
                    return FromPicofarads(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElectricCapacitanceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElectricCapacitanceUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static ElectricCapacitance operator -(ElectricCapacitance right)
        {
            return new ElectricCapacitance(-right._farads);
        }

        public static ElectricCapacitance operator +(ElectricCapacitance left, ElectricCapacitance right)
        {
            return new ElectricCapacitance(left._farads + right._farads);
        }

        public static ElectricCapacitance operator -(ElectricCapacitance left, ElectricCapacitance right)
        {
            return new ElectricCapacitance(left._farads - right._farads);
        }

        public static ElectricCapacitance operator *(double left, ElectricCapacitance right)
        {
            return new ElectricCapacitance(left*right._farads);
        }

        public static ElectricCapacitance operator *(ElectricCapacitance left, double right)
        {
            return new ElectricCapacitance(left._farads*(double)right);
        }

        public static ElectricCapacitance operator /(ElectricCapacitance left, double right)
        {
            return new ElectricCapacitance(left._farads/(double)right);
        }

        public static double operator /(ElectricCapacitance left, ElectricCapacitance right)
        {
            return Convert.ToDouble(left._farads/right._farads);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is ElectricCapacitance)) throw new ArgumentException("Expected type ElectricCapacitance.", "obj");
            return CompareTo((ElectricCapacitance) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(ElectricCapacitance other)
        {
            return _farads.CompareTo(other._farads);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(ElectricCapacitance left, ElectricCapacitance right)
        {
            return left._farads <= right._farads;
        }

        public static bool operator >=(ElectricCapacitance left, ElectricCapacitance right)
        {
            return left._farads >= right._farads;
        }

        public static bool operator <(ElectricCapacitance left, ElectricCapacitance right)
        {
            return left._farads < right._farads;
        }

        public static bool operator >(ElectricCapacitance left, ElectricCapacitance right)
        {
            return left._farads > right._farads;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(ElectricCapacitance left, ElectricCapacitance right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._farads == right._farads;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(ElectricCapacitance left, ElectricCapacitance right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._farads != right._farads;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _farads.Equals(((ElectricCapacitance) obj)._farads);
        }

        /// <summary>
        ///     Compare equality to another ElectricCapacitance by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(ElectricCapacitance other, ElectricCapacitance maxError)
        {
            return Math.Abs(_farads - other._farads) <= maxError._farads;
        }

        public override int GetHashCode()
        {
            return _farads.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(ElectricCapacitanceUnit unit)
        {
            switch (unit)
            {
                case ElectricCapacitanceUnit.Farad:
                    return Farads;
                case ElectricCapacitanceUnit.Kilofarad:
                    return Kilofarads;
                case ElectricCapacitanceUnit.Megafarad:
                    return Megafarads;
                case ElectricCapacitanceUnit.Microfarad:
                    return Microfarads;
                case ElectricCapacitanceUnit.Millifarad:
                    return Millifarads;
                case ElectricCapacitanceUnit.Nanofarad:
                    return Nanofarads;
                case ElectricCapacitanceUnit.Picofarad:
                    return Picofarads;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricCapacitance Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricCapacitance Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<ElectricCapacitance, ElectricCapacitanceUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    ElectricCapacitanceUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromFarads(x.Farads + y.Farads));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ElectricCapacitance result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out ElectricCapacitance result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(ElectricCapacitance);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricCapacitanceUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricCapacitanceUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static ElectricCapacitanceUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<ElectricCapacitanceUnit>(str.Trim());

            if (unit == ElectricCapacitanceUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized ElectricCapacitanceUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is Farad
        /// </summary>
        public static ElectricCapacitanceUnit ToStringDefaultUnit { get; set; } = ElectricCapacitanceUnit.Farad;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElectricCapacitanceUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElectricCapacitanceUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElectricCapacitanceUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElectricCapacitanceUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of ElectricCapacitance
        /// </summary>
        public static ElectricCapacitance MaxValue
        {
            get
            {
                return new ElectricCapacitance(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of ElectricCapacitance
        /// </summary>
        public static ElectricCapacitance MinValue
        {
            get
            {
                return new ElectricCapacitance(double.MinValue);
            }
        }
    }
}
