//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Difference between two temperatures. The conversions are different than for Temperature.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct TemperatureDelta : IComparable, IComparable<TemperatureDelta>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesCelsius.
        /// </summary>
        public static TemperatureDelta? FromDegreesCelsius(QuantityValue? degreescelsius)
        {
            return degreescelsius.HasValue ? FromDegreesCelsius(degreescelsius.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesCelsiusDelta.
        /// </summary>
        public static TemperatureDelta? FromDegreesCelsiusDelta(QuantityValue? degreescelsiusdelta)
        {
            return degreescelsiusdelta.HasValue ? FromDegreesCelsiusDelta(degreescelsiusdelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesDelisle.
        /// </summary>
        public static TemperatureDelta? FromDegreesDelisle(QuantityValue? degreesdelisle)
        {
            return degreesdelisle.HasValue ? FromDegreesDelisle(degreesdelisle.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesDelisleDelta.
        /// </summary>
        public static TemperatureDelta? FromDegreesDelisleDelta(QuantityValue? degreesdelisledelta)
        {
            return degreesdelisledelta.HasValue ? FromDegreesDelisleDelta(degreesdelisledelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesFahrenheit.
        /// </summary>
        public static TemperatureDelta? FromDegreesFahrenheit(QuantityValue? degreesfahrenheit)
        {
            return degreesfahrenheit.HasValue ? FromDegreesFahrenheit(degreesfahrenheit.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesFahrenheitDelta.
        /// </summary>
        public static TemperatureDelta? FromDegreesFahrenheitDelta(QuantityValue? degreesfahrenheitdelta)
        {
            return degreesfahrenheitdelta.HasValue ? FromDegreesFahrenheitDelta(degreesfahrenheitdelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesNewton.
        /// </summary>
        public static TemperatureDelta? FromDegreesNewton(QuantityValue? degreesnewton)
        {
            return degreesnewton.HasValue ? FromDegreesNewton(degreesnewton.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesNewtonDelta.
        /// </summary>
        public static TemperatureDelta? FromDegreesNewtonDelta(QuantityValue? degreesnewtondelta)
        {
            return degreesnewtondelta.HasValue ? FromDegreesNewtonDelta(degreesnewtondelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesRankine.
        /// </summary>
        public static TemperatureDelta? FromDegreesRankine(QuantityValue? degreesrankine)
        {
            return degreesrankine.HasValue ? FromDegreesRankine(degreesrankine.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesRankineDelta.
        /// </summary>
        public static TemperatureDelta? FromDegreesRankineDelta(QuantityValue? degreesrankinedelta)
        {
            return degreesrankinedelta.HasValue ? FromDegreesRankineDelta(degreesrankinedelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesReaumur.
        /// </summary>
        public static TemperatureDelta? FromDegreesReaumur(QuantityValue? degreesreaumur)
        {
            return degreesreaumur.HasValue ? FromDegreesReaumur(degreesreaumur.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesReaumurDelta.
        /// </summary>
        public static TemperatureDelta? FromDegreesReaumurDelta(QuantityValue? degreesreaumurdelta)
        {
            return degreesreaumurdelta.HasValue ? FromDegreesReaumurDelta(degreesreaumurdelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesRoemer.
        /// </summary>
        public static TemperatureDelta? FromDegreesRoemer(QuantityValue? degreesroemer)
        {
            return degreesroemer.HasValue ? FromDegreesRoemer(degreesroemer.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable DegreesRoemerDelta.
        /// </summary>
        public static TemperatureDelta? FromDegreesRoemerDelta(QuantityValue? degreesroemerdelta)
        {
            return degreesroemerdelta.HasValue ? FromDegreesRoemerDelta(degreesroemerdelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable Kelvins.
        /// </summary>
        public static TemperatureDelta? FromKelvins(QuantityValue? kelvins)
        {
            return kelvins.HasValue ? FromKelvins(kelvins.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Get nullable TemperatureDelta from nullable KelvinsDelta.
        /// </summary>
        public static TemperatureDelta? FromKelvinsDelta(QuantityValue? kelvinsdelta)
        {
            return kelvinsdelta.HasValue ? FromKelvinsDelta(kelvinsdelta.Value) : default(TemperatureDelta?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TemperatureDeltaUnit" /> to <see cref="TemperatureDelta" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>TemperatureDelta unit value.</returns>
        public static TemperatureDelta? From(QuantityValue? value, TemperatureDeltaUnit fromUnit)
        {
            return value.HasValue ? new TemperatureDelta((double)value.Value, fromUnit) : default(TemperatureDelta?);
        }

        #endregion

        #region Arithmetic Operators

        public static TemperatureDelta operator -(TemperatureDelta right)
        {
            return new TemperatureDelta(-right.Value, right.Unit);
        }

        public static TemperatureDelta operator +(TemperatureDelta left, TemperatureDelta right)
        {
            return new TemperatureDelta(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static TemperatureDelta operator -(TemperatureDelta left, TemperatureDelta right)
        {
            return new TemperatureDelta(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static TemperatureDelta operator *(double left, TemperatureDelta right)
        {
            return new TemperatureDelta(left * right.Value, right.Unit);
        }

        public static TemperatureDelta operator *(TemperatureDelta left, double right)
        {
            return new TemperatureDelta(left.Value * right, left.Unit);
        }

        public static TemperatureDelta operator /(TemperatureDelta left, double right)
        {
            return new TemperatureDelta(left.Value / right, left.Unit);
        }

        public static double operator /(TemperatureDelta left, TemperatureDelta right)
        {
            return left.Kelvins / right.Kelvins;
        }

        #endregion

        public static bool operator <=(TemperatureDelta left, TemperatureDelta right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(TemperatureDelta left, TemperatureDelta right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(TemperatureDelta left, TemperatureDelta right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(TemperatureDelta left, TemperatureDelta right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(TemperatureDelta left, TemperatureDelta right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(TemperatureDelta left, TemperatureDelta right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
