//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Mass flow is the ratio of the mass change to the time during which the change occurred (value of mass changes per unit time).
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct MassFlow : IComparable, IComparable<MassFlow>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable MassFlow from nullable CentigramsPerSecond.
        /// </summary>
        public static MassFlow? FromCentigramsPerSecond(QuantityValue? centigramspersecond)
        {
            return centigramspersecond.HasValue ? FromCentigramsPerSecond(centigramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecagramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecagramsPerSecond(QuantityValue? decagramspersecond)
        {
            return decagramspersecond.HasValue ? FromDecagramsPerSecond(decagramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable DecigramsPerSecond.
        /// </summary>
        public static MassFlow? FromDecigramsPerSecond(QuantityValue? decigramspersecond)
        {
            return decigramspersecond.HasValue ? FromDecigramsPerSecond(decigramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable GramsPerSecond.
        /// </summary>
        public static MassFlow? FromGramsPerSecond(QuantityValue? gramspersecond)
        {
            return gramspersecond.HasValue ? FromGramsPerSecond(gramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable HectogramsPerSecond.
        /// </summary>
        public static MassFlow? FromHectogramsPerSecond(QuantityValue? hectogramspersecond)
        {
            return hectogramspersecond.HasValue ? FromHectogramsPerSecond(hectogramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerHour.
        /// </summary>
        public static MassFlow? FromKilogramsPerHour(QuantityValue? kilogramsperhour)
        {
            return kilogramsperhour.HasValue ? FromKilogramsPerHour(kilogramsperhour.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable KilogramsPerSecond.
        /// </summary>
        public static MassFlow? FromKilogramsPerSecond(QuantityValue? kilogramspersecond)
        {
            return kilogramspersecond.HasValue ? FromKilogramsPerSecond(kilogramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MegapoundsPerHour.
        /// </summary>
        public static MassFlow? FromMegapoundsPerHour(QuantityValue? megapoundsperhour)
        {
            return megapoundsperhour.HasValue ? FromMegapoundsPerHour(megapoundsperhour.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MicrogramsPerSecond.
        /// </summary>
        public static MassFlow? FromMicrogramsPerSecond(QuantityValue? microgramspersecond)
        {
            return microgramspersecond.HasValue ? FromMicrogramsPerSecond(microgramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable MilligramsPerSecond.
        /// </summary>
        public static MassFlow? FromMilligramsPerSecond(QuantityValue? milligramspersecond)
        {
            return milligramspersecond.HasValue ? FromMilligramsPerSecond(milligramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable NanogramsPerSecond.
        /// </summary>
        public static MassFlow? FromNanogramsPerSecond(QuantityValue? nanogramspersecond)
        {
            return nanogramspersecond.HasValue ? FromNanogramsPerSecond(nanogramspersecond.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable PoundsPerHour.
        /// </summary>
        public static MassFlow? FromPoundsPerHour(QuantityValue? poundsperhour)
        {
            return poundsperhour.HasValue ? FromPoundsPerHour(poundsperhour.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable ShortTonsPerHour.
        /// </summary>
        public static MassFlow? FromShortTonsPerHour(QuantityValue? shorttonsperhour)
        {
            return shorttonsperhour.HasValue ? FromShortTonsPerHour(shorttonsperhour.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable TonnesPerDay.
        /// </summary>
        public static MassFlow? FromTonnesPerDay(QuantityValue? tonnesperday)
        {
            return tonnesperday.HasValue ? FromTonnesPerDay(tonnesperday.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Get nullable MassFlow from nullable TonnesPerHour.
        /// </summary>
        public static MassFlow? FromTonnesPerHour(QuantityValue? tonnesperhour)
        {
            return tonnesperhour.HasValue ? FromTonnesPerHour(tonnesperhour.Value) : default(MassFlow?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassFlowUnit" /> to <see cref="MassFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassFlow unit value.</returns>
        public static MassFlow? From(QuantityValue? value, MassFlowUnit fromUnit)
        {
            return value.HasValue ? new MassFlow((double)value.Value, fromUnit) : default(MassFlow?);
        }

        #endregion

        #region Arithmetic Operators

        public static MassFlow operator -(MassFlow right)
        {
            return new MassFlow(-right.Value, right.Unit);
        }

        public static MassFlow operator +(MassFlow left, MassFlow right)
        {
            return new MassFlow(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static MassFlow operator -(MassFlow left, MassFlow right)
        {
            return new MassFlow(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static MassFlow operator *(double left, MassFlow right)
        {
            return new MassFlow(left * right.Value, right.Unit);
        }

        public static MassFlow operator *(MassFlow left, double right)
        {
            return new MassFlow(left.Value * right, left.Unit);
        }

        public static MassFlow operator /(MassFlow left, double right)
        {
            return new MassFlow(left.Value / right, left.Unit);
        }

        public static double operator /(MassFlow left, MassFlow right)
        {
            return left.GramsPerSecond / right.GramsPerSecond;
        }

        #endregion

        public static bool operator <=(MassFlow left, MassFlow right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(MassFlow left, MassFlow right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(MassFlow left, MassFlow right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(MassFlow left, MassFlow right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(MassFlow left, MassFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(MassFlow left, MassFlow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
