//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct Power : IComparable, IComparable<Power>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable Power from nullable BoilerHorsepower.
        /// </summary>
        public static Power? FromBoilerHorsepower(QuantityValue? boilerhorsepower)
        {
            return boilerhorsepower.HasValue ? FromBoilerHorsepower(boilerhorsepower.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable BritishThermalUnitsPerHour.
        /// </summary>
        public static Power? FromBritishThermalUnitsPerHour(QuantityValue? britishthermalunitsperhour)
        {
            return britishthermalunitsperhour.HasValue ? FromBritishThermalUnitsPerHour(britishthermalunitsperhour.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Decawatts.
        /// </summary>
        public static Power? FromDecawatts(QuantityValue? decawatts)
        {
            return decawatts.HasValue ? FromDecawatts(decawatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Deciwatts.
        /// </summary>
        public static Power? FromDeciwatts(QuantityValue? deciwatts)
        {
            return deciwatts.HasValue ? FromDeciwatts(deciwatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable ElectricalHorsepower.
        /// </summary>
        public static Power? FromElectricalHorsepower(QuantityValue? electricalhorsepower)
        {
            return electricalhorsepower.HasValue ? FromElectricalHorsepower(electricalhorsepower.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Femtowatts.
        /// </summary>
        public static Power? FromFemtowatts(QuantityValue? femtowatts)
        {
            return femtowatts.HasValue ? FromFemtowatts(femtowatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Gigawatts.
        /// </summary>
        public static Power? FromGigawatts(QuantityValue? gigawatts)
        {
            return gigawatts.HasValue ? FromGigawatts(gigawatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable HydraulicHorsepower.
        /// </summary>
        public static Power? FromHydraulicHorsepower(QuantityValue? hydraulichorsepower)
        {
            return hydraulichorsepower.HasValue ? FromHydraulicHorsepower(hydraulichorsepower.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable KilobritishThermalUnitsPerHour.
        /// </summary>
        public static Power? FromKilobritishThermalUnitsPerHour(QuantityValue? kilobritishthermalunitsperhour)
        {
            return kilobritishthermalunitsperhour.HasValue ? FromKilobritishThermalUnitsPerHour(kilobritishthermalunitsperhour.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Kilowatts.
        /// </summary>
        public static Power? FromKilowatts(QuantityValue? kilowatts)
        {
            return kilowatts.HasValue ? FromKilowatts(kilowatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable MechanicalHorsepower.
        /// </summary>
        public static Power? FromMechanicalHorsepower(QuantityValue? mechanicalhorsepower)
        {
            return mechanicalhorsepower.HasValue ? FromMechanicalHorsepower(mechanicalhorsepower.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Megawatts.
        /// </summary>
        public static Power? FromMegawatts(QuantityValue? megawatts)
        {
            return megawatts.HasValue ? FromMegawatts(megawatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable MetricHorsepower.
        /// </summary>
        public static Power? FromMetricHorsepower(QuantityValue? metrichorsepower)
        {
            return metrichorsepower.HasValue ? FromMetricHorsepower(metrichorsepower.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Microwatts.
        /// </summary>
        public static Power? FromMicrowatts(QuantityValue? microwatts)
        {
            return microwatts.HasValue ? FromMicrowatts(microwatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Milliwatts.
        /// </summary>
        public static Power? FromMilliwatts(QuantityValue? milliwatts)
        {
            return milliwatts.HasValue ? FromMilliwatts(milliwatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Nanowatts.
        /// </summary>
        public static Power? FromNanowatts(QuantityValue? nanowatts)
        {
            return nanowatts.HasValue ? FromNanowatts(nanowatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Petawatts.
        /// </summary>
        public static Power? FromPetawatts(QuantityValue? petawatts)
        {
            return petawatts.HasValue ? FromPetawatts(petawatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Picowatts.
        /// </summary>
        public static Power? FromPicowatts(QuantityValue? picowatts)
        {
            return picowatts.HasValue ? FromPicowatts(picowatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Terawatts.
        /// </summary>
        public static Power? FromTerawatts(QuantityValue? terawatts)
        {
            return terawatts.HasValue ? FromTerawatts(terawatts.Value) : default(Power?);
        }

        /// <summary>
        ///     Get nullable Power from nullable Watts.
        /// </summary>
        public static Power? FromWatts(QuantityValue? watts)
        {
            return watts.HasValue ? FromWatts(watts.Value) : default(Power?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerUnit" /> to <see cref="Power" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Power unit value.</returns>
        public static Power? From(QuantityValue? value, PowerUnit fromUnit)
        {
            return value.HasValue ? new Power((decimal)value.Value, fromUnit) : default(Power?);
        }

        #endregion

        #region Arithmetic Operators

        public static Power operator -(Power right)
        {
            return new Power(-right.Value, right.Unit);
        }

        public static Power operator +(Power left, Power right)
        {
            return new Power(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Power operator -(Power left, Power right)
        {
            return new Power(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Power operator *(decimal left, Power right)
        {
            return new Power(left * right.Value, right.Unit);
        }

        public static Power operator *(Power left, decimal right)
        {
            return new Power(left.Value * right, left.Unit);
        }

        public static Power operator /(Power left, decimal right)
        {
            return new Power(left.Value / right, left.Unit);
        }

        public static double operator /(Power left, Power right)
        {
            return left.Watts / right.Watts;
        }

        #endregion

        public static bool operator <=(Power left, Power right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Power left, Power right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Power left, Power right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Power left, Power right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        public static bool operator ==(Power left, Power right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        public static bool operator !=(Power left, Power right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
