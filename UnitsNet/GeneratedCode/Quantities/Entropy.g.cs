//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Entropy
#else
    public partial struct Entropy : IComparable, IComparable<Entropy>
#endif
    {
        /// <summary>
        ///     Base unit of Entropy.
        /// </summary>
        private readonly double _joulesPerKelvin;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Entropy() : this(0)
        {
        }
#endif

        public Entropy(double joulesperkelvin)
        {
            _joulesPerKelvin = Convert.ToDouble(joulesperkelvin);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        Entropy(long joulesperkelvin)
        {
            _joulesPerKelvin = Convert.ToDouble(joulesperkelvin);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        Entropy(decimal joulesperkelvin)
        {
            _joulesPerKelvin = Convert.ToDouble(joulesperkelvin);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Entropy;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static EntropyUnit BaseUnit
        {
            get { return EntropyUnit.JoulePerKelvin; }
        }

        /// <summary>
        ///     All units of measurement for the Entropy quantity.
        /// </summary>
        public static EntropyUnit[] Units { get; } = Enum.GetValues(typeof(EntropyUnit)).Cast<EntropyUnit>().ToArray();

        /// <summary>
        ///     Get Entropy in CaloriesPerKelvin.
        /// </summary>
        public double CaloriesPerKelvin
        {
            get { return _joulesPerKelvin/4.184; }
        }

        /// <summary>
        ///     Get Entropy in JoulesPerDegreeCelsius.
        /// </summary>
        public double JoulesPerDegreeCelsius
        {
            get { return _joulesPerKelvin; }
        }

        /// <summary>
        ///     Get Entropy in JoulesPerKelvin.
        /// </summary>
        public double JoulesPerKelvin
        {
            get { return _joulesPerKelvin; }
        }

        /// <summary>
        ///     Get Entropy in KilocaloriesPerKelvin.
        /// </summary>
        public double KilocaloriesPerKelvin
        {
            get { return (_joulesPerKelvin/4.184) / 1e3d; }
        }

        /// <summary>
        ///     Get Entropy in KilojoulesPerDegreeCelsius.
        /// </summary>
        public double KilojoulesPerDegreeCelsius
        {
            get { return (_joulesPerKelvin) / 1e3d; }
        }

        /// <summary>
        ///     Get Entropy in KilojoulesPerKelvin.
        /// </summary>
        public double KilojoulesPerKelvin
        {
            get { return (_joulesPerKelvin) / 1e3d; }
        }

        /// <summary>
        ///     Get Entropy in MegajoulesPerKelvin.
        /// </summary>
        public double MegajoulesPerKelvin
        {
            get { return (_joulesPerKelvin) / 1e6d; }
        }

        #endregion

        #region Static

        public static Entropy Zero
        {
            get { return new Entropy(); }
        }

        /// <summary>
        ///     Get Entropy from CaloriesPerKelvin.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Entropy FromCaloriesPerKelvin(double caloriesperkelvin)
        {
            return new Entropy(caloriesperkelvin*4.184);
        }

        /// <summary>
        ///     Get Entropy from CaloriesPerKelvin.
        /// </summary>
        public static Entropy FromCaloriesPerKelvin(int caloriesperkelvin)
        {
            return new Entropy(caloriesperkelvin*4.184);
        }

        /// <summary>
        ///     Get Entropy from CaloriesPerKelvin.
        /// </summary>
        public static Entropy FromCaloriesPerKelvin(long caloriesperkelvin)
        {
            return new Entropy(caloriesperkelvin*4.184);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Entropy from CaloriesPerKelvin of type decimal.
        /// </summary>
        public static Entropy FromCaloriesPerKelvin(decimal caloriesperkelvin)
        {
            return new Entropy(Convert.ToDouble(caloriesperkelvin)*4.184);
        }
#endif

        /// <summary>
        ///     Get Entropy from JoulesPerDegreeCelsius.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Entropy FromJoulesPerDegreeCelsius(double joulesperdegreecelsius)
        {
            return new Entropy(joulesperdegreecelsius);
        }

        /// <summary>
        ///     Get Entropy from JoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy FromJoulesPerDegreeCelsius(int joulesperdegreecelsius)
        {
            return new Entropy(joulesperdegreecelsius);
        }

        /// <summary>
        ///     Get Entropy from JoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy FromJoulesPerDegreeCelsius(long joulesperdegreecelsius)
        {
            return new Entropy(joulesperdegreecelsius);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Entropy from JoulesPerDegreeCelsius of type decimal.
        /// </summary>
        public static Entropy FromJoulesPerDegreeCelsius(decimal joulesperdegreecelsius)
        {
            return new Entropy(Convert.ToDouble(joulesperdegreecelsius));
        }
#endif

        /// <summary>
        ///     Get Entropy from JoulesPerKelvin.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Entropy FromJoulesPerKelvin(double joulesperkelvin)
        {
            return new Entropy(joulesperkelvin);
        }

        /// <summary>
        ///     Get Entropy from JoulesPerKelvin.
        /// </summary>
        public static Entropy FromJoulesPerKelvin(int joulesperkelvin)
        {
            return new Entropy(joulesperkelvin);
        }

        /// <summary>
        ///     Get Entropy from JoulesPerKelvin.
        /// </summary>
        public static Entropy FromJoulesPerKelvin(long joulesperkelvin)
        {
            return new Entropy(joulesperkelvin);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Entropy from JoulesPerKelvin of type decimal.
        /// </summary>
        public static Entropy FromJoulesPerKelvin(decimal joulesperkelvin)
        {
            return new Entropy(Convert.ToDouble(joulesperkelvin));
        }
#endif

        /// <summary>
        ///     Get Entropy from KilocaloriesPerKelvin.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Entropy FromKilocaloriesPerKelvin(double kilocaloriesperkelvin)
        {
            return new Entropy((kilocaloriesperkelvin*4.184) * 1e3d);
        }

        /// <summary>
        ///     Get Entropy from KilocaloriesPerKelvin.
        /// </summary>
        public static Entropy FromKilocaloriesPerKelvin(int kilocaloriesperkelvin)
        {
            return new Entropy((kilocaloriesperkelvin*4.184) * 1e3d);
        }

        /// <summary>
        ///     Get Entropy from KilocaloriesPerKelvin.
        /// </summary>
        public static Entropy FromKilocaloriesPerKelvin(long kilocaloriesperkelvin)
        {
            return new Entropy((kilocaloriesperkelvin*4.184) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Entropy from KilocaloriesPerKelvin of type decimal.
        /// </summary>
        public static Entropy FromKilocaloriesPerKelvin(decimal kilocaloriesperkelvin)
        {
            return new Entropy((Convert.ToDouble(kilocaloriesperkelvin)*4.184) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Entropy from KilojoulesPerDegreeCelsius.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Entropy FromKilojoulesPerDegreeCelsius(double kilojoulesperdegreecelsius)
        {
            return new Entropy((kilojoulesperdegreecelsius) * 1e3d);
        }

        /// <summary>
        ///     Get Entropy from KilojoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy FromKilojoulesPerDegreeCelsius(int kilojoulesperdegreecelsius)
        {
            return new Entropy((kilojoulesperdegreecelsius) * 1e3d);
        }

        /// <summary>
        ///     Get Entropy from KilojoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy FromKilojoulesPerDegreeCelsius(long kilojoulesperdegreecelsius)
        {
            return new Entropy((kilojoulesperdegreecelsius) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Entropy from KilojoulesPerDegreeCelsius of type decimal.
        /// </summary>
        public static Entropy FromKilojoulesPerDegreeCelsius(decimal kilojoulesperdegreecelsius)
        {
            return new Entropy((Convert.ToDouble(kilojoulesperdegreecelsius)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Entropy from KilojoulesPerKelvin.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Entropy FromKilojoulesPerKelvin(double kilojoulesperkelvin)
        {
            return new Entropy((kilojoulesperkelvin) * 1e3d);
        }

        /// <summary>
        ///     Get Entropy from KilojoulesPerKelvin.
        /// </summary>
        public static Entropy FromKilojoulesPerKelvin(int kilojoulesperkelvin)
        {
            return new Entropy((kilojoulesperkelvin) * 1e3d);
        }

        /// <summary>
        ///     Get Entropy from KilojoulesPerKelvin.
        /// </summary>
        public static Entropy FromKilojoulesPerKelvin(long kilojoulesperkelvin)
        {
            return new Entropy((kilojoulesperkelvin) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Entropy from KilojoulesPerKelvin of type decimal.
        /// </summary>
        public static Entropy FromKilojoulesPerKelvin(decimal kilojoulesperkelvin)
        {
            return new Entropy((Convert.ToDouble(kilojoulesperkelvin)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Entropy from MegajoulesPerKelvin.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Entropy FromMegajoulesPerKelvin(double megajoulesperkelvin)
        {
            return new Entropy((megajoulesperkelvin) * 1e6d);
        }

        /// <summary>
        ///     Get Entropy from MegajoulesPerKelvin.
        /// </summary>
        public static Entropy FromMegajoulesPerKelvin(int megajoulesperkelvin)
        {
            return new Entropy((megajoulesperkelvin) * 1e6d);
        }

        /// <summary>
        ///     Get Entropy from MegajoulesPerKelvin.
        /// </summary>
        public static Entropy FromMegajoulesPerKelvin(long megajoulesperkelvin)
        {
            return new Entropy((megajoulesperkelvin) * 1e6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Entropy from MegajoulesPerKelvin of type decimal.
        /// </summary>
        public static Entropy FromMegajoulesPerKelvin(decimal megajoulesperkelvin)
        {
            return new Entropy((Convert.ToDouble(megajoulesperkelvin)) * 1e6d);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Entropy from nullable CaloriesPerKelvin.
        /// </summary>
        public static Entropy? FromCaloriesPerKelvin(double? caloriesperkelvin)
        {
            if (caloriesperkelvin.HasValue)
            {
                return FromCaloriesPerKelvin(caloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable CaloriesPerKelvin.
        /// </summary>
        public static Entropy? FromCaloriesPerKelvin(int? caloriesperkelvin)
        {
            if (caloriesperkelvin.HasValue)
            {
                return FromCaloriesPerKelvin(caloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable CaloriesPerKelvin.
        /// </summary>
        public static Entropy? FromCaloriesPerKelvin(long? caloriesperkelvin)
        {
            if (caloriesperkelvin.HasValue)
            {
                return FromCaloriesPerKelvin(caloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from CaloriesPerKelvin of type decimal.
        /// </summary>
        public static Entropy? FromCaloriesPerKelvin(decimal? caloriesperkelvin)
        {
            if (caloriesperkelvin.HasValue)
            {
                return FromCaloriesPerKelvin(caloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable JoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy? FromJoulesPerDegreeCelsius(double? joulesperdegreecelsius)
        {
            if (joulesperdegreecelsius.HasValue)
            {
                return FromJoulesPerDegreeCelsius(joulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable JoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy? FromJoulesPerDegreeCelsius(int? joulesperdegreecelsius)
        {
            if (joulesperdegreecelsius.HasValue)
            {
                return FromJoulesPerDegreeCelsius(joulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable JoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy? FromJoulesPerDegreeCelsius(long? joulesperdegreecelsius)
        {
            if (joulesperdegreecelsius.HasValue)
            {
                return FromJoulesPerDegreeCelsius(joulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from JoulesPerDegreeCelsius of type decimal.
        /// </summary>
        public static Entropy? FromJoulesPerDegreeCelsius(decimal? joulesperdegreecelsius)
        {
            if (joulesperdegreecelsius.HasValue)
            {
                return FromJoulesPerDegreeCelsius(joulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable JoulesPerKelvin.
        /// </summary>
        public static Entropy? FromJoulesPerKelvin(double? joulesperkelvin)
        {
            if (joulesperkelvin.HasValue)
            {
                return FromJoulesPerKelvin(joulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable JoulesPerKelvin.
        /// </summary>
        public static Entropy? FromJoulesPerKelvin(int? joulesperkelvin)
        {
            if (joulesperkelvin.HasValue)
            {
                return FromJoulesPerKelvin(joulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable JoulesPerKelvin.
        /// </summary>
        public static Entropy? FromJoulesPerKelvin(long? joulesperkelvin)
        {
            if (joulesperkelvin.HasValue)
            {
                return FromJoulesPerKelvin(joulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from JoulesPerKelvin of type decimal.
        /// </summary>
        public static Entropy? FromJoulesPerKelvin(decimal? joulesperkelvin)
        {
            if (joulesperkelvin.HasValue)
            {
                return FromJoulesPerKelvin(joulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilocaloriesPerKelvin.
        /// </summary>
        public static Entropy? FromKilocaloriesPerKelvin(double? kilocaloriesperkelvin)
        {
            if (kilocaloriesperkelvin.HasValue)
            {
                return FromKilocaloriesPerKelvin(kilocaloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilocaloriesPerKelvin.
        /// </summary>
        public static Entropy? FromKilocaloriesPerKelvin(int? kilocaloriesperkelvin)
        {
            if (kilocaloriesperkelvin.HasValue)
            {
                return FromKilocaloriesPerKelvin(kilocaloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilocaloriesPerKelvin.
        /// </summary>
        public static Entropy? FromKilocaloriesPerKelvin(long? kilocaloriesperkelvin)
        {
            if (kilocaloriesperkelvin.HasValue)
            {
                return FromKilocaloriesPerKelvin(kilocaloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from KilocaloriesPerKelvin of type decimal.
        /// </summary>
        public static Entropy? FromKilocaloriesPerKelvin(decimal? kilocaloriesperkelvin)
        {
            if (kilocaloriesperkelvin.HasValue)
            {
                return FromKilocaloriesPerKelvin(kilocaloriesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilojoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy? FromKilojoulesPerDegreeCelsius(double? kilojoulesperdegreecelsius)
        {
            if (kilojoulesperdegreecelsius.HasValue)
            {
                return FromKilojoulesPerDegreeCelsius(kilojoulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilojoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy? FromKilojoulesPerDegreeCelsius(int? kilojoulesperdegreecelsius)
        {
            if (kilojoulesperdegreecelsius.HasValue)
            {
                return FromKilojoulesPerDegreeCelsius(kilojoulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilojoulesPerDegreeCelsius.
        /// </summary>
        public static Entropy? FromKilojoulesPerDegreeCelsius(long? kilojoulesperdegreecelsius)
        {
            if (kilojoulesperdegreecelsius.HasValue)
            {
                return FromKilojoulesPerDegreeCelsius(kilojoulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from KilojoulesPerDegreeCelsius of type decimal.
        /// </summary>
        public static Entropy? FromKilojoulesPerDegreeCelsius(decimal? kilojoulesperdegreecelsius)
        {
            if (kilojoulesperdegreecelsius.HasValue)
            {
                return FromKilojoulesPerDegreeCelsius(kilojoulesperdegreecelsius.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilojoulesPerKelvin.
        /// </summary>
        public static Entropy? FromKilojoulesPerKelvin(double? kilojoulesperkelvin)
        {
            if (kilojoulesperkelvin.HasValue)
            {
                return FromKilojoulesPerKelvin(kilojoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilojoulesPerKelvin.
        /// </summary>
        public static Entropy? FromKilojoulesPerKelvin(int? kilojoulesperkelvin)
        {
            if (kilojoulesperkelvin.HasValue)
            {
                return FromKilojoulesPerKelvin(kilojoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable KilojoulesPerKelvin.
        /// </summary>
        public static Entropy? FromKilojoulesPerKelvin(long? kilojoulesperkelvin)
        {
            if (kilojoulesperkelvin.HasValue)
            {
                return FromKilojoulesPerKelvin(kilojoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from KilojoulesPerKelvin of type decimal.
        /// </summary>
        public static Entropy? FromKilojoulesPerKelvin(decimal? kilojoulesperkelvin)
        {
            if (kilojoulesperkelvin.HasValue)
            {
                return FromKilojoulesPerKelvin(kilojoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable MegajoulesPerKelvin.
        /// </summary>
        public static Entropy? FromMegajoulesPerKelvin(double? megajoulesperkelvin)
        {
            if (megajoulesperkelvin.HasValue)
            {
                return FromMegajoulesPerKelvin(megajoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable MegajoulesPerKelvin.
        /// </summary>
        public static Entropy? FromMegajoulesPerKelvin(int? megajoulesperkelvin)
        {
            if (megajoulesperkelvin.HasValue)
            {
                return FromMegajoulesPerKelvin(megajoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from nullable MegajoulesPerKelvin.
        /// </summary>
        public static Entropy? FromMegajoulesPerKelvin(long? megajoulesperkelvin)
        {
            if (megajoulesperkelvin.HasValue)
            {
                return FromMegajoulesPerKelvin(megajoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Entropy from MegajoulesPerKelvin of type decimal.
        /// </summary>
        public static Entropy? FromMegajoulesPerKelvin(decimal? megajoulesperkelvin)
        {
            if (megajoulesperkelvin.HasValue)
            {
                return FromMegajoulesPerKelvin(megajoulesperkelvin.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EntropyUnit" /> to <see cref="Entropy" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Entropy unit value.</returns>
        public static Entropy From(double val, EntropyUnit fromUnit)
        {
            switch (fromUnit)
            {
                case EntropyUnit.CaloriePerKelvin:
                    return FromCaloriesPerKelvin(val);
                case EntropyUnit.JoulePerDegreeCelsius:
                    return FromJoulesPerDegreeCelsius(val);
                case EntropyUnit.JoulePerKelvin:
                    return FromJoulesPerKelvin(val);
                case EntropyUnit.KilocaloriePerKelvin:
                    return FromKilocaloriesPerKelvin(val);
                case EntropyUnit.KilojoulePerDegreeCelsius:
                    return FromKilojoulesPerDegreeCelsius(val);
                case EntropyUnit.KilojoulePerKelvin:
                    return FromKilojoulesPerKelvin(val);
                case EntropyUnit.MegajoulePerKelvin:
                    return FromMegajoulesPerKelvin(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EntropyUnit" /> to <see cref="Entropy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Entropy unit value.</returns>
        public static Entropy? From(double? value, EntropyUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case EntropyUnit.CaloriePerKelvin:
                    return FromCaloriesPerKelvin(value.Value);
                case EntropyUnit.JoulePerDegreeCelsius:
                    return FromJoulesPerDegreeCelsius(value.Value);
                case EntropyUnit.JoulePerKelvin:
                    return FromJoulesPerKelvin(value.Value);
                case EntropyUnit.KilocaloriePerKelvin:
                    return FromKilocaloriesPerKelvin(value.Value);
                case EntropyUnit.KilojoulePerDegreeCelsius:
                    return FromKilojoulesPerDegreeCelsius(value.Value);
                case EntropyUnit.KilojoulePerKelvin:
                    return FromKilojoulesPerKelvin(value.Value);
                case EntropyUnit.MegajoulePerKelvin:
                    return FromMegajoulesPerKelvin(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(EntropyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(EntropyUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Entropy operator -(Entropy right)
        {
            return new Entropy(-right._joulesPerKelvin);
        }

        public static Entropy operator +(Entropy left, Entropy right)
        {
            return new Entropy(left._joulesPerKelvin + right._joulesPerKelvin);
        }

        public static Entropy operator -(Entropy left, Entropy right)
        {
            return new Entropy(left._joulesPerKelvin - right._joulesPerKelvin);
        }

        public static Entropy operator *(double left, Entropy right)
        {
            return new Entropy(left*right._joulesPerKelvin);
        }

        public static Entropy operator *(Entropy left, double right)
        {
            return new Entropy(left._joulesPerKelvin*(double)right);
        }

        public static Entropy operator /(Entropy left, double right)
        {
            return new Entropy(left._joulesPerKelvin/(double)right);
        }

        public static double operator /(Entropy left, Entropy right)
        {
            return Convert.ToDouble(left._joulesPerKelvin/right._joulesPerKelvin);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Entropy)) throw new ArgumentException("Expected type Entropy.", "obj");
            return CompareTo((Entropy) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Entropy other)
        {
            return _joulesPerKelvin.CompareTo(other._joulesPerKelvin);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Entropy left, Entropy right)
        {
            return left._joulesPerKelvin <= right._joulesPerKelvin;
        }

        public static bool operator >=(Entropy left, Entropy right)
        {
            return left._joulesPerKelvin >= right._joulesPerKelvin;
        }

        public static bool operator <(Entropy left, Entropy right)
        {
            return left._joulesPerKelvin < right._joulesPerKelvin;
        }

        public static bool operator >(Entropy left, Entropy right)
        {
            return left._joulesPerKelvin > right._joulesPerKelvin;
        }

        public static bool operator ==(Entropy left, Entropy right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._joulesPerKelvin == right._joulesPerKelvin;
        }

        public static bool operator !=(Entropy left, Entropy right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._joulesPerKelvin != right._joulesPerKelvin;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _joulesPerKelvin.Equals(((Entropy) obj)._joulesPerKelvin);
        }

        public override int GetHashCode()
        {
            return _joulesPerKelvin.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(EntropyUnit unit)
        {
            switch (unit)
            {
                case EntropyUnit.CaloriePerKelvin:
                    return CaloriesPerKelvin;
                case EntropyUnit.JoulePerDegreeCelsius:
                    return JoulesPerDegreeCelsius;
                case EntropyUnit.JoulePerKelvin:
                    return JoulesPerKelvin;
                case EntropyUnit.KilocaloriePerKelvin:
                    return KilocaloriesPerKelvin;
                case EntropyUnit.KilojoulePerDegreeCelsius:
                    return KilojoulesPerDegreeCelsius;
                case EntropyUnit.KilojoulePerKelvin:
                    return KilojoulesPerKelvin;
                case EntropyUnit.MegajoulePerKelvin:
                    return MegajoulesPerKelvin;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Entropy Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Entropy Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<Entropy, EntropyUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    EntropyUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromJoulesPerKelvin(x.JoulesPerKelvin + y.JoulesPerKelvin));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Entropy result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Entropy result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Entropy);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static EntropyUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static EntropyUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static EntropyUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<EntropyUnit>(str.Trim());

            if (unit == EntropyUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized EntropyUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is JoulePerKelvin
        /// </summary>
        public static EntropyUnit ToStringDefaultUnit { get; set; } = EntropyUnit.JoulePerKelvin;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(EntropyUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(EntropyUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(EntropyUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(EntropyUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Entropy
        /// </summary>
        public static Entropy MaxValue
        {
            get
            {
                return new Entropy(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Entropy
        /// </summary>
        public static Entropy MinValue
        {
            get
            {
                return new Entropy(double.MinValue);
            }
        }
    }
}
