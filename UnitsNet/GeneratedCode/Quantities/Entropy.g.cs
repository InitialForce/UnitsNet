//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Entropy is an important concept in the branch of science known as thermodynamics. The idea of "irreversibility" is central to the understanding of entropy.  It is often said that entropy is an expression of the disorder, or randomness of a system, or of our lack of information about it. Entropy is an extensive property. It has the dimension of energy divided by temperature, which has a unit of joules per kelvin (J/K) in the International System of Units
    /// </summary>
    public partial struct Entropy<T> : IQuantityT<EntropyUnit, T>, IEquatable<Entropy<T>>, IComparable, IComparable<Entropy<T>>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly EntropyUnit? _unit;

        static Entropy()
        {
            BaseDimensions = new BaseDimensions(2, 1, -2, 0, -1, 0, 0);

            Info = new QuantityInfo<EntropyUnit>("Entropy",
                new UnitInfo<EntropyUnit>[] {
                    new UnitInfo<EntropyUnit>(EntropyUnit.CaloriePerKelvin, BaseUnits.Undefined),
                    new UnitInfo<EntropyUnit>(EntropyUnit.JoulePerDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<EntropyUnit>(EntropyUnit.JoulePerKelvin, BaseUnits.Undefined),
                    new UnitInfo<EntropyUnit>(EntropyUnit.KilocaloriePerKelvin, BaseUnits.Undefined),
                    new UnitInfo<EntropyUnit>(EntropyUnit.KilojoulePerDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<EntropyUnit>(EntropyUnit.KilojoulePerKelvin, BaseUnits.Undefined),
                    new UnitInfo<EntropyUnit>(EntropyUnit.MegajoulePerKelvin, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.Entropy);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Entropy(T value, EntropyUnit unit)
        {
            if(unit == EntropyUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            Value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Entropy(T value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            Value = value;
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<EntropyUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of <see cref="Entropy{T}" />, which is JoulePerKelvin. All conversions go via this value.
        /// </summary>
        public static EntropyUnit BaseUnit { get; } = EntropyUnit.JoulePerKelvin;

        /// <summary>
        /// Represents the largest possible value of <see cref="Entropy{T}" />
        /// </summary>
        public static Entropy<T> MaxValue { get; } = new Entropy<T>(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of <see cref="Entropy{T}" />
        /// </summary>
        public static Entropy<T> MinValue { get; } = new Entropy<T>(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use Info property instead.")]
        public static QuantityType QuantityType { get; } = QuantityType.Entropy;

        /// <summary>
        ///     All units of measurement for the <see cref="Entropy{T}" /> quantity.
        /// </summary>
        public static EntropyUnit[] Units { get; } = Enum.GetValues(typeof(EntropyUnit)).Cast<EntropyUnit>().Except(new EntropyUnit[]{ EntropyUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit JoulePerKelvin.
        /// </summary>
        public static Entropy<T> Zero { get; } = new Entropy<T>((T)0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public T Value{ get; }

        double IQuantity.Value => Convert.ToDouble(Value);

        #region Conversion Properties

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> in CaloriesPerKelvin.
        /// </summary>
        public T CaloriesPerKelvin => As(EntropyUnit.CaloriePerKelvin);

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> in JoulesPerDegreeCelsius.
        /// </summary>
        public T JoulesPerDegreeCelsius => As(EntropyUnit.JoulePerDegreeCelsius);

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> in JoulesPerKelvin.
        /// </summary>
        public T JoulesPerKelvin => As(EntropyUnit.JoulePerKelvin);

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> in KilocaloriesPerKelvin.
        /// </summary>
        public T KilocaloriesPerKelvin => As(EntropyUnit.KilocaloriePerKelvin);

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> in KilojoulesPerDegreeCelsius.
        /// </summary>
        public T KilojoulesPerDegreeCelsius => As(EntropyUnit.KilojoulePerDegreeCelsius);

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> in KilojoulesPerKelvin.
        /// </summary>
        public T KilojoulesPerKelvin => As(EntropyUnit.KilojoulePerKelvin);

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> in MegajoulesPerKelvin.
        /// </summary>
        public T MegajoulesPerKelvin => As(EntropyUnit.MegajoulePerKelvin);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(EntropyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(EntropyUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get <see cref="Entropy{T}" /> from CaloriesPerKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Entropy<T> FromCaloriesPerKelvin(T caloriesperkelvin)
        {
            return new Entropy<T>(caloriesperkelvin, EntropyUnit.CaloriePerKelvin);
        }
        /// <summary>
        ///     Get <see cref="Entropy{T}" /> from JoulesPerDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Entropy<T> FromJoulesPerDegreeCelsius(T joulesperdegreecelsius)
        {
            return new Entropy<T>(joulesperdegreecelsius, EntropyUnit.JoulePerDegreeCelsius);
        }
        /// <summary>
        ///     Get <see cref="Entropy{T}" /> from JoulesPerKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Entropy<T> FromJoulesPerKelvin(T joulesperkelvin)
        {
            return new Entropy<T>(joulesperkelvin, EntropyUnit.JoulePerKelvin);
        }
        /// <summary>
        ///     Get <see cref="Entropy{T}" /> from KilocaloriesPerKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Entropy<T> FromKilocaloriesPerKelvin(T kilocaloriesperkelvin)
        {
            return new Entropy<T>(kilocaloriesperkelvin, EntropyUnit.KilocaloriePerKelvin);
        }
        /// <summary>
        ///     Get <see cref="Entropy{T}" /> from KilojoulesPerDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Entropy<T> FromKilojoulesPerDegreeCelsius(T kilojoulesperdegreecelsius)
        {
            return new Entropy<T>(kilojoulesperdegreecelsius, EntropyUnit.KilojoulePerDegreeCelsius);
        }
        /// <summary>
        ///     Get <see cref="Entropy{T}" /> from KilojoulesPerKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Entropy<T> FromKilojoulesPerKelvin(T kilojoulesperkelvin)
        {
            return new Entropy<T>(kilojoulesperkelvin, EntropyUnit.KilojoulePerKelvin);
        }
        /// <summary>
        ///     Get <see cref="Entropy{T}" /> from MegajoulesPerKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Entropy<T> FromMegajoulesPerKelvin(T megajoulesperkelvin)
        {
            return new Entropy<T>(megajoulesperkelvin, EntropyUnit.MegajoulePerKelvin);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EntropyUnit" /> to <see cref="Entropy{T}" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><see cref="Entropy{T}" /> unit value.</returns>
        public static Entropy<T> From(T value, EntropyUnit fromUnit)
        {
            return new Entropy<T>(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Entropy<T> Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Entropy<T> Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Entropy<T>, EntropyUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out Entropy<T> result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out Entropy<T> result)
        {
            return QuantityParser.Default.TryParse<Entropy<T>, EntropyUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static EntropyUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static EntropyUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<EntropyUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.EntropyUnit)"/>
        public static bool TryParseUnit(string str, out EntropyUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out EntropyUnit unit)
        {
            return UnitParser.Default.TryParse<EntropyUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Entropy<T> operator -(Entropy<T> right)
        {
            return new Entropy<T>(CompiledLambdas.Negate(right.Value), right.Unit);
        }

        /// <summary>Get <see cref="Entropy{T}"/> from adding two <see cref="Entropy{T}"/>.</summary>
        public static Entropy<T> operator +(Entropy<T> left, Entropy<T> right)
        {
            var value = CompiledLambdas.Add(left.Value, right.GetValueAs(left.Unit));
            return new Entropy<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="Entropy{T}"/> from subtracting two <see cref="Entropy{T}"/>.</summary>
        public static Entropy<T> operator -(Entropy<T> left, Entropy<T> right)
        {
            var value = CompiledLambdas.Subtract(left.Value, right.GetValueAs(left.Unit));
            return new Entropy<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="Entropy{T}"/> from multiplying value and <see cref="Entropy{T}"/>.</summary>
        public static Entropy<T> operator *(T left, Entropy<T> right)
        {
            var value = CompiledLambdas.Multiply(left, right.Value);
            return new Entropy<T>(value, right.Unit);
        }

        /// <summary>Get <see cref="Entropy{T}"/> from multiplying value and <see cref="Entropy{T}"/>.</summary>
        public static Entropy<T> operator *(Entropy<T> left, T right)
        {
            var value = CompiledLambdas.Multiply(left.Value, right);
            return new Entropy<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="Entropy{T}"/> from dividing <see cref="Entropy{T}"/> by value.</summary>
        public static Entropy<T> operator /(Entropy<T> left, T right)
        {
            var value = CompiledLambdas.Divide(left.Value, right);
            return new Entropy<T>(value, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Entropy{T}"/> by <see cref="Entropy{T}"/>.</summary>
        public static T operator /(Entropy<T> left, Entropy<T> right)
        {
            return CompiledLambdas.Divide(left.JoulesPerKelvin, right.JoulesPerKelvin);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Entropy<T> left, Entropy<T> right)
        {
            return CompiledLambdas.LessThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Entropy<T> left, Entropy<T> right)
        {
            return CompiledLambdas.GreaterThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Entropy<T> left, Entropy<T> right)
        {
            return CompiledLambdas.LessThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Entropy<T> left, Entropy<T> right)
        {
            return CompiledLambdas.GreaterThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Entropy{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Entropy<T> left, Entropy<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Entropy{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Entropy<T> left, Entropy<T> right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Entropy<T> objEntropy)) throw new ArgumentException("Expected type Entropy.", nameof(obj));

            return CompareTo(objEntropy);
        }

        /// <inheritdoc />
        public int CompareTo(Entropy<T> other)
        {
            return System.Collections.Generic.Comparer<T>.Default.Compare(Value, other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Entropy{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Entropy<T> objEntropy))
                return false;

            return Equals(objEntropy);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Entropy{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Entropy<T> other)
        {
            return Value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another <see cref="Entropy{T}" /> within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Entropy<T> other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            var otherValueInThisUnits = other.As(this.Unit);
            return UnitsNet.Comparison.Equals(Value, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="Entropy{T}" />.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public T As(EntropyUnit unit)
        {
            if(Unit == unit)
                return Value;

            var converted = GetValueAs(unit);
            return converted;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public T As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is EntropyUnit unitAsEntropyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(EntropyUnit)} is supported.", nameof(unit));

            var asValue = As(unitAsEntropyUnit);
            return Convert.ToDouble(asValue);
        }

        double IQuantity.As(UnitSystem unitSystem) => Convert.ToDouble(As(unitSystem));

        double IQuantity<EntropyUnit>.As(EntropyUnit unit) => Convert.ToDouble(As(unit));

        /// <summary>
        ///     Converts this <see cref="Entropy{T}" /> to another <see cref="Entropy{T}" /> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A <see cref="Entropy{T}" /> with the specified unit.</returns>
        public Entropy<T> ToUnit(EntropyUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Entropy<T>(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is EntropyUnit unitAsEntropyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(EntropyUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsEntropyUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Entropy<T> ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<EntropyUnit> IQuantity<EntropyUnit>.ToUnit(EntropyUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantityT<EntropyUnit, T> IQuantityT<EntropyUnit, T>.ToUnit(EntropyUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<EntropyUnit> IQuantity<EntropyUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantityT<EntropyUnit, T> IQuantityT<EntropyUnit, T>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private T GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case EntropyUnit.CaloriePerKelvin: return Value*4.184;
                case EntropyUnit.JoulePerDegreeCelsius: return Value;
                case EntropyUnit.JoulePerKelvin: return Value;
                case EntropyUnit.KilocaloriePerKelvin: return (Value*4.184) * 1e3d;
                case EntropyUnit.KilojoulePerDegreeCelsius: return (Value) * 1e3d;
                case EntropyUnit.KilojoulePerKelvin: return (Value) * 1e3d;
                case EntropyUnit.MegajoulePerKelvin: return (Value) * 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal Entropy<T> ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new Entropy<T>(baseUnitValue, BaseUnit);
        }

        private T GetValueAs(EntropyUnit unit)
        {
            if(Unit == unit)
                return Value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case EntropyUnit.CaloriePerKelvin: return baseUnitValue/4.184;
                case EntropyUnit.JoulePerDegreeCelsius: return baseUnitValue;
                case EntropyUnit.JoulePerKelvin: return baseUnitValue;
                case EntropyUnit.KilocaloriePerKelvin: return (baseUnitValue/4.184) / 1e3d;
                case EntropyUnit.KilojoulePerDegreeCelsius: return (baseUnitValue) / 1e3d;
                case EntropyUnit.KilojoulePerKelvin: return (baseUnitValue) / 1e3d;
                case EntropyUnit.MegajoulePerKelvin: return (baseUnitValue) / 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<EntropyUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Entropy<T>)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(Value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Entropy<T>)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Entropy<T>)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(Value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(Value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(Value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(Value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(Value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(Value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(Value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Entropy<T>))
                return this;
            else if(conversionType == typeof(EntropyUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Entropy<T>.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return Entropy<T>.Info;
            else if(conversionType == typeof(BaseDimensions))
                return Entropy<T>.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Entropy<T>)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(Value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(Value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(Value);
        }

        #endregion
    }
}
