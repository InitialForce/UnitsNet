//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In chemistry, the molar mass M is a physical property defined as the mass of a given substance (chemical element or chemical compound) divided by the amount of substance.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class MolarMass
#else
    public partial struct MolarMass : IComparable, IComparable<MolarMass>
#endif
    {
        /// <summary>
        ///     Base unit of MolarMass.
        /// </summary>
        private readonly double _kilogramsPerMoles;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public MolarMass() : this(0)
        {
        }
#endif

        public MolarMass(double kilogramspermoles)
        {
            _kilogramsPerMoles = Convert.ToDouble(kilogramspermoles);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        MolarMass(long kilogramspermoles)
        {
            _kilogramsPerMoles = Convert.ToDouble(kilogramspermoles);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        MolarMass(decimal kilogramspermoles)
        {
            _kilogramsPerMoles = Convert.ToDouble(kilogramspermoles);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.MolarMass;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static MolarMassUnit BaseUnit
        {
            get { return MolarMassUnit.KilogramPerMole; }
        }

        /// <summary>
        ///     All units of measurement for the MolarMass quantity.
        /// </summary>
        public static MolarMassUnit[] Units { get; } = Enum.GetValues(typeof(MolarMassUnit)).Cast<MolarMassUnit>().ToArray();

        /// <summary>
        ///     Get MolarMass in CentigramsPerMoles.
        /// </summary>
        public double CentigramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e-2d; }
        }

        /// <summary>
        ///     Get MolarMass in DecagramsPerMoles.
        /// </summary>
        public double DecagramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e1d; }
        }

        /// <summary>
        ///     Get MolarMass in DecigramsPerMoles.
        /// </summary>
        public double DecigramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e-1d; }
        }

        /// <summary>
        ///     Get MolarMass in GramsPerMoles.
        /// </summary>
        public double GramsPerMoles
        {
            get { return _kilogramsPerMoles*1e3; }
        }

        /// <summary>
        ///     Get MolarMass in HectogramsPerMoles.
        /// </summary>
        public double HectogramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e2d; }
        }

        /// <summary>
        ///     Get MolarMass in KilogramsPerMoles.
        /// </summary>
        public double KilogramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e3d; }
        }

        /// <summary>
        ///     Get MolarMass in KilopoundsPerMoles.
        /// </summary>
        public double KilopoundsPerMoles
        {
            get { return (_kilogramsPerMoles/0.45359237) / 1e3d; }
        }

        /// <summary>
        ///     Get MolarMass in MegapoundsPerMoles.
        /// </summary>
        public double MegapoundsPerMoles
        {
            get { return (_kilogramsPerMoles/0.45359237) / 1e6d; }
        }

        /// <summary>
        ///     Get MolarMass in MicrogramsPerMoles.
        /// </summary>
        public double MicrogramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e-6d; }
        }

        /// <summary>
        ///     Get MolarMass in MilligramsPerMoles.
        /// </summary>
        public double MilligramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e-3d; }
        }

        /// <summary>
        ///     Get MolarMass in NanogramsPerMoles.
        /// </summary>
        public double NanogramsPerMoles
        {
            get { return (_kilogramsPerMoles*1e3) / 1e-9d; }
        }

        /// <summary>
        ///     Get MolarMass in PoundsPerMoles.
        /// </summary>
        public double PoundsPerMoles
        {
            get { return _kilogramsPerMoles/0.45359237; }
        }

        #endregion

        #region Static

        public static MolarMass Zero
        {
            get { return new MolarMass(); }
        }

        /// <summary>
        ///     Get MolarMass from CentigramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromCentigramsPerMoles(double centigramspermoles)
        {
            return new MolarMass((centigramspermoles/1e3) * 1e-2d);
        }

        /// <summary>
        ///     Get MolarMass from CentigramsPerMoles.
        /// </summary>
        public static MolarMass FromCentigramsPerMoles(int centigramspermoles)
        {
            return new MolarMass((centigramspermoles/1e3) * 1e-2d);
        }

        /// <summary>
        ///     Get MolarMass from CentigramsPerMoles.
        /// </summary>
        public static MolarMass FromCentigramsPerMoles(long centigramspermoles)
        {
            return new MolarMass((centigramspermoles/1e3) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from CentigramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromCentigramsPerMoles(decimal centigramspermoles)
        {
            return new MolarMass((Convert.ToDouble(centigramspermoles)/1e3) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from DecagramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromDecagramsPerMoles(double decagramspermoles)
        {
            return new MolarMass((decagramspermoles/1e3) * 1e1d);
        }

        /// <summary>
        ///     Get MolarMass from DecagramsPerMoles.
        /// </summary>
        public static MolarMass FromDecagramsPerMoles(int decagramspermoles)
        {
            return new MolarMass((decagramspermoles/1e3) * 1e1d);
        }

        /// <summary>
        ///     Get MolarMass from DecagramsPerMoles.
        /// </summary>
        public static MolarMass FromDecagramsPerMoles(long decagramspermoles)
        {
            return new MolarMass((decagramspermoles/1e3) * 1e1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from DecagramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromDecagramsPerMoles(decimal decagramspermoles)
        {
            return new MolarMass((Convert.ToDouble(decagramspermoles)/1e3) * 1e1d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from DecigramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromDecigramsPerMoles(double decigramspermoles)
        {
            return new MolarMass((decigramspermoles/1e3) * 1e-1d);
        }

        /// <summary>
        ///     Get MolarMass from DecigramsPerMoles.
        /// </summary>
        public static MolarMass FromDecigramsPerMoles(int decigramspermoles)
        {
            return new MolarMass((decigramspermoles/1e3) * 1e-1d);
        }

        /// <summary>
        ///     Get MolarMass from DecigramsPerMoles.
        /// </summary>
        public static MolarMass FromDecigramsPerMoles(long decigramspermoles)
        {
            return new MolarMass((decigramspermoles/1e3) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from DecigramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromDecigramsPerMoles(decimal decigramspermoles)
        {
            return new MolarMass((Convert.ToDouble(decigramspermoles)/1e3) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from GramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromGramsPerMoles(double gramspermoles)
        {
            return new MolarMass(gramspermoles/1e3);
        }

        /// <summary>
        ///     Get MolarMass from GramsPerMoles.
        /// </summary>
        public static MolarMass FromGramsPerMoles(int gramspermoles)
        {
            return new MolarMass(gramspermoles/1e3);
        }

        /// <summary>
        ///     Get MolarMass from GramsPerMoles.
        /// </summary>
        public static MolarMass FromGramsPerMoles(long gramspermoles)
        {
            return new MolarMass(gramspermoles/1e3);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from GramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromGramsPerMoles(decimal gramspermoles)
        {
            return new MolarMass(Convert.ToDouble(gramspermoles)/1e3);
        }
#endif

        /// <summary>
        ///     Get MolarMass from HectogramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromHectogramsPerMoles(double hectogramspermoles)
        {
            return new MolarMass((hectogramspermoles/1e3) * 1e2d);
        }

        /// <summary>
        ///     Get MolarMass from HectogramsPerMoles.
        /// </summary>
        public static MolarMass FromHectogramsPerMoles(int hectogramspermoles)
        {
            return new MolarMass((hectogramspermoles/1e3) * 1e2d);
        }

        /// <summary>
        ///     Get MolarMass from HectogramsPerMoles.
        /// </summary>
        public static MolarMass FromHectogramsPerMoles(long hectogramspermoles)
        {
            return new MolarMass((hectogramspermoles/1e3) * 1e2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from HectogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromHectogramsPerMoles(decimal hectogramspermoles)
        {
            return new MolarMass((Convert.ToDouble(hectogramspermoles)/1e3) * 1e2d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from KilogramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromKilogramsPerMoles(double kilogramspermoles)
        {
            return new MolarMass((kilogramspermoles/1e3) * 1e3d);
        }

        /// <summary>
        ///     Get MolarMass from KilogramsPerMoles.
        /// </summary>
        public static MolarMass FromKilogramsPerMoles(int kilogramspermoles)
        {
            return new MolarMass((kilogramspermoles/1e3) * 1e3d);
        }

        /// <summary>
        ///     Get MolarMass from KilogramsPerMoles.
        /// </summary>
        public static MolarMass FromKilogramsPerMoles(long kilogramspermoles)
        {
            return new MolarMass((kilogramspermoles/1e3) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from KilogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromKilogramsPerMoles(decimal kilogramspermoles)
        {
            return new MolarMass((Convert.ToDouble(kilogramspermoles)/1e3) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from KilopoundsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromKilopoundsPerMoles(double kilopoundspermoles)
        {
            return new MolarMass((kilopoundspermoles*0.45359237) * 1e3d);
        }

        /// <summary>
        ///     Get MolarMass from KilopoundsPerMoles.
        /// </summary>
        public static MolarMass FromKilopoundsPerMoles(int kilopoundspermoles)
        {
            return new MolarMass((kilopoundspermoles*0.45359237) * 1e3d);
        }

        /// <summary>
        ///     Get MolarMass from KilopoundsPerMoles.
        /// </summary>
        public static MolarMass FromKilopoundsPerMoles(long kilopoundspermoles)
        {
            return new MolarMass((kilopoundspermoles*0.45359237) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from KilopoundsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromKilopoundsPerMoles(decimal kilopoundspermoles)
        {
            return new MolarMass((Convert.ToDouble(kilopoundspermoles)*0.45359237) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from MegapoundsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromMegapoundsPerMoles(double megapoundspermoles)
        {
            return new MolarMass((megapoundspermoles*0.45359237) * 1e6d);
        }

        /// <summary>
        ///     Get MolarMass from MegapoundsPerMoles.
        /// </summary>
        public static MolarMass FromMegapoundsPerMoles(int megapoundspermoles)
        {
            return new MolarMass((megapoundspermoles*0.45359237) * 1e6d);
        }

        /// <summary>
        ///     Get MolarMass from MegapoundsPerMoles.
        /// </summary>
        public static MolarMass FromMegapoundsPerMoles(long megapoundspermoles)
        {
            return new MolarMass((megapoundspermoles*0.45359237) * 1e6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from MegapoundsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromMegapoundsPerMoles(decimal megapoundspermoles)
        {
            return new MolarMass((Convert.ToDouble(megapoundspermoles)*0.45359237) * 1e6d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from MicrogramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromMicrogramsPerMoles(double microgramspermoles)
        {
            return new MolarMass((microgramspermoles/1e3) * 1e-6d);
        }

        /// <summary>
        ///     Get MolarMass from MicrogramsPerMoles.
        /// </summary>
        public static MolarMass FromMicrogramsPerMoles(int microgramspermoles)
        {
            return new MolarMass((microgramspermoles/1e3) * 1e-6d);
        }

        /// <summary>
        ///     Get MolarMass from MicrogramsPerMoles.
        /// </summary>
        public static MolarMass FromMicrogramsPerMoles(long microgramspermoles)
        {
            return new MolarMass((microgramspermoles/1e3) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from MicrogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromMicrogramsPerMoles(decimal microgramspermoles)
        {
            return new MolarMass((Convert.ToDouble(microgramspermoles)/1e3) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from MilligramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromMilligramsPerMoles(double milligramspermoles)
        {
            return new MolarMass((milligramspermoles/1e3) * 1e-3d);
        }

        /// <summary>
        ///     Get MolarMass from MilligramsPerMoles.
        /// </summary>
        public static MolarMass FromMilligramsPerMoles(int milligramspermoles)
        {
            return new MolarMass((milligramspermoles/1e3) * 1e-3d);
        }

        /// <summary>
        ///     Get MolarMass from MilligramsPerMoles.
        /// </summary>
        public static MolarMass FromMilligramsPerMoles(long milligramspermoles)
        {
            return new MolarMass((milligramspermoles/1e3) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from MilligramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromMilligramsPerMoles(decimal milligramspermoles)
        {
            return new MolarMass((Convert.ToDouble(milligramspermoles)/1e3) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from NanogramsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromNanogramsPerMoles(double nanogramspermoles)
        {
            return new MolarMass((nanogramspermoles/1e3) * 1e-9d);
        }

        /// <summary>
        ///     Get MolarMass from NanogramsPerMoles.
        /// </summary>
        public static MolarMass FromNanogramsPerMoles(int nanogramspermoles)
        {
            return new MolarMass((nanogramspermoles/1e3) * 1e-9d);
        }

        /// <summary>
        ///     Get MolarMass from NanogramsPerMoles.
        /// </summary>
        public static MolarMass FromNanogramsPerMoles(long nanogramspermoles)
        {
            return new MolarMass((nanogramspermoles/1e3) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from NanogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromNanogramsPerMoles(decimal nanogramspermoles)
        {
            return new MolarMass((Convert.ToDouble(nanogramspermoles)/1e3) * 1e-9d);
        }
#endif

        /// <summary>
        ///     Get MolarMass from PoundsPerMoles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static MolarMass FromPoundsPerMoles(double poundspermoles)
        {
            return new MolarMass(poundspermoles*0.45359237);
        }

        /// <summary>
        ///     Get MolarMass from PoundsPerMoles.
        /// </summary>
        public static MolarMass FromPoundsPerMoles(int poundspermoles)
        {
            return new MolarMass(poundspermoles*0.45359237);
        }

        /// <summary>
        ///     Get MolarMass from PoundsPerMoles.
        /// </summary>
        public static MolarMass FromPoundsPerMoles(long poundspermoles)
        {
            return new MolarMass(poundspermoles*0.45359237);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get MolarMass from PoundsPerMoles of type decimal.
        /// </summary>
        public static MolarMass FromPoundsPerMoles(decimal poundspermoles)
        {
            return new MolarMass(Convert.ToDouble(poundspermoles)*0.45359237);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable MolarMass from nullable CentigramsPerMoles.
        /// </summary>
        public static MolarMass? FromCentigramsPerMoles(double? centigramspermoles)
        {
            if (centigramspermoles.HasValue)
            {
                return FromCentigramsPerMoles(centigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable CentigramsPerMoles.
        /// </summary>
        public static MolarMass? FromCentigramsPerMoles(int? centigramspermoles)
        {
            if (centigramspermoles.HasValue)
            {
                return FromCentigramsPerMoles(centigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable CentigramsPerMoles.
        /// </summary>
        public static MolarMass? FromCentigramsPerMoles(long? centigramspermoles)
        {
            if (centigramspermoles.HasValue)
            {
                return FromCentigramsPerMoles(centigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from CentigramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromCentigramsPerMoles(decimal? centigramspermoles)
        {
            if (centigramspermoles.HasValue)
            {
                return FromCentigramsPerMoles(centigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecagramsPerMoles.
        /// </summary>
        public static MolarMass? FromDecagramsPerMoles(double? decagramspermoles)
        {
            if (decagramspermoles.HasValue)
            {
                return FromDecagramsPerMoles(decagramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecagramsPerMoles.
        /// </summary>
        public static MolarMass? FromDecagramsPerMoles(int? decagramspermoles)
        {
            if (decagramspermoles.HasValue)
            {
                return FromDecagramsPerMoles(decagramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecagramsPerMoles.
        /// </summary>
        public static MolarMass? FromDecagramsPerMoles(long? decagramspermoles)
        {
            if (decagramspermoles.HasValue)
            {
                return FromDecagramsPerMoles(decagramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from DecagramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromDecagramsPerMoles(decimal? decagramspermoles)
        {
            if (decagramspermoles.HasValue)
            {
                return FromDecagramsPerMoles(decagramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecigramsPerMoles.
        /// </summary>
        public static MolarMass? FromDecigramsPerMoles(double? decigramspermoles)
        {
            if (decigramspermoles.HasValue)
            {
                return FromDecigramsPerMoles(decigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecigramsPerMoles.
        /// </summary>
        public static MolarMass? FromDecigramsPerMoles(int? decigramspermoles)
        {
            if (decigramspermoles.HasValue)
            {
                return FromDecigramsPerMoles(decigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecigramsPerMoles.
        /// </summary>
        public static MolarMass? FromDecigramsPerMoles(long? decigramspermoles)
        {
            if (decigramspermoles.HasValue)
            {
                return FromDecigramsPerMoles(decigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from DecigramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromDecigramsPerMoles(decimal? decigramspermoles)
        {
            if (decigramspermoles.HasValue)
            {
                return FromDecigramsPerMoles(decigramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable GramsPerMoles.
        /// </summary>
        public static MolarMass? FromGramsPerMoles(double? gramspermoles)
        {
            if (gramspermoles.HasValue)
            {
                return FromGramsPerMoles(gramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable GramsPerMoles.
        /// </summary>
        public static MolarMass? FromGramsPerMoles(int? gramspermoles)
        {
            if (gramspermoles.HasValue)
            {
                return FromGramsPerMoles(gramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable GramsPerMoles.
        /// </summary>
        public static MolarMass? FromGramsPerMoles(long? gramspermoles)
        {
            if (gramspermoles.HasValue)
            {
                return FromGramsPerMoles(gramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from GramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromGramsPerMoles(decimal? gramspermoles)
        {
            if (gramspermoles.HasValue)
            {
                return FromGramsPerMoles(gramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable HectogramsPerMoles.
        /// </summary>
        public static MolarMass? FromHectogramsPerMoles(double? hectogramspermoles)
        {
            if (hectogramspermoles.HasValue)
            {
                return FromHectogramsPerMoles(hectogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable HectogramsPerMoles.
        /// </summary>
        public static MolarMass? FromHectogramsPerMoles(int? hectogramspermoles)
        {
            if (hectogramspermoles.HasValue)
            {
                return FromHectogramsPerMoles(hectogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable HectogramsPerMoles.
        /// </summary>
        public static MolarMass? FromHectogramsPerMoles(long? hectogramspermoles)
        {
            if (hectogramspermoles.HasValue)
            {
                return FromHectogramsPerMoles(hectogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from HectogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromHectogramsPerMoles(decimal? hectogramspermoles)
        {
            if (hectogramspermoles.HasValue)
            {
                return FromHectogramsPerMoles(hectogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilogramsPerMoles.
        /// </summary>
        public static MolarMass? FromKilogramsPerMoles(double? kilogramspermoles)
        {
            if (kilogramspermoles.HasValue)
            {
                return FromKilogramsPerMoles(kilogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilogramsPerMoles.
        /// </summary>
        public static MolarMass? FromKilogramsPerMoles(int? kilogramspermoles)
        {
            if (kilogramspermoles.HasValue)
            {
                return FromKilogramsPerMoles(kilogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilogramsPerMoles.
        /// </summary>
        public static MolarMass? FromKilogramsPerMoles(long? kilogramspermoles)
        {
            if (kilogramspermoles.HasValue)
            {
                return FromKilogramsPerMoles(kilogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from KilogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromKilogramsPerMoles(decimal? kilogramspermoles)
        {
            if (kilogramspermoles.HasValue)
            {
                return FromKilogramsPerMoles(kilogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilopoundsPerMoles.
        /// </summary>
        public static MolarMass? FromKilopoundsPerMoles(double? kilopoundspermoles)
        {
            if (kilopoundspermoles.HasValue)
            {
                return FromKilopoundsPerMoles(kilopoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilopoundsPerMoles.
        /// </summary>
        public static MolarMass? FromKilopoundsPerMoles(int? kilopoundspermoles)
        {
            if (kilopoundspermoles.HasValue)
            {
                return FromKilopoundsPerMoles(kilopoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilopoundsPerMoles.
        /// </summary>
        public static MolarMass? FromKilopoundsPerMoles(long? kilopoundspermoles)
        {
            if (kilopoundspermoles.HasValue)
            {
                return FromKilopoundsPerMoles(kilopoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from KilopoundsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromKilopoundsPerMoles(decimal? kilopoundspermoles)
        {
            if (kilopoundspermoles.HasValue)
            {
                return FromKilopoundsPerMoles(kilopoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MegapoundsPerMoles.
        /// </summary>
        public static MolarMass? FromMegapoundsPerMoles(double? megapoundspermoles)
        {
            if (megapoundspermoles.HasValue)
            {
                return FromMegapoundsPerMoles(megapoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MegapoundsPerMoles.
        /// </summary>
        public static MolarMass? FromMegapoundsPerMoles(int? megapoundspermoles)
        {
            if (megapoundspermoles.HasValue)
            {
                return FromMegapoundsPerMoles(megapoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MegapoundsPerMoles.
        /// </summary>
        public static MolarMass? FromMegapoundsPerMoles(long? megapoundspermoles)
        {
            if (megapoundspermoles.HasValue)
            {
                return FromMegapoundsPerMoles(megapoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from MegapoundsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromMegapoundsPerMoles(decimal? megapoundspermoles)
        {
            if (megapoundspermoles.HasValue)
            {
                return FromMegapoundsPerMoles(megapoundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MicrogramsPerMoles.
        /// </summary>
        public static MolarMass? FromMicrogramsPerMoles(double? microgramspermoles)
        {
            if (microgramspermoles.HasValue)
            {
                return FromMicrogramsPerMoles(microgramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MicrogramsPerMoles.
        /// </summary>
        public static MolarMass? FromMicrogramsPerMoles(int? microgramspermoles)
        {
            if (microgramspermoles.HasValue)
            {
                return FromMicrogramsPerMoles(microgramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MicrogramsPerMoles.
        /// </summary>
        public static MolarMass? FromMicrogramsPerMoles(long? microgramspermoles)
        {
            if (microgramspermoles.HasValue)
            {
                return FromMicrogramsPerMoles(microgramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from MicrogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromMicrogramsPerMoles(decimal? microgramspermoles)
        {
            if (microgramspermoles.HasValue)
            {
                return FromMicrogramsPerMoles(microgramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MilligramsPerMoles.
        /// </summary>
        public static MolarMass? FromMilligramsPerMoles(double? milligramspermoles)
        {
            if (milligramspermoles.HasValue)
            {
                return FromMilligramsPerMoles(milligramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MilligramsPerMoles.
        /// </summary>
        public static MolarMass? FromMilligramsPerMoles(int? milligramspermoles)
        {
            if (milligramspermoles.HasValue)
            {
                return FromMilligramsPerMoles(milligramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MilligramsPerMoles.
        /// </summary>
        public static MolarMass? FromMilligramsPerMoles(long? milligramspermoles)
        {
            if (milligramspermoles.HasValue)
            {
                return FromMilligramsPerMoles(milligramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from MilligramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromMilligramsPerMoles(decimal? milligramspermoles)
        {
            if (milligramspermoles.HasValue)
            {
                return FromMilligramsPerMoles(milligramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable NanogramsPerMoles.
        /// </summary>
        public static MolarMass? FromNanogramsPerMoles(double? nanogramspermoles)
        {
            if (nanogramspermoles.HasValue)
            {
                return FromNanogramsPerMoles(nanogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable NanogramsPerMoles.
        /// </summary>
        public static MolarMass? FromNanogramsPerMoles(int? nanogramspermoles)
        {
            if (nanogramspermoles.HasValue)
            {
                return FromNanogramsPerMoles(nanogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable NanogramsPerMoles.
        /// </summary>
        public static MolarMass? FromNanogramsPerMoles(long? nanogramspermoles)
        {
            if (nanogramspermoles.HasValue)
            {
                return FromNanogramsPerMoles(nanogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from NanogramsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromNanogramsPerMoles(decimal? nanogramspermoles)
        {
            if (nanogramspermoles.HasValue)
            {
                return FromNanogramsPerMoles(nanogramspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable PoundsPerMoles.
        /// </summary>
        public static MolarMass? FromPoundsPerMoles(double? poundspermoles)
        {
            if (poundspermoles.HasValue)
            {
                return FromPoundsPerMoles(poundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable PoundsPerMoles.
        /// </summary>
        public static MolarMass? FromPoundsPerMoles(int? poundspermoles)
        {
            if (poundspermoles.HasValue)
            {
                return FromPoundsPerMoles(poundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable PoundsPerMoles.
        /// </summary>
        public static MolarMass? FromPoundsPerMoles(long? poundspermoles)
        {
            if (poundspermoles.HasValue)
            {
                return FromPoundsPerMoles(poundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MolarMass from PoundsPerMoles of type decimal.
        /// </summary>
        public static MolarMass? FromPoundsPerMoles(decimal? poundspermoles)
        {
            if (poundspermoles.HasValue)
            {
                return FromPoundsPerMoles(poundspermoles.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarMassUnit" /> to <see cref="MolarMass" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarMass unit value.</returns>
        public static MolarMass From(double val, MolarMassUnit fromUnit)
        {
            switch (fromUnit)
            {
                case MolarMassUnit.CentigramPerMole:
                    return FromCentigramsPerMoles(val);
                case MolarMassUnit.DecagramPerMole:
                    return FromDecagramsPerMoles(val);
                case MolarMassUnit.DecigramPerMole:
                    return FromDecigramsPerMoles(val);
                case MolarMassUnit.GramPerMole:
                    return FromGramsPerMoles(val);
                case MolarMassUnit.HectogramPerMole:
                    return FromHectogramsPerMoles(val);
                case MolarMassUnit.KilogramPerMole:
                    return FromKilogramsPerMoles(val);
                case MolarMassUnit.KilopoundPerMole:
                    return FromKilopoundsPerMoles(val);
                case MolarMassUnit.MegapoundPerMole:
                    return FromMegapoundsPerMoles(val);
                case MolarMassUnit.MicrogramPerMole:
                    return FromMicrogramsPerMoles(val);
                case MolarMassUnit.MilligramPerMole:
                    return FromMilligramsPerMoles(val);
                case MolarMassUnit.NanogramPerMole:
                    return FromNanogramsPerMoles(val);
                case MolarMassUnit.PoundPerMole:
                    return FromPoundsPerMoles(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarMassUnit" /> to <see cref="MolarMass" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarMass unit value.</returns>
        public static MolarMass? From(double? value, MolarMassUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case MolarMassUnit.CentigramPerMole:
                    return FromCentigramsPerMoles(value.Value);
                case MolarMassUnit.DecagramPerMole:
                    return FromDecagramsPerMoles(value.Value);
                case MolarMassUnit.DecigramPerMole:
                    return FromDecigramsPerMoles(value.Value);
                case MolarMassUnit.GramPerMole:
                    return FromGramsPerMoles(value.Value);
                case MolarMassUnit.HectogramPerMole:
                    return FromHectogramsPerMoles(value.Value);
                case MolarMassUnit.KilogramPerMole:
                    return FromKilogramsPerMoles(value.Value);
                case MolarMassUnit.KilopoundPerMole:
                    return FromKilopoundsPerMoles(value.Value);
                case MolarMassUnit.MegapoundPerMole:
                    return FromMegapoundsPerMoles(value.Value);
                case MolarMassUnit.MicrogramPerMole:
                    return FromMicrogramsPerMoles(value.Value);
                case MolarMassUnit.MilligramPerMole:
                    return FromMilligramsPerMoles(value.Value);
                case MolarMassUnit.NanogramPerMole:
                    return FromNanogramsPerMoles(value.Value);
                case MolarMassUnit.PoundPerMole:
                    return FromPoundsPerMoles(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(MolarMassUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(MolarMassUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static MolarMass operator -(MolarMass right)
        {
            return new MolarMass(-right._kilogramsPerMoles);
        }

        public static MolarMass operator +(MolarMass left, MolarMass right)
        {
            return new MolarMass(left._kilogramsPerMoles + right._kilogramsPerMoles);
        }

        public static MolarMass operator -(MolarMass left, MolarMass right)
        {
            return new MolarMass(left._kilogramsPerMoles - right._kilogramsPerMoles);
        }

        public static MolarMass operator *(double left, MolarMass right)
        {
            return new MolarMass(left*right._kilogramsPerMoles);
        }

        public static MolarMass operator *(MolarMass left, double right)
        {
            return new MolarMass(left._kilogramsPerMoles*(double)right);
        }

        public static MolarMass operator /(MolarMass left, double right)
        {
            return new MolarMass(left._kilogramsPerMoles/(double)right);
        }

        public static double operator /(MolarMass left, MolarMass right)
        {
            return Convert.ToDouble(left._kilogramsPerMoles/right._kilogramsPerMoles);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is MolarMass)) throw new ArgumentException("Expected type MolarMass.", "obj");
            return CompareTo((MolarMass) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(MolarMass other)
        {
            return _kilogramsPerMoles.CompareTo(other._kilogramsPerMoles);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(MolarMass left, MolarMass right)
        {
            return left._kilogramsPerMoles <= right._kilogramsPerMoles;
        }

        public static bool operator >=(MolarMass left, MolarMass right)
        {
            return left._kilogramsPerMoles >= right._kilogramsPerMoles;
        }

        public static bool operator <(MolarMass left, MolarMass right)
        {
            return left._kilogramsPerMoles < right._kilogramsPerMoles;
        }

        public static bool operator >(MolarMass left, MolarMass right)
        {
            return left._kilogramsPerMoles > right._kilogramsPerMoles;
        }

        public static bool operator ==(MolarMass left, MolarMass right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._kilogramsPerMoles == right._kilogramsPerMoles;
        }

        public static bool operator !=(MolarMass left, MolarMass right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._kilogramsPerMoles != right._kilogramsPerMoles;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _kilogramsPerMoles.Equals(((MolarMass) obj)._kilogramsPerMoles);
        }

        public override int GetHashCode()
        {
            return _kilogramsPerMoles.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(MolarMassUnit unit)
        {
            switch (unit)
            {
                case MolarMassUnit.CentigramPerMole:
                    return CentigramsPerMoles;
                case MolarMassUnit.DecagramPerMole:
                    return DecagramsPerMoles;
                case MolarMassUnit.DecigramPerMole:
                    return DecigramsPerMoles;
                case MolarMassUnit.GramPerMole:
                    return GramsPerMoles;
                case MolarMassUnit.HectogramPerMole:
                    return HectogramsPerMoles;
                case MolarMassUnit.KilogramPerMole:
                    return KilogramsPerMoles;
                case MolarMassUnit.KilopoundPerMole:
                    return KilopoundsPerMoles;
                case MolarMassUnit.MegapoundPerMole:
                    return MegapoundsPerMoles;
                case MolarMassUnit.MicrogramPerMole:
                    return MicrogramsPerMoles;
                case MolarMassUnit.MilligramPerMole:
                    return MilligramsPerMoles;
                case MolarMassUnit.NanogramPerMole:
                    return NanogramsPerMoles;
                case MolarMassUnit.PoundPerMole:
                    return PoundsPerMoles;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MolarMass Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MolarMass Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<MolarMass, MolarMassUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    MolarMassUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromKilogramsPerMoles(x.KilogramsPerMoles + y.KilogramsPerMoles));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MolarMass result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out MolarMass result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(MolarMass);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MolarMassUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MolarMassUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static MolarMassUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<MolarMassUnit>(str.Trim());

            if (unit == MolarMassUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized MolarMassUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is KilogramPerMole
        /// </summary>
        public static MolarMassUnit ToStringDefaultUnit { get; set; } = MolarMassUnit.KilogramPerMole;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(MolarMassUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(MolarMassUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(MolarMassUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(MolarMassUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of MolarMass
        /// </summary>
        public static MolarMass MaxValue
        {
            get
            {
                return new MolarMass(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of MolarMass
        /// </summary>
        public static MolarMass MinValue
        {
            get
            {
                return new MolarMass(double.MinValue);
            }
        }
    }
}
