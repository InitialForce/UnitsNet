//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In geometry, an angle is the figure formed by two rays, called the sides of the angle, sharing a common endpoint, called the vertex of the angle.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Angle
#else
    public partial struct Angle : IComparable, IComparable<Angle>
#endif
    {
        /// <summary>
        ///     Base unit of Angle.
        /// </summary>
        private readonly double _degrees;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Angle() : this(0)
        {
        }
#endif

        public Angle(double degrees)
        {
            _degrees = Convert.ToDouble(degrees);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        Angle(long degrees)
        {
            _degrees = Convert.ToDouble(degrees);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        Angle(decimal degrees)
        {
            _degrees = Convert.ToDouble(degrees);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Angle;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static AngleUnit BaseUnit
        {
            get { return AngleUnit.Degree; }
        }

        /// <summary>
        ///     All units of measurement for the Angle quantity.
        /// </summary>
        public static AngleUnit[] Units { get; } = Enum.GetValues(typeof(AngleUnit)).Cast<AngleUnit>().ToArray();

        /// <summary>
        ///     Get Angle in Arcminutes.
        /// </summary>
        public double Arcminutes
        {
            get { return _degrees*60; }
        }

        /// <summary>
        ///     Get Angle in Arcseconds.
        /// </summary>
        public double Arcseconds
        {
            get { return _degrees*3600; }
        }

        /// <summary>
        ///     Get Angle in Centiradians.
        /// </summary>
        public double Centiradians
        {
            get { return (_degrees/180*Math.PI) / 1e-2d; }
        }

        /// <summary>
        ///     Get Angle in Deciradians.
        /// </summary>
        public double Deciradians
        {
            get { return (_degrees/180*Math.PI) / 1e-1d; }
        }

        /// <summary>
        ///     Get Angle in Degrees.
        /// </summary>
        public double Degrees
        {
            get { return _degrees; }
        }

        /// <summary>
        ///     Get Angle in Gradians.
        /// </summary>
        public double Gradians
        {
            get { return _degrees/0.9; }
        }

        /// <summary>
        ///     Get Angle in Microdegrees.
        /// </summary>
        public double Microdegrees
        {
            get { return (_degrees) / 1e-6d; }
        }

        /// <summary>
        ///     Get Angle in Microradians.
        /// </summary>
        public double Microradians
        {
            get { return (_degrees/180*Math.PI) / 1e-6d; }
        }

        /// <summary>
        ///     Get Angle in Millidegrees.
        /// </summary>
        public double Millidegrees
        {
            get { return (_degrees) / 1e-3d; }
        }

        /// <summary>
        ///     Get Angle in Milliradians.
        /// </summary>
        public double Milliradians
        {
            get { return (_degrees/180*Math.PI) / 1e-3d; }
        }

        /// <summary>
        ///     Get Angle in Nanodegrees.
        /// </summary>
        public double Nanodegrees
        {
            get { return (_degrees) / 1e-9d; }
        }

        /// <summary>
        ///     Get Angle in Nanoradians.
        /// </summary>
        public double Nanoradians
        {
            get { return (_degrees/180*Math.PI) / 1e-9d; }
        }

        /// <summary>
        ///     Get Angle in Radians.
        /// </summary>
        public double Radians
        {
            get { return _degrees/180*Math.PI; }
        }

        #endregion

        #region Static

        public static Angle Zero
        {
            get { return new Angle(); }
        }

        /// <summary>
        ///     Get Angle from Arcminutes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromArcminutes(double arcminutes)
        {
            double value = (double) arcminutes;
            return new Angle(value/60);
        }
#else
        public static Angle FromArcminutes(QuantityValue arcminutes)
        {
            double value = (double) arcminutes;
            return new Angle((value/60));
        }
#endif

        /// <summary>
        ///     Get Angle from Arcseconds.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromArcseconds(double arcseconds)
        {
            double value = (double) arcseconds;
            return new Angle(value/3600);
        }
#else
        public static Angle FromArcseconds(QuantityValue arcseconds)
        {
            double value = (double) arcseconds;
            return new Angle((value/3600));
        }
#endif

        /// <summary>
        ///     Get Angle from Centiradians.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromCentiradians(double centiradians)
        {
            double value = (double) centiradians;
            return new Angle((value*180/Math.PI) * 1e-2d);
        }
#else
        public static Angle FromCentiradians(QuantityValue centiradians)
        {
            double value = (double) centiradians;
            return new Angle(((value*180/Math.PI) * 1e-2d));
        }
#endif

        /// <summary>
        ///     Get Angle from Deciradians.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromDeciradians(double deciradians)
        {
            double value = (double) deciradians;
            return new Angle((value*180/Math.PI) * 1e-1d);
        }
#else
        public static Angle FromDeciradians(QuantityValue deciradians)
        {
            double value = (double) deciradians;
            return new Angle(((value*180/Math.PI) * 1e-1d));
        }
#endif

        /// <summary>
        ///     Get Angle from Degrees.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromDegrees(double degrees)
        {
            double value = (double) degrees;
            return new Angle(value);
        }
#else
        public static Angle FromDegrees(QuantityValue degrees)
        {
            double value = (double) degrees;
            return new Angle((value));
        }
#endif

        /// <summary>
        ///     Get Angle from Gradians.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromGradians(double gradians)
        {
            double value = (double) gradians;
            return new Angle(value*0.9);
        }
#else
        public static Angle FromGradians(QuantityValue gradians)
        {
            double value = (double) gradians;
            return new Angle((value*0.9));
        }
#endif

        /// <summary>
        ///     Get Angle from Microdegrees.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromMicrodegrees(double microdegrees)
        {
            double value = (double) microdegrees;
            return new Angle((value) * 1e-6d);
        }
#else
        public static Angle FromMicrodegrees(QuantityValue microdegrees)
        {
            double value = (double) microdegrees;
            return new Angle(((value) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get Angle from Microradians.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromMicroradians(double microradians)
        {
            double value = (double) microradians;
            return new Angle((value*180/Math.PI) * 1e-6d);
        }
#else
        public static Angle FromMicroradians(QuantityValue microradians)
        {
            double value = (double) microradians;
            return new Angle(((value*180/Math.PI) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get Angle from Millidegrees.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromMillidegrees(double millidegrees)
        {
            double value = (double) millidegrees;
            return new Angle((value) * 1e-3d);
        }
#else
        public static Angle FromMillidegrees(QuantityValue millidegrees)
        {
            double value = (double) millidegrees;
            return new Angle(((value) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get Angle from Milliradians.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromMilliradians(double milliradians)
        {
            double value = (double) milliradians;
            return new Angle((value*180/Math.PI) * 1e-3d);
        }
#else
        public static Angle FromMilliradians(QuantityValue milliradians)
        {
            double value = (double) milliradians;
            return new Angle(((value*180/Math.PI) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get Angle from Nanodegrees.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromNanodegrees(double nanodegrees)
        {
            double value = (double) nanodegrees;
            return new Angle((value) * 1e-9d);
        }
#else
        public static Angle FromNanodegrees(QuantityValue nanodegrees)
        {
            double value = (double) nanodegrees;
            return new Angle(((value) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get Angle from Nanoradians.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromNanoradians(double nanoradians)
        {
            double value = (double) nanoradians;
            return new Angle((value*180/Math.PI) * 1e-9d);
        }
#else
        public static Angle FromNanoradians(QuantityValue nanoradians)
        {
            double value = (double) nanoradians;
            return new Angle(((value*180/Math.PI) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get Angle from Radians.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Angle FromRadians(double radians)
        {
            double value = (double) radians;
            return new Angle(value*180/Math.PI);
        }
#else
        public static Angle FromRadians(QuantityValue radians)
        {
            double value = (double) radians;
            return new Angle((value*180/Math.PI));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Angle from nullable Arcminutes.
        /// </summary>
        public static Angle? FromArcminutes(QuantityValue? arcminutes)
        {
            if (arcminutes.HasValue)
            {
                return FromArcminutes(arcminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Arcseconds.
        /// </summary>
        public static Angle? FromArcseconds(QuantityValue? arcseconds)
        {
            if (arcseconds.HasValue)
            {
                return FromArcseconds(arcseconds.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Centiradians.
        /// </summary>
        public static Angle? FromCentiradians(QuantityValue? centiradians)
        {
            if (centiradians.HasValue)
            {
                return FromCentiradians(centiradians.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Deciradians.
        /// </summary>
        public static Angle? FromDeciradians(QuantityValue? deciradians)
        {
            if (deciradians.HasValue)
            {
                return FromDeciradians(deciradians.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Degrees.
        /// </summary>
        public static Angle? FromDegrees(QuantityValue? degrees)
        {
            if (degrees.HasValue)
            {
                return FromDegrees(degrees.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Gradians.
        /// </summary>
        public static Angle? FromGradians(QuantityValue? gradians)
        {
            if (gradians.HasValue)
            {
                return FromGradians(gradians.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Microdegrees.
        /// </summary>
        public static Angle? FromMicrodegrees(QuantityValue? microdegrees)
        {
            if (microdegrees.HasValue)
            {
                return FromMicrodegrees(microdegrees.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Microradians.
        /// </summary>
        public static Angle? FromMicroradians(QuantityValue? microradians)
        {
            if (microradians.HasValue)
            {
                return FromMicroradians(microradians.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Millidegrees.
        /// </summary>
        public static Angle? FromMillidegrees(QuantityValue? millidegrees)
        {
            if (millidegrees.HasValue)
            {
                return FromMillidegrees(millidegrees.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Milliradians.
        /// </summary>
        public static Angle? FromMilliradians(QuantityValue? milliradians)
        {
            if (milliradians.HasValue)
            {
                return FromMilliradians(milliradians.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Nanodegrees.
        /// </summary>
        public static Angle? FromNanodegrees(QuantityValue? nanodegrees)
        {
            if (nanodegrees.HasValue)
            {
                return FromNanodegrees(nanodegrees.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Nanoradians.
        /// </summary>
        public static Angle? FromNanoradians(QuantityValue? nanoradians)
        {
            if (nanoradians.HasValue)
            {
                return FromNanoradians(nanoradians.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Angle from nullable Radians.
        /// </summary>
        public static Angle? FromRadians(QuantityValue? radians)
        {
            if (radians.HasValue)
            {
                return FromRadians(radians.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="AngleUnit" /> to <see cref="Angle" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Angle unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Angle From(double value, AngleUnit fromUnit)
#else
        public static Angle From(QuantityValue value, AngleUnit fromUnit)
#endif
        {
            switch (fromUnit)
            {
                case AngleUnit.Arcminute:
                    return FromArcminutes(value);
                case AngleUnit.Arcsecond:
                    return FromArcseconds(value);
                case AngleUnit.Centiradian:
                    return FromCentiradians(value);
                case AngleUnit.Deciradian:
                    return FromDeciradians(value);
                case AngleUnit.Degree:
                    return FromDegrees(value);
                case AngleUnit.Gradian:
                    return FromGradians(value);
                case AngleUnit.Microdegree:
                    return FromMicrodegrees(value);
                case AngleUnit.Microradian:
                    return FromMicroradians(value);
                case AngleUnit.Millidegree:
                    return FromMillidegrees(value);
                case AngleUnit.Milliradian:
                    return FromMilliradians(value);
                case AngleUnit.Nanodegree:
                    return FromNanodegrees(value);
                case AngleUnit.Nanoradian:
                    return FromNanoradians(value);
                case AngleUnit.Radian:
                    return FromRadians(value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="AngleUnit" /> to <see cref="Angle" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Angle unit value.</returns>
        public static Angle? From(QuantityValue? value, AngleUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case AngleUnit.Arcminute:
                    return FromArcminutes(value.Value);
                case AngleUnit.Arcsecond:
                    return FromArcseconds(value.Value);
                case AngleUnit.Centiradian:
                    return FromCentiradians(value.Value);
                case AngleUnit.Deciradian:
                    return FromDeciradians(value.Value);
                case AngleUnit.Degree:
                    return FromDegrees(value.Value);
                case AngleUnit.Gradian:
                    return FromGradians(value.Value);
                case AngleUnit.Microdegree:
                    return FromMicrodegrees(value.Value);
                case AngleUnit.Microradian:
                    return FromMicroradians(value.Value);
                case AngleUnit.Millidegree:
                    return FromMillidegrees(value.Value);
                case AngleUnit.Milliradian:
                    return FromMilliradians(value.Value);
                case AngleUnit.Nanodegree:
                    return FromNanodegrees(value.Value);
                case AngleUnit.Nanoradian:
                    return FromNanoradians(value.Value);
                case AngleUnit.Radian:
                    return FromRadians(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(AngleUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(AngleUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Angle operator -(Angle right)
        {
            return new Angle(-right._degrees);
        }

        public static Angle operator +(Angle left, Angle right)
        {
            return new Angle(left._degrees + right._degrees);
        }

        public static Angle operator -(Angle left, Angle right)
        {
            return new Angle(left._degrees - right._degrees);
        }

        public static Angle operator *(double left, Angle right)
        {
            return new Angle(left*right._degrees);
        }

        public static Angle operator *(Angle left, double right)
        {
            return new Angle(left._degrees*(double)right);
        }

        public static Angle operator /(Angle left, double right)
        {
            return new Angle(left._degrees/(double)right);
        }

        public static double operator /(Angle left, Angle right)
        {
            return Convert.ToDouble(left._degrees/right._degrees);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Angle)) throw new ArgumentException("Expected type Angle.", "obj");
            return CompareTo((Angle) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Angle other)
        {
            return _degrees.CompareTo(other._degrees);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Angle left, Angle right)
        {
            return left._degrees <= right._degrees;
        }

        public static bool operator >=(Angle left, Angle right)
        {
            return left._degrees >= right._degrees;
        }

        public static bool operator <(Angle left, Angle right)
        {
            return left._degrees < right._degrees;
        }

        public static bool operator >(Angle left, Angle right)
        {
            return left._degrees > right._degrees;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Angle left, Angle right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._degrees == right._degrees;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Angle left, Angle right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._degrees != right._degrees;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _degrees.Equals(((Angle) obj)._degrees);
        }

        /// <summary>
        ///     Compare equality to another Angle by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Angle other, Angle maxError)
        {
            return Math.Abs(_degrees - other._degrees) <= maxError._degrees;
        }

        public override int GetHashCode()
        {
            return _degrees.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(AngleUnit unit)
        {
            switch (unit)
            {
                case AngleUnit.Arcminute:
                    return Arcminutes;
                case AngleUnit.Arcsecond:
                    return Arcseconds;
                case AngleUnit.Centiradian:
                    return Centiradians;
                case AngleUnit.Deciradian:
                    return Deciradians;
                case AngleUnit.Degree:
                    return Degrees;
                case AngleUnit.Gradian:
                    return Gradians;
                case AngleUnit.Microdegree:
                    return Microdegrees;
                case AngleUnit.Microradian:
                    return Microradians;
                case AngleUnit.Millidegree:
                    return Millidegrees;
                case AngleUnit.Milliradian:
                    return Milliradians;
                case AngleUnit.Nanodegree:
                    return Nanodegrees;
                case AngleUnit.Nanoradian:
                    return Nanoradians;
                case AngleUnit.Radian:
                    return Radians;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Angle Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Angle Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<Angle, AngleUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    AngleUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromDegrees(x.Degrees + y.Degrees));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Angle result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Angle result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Angle);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static AngleUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static AngleUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static AngleUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<AngleUnit>(str.Trim());

            if (unit == AngleUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized AngleUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is Degree
        /// </summary>
        public static AngleUnit ToStringDefaultUnit { get; set; } = AngleUnit.Degree;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(AngleUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(AngleUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(AngleUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(AngleUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Angle
        /// </summary>
        public static Angle MaxValue
        {
            get
            {
                return new Angle(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Angle
        /// </summary>
        public static Angle MinValue
        {
            get
            {
                return new Angle(double.MinValue);
            }
        }
    }
}
