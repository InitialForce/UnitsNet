//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
    /// </summary>
    public partial struct Speed<T> : IQuantityT<SpeedUnit, T>, IEquatable<Speed<T>>, IComparable, IComparable<Speed<T>>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpeedUnit? _unit;

        static Speed()
        {
            BaseDimensions = new BaseDimensions(1, 0, -1, 0, 0, 0, 0);

            Info = new QuantityInfo<SpeedUnit>(QuantityType.Speed,
                new UnitInfo<SpeedUnit>[] {
                    new UnitInfo<SpeedUnit>(SpeedUnit.CentimeterPerHour, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.CentimeterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.CentimeterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.DecimeterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.DecimeterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.FootPerHour, new BaseUnits(length: LengthUnit.Foot, time: DurationUnit.Hour)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.FootPerMinute, new BaseUnits(length: LengthUnit.Foot, time: DurationUnit.Minute)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.FootPerSecond, new BaseUnits(length: LengthUnit.Foot, time: DurationUnit.Second)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.InchPerHour, new BaseUnits(length: LengthUnit.Inch, time: DurationUnit.Hour)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.InchPerMinute, new BaseUnits(length: LengthUnit.Inch, time: DurationUnit.Minute)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.InchPerSecond, new BaseUnits(length: LengthUnit.Inch, time: DurationUnit.Second)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.KilometerPerHour, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.KilometerPerMinute, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.KilometerPerSecond, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.Knot, new BaseUnits(length: LengthUnit.NauticalMile, time: DurationUnit.Hour)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MeterPerHour, new BaseUnits(length: LengthUnit.Meter, time: DurationUnit.Hour)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MeterPerMinute, new BaseUnits(length: LengthUnit.Meter, time: DurationUnit.Minute)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MeterPerSecond, new BaseUnits(length: LengthUnit.Meter, time: DurationUnit.Second)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MicrometerPerMinute, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MicrometerPerSecond, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MilePerHour, new BaseUnits(length: LengthUnit.Mile, time: DurationUnit.Hour)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MillimeterPerHour, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MillimeterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.MillimeterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.NanometerPerMinute, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.NanometerPerSecond, BaseUnits.Undefined),
                    new UnitInfo<SpeedUnit>(SpeedUnit.UsSurveyFootPerHour, new BaseUnits(length: LengthUnit.UsSurveyFoot, time: DurationUnit.Hour)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.UsSurveyFootPerMinute, new BaseUnits(length: LengthUnit.UsSurveyFoot, time: DurationUnit.Minute)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.UsSurveyFootPerSecond, new BaseUnits(length: LengthUnit.UsSurveyFoot, time: DurationUnit.Second)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.YardPerHour, new BaseUnits(length: LengthUnit.Yard, time: DurationUnit.Hour)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.YardPerMinute, new BaseUnits(length: LengthUnit.Yard, time: DurationUnit.Minute)),
                    new UnitInfo<SpeedUnit>(SpeedUnit.YardPerSecond, new BaseUnits(length: LengthUnit.Yard, time: DurationUnit.Second)),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Speed(T value, SpeedUnit unit)
        {
            if(unit == SpeedUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            Value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Speed(T value, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            Value = value;
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<SpeedUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of <see cref="Speed{T}" />, which is MeterPerSecond. All conversions go via this value.
        /// </summary>
        public static SpeedUnit BaseUnit { get; } = SpeedUnit.MeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of <see cref="Speed{T}" />
        /// </summary>
        public static Speed<T> MaxValue { get; } = new Speed<T>(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of <see cref="Speed{T}" />
        /// </summary>
        public static Speed<T> MinValue { get; } = new Speed<T>(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Speed;

        /// <summary>
        ///     All units of measurement for the <see cref="Speed{T}" /> quantity.
        /// </summary>
        public static SpeedUnit[] Units { get; } = Enum.GetValues(typeof(SpeedUnit)).Cast<SpeedUnit>().Except(new SpeedUnit[]{ SpeedUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecond.
        /// </summary>
        public static Speed<T> Zero { get; } = new Speed<T>((T)0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public T Value{ get; }

        double IQuantity.Value => Convert.ToDouble(Value);

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public SpeedUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<SpeedUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Speed<T>.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Speed<T>.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in CentimetersPerHour.
        /// </summary>
        public T CentimetersPerHour => As(SpeedUnit.CentimeterPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in CentimetersPerMinutes.
        /// </summary>
        public T CentimetersPerMinutes => As(SpeedUnit.CentimeterPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in CentimetersPerSecond.
        /// </summary>
        public T CentimetersPerSecond => As(SpeedUnit.CentimeterPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in DecimetersPerMinutes.
        /// </summary>
        public T DecimetersPerMinutes => As(SpeedUnit.DecimeterPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in DecimetersPerSecond.
        /// </summary>
        public T DecimetersPerSecond => As(SpeedUnit.DecimeterPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in FeetPerHour.
        /// </summary>
        public T FeetPerHour => As(SpeedUnit.FootPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in FeetPerMinute.
        /// </summary>
        public T FeetPerMinute => As(SpeedUnit.FootPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in FeetPerSecond.
        /// </summary>
        public T FeetPerSecond => As(SpeedUnit.FootPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in InchesPerHour.
        /// </summary>
        public T InchesPerHour => As(SpeedUnit.InchPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in InchesPerMinute.
        /// </summary>
        public T InchesPerMinute => As(SpeedUnit.InchPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in InchesPerSecond.
        /// </summary>
        public T InchesPerSecond => As(SpeedUnit.InchPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in KilometersPerHour.
        /// </summary>
        public T KilometersPerHour => As(SpeedUnit.KilometerPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in KilometersPerMinutes.
        /// </summary>
        public T KilometersPerMinutes => As(SpeedUnit.KilometerPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in KilometersPerSecond.
        /// </summary>
        public T KilometersPerSecond => As(SpeedUnit.KilometerPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in Knots.
        /// </summary>
        public T Knots => As(SpeedUnit.Knot);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MetersPerHour.
        /// </summary>
        public T MetersPerHour => As(SpeedUnit.MeterPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MetersPerMinutes.
        /// </summary>
        public T MetersPerMinutes => As(SpeedUnit.MeterPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MetersPerSecond.
        /// </summary>
        public T MetersPerSecond => As(SpeedUnit.MeterPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MicrometersPerMinutes.
        /// </summary>
        public T MicrometersPerMinutes => As(SpeedUnit.MicrometerPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MicrometersPerSecond.
        /// </summary>
        public T MicrometersPerSecond => As(SpeedUnit.MicrometerPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MilesPerHour.
        /// </summary>
        public T MilesPerHour => As(SpeedUnit.MilePerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MillimetersPerHour.
        /// </summary>
        public T MillimetersPerHour => As(SpeedUnit.MillimeterPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MillimetersPerMinutes.
        /// </summary>
        public T MillimetersPerMinutes => As(SpeedUnit.MillimeterPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in MillimetersPerSecond.
        /// </summary>
        public T MillimetersPerSecond => As(SpeedUnit.MillimeterPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in NanometersPerMinutes.
        /// </summary>
        public T NanometersPerMinutes => As(SpeedUnit.NanometerPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in NanometersPerSecond.
        /// </summary>
        public T NanometersPerSecond => As(SpeedUnit.NanometerPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in UsSurveyFeetPerHour.
        /// </summary>
        public T UsSurveyFeetPerHour => As(SpeedUnit.UsSurveyFootPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in UsSurveyFeetPerMinute.
        /// </summary>
        public T UsSurveyFeetPerMinute => As(SpeedUnit.UsSurveyFootPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in UsSurveyFeetPerSecond.
        /// </summary>
        public T UsSurveyFeetPerSecond => As(SpeedUnit.UsSurveyFootPerSecond);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in YardsPerHour.
        /// </summary>
        public T YardsPerHour => As(SpeedUnit.YardPerHour);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in YardsPerMinute.
        /// </summary>
        public T YardsPerMinute => As(SpeedUnit.YardPerMinute);

        /// <summary>
        ///     Get <see cref="Speed{T}" /> in YardsPerSecond.
        /// </summary>
        public T YardsPerSecond => As(SpeedUnit.YardPerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpeedUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(SpeedUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get <see cref="Speed{T}" /> from CentimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromCentimetersPerHour(T centimetersperhour)
        {
            return new Speed<T>(centimetersperhour, SpeedUnit.CentimeterPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from CentimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromCentimetersPerMinutes(T centimetersperminutes)
        {
            return new Speed<T>(centimetersperminutes, SpeedUnit.CentimeterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from CentimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromCentimetersPerSecond(T centimeterspersecond)
        {
            return new Speed<T>(centimeterspersecond, SpeedUnit.CentimeterPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from DecimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromDecimetersPerMinutes(T decimetersperminutes)
        {
            return new Speed<T>(decimetersperminutes, SpeedUnit.DecimeterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from DecimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromDecimetersPerSecond(T decimeterspersecond)
        {
            return new Speed<T>(decimeterspersecond, SpeedUnit.DecimeterPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from FeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromFeetPerHour(T feetperhour)
        {
            return new Speed<T>(feetperhour, SpeedUnit.FootPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from FeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromFeetPerMinute(T feetperminute)
        {
            return new Speed<T>(feetperminute, SpeedUnit.FootPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from FeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromFeetPerSecond(T feetpersecond)
        {
            return new Speed<T>(feetpersecond, SpeedUnit.FootPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from InchesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromInchesPerHour(T inchesperhour)
        {
            return new Speed<T>(inchesperhour, SpeedUnit.InchPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from InchesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromInchesPerMinute(T inchesperminute)
        {
            return new Speed<T>(inchesperminute, SpeedUnit.InchPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from InchesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromInchesPerSecond(T inchespersecond)
        {
            return new Speed<T>(inchespersecond, SpeedUnit.InchPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from KilometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromKilometersPerHour(T kilometersperhour)
        {
            return new Speed<T>(kilometersperhour, SpeedUnit.KilometerPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from KilometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromKilometersPerMinutes(T kilometersperminutes)
        {
            return new Speed<T>(kilometersperminutes, SpeedUnit.KilometerPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from KilometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromKilometersPerSecond(T kilometerspersecond)
        {
            return new Speed<T>(kilometerspersecond, SpeedUnit.KilometerPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from Knots.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromKnots(T knots)
        {
            return new Speed<T>(knots, SpeedUnit.Knot);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMetersPerHour(T metersperhour)
        {
            return new Speed<T>(metersperhour, SpeedUnit.MeterPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMetersPerMinutes(T metersperminutes)
        {
            return new Speed<T>(metersperminutes, SpeedUnit.MeterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMetersPerSecond(T meterspersecond)
        {
            return new Speed<T>(meterspersecond, SpeedUnit.MeterPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MicrometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMicrometersPerMinutes(T micrometersperminutes)
        {
            return new Speed<T>(micrometersperminutes, SpeedUnit.MicrometerPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MicrometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMicrometersPerSecond(T micrometerspersecond)
        {
            return new Speed<T>(micrometerspersecond, SpeedUnit.MicrometerPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MilesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMilesPerHour(T milesperhour)
        {
            return new Speed<T>(milesperhour, SpeedUnit.MilePerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MillimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMillimetersPerHour(T millimetersperhour)
        {
            return new Speed<T>(millimetersperhour, SpeedUnit.MillimeterPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MillimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMillimetersPerMinutes(T millimetersperminutes)
        {
            return new Speed<T>(millimetersperminutes, SpeedUnit.MillimeterPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from MillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromMillimetersPerSecond(T millimeterspersecond)
        {
            return new Speed<T>(millimeterspersecond, SpeedUnit.MillimeterPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from NanometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromNanometersPerMinutes(T nanometersperminutes)
        {
            return new Speed<T>(nanometersperminutes, SpeedUnit.NanometerPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from NanometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromNanometersPerSecond(T nanometerspersecond)
        {
            return new Speed<T>(nanometerspersecond, SpeedUnit.NanometerPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from UsSurveyFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromUsSurveyFeetPerHour(T ussurveyfeetperhour)
        {
            return new Speed<T>(ussurveyfeetperhour, SpeedUnit.UsSurveyFootPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from UsSurveyFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromUsSurveyFeetPerMinute(T ussurveyfeetperminute)
        {
            return new Speed<T>(ussurveyfeetperminute, SpeedUnit.UsSurveyFootPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from UsSurveyFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromUsSurveyFeetPerSecond(T ussurveyfeetpersecond)
        {
            return new Speed<T>(ussurveyfeetpersecond, SpeedUnit.UsSurveyFootPerSecond);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from YardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromYardsPerHour(T yardsperhour)
        {
            return new Speed<T>(yardsperhour, SpeedUnit.YardPerHour);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from YardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromYardsPerMinute(T yardsperminute)
        {
            return new Speed<T>(yardsperminute, SpeedUnit.YardPerMinute);
        }
        /// <summary>
        ///     Get <see cref="Speed{T}" /> from YardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Speed<T> FromYardsPerSecond(T yardspersecond)
        {
            return new Speed<T>(yardspersecond, SpeedUnit.YardPerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed{T}" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><see cref="Speed{T}" /> unit value.</returns>
        public static Speed<T> From(T value, SpeedUnit fromUnit)
        {
            return new Speed<T>(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Speed<T> Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Speed<T> Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Speed<T>, SpeedUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Speed<T> result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Speed<T> result)
        {
            return QuantityParser.Default.TryParse<Speed<T>, SpeedUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str, [CanBeNull] IFormatProvider provider)
        {
            return UnitParser.Default.Parse<SpeedUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.SpeedUnit)"/>
        public static bool TryParseUnit(string str, out SpeedUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out SpeedUnit unit)
        {
            return UnitParser.Default.TryParse<SpeedUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Speed<T> operator -(Speed<T> right)
        {
            return new Speed<T>(CompiledLambdas.Negate(right.Value), right.Unit);
        }

        /// <summary>Get <see cref="Speed{T}"/> from adding two <see cref="Speed{T}"/>.</summary>
        public static Speed<T> operator +(Speed<T> left, Speed<T> right)
        {
            var value = CompiledLambdas.Add(left.Value, right.GetValueAs(left.Unit));
            return new Speed<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="Speed{T}"/> from subtracting two <see cref="Speed{T}"/>.</summary>
        public static Speed<T> operator -(Speed<T> left, Speed<T> right)
        {
            var value = CompiledLambdas.Subtract(left.Value, right.GetValueAs(left.Unit));
            return new Speed<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="Speed{T}"/> from multiplying value and <see cref="Speed{T}"/>.</summary>
        public static Speed<T> operator *(T left, Speed<T> right)
        {
            var value = CompiledLambdas.Multiply(left, right.Value);
            return new Speed<T>(value, right.Unit);
        }

        /// <summary>Get <see cref="Speed{T}"/> from multiplying value and <see cref="Speed{T}"/>.</summary>
        public static Speed<T> operator *(Speed<T> left, T right)
        {
            var value = CompiledLambdas.Multiply(left.Value, right);
            return new Speed<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="Speed{T}"/> from dividing <see cref="Speed{T}"/> by value.</summary>
        public static Speed<T> operator /(Speed<T> left, T right)
        {
            var value = CompiledLambdas.Divide(left.Value, right);
            return new Speed<T>(value, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Speed{T}"/> by <see cref="Speed{T}"/>.</summary>
        public static T operator /(Speed<T> left, Speed<T> right)
        {
            return CompiledLambdas.Divide(left.MetersPerSecond, right.MetersPerSecond);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Speed<T> left, Speed<T> right)
        {
            return CompiledLambdas.LessThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Speed<T> left, Speed<T> right)
        {
            return CompiledLambdas.GreaterThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Speed<T> left, Speed<T> right)
        {
            return CompiledLambdas.LessThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Speed<T> left, Speed<T> right)
        {
            return CompiledLambdas.GreaterThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Speed{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Speed<T> left, Speed<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Speed{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Speed<T> left, Speed<T> right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Speed<T> objSpeed)) throw new ArgumentException("Expected type Speed.", nameof(obj));

            return CompareTo(objSpeed);
        }

        /// <inheritdoc />
        public int CompareTo(Speed<T> other)
        {
            return System.Collections.Generic.Comparer<T>.Default.Compare(Value, other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Speed{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Speed<T> objSpeed))
                return false;

            return Equals(objSpeed);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Speed{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Speed<T> other)
        {
            return Value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another <see cref="Speed{T}" /> within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Speed<T> other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            var otherValueInThisUnits = other.As(this.Unit);
            return UnitsNet.Comparison.Equals(Value, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="Speed{T}" />.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public T As(SpeedUnit unit)
        {
            if(Unit == unit)
                return Value;

            var converted = GetValueAs(unit);
            return converted;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public T As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is SpeedUnit unitAsSpeedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpeedUnit)} is supported.", nameof(unit));

            var asValue = As(unitAsSpeedUnit);
            return Convert.ToDouble(asValue);
        }

        double IQuantity.As(UnitSystem unitSystem) => Convert.ToDouble(As(unitSystem));

        double IQuantity<SpeedUnit>.As(SpeedUnit unit) => Convert.ToDouble(As(unit));

        /// <summary>
        ///     Converts this <see cref="Speed{T}" /> to another <see cref="Speed{T}" /> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A <see cref="Speed{T}" /> with the specified unit.</returns>
        public Speed<T> ToUnit(SpeedUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Speed<T>(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is SpeedUnit unitAsSpeedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpeedUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsSpeedUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Speed<T> ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<SpeedUnit> IQuantity<SpeedUnit>.ToUnit(SpeedUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantityT<SpeedUnit, T> IQuantityT<SpeedUnit, T>.ToUnit(SpeedUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<SpeedUnit> IQuantity<SpeedUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantityT<SpeedUnit, T> IQuantityT<SpeedUnit, T>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private T GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpeedUnit.CentimeterPerHour: return (Value/3600) * 1e-2d;
                case SpeedUnit.CentimeterPerMinute: return (Value/60) * 1e-2d;
                case SpeedUnit.CentimeterPerSecond: return (Value) * 1e-2d;
                case SpeedUnit.DecimeterPerMinute: return (Value/60) * 1e-1d;
                case SpeedUnit.DecimeterPerSecond: return (Value) * 1e-1d;
                case SpeedUnit.FootPerHour: return Value*0.3048/3600;
                case SpeedUnit.FootPerMinute: return Value*0.3048/60;
                case SpeedUnit.FootPerSecond: return Value*0.3048;
                case SpeedUnit.InchPerHour: return (Value/3600)*2.54e-2;
                case SpeedUnit.InchPerMinute: return (Value/60)*2.54e-2;
                case SpeedUnit.InchPerSecond: return Value*2.54e-2;
                case SpeedUnit.KilometerPerHour: return (Value/3600) * 1e3d;
                case SpeedUnit.KilometerPerMinute: return (Value/60) * 1e3d;
                case SpeedUnit.KilometerPerSecond: return (Value) * 1e3d;
                case SpeedUnit.Knot: return Value*0.514444;
                case SpeedUnit.MeterPerHour: return Value/3600;
                case SpeedUnit.MeterPerMinute: return Value/60;
                case SpeedUnit.MeterPerSecond: return Value;
                case SpeedUnit.MicrometerPerMinute: return (Value/60) * 1e-6d;
                case SpeedUnit.MicrometerPerSecond: return (Value) * 1e-6d;
                case SpeedUnit.MilePerHour: return Value*0.44704;
                case SpeedUnit.MillimeterPerHour: return (Value/3600) * 1e-3d;
                case SpeedUnit.MillimeterPerMinute: return (Value/60) * 1e-3d;
                case SpeedUnit.MillimeterPerSecond: return (Value) * 1e-3d;
                case SpeedUnit.NanometerPerMinute: return (Value/60) * 1e-9d;
                case SpeedUnit.NanometerPerSecond: return (Value) * 1e-9d;
                case SpeedUnit.UsSurveyFootPerHour: return (Value*1200/3937)/3600;
                case SpeedUnit.UsSurveyFootPerMinute: return (Value*1200/3937)/60;
                case SpeedUnit.UsSurveyFootPerSecond: return Value*1200/3937;
                case SpeedUnit.YardPerHour: return Value*0.9144/3600;
                case SpeedUnit.YardPerMinute: return Value*0.9144/60;
                case SpeedUnit.YardPerSecond: return Value*0.9144;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal Speed<T> ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new Speed<T>(baseUnitValue, BaseUnit);
        }

        private T GetValueAs(SpeedUnit unit)
        {
            if(Unit == unit)
                return Value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpeedUnit.CentimeterPerHour: return (baseUnitValue*3600) / 1e-2d;
                case SpeedUnit.CentimeterPerMinute: return (baseUnitValue*60) / 1e-2d;
                case SpeedUnit.CentimeterPerSecond: return (baseUnitValue) / 1e-2d;
                case SpeedUnit.DecimeterPerMinute: return (baseUnitValue*60) / 1e-1d;
                case SpeedUnit.DecimeterPerSecond: return (baseUnitValue) / 1e-1d;
                case SpeedUnit.FootPerHour: return baseUnitValue/0.3048*3600;
                case SpeedUnit.FootPerMinute: return baseUnitValue/0.3048*60;
                case SpeedUnit.FootPerSecond: return baseUnitValue/0.3048;
                case SpeedUnit.InchPerHour: return (baseUnitValue/2.54e-2)*3600;
                case SpeedUnit.InchPerMinute: return (baseUnitValue/2.54e-2)*60;
                case SpeedUnit.InchPerSecond: return baseUnitValue/2.54e-2;
                case SpeedUnit.KilometerPerHour: return (baseUnitValue*3600) / 1e3d;
                case SpeedUnit.KilometerPerMinute: return (baseUnitValue*60) / 1e3d;
                case SpeedUnit.KilometerPerSecond: return (baseUnitValue) / 1e3d;
                case SpeedUnit.Knot: return baseUnitValue/0.514444;
                case SpeedUnit.MeterPerHour: return baseUnitValue*3600;
                case SpeedUnit.MeterPerMinute: return baseUnitValue*60;
                case SpeedUnit.MeterPerSecond: return baseUnitValue;
                case SpeedUnit.MicrometerPerMinute: return (baseUnitValue*60) / 1e-6d;
                case SpeedUnit.MicrometerPerSecond: return (baseUnitValue) / 1e-6d;
                case SpeedUnit.MilePerHour: return baseUnitValue/0.44704;
                case SpeedUnit.MillimeterPerHour: return (baseUnitValue*3600) / 1e-3d;
                case SpeedUnit.MillimeterPerMinute: return (baseUnitValue*60) / 1e-3d;
                case SpeedUnit.MillimeterPerSecond: return (baseUnitValue) / 1e-3d;
                case SpeedUnit.NanometerPerMinute: return (baseUnitValue*60) / 1e-9d;
                case SpeedUnit.NanometerPerSecond: return (baseUnitValue) / 1e-9d;
                case SpeedUnit.UsSurveyFootPerHour: return (baseUnitValue*3937/1200)*3600;
                case SpeedUnit.UsSurveyFootPerMinute: return (baseUnitValue*3937/1200)*60;
                case SpeedUnit.UsSurveyFootPerSecond: return baseUnitValue*3937/1200;
                case SpeedUnit.YardPerHour: return baseUnitValue/0.9144*3600;
                case SpeedUnit.YardPerMinute: return baseUnitValue/0.9144*60;
                case SpeedUnit.YardPerSecond: return baseUnitValue/0.9144;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<SpeedUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Speed<T>)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(Value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Speed<T>)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Speed<T>)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(Value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(Value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(Value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(Value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(Value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(Value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(Value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Speed<T>))
                return this;
            else if(conversionType == typeof(SpeedUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Speed<T>.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Speed<T>.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Speed<T>)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(Value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(Value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(Value);
        }

        #endregion
    }
}
