//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Speed
#else
    public partial struct Speed : IComparable, IComparable<Speed>
#endif
    {
        /// <summary>
        ///     Base unit of Speed.
        /// </summary>
        private readonly double _metersPerSecond;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Speed() : this(0)
        {
        }
#endif

        public Speed(double meterspersecond)
        {
            _metersPerSecond = Convert.ToDouble(meterspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        Speed(long meterspersecond)
        {
            _metersPerSecond = Convert.ToDouble(meterspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        Speed(decimal meterspersecond)
        {
            _metersPerSecond = Convert.ToDouble(meterspersecond);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Speed;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static SpeedUnit BaseUnit
        {
            get { return SpeedUnit.MeterPerSecond; }
        }

        /// <summary>
        ///     All units of measurement for the Speed quantity.
        /// </summary>
        public static SpeedUnit[] Units { get; } = Enum.GetValues(typeof(SpeedUnit)).Cast<SpeedUnit>().ToArray();

        /// <summary>
        ///     Get Speed in CentimetersPerHour.
        /// </summary>
        public double CentimetersPerHour
        {
            get { return (_metersPerSecond*3600) / 1e-2d; }
        }

        /// <summary>
        ///     Get Speed in CentimetersPerMinutes.
        /// </summary>
        public double CentimetersPerMinutes
        {
            get { return (_metersPerSecond*60) / 1e-2d; }
        }

        /// <summary>
        ///     Get Speed in CentimetersPerSecond.
        /// </summary>
        public double CentimetersPerSecond
        {
            get { return (_metersPerSecond) / 1e-2d; }
        }

        /// <summary>
        ///     Get Speed in DecimetersPerMinutes.
        /// </summary>
        public double DecimetersPerMinutes
        {
            get { return (_metersPerSecond*60) / 1e-1d; }
        }

        /// <summary>
        ///     Get Speed in DecimetersPerSecond.
        /// </summary>
        public double DecimetersPerSecond
        {
            get { return (_metersPerSecond) / 1e-1d; }
        }

        /// <summary>
        ///     Get Speed in FeetPerSecond.
        /// </summary>
        public double FeetPerSecond
        {
            get { return _metersPerSecond/0.3048; }
        }

        /// <summary>
        ///     Get Speed in KilometersPerHour.
        /// </summary>
        public double KilometersPerHour
        {
            get { return (_metersPerSecond*3600) / 1e3d; }
        }

        /// <summary>
        ///     Get Speed in KilometersPerMinutes.
        /// </summary>
        public double KilometersPerMinutes
        {
            get { return (_metersPerSecond*60) / 1e3d; }
        }

        /// <summary>
        ///     Get Speed in KilometersPerSecond.
        /// </summary>
        public double KilometersPerSecond
        {
            get { return (_metersPerSecond) / 1e3d; }
        }

        /// <summary>
        ///     Get Speed in Knots.
        /// </summary>
        public double Knots
        {
            get { return _metersPerSecond/0.514444; }
        }

        /// <summary>
        ///     Get Speed in MetersPerHour.
        /// </summary>
        public double MetersPerHour
        {
            get { return _metersPerSecond*3600; }
        }

        /// <summary>
        ///     Get Speed in MetersPerMinutes.
        /// </summary>
        public double MetersPerMinutes
        {
            get { return _metersPerSecond*60; }
        }

        /// <summary>
        ///     Get Speed in MetersPerSecond.
        /// </summary>
        public double MetersPerSecond
        {
            get { return _metersPerSecond; }
        }

        /// <summary>
        ///     Get Speed in MicrometersPerMinutes.
        /// </summary>
        public double MicrometersPerMinutes
        {
            get { return (_metersPerSecond*60) / 1e-6d; }
        }

        /// <summary>
        ///     Get Speed in MicrometersPerSecond.
        /// </summary>
        public double MicrometersPerSecond
        {
            get { return (_metersPerSecond) / 1e-6d; }
        }

        /// <summary>
        ///     Get Speed in MilesPerHour.
        /// </summary>
        public double MilesPerHour
        {
            get { return _metersPerSecond/0.44704; }
        }

        /// <summary>
        ///     Get Speed in MillimetersPerHour.
        /// </summary>
        public double MillimetersPerHour
        {
            get { return (_metersPerSecond*3600) / 1e-3d; }
        }

        /// <summary>
        ///     Get Speed in MillimetersPerMinutes.
        /// </summary>
        public double MillimetersPerMinutes
        {
            get { return (_metersPerSecond*60) / 1e-3d; }
        }

        /// <summary>
        ///     Get Speed in MillimetersPerSecond.
        /// </summary>
        public double MillimetersPerSecond
        {
            get { return (_metersPerSecond) / 1e-3d; }
        }

        /// <summary>
        ///     Get Speed in NanometersPerMinutes.
        /// </summary>
        public double NanometersPerMinutes
        {
            get { return (_metersPerSecond*60) / 1e-9d; }
        }

        /// <summary>
        ///     Get Speed in NanometersPerSecond.
        /// </summary>
        public double NanometersPerSecond
        {
            get { return (_metersPerSecond) / 1e-9d; }
        }

        #endregion

        #region Static

        public static Speed Zero
        {
            get { return new Speed(); }
        }

        /// <summary>
        ///     Get Speed from CentimetersPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromCentimetersPerHour(double centimetersperhour)
        {
            return new Speed((centimetersperhour/3600) * 1e-2d);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerHour.
        /// </summary>
        public static Speed FromCentimetersPerHour(int centimetersperhour)
        {
            return new Speed((centimetersperhour/3600) * 1e-2d);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerHour.
        /// </summary>
        public static Speed FromCentimetersPerHour(long centimetersperhour)
        {
            return new Speed((centimetersperhour/3600) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from CentimetersPerHour of type decimal.
        /// </summary>
        public static Speed FromCentimetersPerHour(decimal centimetersperhour)
        {
            return new Speed((Convert.ToDouble(centimetersperhour)/3600) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get Speed from CentimetersPerMinutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromCentimetersPerMinutes(double centimetersperminutes)
        {
            return new Speed((centimetersperminutes/60) * 1e-2d);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerMinutes.
        /// </summary>
        public static Speed FromCentimetersPerMinutes(int centimetersperminutes)
        {
            return new Speed((centimetersperminutes/60) * 1e-2d);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerMinutes.
        /// </summary>
        public static Speed FromCentimetersPerMinutes(long centimetersperminutes)
        {
            return new Speed((centimetersperminutes/60) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from CentimetersPerMinutes of type decimal.
        /// </summary>
        public static Speed FromCentimetersPerMinutes(decimal centimetersperminutes)
        {
            return new Speed((Convert.ToDouble(centimetersperminutes)/60) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get Speed from CentimetersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromCentimetersPerSecond(double centimeterspersecond)
        {
            return new Speed((centimeterspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerSecond.
        /// </summary>
        public static Speed FromCentimetersPerSecond(int centimeterspersecond)
        {
            return new Speed((centimeterspersecond) * 1e-2d);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerSecond.
        /// </summary>
        public static Speed FromCentimetersPerSecond(long centimeterspersecond)
        {
            return new Speed((centimeterspersecond) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from CentimetersPerSecond of type decimal.
        /// </summary>
        public static Speed FromCentimetersPerSecond(decimal centimeterspersecond)
        {
            return new Speed((Convert.ToDouble(centimeterspersecond)) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get Speed from DecimetersPerMinutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromDecimetersPerMinutes(double decimetersperminutes)
        {
            return new Speed((decimetersperminutes/60) * 1e-1d);
        }

        /// <summary>
        ///     Get Speed from DecimetersPerMinutes.
        /// </summary>
        public static Speed FromDecimetersPerMinutes(int decimetersperminutes)
        {
            return new Speed((decimetersperminutes/60) * 1e-1d);
        }

        /// <summary>
        ///     Get Speed from DecimetersPerMinutes.
        /// </summary>
        public static Speed FromDecimetersPerMinutes(long decimetersperminutes)
        {
            return new Speed((decimetersperminutes/60) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from DecimetersPerMinutes of type decimal.
        /// </summary>
        public static Speed FromDecimetersPerMinutes(decimal decimetersperminutes)
        {
            return new Speed((Convert.ToDouble(decimetersperminutes)/60) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get Speed from DecimetersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromDecimetersPerSecond(double decimeterspersecond)
        {
            return new Speed((decimeterspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get Speed from DecimetersPerSecond.
        /// </summary>
        public static Speed FromDecimetersPerSecond(int decimeterspersecond)
        {
            return new Speed((decimeterspersecond) * 1e-1d);
        }

        /// <summary>
        ///     Get Speed from DecimetersPerSecond.
        /// </summary>
        public static Speed FromDecimetersPerSecond(long decimeterspersecond)
        {
            return new Speed((decimeterspersecond) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from DecimetersPerSecond of type decimal.
        /// </summary>
        public static Speed FromDecimetersPerSecond(decimal decimeterspersecond)
        {
            return new Speed((Convert.ToDouble(decimeterspersecond)) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get Speed from FeetPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromFeetPerSecond(double feetpersecond)
        {
            return new Speed(feetpersecond*0.3048);
        }

        /// <summary>
        ///     Get Speed from FeetPerSecond.
        /// </summary>
        public static Speed FromFeetPerSecond(int feetpersecond)
        {
            return new Speed(feetpersecond*0.3048);
        }

        /// <summary>
        ///     Get Speed from FeetPerSecond.
        /// </summary>
        public static Speed FromFeetPerSecond(long feetpersecond)
        {
            return new Speed(feetpersecond*0.3048);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from FeetPerSecond of type decimal.
        /// </summary>
        public static Speed FromFeetPerSecond(decimal feetpersecond)
        {
            return new Speed(Convert.ToDouble(feetpersecond)*0.3048);
        }
#endif

        /// <summary>
        ///     Get Speed from KilometersPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromKilometersPerHour(double kilometersperhour)
        {
            return new Speed((kilometersperhour/3600) * 1e3d);
        }

        /// <summary>
        ///     Get Speed from KilometersPerHour.
        /// </summary>
        public static Speed FromKilometersPerHour(int kilometersperhour)
        {
            return new Speed((kilometersperhour/3600) * 1e3d);
        }

        /// <summary>
        ///     Get Speed from KilometersPerHour.
        /// </summary>
        public static Speed FromKilometersPerHour(long kilometersperhour)
        {
            return new Speed((kilometersperhour/3600) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from KilometersPerHour of type decimal.
        /// </summary>
        public static Speed FromKilometersPerHour(decimal kilometersperhour)
        {
            return new Speed((Convert.ToDouble(kilometersperhour)/3600) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Speed from KilometersPerMinutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromKilometersPerMinutes(double kilometersperminutes)
        {
            return new Speed((kilometersperminutes/60) * 1e3d);
        }

        /// <summary>
        ///     Get Speed from KilometersPerMinutes.
        /// </summary>
        public static Speed FromKilometersPerMinutes(int kilometersperminutes)
        {
            return new Speed((kilometersperminutes/60) * 1e3d);
        }

        /// <summary>
        ///     Get Speed from KilometersPerMinutes.
        /// </summary>
        public static Speed FromKilometersPerMinutes(long kilometersperminutes)
        {
            return new Speed((kilometersperminutes/60) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from KilometersPerMinutes of type decimal.
        /// </summary>
        public static Speed FromKilometersPerMinutes(decimal kilometersperminutes)
        {
            return new Speed((Convert.ToDouble(kilometersperminutes)/60) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Speed from KilometersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromKilometersPerSecond(double kilometerspersecond)
        {
            return new Speed((kilometerspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get Speed from KilometersPerSecond.
        /// </summary>
        public static Speed FromKilometersPerSecond(int kilometerspersecond)
        {
            return new Speed((kilometerspersecond) * 1e3d);
        }

        /// <summary>
        ///     Get Speed from KilometersPerSecond.
        /// </summary>
        public static Speed FromKilometersPerSecond(long kilometerspersecond)
        {
            return new Speed((kilometerspersecond) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from KilometersPerSecond of type decimal.
        /// </summary>
        public static Speed FromKilometersPerSecond(decimal kilometerspersecond)
        {
            return new Speed((Convert.ToDouble(kilometerspersecond)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Speed from Knots.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromKnots(double knots)
        {
            return new Speed(knots*0.514444);
        }

        /// <summary>
        ///     Get Speed from Knots.
        /// </summary>
        public static Speed FromKnots(int knots)
        {
            return new Speed(knots*0.514444);
        }

        /// <summary>
        ///     Get Speed from Knots.
        /// </summary>
        public static Speed FromKnots(long knots)
        {
            return new Speed(knots*0.514444);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from Knots of type decimal.
        /// </summary>
        public static Speed FromKnots(decimal knots)
        {
            return new Speed(Convert.ToDouble(knots)*0.514444);
        }
#endif

        /// <summary>
        ///     Get Speed from MetersPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMetersPerHour(double metersperhour)
        {
            return new Speed(metersperhour/3600);
        }

        /// <summary>
        ///     Get Speed from MetersPerHour.
        /// </summary>
        public static Speed FromMetersPerHour(int metersperhour)
        {
            return new Speed(metersperhour/3600);
        }

        /// <summary>
        ///     Get Speed from MetersPerHour.
        /// </summary>
        public static Speed FromMetersPerHour(long metersperhour)
        {
            return new Speed(metersperhour/3600);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MetersPerHour of type decimal.
        /// </summary>
        public static Speed FromMetersPerHour(decimal metersperhour)
        {
            return new Speed(Convert.ToDouble(metersperhour)/3600);
        }
#endif

        /// <summary>
        ///     Get Speed from MetersPerMinutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMetersPerMinutes(double metersperminutes)
        {
            return new Speed(metersperminutes/60);
        }

        /// <summary>
        ///     Get Speed from MetersPerMinutes.
        /// </summary>
        public static Speed FromMetersPerMinutes(int metersperminutes)
        {
            return new Speed(metersperminutes/60);
        }

        /// <summary>
        ///     Get Speed from MetersPerMinutes.
        /// </summary>
        public static Speed FromMetersPerMinutes(long metersperminutes)
        {
            return new Speed(metersperminutes/60);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MetersPerMinutes of type decimal.
        /// </summary>
        public static Speed FromMetersPerMinutes(decimal metersperminutes)
        {
            return new Speed(Convert.ToDouble(metersperminutes)/60);
        }
#endif

        /// <summary>
        ///     Get Speed from MetersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMetersPerSecond(double meterspersecond)
        {
            return new Speed(meterspersecond);
        }

        /// <summary>
        ///     Get Speed from MetersPerSecond.
        /// </summary>
        public static Speed FromMetersPerSecond(int meterspersecond)
        {
            return new Speed(meterspersecond);
        }

        /// <summary>
        ///     Get Speed from MetersPerSecond.
        /// </summary>
        public static Speed FromMetersPerSecond(long meterspersecond)
        {
            return new Speed(meterspersecond);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MetersPerSecond of type decimal.
        /// </summary>
        public static Speed FromMetersPerSecond(decimal meterspersecond)
        {
            return new Speed(Convert.ToDouble(meterspersecond));
        }
#endif

        /// <summary>
        ///     Get Speed from MicrometersPerMinutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMicrometersPerMinutes(double micrometersperminutes)
        {
            return new Speed((micrometersperminutes/60) * 1e-6d);
        }

        /// <summary>
        ///     Get Speed from MicrometersPerMinutes.
        /// </summary>
        public static Speed FromMicrometersPerMinutes(int micrometersperminutes)
        {
            return new Speed((micrometersperminutes/60) * 1e-6d);
        }

        /// <summary>
        ///     Get Speed from MicrometersPerMinutes.
        /// </summary>
        public static Speed FromMicrometersPerMinutes(long micrometersperminutes)
        {
            return new Speed((micrometersperminutes/60) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MicrometersPerMinutes of type decimal.
        /// </summary>
        public static Speed FromMicrometersPerMinutes(decimal micrometersperminutes)
        {
            return new Speed((Convert.ToDouble(micrometersperminutes)/60) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get Speed from MicrometersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMicrometersPerSecond(double micrometerspersecond)
        {
            return new Speed((micrometerspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get Speed from MicrometersPerSecond.
        /// </summary>
        public static Speed FromMicrometersPerSecond(int micrometerspersecond)
        {
            return new Speed((micrometerspersecond) * 1e-6d);
        }

        /// <summary>
        ///     Get Speed from MicrometersPerSecond.
        /// </summary>
        public static Speed FromMicrometersPerSecond(long micrometerspersecond)
        {
            return new Speed((micrometerspersecond) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MicrometersPerSecond of type decimal.
        /// </summary>
        public static Speed FromMicrometersPerSecond(decimal micrometerspersecond)
        {
            return new Speed((Convert.ToDouble(micrometerspersecond)) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get Speed from MilesPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMilesPerHour(double milesperhour)
        {
            return new Speed(milesperhour*0.44704);
        }

        /// <summary>
        ///     Get Speed from MilesPerHour.
        /// </summary>
        public static Speed FromMilesPerHour(int milesperhour)
        {
            return new Speed(milesperhour*0.44704);
        }

        /// <summary>
        ///     Get Speed from MilesPerHour.
        /// </summary>
        public static Speed FromMilesPerHour(long milesperhour)
        {
            return new Speed(milesperhour*0.44704);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MilesPerHour of type decimal.
        /// </summary>
        public static Speed FromMilesPerHour(decimal milesperhour)
        {
            return new Speed(Convert.ToDouble(milesperhour)*0.44704);
        }
#endif

        /// <summary>
        ///     Get Speed from MillimetersPerHour.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMillimetersPerHour(double millimetersperhour)
        {
            return new Speed((millimetersperhour/3600) * 1e-3d);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerHour.
        /// </summary>
        public static Speed FromMillimetersPerHour(int millimetersperhour)
        {
            return new Speed((millimetersperhour/3600) * 1e-3d);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerHour.
        /// </summary>
        public static Speed FromMillimetersPerHour(long millimetersperhour)
        {
            return new Speed((millimetersperhour/3600) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MillimetersPerHour of type decimal.
        /// </summary>
        public static Speed FromMillimetersPerHour(decimal millimetersperhour)
        {
            return new Speed((Convert.ToDouble(millimetersperhour)/3600) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get Speed from MillimetersPerMinutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMillimetersPerMinutes(double millimetersperminutes)
        {
            return new Speed((millimetersperminutes/60) * 1e-3d);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerMinutes.
        /// </summary>
        public static Speed FromMillimetersPerMinutes(int millimetersperminutes)
        {
            return new Speed((millimetersperminutes/60) * 1e-3d);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerMinutes.
        /// </summary>
        public static Speed FromMillimetersPerMinutes(long millimetersperminutes)
        {
            return new Speed((millimetersperminutes/60) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MillimetersPerMinutes of type decimal.
        /// </summary>
        public static Speed FromMillimetersPerMinutes(decimal millimetersperminutes)
        {
            return new Speed((Convert.ToDouble(millimetersperminutes)/60) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get Speed from MillimetersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromMillimetersPerSecond(double millimeterspersecond)
        {
            return new Speed((millimeterspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerSecond.
        /// </summary>
        public static Speed FromMillimetersPerSecond(int millimeterspersecond)
        {
            return new Speed((millimeterspersecond) * 1e-3d);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerSecond.
        /// </summary>
        public static Speed FromMillimetersPerSecond(long millimeterspersecond)
        {
            return new Speed((millimeterspersecond) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from MillimetersPerSecond of type decimal.
        /// </summary>
        public static Speed FromMillimetersPerSecond(decimal millimeterspersecond)
        {
            return new Speed((Convert.ToDouble(millimeterspersecond)) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get Speed from NanometersPerMinutes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromNanometersPerMinutes(double nanometersperminutes)
        {
            return new Speed((nanometersperminutes/60) * 1e-9d);
        }

        /// <summary>
        ///     Get Speed from NanometersPerMinutes.
        /// </summary>
        public static Speed FromNanometersPerMinutes(int nanometersperminutes)
        {
            return new Speed((nanometersperminutes/60) * 1e-9d);
        }

        /// <summary>
        ///     Get Speed from NanometersPerMinutes.
        /// </summary>
        public static Speed FromNanometersPerMinutes(long nanometersperminutes)
        {
            return new Speed((nanometersperminutes/60) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from NanometersPerMinutes of type decimal.
        /// </summary>
        public static Speed FromNanometersPerMinutes(decimal nanometersperminutes)
        {
            return new Speed((Convert.ToDouble(nanometersperminutes)/60) * 1e-9d);
        }
#endif

        /// <summary>
        ///     Get Speed from NanometersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Speed FromNanometersPerSecond(double nanometerspersecond)
        {
            return new Speed((nanometerspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get Speed from NanometersPerSecond.
        /// </summary>
        public static Speed FromNanometersPerSecond(int nanometerspersecond)
        {
            return new Speed((nanometerspersecond) * 1e-9d);
        }

        /// <summary>
        ///     Get Speed from NanometersPerSecond.
        /// </summary>
        public static Speed FromNanometersPerSecond(long nanometerspersecond)
        {
            return new Speed((nanometerspersecond) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Speed from NanometersPerSecond of type decimal.
        /// </summary>
        public static Speed FromNanometersPerSecond(decimal nanometerspersecond)
        {
            return new Speed((Convert.ToDouble(nanometerspersecond)) * 1e-9d);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerHour.
        /// </summary>
        public static Speed? FromCentimetersPerHour(double? centimetersperhour)
        {
            if (centimetersperhour.HasValue)
            {
                return FromCentimetersPerHour(centimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerHour.
        /// </summary>
        public static Speed? FromCentimetersPerHour(int? centimetersperhour)
        {
            if (centimetersperhour.HasValue)
            {
                return FromCentimetersPerHour(centimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerHour.
        /// </summary>
        public static Speed? FromCentimetersPerHour(long? centimetersperhour)
        {
            if (centimetersperhour.HasValue)
            {
                return FromCentimetersPerHour(centimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from CentimetersPerHour of type decimal.
        /// </summary>
        public static Speed? FromCentimetersPerHour(decimal? centimetersperhour)
        {
            if (centimetersperhour.HasValue)
            {
                return FromCentimetersPerHour(centimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerMinutes.
        /// </summary>
        public static Speed? FromCentimetersPerMinutes(double? centimetersperminutes)
        {
            if (centimetersperminutes.HasValue)
            {
                return FromCentimetersPerMinutes(centimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerMinutes.
        /// </summary>
        public static Speed? FromCentimetersPerMinutes(int? centimetersperminutes)
        {
            if (centimetersperminutes.HasValue)
            {
                return FromCentimetersPerMinutes(centimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerMinutes.
        /// </summary>
        public static Speed? FromCentimetersPerMinutes(long? centimetersperminutes)
        {
            if (centimetersperminutes.HasValue)
            {
                return FromCentimetersPerMinutes(centimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from CentimetersPerMinutes of type decimal.
        /// </summary>
        public static Speed? FromCentimetersPerMinutes(decimal? centimetersperminutes)
        {
            if (centimetersperminutes.HasValue)
            {
                return FromCentimetersPerMinutes(centimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerSecond.
        /// </summary>
        public static Speed? FromCentimetersPerSecond(double? centimeterspersecond)
        {
            if (centimeterspersecond.HasValue)
            {
                return FromCentimetersPerSecond(centimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerSecond.
        /// </summary>
        public static Speed? FromCentimetersPerSecond(int? centimeterspersecond)
        {
            if (centimeterspersecond.HasValue)
            {
                return FromCentimetersPerSecond(centimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable CentimetersPerSecond.
        /// </summary>
        public static Speed? FromCentimetersPerSecond(long? centimeterspersecond)
        {
            if (centimeterspersecond.HasValue)
            {
                return FromCentimetersPerSecond(centimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from CentimetersPerSecond of type decimal.
        /// </summary>
        public static Speed? FromCentimetersPerSecond(decimal? centimeterspersecond)
        {
            if (centimeterspersecond.HasValue)
            {
                return FromCentimetersPerSecond(centimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable DecimetersPerMinutes.
        /// </summary>
        public static Speed? FromDecimetersPerMinutes(double? decimetersperminutes)
        {
            if (decimetersperminutes.HasValue)
            {
                return FromDecimetersPerMinutes(decimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable DecimetersPerMinutes.
        /// </summary>
        public static Speed? FromDecimetersPerMinutes(int? decimetersperminutes)
        {
            if (decimetersperminutes.HasValue)
            {
                return FromDecimetersPerMinutes(decimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable DecimetersPerMinutes.
        /// </summary>
        public static Speed? FromDecimetersPerMinutes(long? decimetersperminutes)
        {
            if (decimetersperminutes.HasValue)
            {
                return FromDecimetersPerMinutes(decimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from DecimetersPerMinutes of type decimal.
        /// </summary>
        public static Speed? FromDecimetersPerMinutes(decimal? decimetersperminutes)
        {
            if (decimetersperminutes.HasValue)
            {
                return FromDecimetersPerMinutes(decimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable DecimetersPerSecond.
        /// </summary>
        public static Speed? FromDecimetersPerSecond(double? decimeterspersecond)
        {
            if (decimeterspersecond.HasValue)
            {
                return FromDecimetersPerSecond(decimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable DecimetersPerSecond.
        /// </summary>
        public static Speed? FromDecimetersPerSecond(int? decimeterspersecond)
        {
            if (decimeterspersecond.HasValue)
            {
                return FromDecimetersPerSecond(decimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable DecimetersPerSecond.
        /// </summary>
        public static Speed? FromDecimetersPerSecond(long? decimeterspersecond)
        {
            if (decimeterspersecond.HasValue)
            {
                return FromDecimetersPerSecond(decimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from DecimetersPerSecond of type decimal.
        /// </summary>
        public static Speed? FromDecimetersPerSecond(decimal? decimeterspersecond)
        {
            if (decimeterspersecond.HasValue)
            {
                return FromDecimetersPerSecond(decimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable FeetPerSecond.
        /// </summary>
        public static Speed? FromFeetPerSecond(double? feetpersecond)
        {
            if (feetpersecond.HasValue)
            {
                return FromFeetPerSecond(feetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable FeetPerSecond.
        /// </summary>
        public static Speed? FromFeetPerSecond(int? feetpersecond)
        {
            if (feetpersecond.HasValue)
            {
                return FromFeetPerSecond(feetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable FeetPerSecond.
        /// </summary>
        public static Speed? FromFeetPerSecond(long? feetpersecond)
        {
            if (feetpersecond.HasValue)
            {
                return FromFeetPerSecond(feetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from FeetPerSecond of type decimal.
        /// </summary>
        public static Speed? FromFeetPerSecond(decimal? feetpersecond)
        {
            if (feetpersecond.HasValue)
            {
                return FromFeetPerSecond(feetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerHour.
        /// </summary>
        public static Speed? FromKilometersPerHour(double? kilometersperhour)
        {
            if (kilometersperhour.HasValue)
            {
                return FromKilometersPerHour(kilometersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerHour.
        /// </summary>
        public static Speed? FromKilometersPerHour(int? kilometersperhour)
        {
            if (kilometersperhour.HasValue)
            {
                return FromKilometersPerHour(kilometersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerHour.
        /// </summary>
        public static Speed? FromKilometersPerHour(long? kilometersperhour)
        {
            if (kilometersperhour.HasValue)
            {
                return FromKilometersPerHour(kilometersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from KilometersPerHour of type decimal.
        /// </summary>
        public static Speed? FromKilometersPerHour(decimal? kilometersperhour)
        {
            if (kilometersperhour.HasValue)
            {
                return FromKilometersPerHour(kilometersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerMinutes.
        /// </summary>
        public static Speed? FromKilometersPerMinutes(double? kilometersperminutes)
        {
            if (kilometersperminutes.HasValue)
            {
                return FromKilometersPerMinutes(kilometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerMinutes.
        /// </summary>
        public static Speed? FromKilometersPerMinutes(int? kilometersperminutes)
        {
            if (kilometersperminutes.HasValue)
            {
                return FromKilometersPerMinutes(kilometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerMinutes.
        /// </summary>
        public static Speed? FromKilometersPerMinutes(long? kilometersperminutes)
        {
            if (kilometersperminutes.HasValue)
            {
                return FromKilometersPerMinutes(kilometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from KilometersPerMinutes of type decimal.
        /// </summary>
        public static Speed? FromKilometersPerMinutes(decimal? kilometersperminutes)
        {
            if (kilometersperminutes.HasValue)
            {
                return FromKilometersPerMinutes(kilometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerSecond.
        /// </summary>
        public static Speed? FromKilometersPerSecond(double? kilometerspersecond)
        {
            if (kilometerspersecond.HasValue)
            {
                return FromKilometersPerSecond(kilometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerSecond.
        /// </summary>
        public static Speed? FromKilometersPerSecond(int? kilometerspersecond)
        {
            if (kilometerspersecond.HasValue)
            {
                return FromKilometersPerSecond(kilometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable KilometersPerSecond.
        /// </summary>
        public static Speed? FromKilometersPerSecond(long? kilometerspersecond)
        {
            if (kilometerspersecond.HasValue)
            {
                return FromKilometersPerSecond(kilometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from KilometersPerSecond of type decimal.
        /// </summary>
        public static Speed? FromKilometersPerSecond(decimal? kilometerspersecond)
        {
            if (kilometerspersecond.HasValue)
            {
                return FromKilometersPerSecond(kilometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable Knots.
        /// </summary>
        public static Speed? FromKnots(double? knots)
        {
            if (knots.HasValue)
            {
                return FromKnots(knots.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable Knots.
        /// </summary>
        public static Speed? FromKnots(int? knots)
        {
            if (knots.HasValue)
            {
                return FromKnots(knots.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable Knots.
        /// </summary>
        public static Speed? FromKnots(long? knots)
        {
            if (knots.HasValue)
            {
                return FromKnots(knots.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from Knots of type decimal.
        /// </summary>
        public static Speed? FromKnots(decimal? knots)
        {
            if (knots.HasValue)
            {
                return FromKnots(knots.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerHour.
        /// </summary>
        public static Speed? FromMetersPerHour(double? metersperhour)
        {
            if (metersperhour.HasValue)
            {
                return FromMetersPerHour(metersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerHour.
        /// </summary>
        public static Speed? FromMetersPerHour(int? metersperhour)
        {
            if (metersperhour.HasValue)
            {
                return FromMetersPerHour(metersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerHour.
        /// </summary>
        public static Speed? FromMetersPerHour(long? metersperhour)
        {
            if (metersperhour.HasValue)
            {
                return FromMetersPerHour(metersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MetersPerHour of type decimal.
        /// </summary>
        public static Speed? FromMetersPerHour(decimal? metersperhour)
        {
            if (metersperhour.HasValue)
            {
                return FromMetersPerHour(metersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerMinutes.
        /// </summary>
        public static Speed? FromMetersPerMinutes(double? metersperminutes)
        {
            if (metersperminutes.HasValue)
            {
                return FromMetersPerMinutes(metersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerMinutes.
        /// </summary>
        public static Speed? FromMetersPerMinutes(int? metersperminutes)
        {
            if (metersperminutes.HasValue)
            {
                return FromMetersPerMinutes(metersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerMinutes.
        /// </summary>
        public static Speed? FromMetersPerMinutes(long? metersperminutes)
        {
            if (metersperminutes.HasValue)
            {
                return FromMetersPerMinutes(metersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MetersPerMinutes of type decimal.
        /// </summary>
        public static Speed? FromMetersPerMinutes(decimal? metersperminutes)
        {
            if (metersperminutes.HasValue)
            {
                return FromMetersPerMinutes(metersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerSecond.
        /// </summary>
        public static Speed? FromMetersPerSecond(double? meterspersecond)
        {
            if (meterspersecond.HasValue)
            {
                return FromMetersPerSecond(meterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerSecond.
        /// </summary>
        public static Speed? FromMetersPerSecond(int? meterspersecond)
        {
            if (meterspersecond.HasValue)
            {
                return FromMetersPerSecond(meterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MetersPerSecond.
        /// </summary>
        public static Speed? FromMetersPerSecond(long? meterspersecond)
        {
            if (meterspersecond.HasValue)
            {
                return FromMetersPerSecond(meterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MetersPerSecond of type decimal.
        /// </summary>
        public static Speed? FromMetersPerSecond(decimal? meterspersecond)
        {
            if (meterspersecond.HasValue)
            {
                return FromMetersPerSecond(meterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MicrometersPerMinutes.
        /// </summary>
        public static Speed? FromMicrometersPerMinutes(double? micrometersperminutes)
        {
            if (micrometersperminutes.HasValue)
            {
                return FromMicrometersPerMinutes(micrometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MicrometersPerMinutes.
        /// </summary>
        public static Speed? FromMicrometersPerMinutes(int? micrometersperminutes)
        {
            if (micrometersperminutes.HasValue)
            {
                return FromMicrometersPerMinutes(micrometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MicrometersPerMinutes.
        /// </summary>
        public static Speed? FromMicrometersPerMinutes(long? micrometersperminutes)
        {
            if (micrometersperminutes.HasValue)
            {
                return FromMicrometersPerMinutes(micrometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MicrometersPerMinutes of type decimal.
        /// </summary>
        public static Speed? FromMicrometersPerMinutes(decimal? micrometersperminutes)
        {
            if (micrometersperminutes.HasValue)
            {
                return FromMicrometersPerMinutes(micrometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MicrometersPerSecond.
        /// </summary>
        public static Speed? FromMicrometersPerSecond(double? micrometerspersecond)
        {
            if (micrometerspersecond.HasValue)
            {
                return FromMicrometersPerSecond(micrometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MicrometersPerSecond.
        /// </summary>
        public static Speed? FromMicrometersPerSecond(int? micrometerspersecond)
        {
            if (micrometerspersecond.HasValue)
            {
                return FromMicrometersPerSecond(micrometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MicrometersPerSecond.
        /// </summary>
        public static Speed? FromMicrometersPerSecond(long? micrometerspersecond)
        {
            if (micrometerspersecond.HasValue)
            {
                return FromMicrometersPerSecond(micrometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MicrometersPerSecond of type decimal.
        /// </summary>
        public static Speed? FromMicrometersPerSecond(decimal? micrometerspersecond)
        {
            if (micrometerspersecond.HasValue)
            {
                return FromMicrometersPerSecond(micrometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MilesPerHour.
        /// </summary>
        public static Speed? FromMilesPerHour(double? milesperhour)
        {
            if (milesperhour.HasValue)
            {
                return FromMilesPerHour(milesperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MilesPerHour.
        /// </summary>
        public static Speed? FromMilesPerHour(int? milesperhour)
        {
            if (milesperhour.HasValue)
            {
                return FromMilesPerHour(milesperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MilesPerHour.
        /// </summary>
        public static Speed? FromMilesPerHour(long? milesperhour)
        {
            if (milesperhour.HasValue)
            {
                return FromMilesPerHour(milesperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MilesPerHour of type decimal.
        /// </summary>
        public static Speed? FromMilesPerHour(decimal? milesperhour)
        {
            if (milesperhour.HasValue)
            {
                return FromMilesPerHour(milesperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerHour.
        /// </summary>
        public static Speed? FromMillimetersPerHour(double? millimetersperhour)
        {
            if (millimetersperhour.HasValue)
            {
                return FromMillimetersPerHour(millimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerHour.
        /// </summary>
        public static Speed? FromMillimetersPerHour(int? millimetersperhour)
        {
            if (millimetersperhour.HasValue)
            {
                return FromMillimetersPerHour(millimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerHour.
        /// </summary>
        public static Speed? FromMillimetersPerHour(long? millimetersperhour)
        {
            if (millimetersperhour.HasValue)
            {
                return FromMillimetersPerHour(millimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MillimetersPerHour of type decimal.
        /// </summary>
        public static Speed? FromMillimetersPerHour(decimal? millimetersperhour)
        {
            if (millimetersperhour.HasValue)
            {
                return FromMillimetersPerHour(millimetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerMinutes.
        /// </summary>
        public static Speed? FromMillimetersPerMinutes(double? millimetersperminutes)
        {
            if (millimetersperminutes.HasValue)
            {
                return FromMillimetersPerMinutes(millimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerMinutes.
        /// </summary>
        public static Speed? FromMillimetersPerMinutes(int? millimetersperminutes)
        {
            if (millimetersperminutes.HasValue)
            {
                return FromMillimetersPerMinutes(millimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerMinutes.
        /// </summary>
        public static Speed? FromMillimetersPerMinutes(long? millimetersperminutes)
        {
            if (millimetersperminutes.HasValue)
            {
                return FromMillimetersPerMinutes(millimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MillimetersPerMinutes of type decimal.
        /// </summary>
        public static Speed? FromMillimetersPerMinutes(decimal? millimetersperminutes)
        {
            if (millimetersperminutes.HasValue)
            {
                return FromMillimetersPerMinutes(millimetersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerSecond.
        /// </summary>
        public static Speed? FromMillimetersPerSecond(double? millimeterspersecond)
        {
            if (millimeterspersecond.HasValue)
            {
                return FromMillimetersPerSecond(millimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerSecond.
        /// </summary>
        public static Speed? FromMillimetersPerSecond(int? millimeterspersecond)
        {
            if (millimeterspersecond.HasValue)
            {
                return FromMillimetersPerSecond(millimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable MillimetersPerSecond.
        /// </summary>
        public static Speed? FromMillimetersPerSecond(long? millimeterspersecond)
        {
            if (millimeterspersecond.HasValue)
            {
                return FromMillimetersPerSecond(millimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from MillimetersPerSecond of type decimal.
        /// </summary>
        public static Speed? FromMillimetersPerSecond(decimal? millimeterspersecond)
        {
            if (millimeterspersecond.HasValue)
            {
                return FromMillimetersPerSecond(millimeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable NanometersPerMinutes.
        /// </summary>
        public static Speed? FromNanometersPerMinutes(double? nanometersperminutes)
        {
            if (nanometersperminutes.HasValue)
            {
                return FromNanometersPerMinutes(nanometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable NanometersPerMinutes.
        /// </summary>
        public static Speed? FromNanometersPerMinutes(int? nanometersperminutes)
        {
            if (nanometersperminutes.HasValue)
            {
                return FromNanometersPerMinutes(nanometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable NanometersPerMinutes.
        /// </summary>
        public static Speed? FromNanometersPerMinutes(long? nanometersperminutes)
        {
            if (nanometersperminutes.HasValue)
            {
                return FromNanometersPerMinutes(nanometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from NanometersPerMinutes of type decimal.
        /// </summary>
        public static Speed? FromNanometersPerMinutes(decimal? nanometersperminutes)
        {
            if (nanometersperminutes.HasValue)
            {
                return FromNanometersPerMinutes(nanometersperminutes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable NanometersPerSecond.
        /// </summary>
        public static Speed? FromNanometersPerSecond(double? nanometerspersecond)
        {
            if (nanometerspersecond.HasValue)
            {
                return FromNanometersPerSecond(nanometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable NanometersPerSecond.
        /// </summary>
        public static Speed? FromNanometersPerSecond(int? nanometerspersecond)
        {
            if (nanometerspersecond.HasValue)
            {
                return FromNanometersPerSecond(nanometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from nullable NanometersPerSecond.
        /// </summary>
        public static Speed? FromNanometersPerSecond(long? nanometerspersecond)
        {
            if (nanometerspersecond.HasValue)
            {
                return FromNanometersPerSecond(nanometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Speed from NanometersPerSecond of type decimal.
        /// </summary>
        public static Speed? FromNanometersPerSecond(decimal? nanometerspersecond)
        {
            if (nanometerspersecond.HasValue)
            {
                return FromNanometersPerSecond(nanometerspersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Speed unit value.</returns>
        public static Speed From(double val, SpeedUnit fromUnit)
        {
            switch (fromUnit)
            {
                case SpeedUnit.CentimeterPerHour:
                    return FromCentimetersPerHour(val);
                case SpeedUnit.CentimeterPerMinute:
                    return FromCentimetersPerMinutes(val);
                case SpeedUnit.CentimeterPerSecond:
                    return FromCentimetersPerSecond(val);
                case SpeedUnit.DecimeterPerMinute:
                    return FromDecimetersPerMinutes(val);
                case SpeedUnit.DecimeterPerSecond:
                    return FromDecimetersPerSecond(val);
                case SpeedUnit.FootPerSecond:
                    return FromFeetPerSecond(val);
                case SpeedUnit.KilometerPerHour:
                    return FromKilometersPerHour(val);
                case SpeedUnit.KilometerPerMinute:
                    return FromKilometersPerMinutes(val);
                case SpeedUnit.KilometerPerSecond:
                    return FromKilometersPerSecond(val);
                case SpeedUnit.Knot:
                    return FromKnots(val);
                case SpeedUnit.MeterPerHour:
                    return FromMetersPerHour(val);
                case SpeedUnit.MeterPerMinute:
                    return FromMetersPerMinutes(val);
                case SpeedUnit.MeterPerSecond:
                    return FromMetersPerSecond(val);
                case SpeedUnit.MicrometerPerMinute:
                    return FromMicrometersPerMinutes(val);
                case SpeedUnit.MicrometerPerSecond:
                    return FromMicrometersPerSecond(val);
                case SpeedUnit.MilePerHour:
                    return FromMilesPerHour(val);
                case SpeedUnit.MillimeterPerHour:
                    return FromMillimetersPerHour(val);
                case SpeedUnit.MillimeterPerMinute:
                    return FromMillimetersPerMinutes(val);
                case SpeedUnit.MillimeterPerSecond:
                    return FromMillimetersPerSecond(val);
                case SpeedUnit.NanometerPerMinute:
                    return FromNanometersPerMinutes(val);
                case SpeedUnit.NanometerPerSecond:
                    return FromNanometersPerSecond(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Speed unit value.</returns>
        public static Speed? From(double? value, SpeedUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case SpeedUnit.CentimeterPerHour:
                    return FromCentimetersPerHour(value.Value);
                case SpeedUnit.CentimeterPerMinute:
                    return FromCentimetersPerMinutes(value.Value);
                case SpeedUnit.CentimeterPerSecond:
                    return FromCentimetersPerSecond(value.Value);
                case SpeedUnit.DecimeterPerMinute:
                    return FromDecimetersPerMinutes(value.Value);
                case SpeedUnit.DecimeterPerSecond:
                    return FromDecimetersPerSecond(value.Value);
                case SpeedUnit.FootPerSecond:
                    return FromFeetPerSecond(value.Value);
                case SpeedUnit.KilometerPerHour:
                    return FromKilometersPerHour(value.Value);
                case SpeedUnit.KilometerPerMinute:
                    return FromKilometersPerMinutes(value.Value);
                case SpeedUnit.KilometerPerSecond:
                    return FromKilometersPerSecond(value.Value);
                case SpeedUnit.Knot:
                    return FromKnots(value.Value);
                case SpeedUnit.MeterPerHour:
                    return FromMetersPerHour(value.Value);
                case SpeedUnit.MeterPerMinute:
                    return FromMetersPerMinutes(value.Value);
                case SpeedUnit.MeterPerSecond:
                    return FromMetersPerSecond(value.Value);
                case SpeedUnit.MicrometerPerMinute:
                    return FromMicrometersPerMinutes(value.Value);
                case SpeedUnit.MicrometerPerSecond:
                    return FromMicrometersPerSecond(value.Value);
                case SpeedUnit.MilePerHour:
                    return FromMilesPerHour(value.Value);
                case SpeedUnit.MillimeterPerHour:
                    return FromMillimetersPerHour(value.Value);
                case SpeedUnit.MillimeterPerMinute:
                    return FromMillimetersPerMinutes(value.Value);
                case SpeedUnit.MillimeterPerSecond:
                    return FromMillimetersPerSecond(value.Value);
                case SpeedUnit.NanometerPerMinute:
                    return FromNanometersPerMinutes(value.Value);
                case SpeedUnit.NanometerPerSecond:
                    return FromNanometersPerSecond(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(SpeedUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(SpeedUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Speed operator -(Speed right)
        {
            return new Speed(-right._metersPerSecond);
        }

        public static Speed operator +(Speed left, Speed right)
        {
            return new Speed(left._metersPerSecond + right._metersPerSecond);
        }

        public static Speed operator -(Speed left, Speed right)
        {
            return new Speed(left._metersPerSecond - right._metersPerSecond);
        }

        public static Speed operator *(double left, Speed right)
        {
            return new Speed(left*right._metersPerSecond);
        }

        public static Speed operator *(Speed left, double right)
        {
            return new Speed(left._metersPerSecond*(double)right);
        }

        public static Speed operator /(Speed left, double right)
        {
            return new Speed(left._metersPerSecond/(double)right);
        }

        public static double operator /(Speed left, Speed right)
        {
            return Convert.ToDouble(left._metersPerSecond/right._metersPerSecond);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Speed)) throw new ArgumentException("Expected type Speed.", "obj");
            return CompareTo((Speed) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Speed other)
        {
            return _metersPerSecond.CompareTo(other._metersPerSecond);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Speed left, Speed right)
        {
            return left._metersPerSecond <= right._metersPerSecond;
        }

        public static bool operator >=(Speed left, Speed right)
        {
            return left._metersPerSecond >= right._metersPerSecond;
        }

        public static bool operator <(Speed left, Speed right)
        {
            return left._metersPerSecond < right._metersPerSecond;
        }

        public static bool operator >(Speed left, Speed right)
        {
            return left._metersPerSecond > right._metersPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Speed left, Speed right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._metersPerSecond == right._metersPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Speed left, Speed right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._metersPerSecond != right._metersPerSecond;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _metersPerSecond.Equals(((Speed) obj)._metersPerSecond);
        }

        /// <summary>
        ///     Compare equality to another Speed by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Speed other, Speed maxError)
        {
            return Math.Abs(_metersPerSecond - other._metersPerSecond) <= maxError._metersPerSecond;
        }

        public override int GetHashCode()
        {
            return _metersPerSecond.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(SpeedUnit unit)
        {
            switch (unit)
            {
                case SpeedUnit.CentimeterPerHour:
                    return CentimetersPerHour;
                case SpeedUnit.CentimeterPerMinute:
                    return CentimetersPerMinutes;
                case SpeedUnit.CentimeterPerSecond:
                    return CentimetersPerSecond;
                case SpeedUnit.DecimeterPerMinute:
                    return DecimetersPerMinutes;
                case SpeedUnit.DecimeterPerSecond:
                    return DecimetersPerSecond;
                case SpeedUnit.FootPerSecond:
                    return FeetPerSecond;
                case SpeedUnit.KilometerPerHour:
                    return KilometersPerHour;
                case SpeedUnit.KilometerPerMinute:
                    return KilometersPerMinutes;
                case SpeedUnit.KilometerPerSecond:
                    return KilometersPerSecond;
                case SpeedUnit.Knot:
                    return Knots;
                case SpeedUnit.MeterPerHour:
                    return MetersPerHour;
                case SpeedUnit.MeterPerMinute:
                    return MetersPerMinutes;
                case SpeedUnit.MeterPerSecond:
                    return MetersPerSecond;
                case SpeedUnit.MicrometerPerMinute:
                    return MicrometersPerMinutes;
                case SpeedUnit.MicrometerPerSecond:
                    return MicrometersPerSecond;
                case SpeedUnit.MilePerHour:
                    return MilesPerHour;
                case SpeedUnit.MillimeterPerHour:
                    return MillimetersPerHour;
                case SpeedUnit.MillimeterPerMinute:
                    return MillimetersPerMinutes;
                case SpeedUnit.MillimeterPerSecond:
                    return MillimetersPerSecond;
                case SpeedUnit.NanometerPerMinute:
                    return NanometersPerMinutes;
                case SpeedUnit.NanometerPerSecond:
                    return NanometersPerSecond;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Speed Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Speed Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<Speed, SpeedUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    SpeedUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromMetersPerSecond(x.MetersPerSecond + y.MetersPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Speed result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Speed result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Speed);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static SpeedUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<SpeedUnit>(str.Trim());

            if (unit == SpeedUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized SpeedUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is MeterPerSecond
        /// </summary>
        public static SpeedUnit ToStringDefaultUnit { get; set; } = SpeedUnit.MeterPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(SpeedUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(SpeedUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(SpeedUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(SpeedUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Speed
        /// </summary>
        public static Speed MaxValue
        {
            get
            {
                return new Speed(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Speed
        /// </summary>
        public static Speed MinValue
        {
            get
            {
                return new Speed(double.MinValue);
            }
        }
    }
}
