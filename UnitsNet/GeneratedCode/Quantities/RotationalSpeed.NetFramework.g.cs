//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Rotational speed (sometimes called speed of revolution) is the number of complete rotations, revolutions, cycles, or turns per time unit. Rotational speed is a cyclic frequency, measured in radians per second or in hertz in the SI System by scientists, or in revolutions per minute (rpm or min-1) or revolutions per second in everyday life. The symbol for rotational speed is ω (the Greek lowercase letter "omega").
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct RotationalSpeed : IComparable, IComparable<RotationalSpeed>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable CentiradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromCentiradiansPerSecond(QuantityValue? centiradianspersecond)
        {
            return centiradianspersecond.HasValue ? FromCentiradiansPerSecond(centiradianspersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable DeciradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromDeciradiansPerSecond(QuantityValue? deciradianspersecond)
        {
            return deciradianspersecond.HasValue ? FromDeciradiansPerSecond(deciradianspersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable DegreesPerMinute.
        /// </summary>
        public static RotationalSpeed? FromDegreesPerMinute(QuantityValue? degreesperminute)
        {
            return degreesperminute.HasValue ? FromDegreesPerMinute(degreesperminute.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable DegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromDegreesPerSecond(QuantityValue? degreespersecond)
        {
            return degreespersecond.HasValue ? FromDegreesPerSecond(degreespersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MicrodegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMicrodegreesPerSecond(QuantityValue? microdegreespersecond)
        {
            return microdegreespersecond.HasValue ? FromMicrodegreesPerSecond(microdegreespersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MicroradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMicroradiansPerSecond(QuantityValue? microradianspersecond)
        {
            return microradianspersecond.HasValue ? FromMicroradiansPerSecond(microradianspersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MillidegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMillidegreesPerSecond(QuantityValue? millidegreespersecond)
        {
            return millidegreespersecond.HasValue ? FromMillidegreesPerSecond(millidegreespersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MilliradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMilliradiansPerSecond(QuantityValue? milliradianspersecond)
        {
            return milliradianspersecond.HasValue ? FromMilliradiansPerSecond(milliradianspersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable NanodegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromNanodegreesPerSecond(QuantityValue? nanodegreespersecond)
        {
            return nanodegreespersecond.HasValue ? FromNanodegreesPerSecond(nanodegreespersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable NanoradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromNanoradiansPerSecond(QuantityValue? nanoradianspersecond)
        {
            return nanoradianspersecond.HasValue ? FromNanoradiansPerSecond(nanoradianspersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable RadiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromRadiansPerSecond(QuantityValue? radianspersecond)
        {
            return radianspersecond.HasValue ? FromRadiansPerSecond(radianspersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable RevolutionsPerMinute.
        /// </summary>
        public static RotationalSpeed? FromRevolutionsPerMinute(QuantityValue? revolutionsperminute)
        {
            return revolutionsperminute.HasValue ? FromRevolutionsPerMinute(revolutionsperminute.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable RevolutionsPerSecond.
        /// </summary>
        public static RotationalSpeed? FromRevolutionsPerSecond(QuantityValue? revolutionspersecond)
        {
            return revolutionspersecond.HasValue ? FromRevolutionsPerSecond(revolutionspersecond.Value) : default(RotationalSpeed?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RotationalSpeedUnit" /> to <see cref="RotationalSpeed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RotationalSpeed unit value.</returns>
        public static RotationalSpeed? From(QuantityValue? value, RotationalSpeedUnit fromUnit)
        {
            return value.HasValue ? new RotationalSpeed((double)value.Value, fromUnit) : default(RotationalSpeed?);
        }

        #endregion

        #region Arithmetic Operators

        public static RotationalSpeed operator -(RotationalSpeed right)
        {
            return new RotationalSpeed(-right.Value, right.Unit);
        }

        public static RotationalSpeed operator +(RotationalSpeed left, RotationalSpeed right)
        {
            return new RotationalSpeed(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static RotationalSpeed operator -(RotationalSpeed left, RotationalSpeed right)
        {
            return new RotationalSpeed(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static RotationalSpeed operator *(double left, RotationalSpeed right)
        {
            return new RotationalSpeed(left * right.Value, right.Unit);
        }

        public static RotationalSpeed operator *(RotationalSpeed left, double right)
        {
            return new RotationalSpeed(left.Value * right, left.Unit);
        }

        public static RotationalSpeed operator /(RotationalSpeed left, double right)
        {
            return new RotationalSpeed(left.Value / right, left.Unit);
        }

        public static double operator /(RotationalSpeed left, RotationalSpeed right)
        {
            return left.RadiansPerSecond / right.RadiansPerSecond;
        }

        #endregion

        public static bool operator <=(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(RotationalSpeed left, RotationalSpeed right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(RotationalSpeed left, RotationalSpeed right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
