//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     A property of body reflects how its mass is distributed with regard to an axis.
    /// </summary>
    public partial struct MassMomentOfInertia<T> : IQuantity<MassMomentOfInertiaUnit>, IEquatable<MassMomentOfInertia<T>>, IComparable, IComparable<MassMomentOfInertia<T>>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassMomentOfInertiaUnit? _unit;

        static MassMomentOfInertia()
        {
            BaseDimensions = new BaseDimensions(2, 1, 0, 0, 0, 0, 0);

            Info = new QuantityInfo<MassMomentOfInertiaUnit>(QuantityType.MassMomentOfInertia,
                new UnitInfo<MassMomentOfInertiaUnit>[] {
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.GramSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.GramSquareDecimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.GramSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.GramSquareMillimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilogramSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilogramSquareDecimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilogramSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilogramSquareMillimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilotonneSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilotonneSquareDecimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilotonneSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.KilotonneSquareMilimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MegatonneSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MegatonneSquareDecimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MegatonneSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MegatonneSquareMilimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MilligramSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MilligramSquareDecimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MilligramSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.MilligramSquareMillimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.PoundSquareFoot, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.PoundSquareInch, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.SlugSquareFoot, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.SlugSquareInch, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.TonneSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.TonneSquareDecimeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.TonneSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<MassMomentOfInertiaUnit>(MassMomentOfInertiaUnit.TonneSquareMilimeter, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MassMomentOfInertia(double value, MassMomentOfInertiaUnit unit)
        {
            if(unit == MassMomentOfInertiaUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public MassMomentOfInertia(double value, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<MassMomentOfInertiaUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of <see cref="MassMomentOfInertia{T}" />, which is KilogramSquareMeter. All conversions go via this value.
        /// </summary>
        public static MassMomentOfInertiaUnit BaseUnit { get; } = MassMomentOfInertiaUnit.KilogramSquareMeter;

        /// <summary>
        /// Represents the largest possible value of <see cref="MassMomentOfInertia{T}" />
        /// </summary>
        public static MassMomentOfInertia<T> MaxValue { get; } = new MassMomentOfInertia<T>(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of <see cref="MassMomentOfInertia{T}" />
        /// </summary>
        public static MassMomentOfInertia<T> MinValue { get; } = new MassMomentOfInertia<T>(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.MassMomentOfInertia;

        /// <summary>
        ///     All units of measurement for the <see cref="MassMomentOfInertia{T}" /> quantity.
        /// </summary>
        public static MassMomentOfInertiaUnit[] Units { get; } = Enum.GetValues(typeof(MassMomentOfInertiaUnit)).Cast<MassMomentOfInertiaUnit>().Except(new MassMomentOfInertiaUnit[]{ MassMomentOfInertiaUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit KilogramSquareMeter.
        /// </summary>
        public static MassMomentOfInertia<T> Zero { get; } = new MassMomentOfInertia<T>(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public MassMomentOfInertiaUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<MassMomentOfInertiaUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => MassMomentOfInertia<T>.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => MassMomentOfInertia<T>.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in GramSquareCentimeters.
        /// </summary>
        public double GramSquareCentimeters => As(MassMomentOfInertiaUnit.GramSquareCentimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in GramSquareDecimeters.
        /// </summary>
        public double GramSquareDecimeters => As(MassMomentOfInertiaUnit.GramSquareDecimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in GramSquareMeters.
        /// </summary>
        public double GramSquareMeters => As(MassMomentOfInertiaUnit.GramSquareMeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in GramSquareMillimeters.
        /// </summary>
        public double GramSquareMillimeters => As(MassMomentOfInertiaUnit.GramSquareMillimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilogramSquareCentimeters.
        /// </summary>
        public double KilogramSquareCentimeters => As(MassMomentOfInertiaUnit.KilogramSquareCentimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilogramSquareDecimeters.
        /// </summary>
        public double KilogramSquareDecimeters => As(MassMomentOfInertiaUnit.KilogramSquareDecimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilogramSquareMeters.
        /// </summary>
        public double KilogramSquareMeters => As(MassMomentOfInertiaUnit.KilogramSquareMeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilogramSquareMillimeters.
        /// </summary>
        public double KilogramSquareMillimeters => As(MassMomentOfInertiaUnit.KilogramSquareMillimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilotonneSquareCentimeters.
        /// </summary>
        public double KilotonneSquareCentimeters => As(MassMomentOfInertiaUnit.KilotonneSquareCentimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilotonneSquareDecimeters.
        /// </summary>
        public double KilotonneSquareDecimeters => As(MassMomentOfInertiaUnit.KilotonneSquareDecimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilotonneSquareMeters.
        /// </summary>
        public double KilotonneSquareMeters => As(MassMomentOfInertiaUnit.KilotonneSquareMeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in KilotonneSquareMilimeters.
        /// </summary>
        public double KilotonneSquareMilimeters => As(MassMomentOfInertiaUnit.KilotonneSquareMilimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MegatonneSquareCentimeters.
        /// </summary>
        public double MegatonneSquareCentimeters => As(MassMomentOfInertiaUnit.MegatonneSquareCentimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MegatonneSquareDecimeters.
        /// </summary>
        public double MegatonneSquareDecimeters => As(MassMomentOfInertiaUnit.MegatonneSquareDecimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MegatonneSquareMeters.
        /// </summary>
        public double MegatonneSquareMeters => As(MassMomentOfInertiaUnit.MegatonneSquareMeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MegatonneSquareMilimeters.
        /// </summary>
        public double MegatonneSquareMilimeters => As(MassMomentOfInertiaUnit.MegatonneSquareMilimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MilligramSquareCentimeters.
        /// </summary>
        public double MilligramSquareCentimeters => As(MassMomentOfInertiaUnit.MilligramSquareCentimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MilligramSquareDecimeters.
        /// </summary>
        public double MilligramSquareDecimeters => As(MassMomentOfInertiaUnit.MilligramSquareDecimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MilligramSquareMeters.
        /// </summary>
        public double MilligramSquareMeters => As(MassMomentOfInertiaUnit.MilligramSquareMeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in MilligramSquareMillimeters.
        /// </summary>
        public double MilligramSquareMillimeters => As(MassMomentOfInertiaUnit.MilligramSquareMillimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in PoundSquareFeet.
        /// </summary>
        public double PoundSquareFeet => As(MassMomentOfInertiaUnit.PoundSquareFoot);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in PoundSquareInches.
        /// </summary>
        public double PoundSquareInches => As(MassMomentOfInertiaUnit.PoundSquareInch);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in SlugSquareFeet.
        /// </summary>
        public double SlugSquareFeet => As(MassMomentOfInertiaUnit.SlugSquareFoot);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in SlugSquareInches.
        /// </summary>
        public double SlugSquareInches => As(MassMomentOfInertiaUnit.SlugSquareInch);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in TonneSquareCentimeters.
        /// </summary>
        public double TonneSquareCentimeters => As(MassMomentOfInertiaUnit.TonneSquareCentimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in TonneSquareDecimeters.
        /// </summary>
        public double TonneSquareDecimeters => As(MassMomentOfInertiaUnit.TonneSquareDecimeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in TonneSquareMeters.
        /// </summary>
        public double TonneSquareMeters => As(MassMomentOfInertiaUnit.TonneSquareMeter);

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> in TonneSquareMilimeters.
        /// </summary>
        public double TonneSquareMilimeters => As(MassMomentOfInertiaUnit.TonneSquareMilimeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(MassMomentOfInertiaUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(MassMomentOfInertiaUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from GramSquareCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromGramSquareCentimeters(QuantityValue gramsquarecentimeters)
        {
            double value = (double) gramsquarecentimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.GramSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from GramSquareDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromGramSquareDecimeters(QuantityValue gramsquaredecimeters)
        {
            double value = (double) gramsquaredecimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.GramSquareDecimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from GramSquareMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromGramSquareMeters(QuantityValue gramsquaremeters)
        {
            double value = (double) gramsquaremeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.GramSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from GramSquareMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromGramSquareMillimeters(QuantityValue gramsquaremillimeters)
        {
            double value = (double) gramsquaremillimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.GramSquareMillimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilogramSquareCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilogramSquareCentimeters(QuantityValue kilogramsquarecentimeters)
        {
            double value = (double) kilogramsquarecentimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilogramSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilogramSquareDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilogramSquareDecimeters(QuantityValue kilogramsquaredecimeters)
        {
            double value = (double) kilogramsquaredecimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilogramSquareDecimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilogramSquareMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilogramSquareMeters(QuantityValue kilogramsquaremeters)
        {
            double value = (double) kilogramsquaremeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilogramSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilogramSquareMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilogramSquareMillimeters(QuantityValue kilogramsquaremillimeters)
        {
            double value = (double) kilogramsquaremillimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilogramSquareMillimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilotonneSquareCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilotonneSquareCentimeters(QuantityValue kilotonnesquarecentimeters)
        {
            double value = (double) kilotonnesquarecentimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilotonneSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilotonneSquareDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilotonneSquareDecimeters(QuantityValue kilotonnesquaredecimeters)
        {
            double value = (double) kilotonnesquaredecimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilotonneSquareDecimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilotonneSquareMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilotonneSquareMeters(QuantityValue kilotonnesquaremeters)
        {
            double value = (double) kilotonnesquaremeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilotonneSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from KilotonneSquareMilimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromKilotonneSquareMilimeters(QuantityValue kilotonnesquaremilimeters)
        {
            double value = (double) kilotonnesquaremilimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.KilotonneSquareMilimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MegatonneSquareCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMegatonneSquareCentimeters(QuantityValue megatonnesquarecentimeters)
        {
            double value = (double) megatonnesquarecentimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MegatonneSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MegatonneSquareDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMegatonneSquareDecimeters(QuantityValue megatonnesquaredecimeters)
        {
            double value = (double) megatonnesquaredecimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MegatonneSquareDecimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MegatonneSquareMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMegatonneSquareMeters(QuantityValue megatonnesquaremeters)
        {
            double value = (double) megatonnesquaremeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MegatonneSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MegatonneSquareMilimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMegatonneSquareMilimeters(QuantityValue megatonnesquaremilimeters)
        {
            double value = (double) megatonnesquaremilimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MegatonneSquareMilimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MilligramSquareCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMilligramSquareCentimeters(QuantityValue milligramsquarecentimeters)
        {
            double value = (double) milligramsquarecentimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MilligramSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MilligramSquareDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMilligramSquareDecimeters(QuantityValue milligramsquaredecimeters)
        {
            double value = (double) milligramsquaredecimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MilligramSquareDecimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MilligramSquareMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMilligramSquareMeters(QuantityValue milligramsquaremeters)
        {
            double value = (double) milligramsquaremeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MilligramSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from MilligramSquareMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromMilligramSquareMillimeters(QuantityValue milligramsquaremillimeters)
        {
            double value = (double) milligramsquaremillimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.MilligramSquareMillimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from PoundSquareFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromPoundSquareFeet(QuantityValue poundsquarefeet)
        {
            double value = (double) poundsquarefeet;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.PoundSquareFoot);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from PoundSquareInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromPoundSquareInches(QuantityValue poundsquareinches)
        {
            double value = (double) poundsquareinches;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.PoundSquareInch);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from SlugSquareFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromSlugSquareFeet(QuantityValue slugsquarefeet)
        {
            double value = (double) slugsquarefeet;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.SlugSquareFoot);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from SlugSquareInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromSlugSquareInches(QuantityValue slugsquareinches)
        {
            double value = (double) slugsquareinches;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.SlugSquareInch);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from TonneSquareCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromTonneSquareCentimeters(QuantityValue tonnesquarecentimeters)
        {
            double value = (double) tonnesquarecentimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.TonneSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from TonneSquareDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromTonneSquareDecimeters(QuantityValue tonnesquaredecimeters)
        {
            double value = (double) tonnesquaredecimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.TonneSquareDecimeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from TonneSquareMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromTonneSquareMeters(QuantityValue tonnesquaremeters)
        {
            double value = (double) tonnesquaremeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.TonneSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="MassMomentOfInertia{T}" /> from TonneSquareMilimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassMomentOfInertia<T> FromTonneSquareMilimeters(QuantityValue tonnesquaremilimeters)
        {
            double value = (double) tonnesquaremilimeters;
            return new MassMomentOfInertia<T>(value, MassMomentOfInertiaUnit.TonneSquareMilimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassMomentOfInertiaUnit" /> to <see cref="MassMomentOfInertia{T}" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><see cref="MassMomentOfInertia{T}" /> unit value.</returns>
        public static MassMomentOfInertia<T> From(QuantityValue value, MassMomentOfInertiaUnit fromUnit)
        {
            return new MassMomentOfInertia<T>((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MassMomentOfInertia<T> Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static MassMomentOfInertia<T> Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<MassMomentOfInertia<T>, MassMomentOfInertiaUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MassMomentOfInertia<T> result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out MassMomentOfInertia<T> result)
        {
            return QuantityParser.Default.TryParse<MassMomentOfInertia<T>, MassMomentOfInertiaUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassMomentOfInertiaUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassMomentOfInertiaUnit ParseUnit(string str, [CanBeNull] IFormatProvider provider)
        {
            return UnitParser.Default.Parse<MassMomentOfInertiaUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.MassMomentOfInertiaUnit)"/>
        public static bool TryParseUnit(string str, out MassMomentOfInertiaUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out MassMomentOfInertiaUnit unit)
        {
            return UnitParser.Default.TryParse<MassMomentOfInertiaUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static MassMomentOfInertia<T> operator -(MassMomentOfInertia<T> right)
        {
            return new MassMomentOfInertia<T>(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="MassMomentOfInertia{T}"/> from adding two <see cref="MassMomentOfInertia{T}"/>.</summary>
        public static MassMomentOfInertia<T> operator +(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return new MassMomentOfInertia<T>(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="MassMomentOfInertia{T}"/> from subtracting two <see cref="MassMomentOfInertia{T}"/>.</summary>
        public static MassMomentOfInertia<T> operator -(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return new MassMomentOfInertia<T>(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="MassMomentOfInertia{T}"/> from multiplying value and <see cref="MassMomentOfInertia{T}"/>.</summary>
        public static MassMomentOfInertia<T> operator *(double left, MassMomentOfInertia<T> right)
        {
            return new MassMomentOfInertia<T>(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="MassMomentOfInertia{T}"/> from multiplying value and <see cref="MassMomentOfInertia{T}"/>.</summary>
        public static MassMomentOfInertia<T> operator *(MassMomentOfInertia<T> left, double right)
        {
            return new MassMomentOfInertia<T>(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="MassMomentOfInertia{T}"/> from dividing <see cref="MassMomentOfInertia{T}"/> by value.</summary>
        public static MassMomentOfInertia<T> operator /(MassMomentOfInertia<T> left, double right)
        {
            return new MassMomentOfInertia<T>(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="MassMomentOfInertia{T}"/> by <see cref="MassMomentOfInertia{T}"/>.</summary>
        public static double operator /(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return left.KilogramSquareMeters / right.KilogramSquareMeters;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MassMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MassMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(MassMomentOfInertia<T> left, MassMomentOfInertia<T> right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is MassMomentOfInertia<T> objMassMomentOfInertia)) throw new ArgumentException("Expected type MassMomentOfInertia.", nameof(obj));

            return CompareTo(objMassMomentOfInertia);
        }

        /// <inheritdoc />
        public int CompareTo(MassMomentOfInertia<T> other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(MassMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is MassMomentOfInertia<T> objMassMomentOfInertia))
                return false;

            return Equals(objMassMomentOfInertia);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(MassMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(MassMomentOfInertia<T> other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another <see cref="MassMomentOfInertia{T}" /> within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(MassMomentOfInertia<T> other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="MassMomentOfInertia{T}" />.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MassMomentOfInertiaUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is MassMomentOfInertiaUnit unitAsMassMomentOfInertiaUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MassMomentOfInertiaUnit)} is supported.", nameof(unit));

            return As(unitAsMassMomentOfInertiaUnit);
        }

        /// <summary>
        ///     Converts this <see cref="MassMomentOfInertia{T}" /> to another <see cref="MassMomentOfInertia{T}" /> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A <see cref="MassMomentOfInertia{T}" /> with the specified unit.</returns>
        public MassMomentOfInertia<T> ToUnit(MassMomentOfInertiaUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new MassMomentOfInertia<T>(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is MassMomentOfInertiaUnit unitAsMassMomentOfInertiaUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MassMomentOfInertiaUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsMassMomentOfInertiaUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public MassMomentOfInertia<T> ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<MassMomentOfInertiaUnit> IQuantity<MassMomentOfInertiaUnit>.ToUnit(MassMomentOfInertiaUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<MassMomentOfInertiaUnit> IQuantity<MassMomentOfInertiaUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case MassMomentOfInertiaUnit.GramSquareCentimeter: return _value/1e7;
                case MassMomentOfInertiaUnit.GramSquareDecimeter: return _value/1e5;
                case MassMomentOfInertiaUnit.GramSquareMeter: return _value/1e3;
                case MassMomentOfInertiaUnit.GramSquareMillimeter: return _value/1e9;
                case MassMomentOfInertiaUnit.KilogramSquareCentimeter: return (_value/1e7) * 1e3d;
                case MassMomentOfInertiaUnit.KilogramSquareDecimeter: return (_value/1e5) * 1e3d;
                case MassMomentOfInertiaUnit.KilogramSquareMeter: return (_value/1e3) * 1e3d;
                case MassMomentOfInertiaUnit.KilogramSquareMillimeter: return (_value/1e9) * 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareCentimeter: return (_value/1e1) * 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareDecimeter: return (_value/1e-1) * 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareMeter: return (_value/1e-3) * 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareMilimeter: return (_value/1e3) * 1e3d;
                case MassMomentOfInertiaUnit.MegatonneSquareCentimeter: return (_value/1e1) * 1e6d;
                case MassMomentOfInertiaUnit.MegatonneSquareDecimeter: return (_value/1e-1) * 1e6d;
                case MassMomentOfInertiaUnit.MegatonneSquareMeter: return (_value/1e-3) * 1e6d;
                case MassMomentOfInertiaUnit.MegatonneSquareMilimeter: return (_value/1e3) * 1e6d;
                case MassMomentOfInertiaUnit.MilligramSquareCentimeter: return (_value/1e7) * 1e-3d;
                case MassMomentOfInertiaUnit.MilligramSquareDecimeter: return (_value/1e5) * 1e-3d;
                case MassMomentOfInertiaUnit.MilligramSquareMeter: return (_value/1e3) * 1e-3d;
                case MassMomentOfInertiaUnit.MilligramSquareMillimeter: return (_value/1e9) * 1e-3d;
                case MassMomentOfInertiaUnit.PoundSquareFoot: return _value*4.21401101e-2;
                case MassMomentOfInertiaUnit.PoundSquareInch: return _value*2.9263965e-4;
                case MassMomentOfInertiaUnit.SlugSquareFoot: return _value*1.3558179619;
                case MassMomentOfInertiaUnit.SlugSquareInch: return _value*9.41540242e-3;
                case MassMomentOfInertiaUnit.TonneSquareCentimeter: return _value/1e1;
                case MassMomentOfInertiaUnit.TonneSquareDecimeter: return _value/1e-1;
                case MassMomentOfInertiaUnit.TonneSquareMeter: return _value/1e-3;
                case MassMomentOfInertiaUnit.TonneSquareMilimeter: return _value/1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal MassMomentOfInertia<T> ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new MassMomentOfInertia<T>(baseUnitValue, BaseUnit);
        }

        private double GetValueAs(MassMomentOfInertiaUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case MassMomentOfInertiaUnit.GramSquareCentimeter: return baseUnitValue*1e7;
                case MassMomentOfInertiaUnit.GramSquareDecimeter: return baseUnitValue*1e5;
                case MassMomentOfInertiaUnit.GramSquareMeter: return baseUnitValue*1e3;
                case MassMomentOfInertiaUnit.GramSquareMillimeter: return baseUnitValue*1e9;
                case MassMomentOfInertiaUnit.KilogramSquareCentimeter: return (baseUnitValue*1e7) / 1e3d;
                case MassMomentOfInertiaUnit.KilogramSquareDecimeter: return (baseUnitValue*1e5) / 1e3d;
                case MassMomentOfInertiaUnit.KilogramSquareMeter: return (baseUnitValue*1e3) / 1e3d;
                case MassMomentOfInertiaUnit.KilogramSquareMillimeter: return (baseUnitValue*1e9) / 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareCentimeter: return (baseUnitValue*1e1) / 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareDecimeter: return (baseUnitValue*1e-1) / 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareMeter: return (baseUnitValue*1e-3) / 1e3d;
                case MassMomentOfInertiaUnit.KilotonneSquareMilimeter: return (baseUnitValue*1e3) / 1e3d;
                case MassMomentOfInertiaUnit.MegatonneSquareCentimeter: return (baseUnitValue*1e1) / 1e6d;
                case MassMomentOfInertiaUnit.MegatonneSquareDecimeter: return (baseUnitValue*1e-1) / 1e6d;
                case MassMomentOfInertiaUnit.MegatonneSquareMeter: return (baseUnitValue*1e-3) / 1e6d;
                case MassMomentOfInertiaUnit.MegatonneSquareMilimeter: return (baseUnitValue*1e3) / 1e6d;
                case MassMomentOfInertiaUnit.MilligramSquareCentimeter: return (baseUnitValue*1e7) / 1e-3d;
                case MassMomentOfInertiaUnit.MilligramSquareDecimeter: return (baseUnitValue*1e5) / 1e-3d;
                case MassMomentOfInertiaUnit.MilligramSquareMeter: return (baseUnitValue*1e3) / 1e-3d;
                case MassMomentOfInertiaUnit.MilligramSquareMillimeter: return (baseUnitValue*1e9) / 1e-3d;
                case MassMomentOfInertiaUnit.PoundSquareFoot: return baseUnitValue/4.21401101e-2;
                case MassMomentOfInertiaUnit.PoundSquareInch: return baseUnitValue/2.9263965e-4;
                case MassMomentOfInertiaUnit.SlugSquareFoot: return baseUnitValue/1.3558179619;
                case MassMomentOfInertiaUnit.SlugSquareInch: return baseUnitValue/9.41540242e-3;
                case MassMomentOfInertiaUnit.TonneSquareCentimeter: return baseUnitValue*1e1;
                case MassMomentOfInertiaUnit.TonneSquareDecimeter: return baseUnitValue*1e-1;
                case MassMomentOfInertiaUnit.TonneSquareMeter: return baseUnitValue*1e-3;
                case MassMomentOfInertiaUnit.TonneSquareMilimeter: return baseUnitValue*1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<MassMomentOfInertiaUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(MassMomentOfInertia<T>)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(MassMomentOfInertia<T>)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(MassMomentOfInertia<T>)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(MassMomentOfInertia<T>))
                return this;
            else if(conversionType == typeof(MassMomentOfInertiaUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return MassMomentOfInertia<T>.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return MassMomentOfInertia<T>.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(MassMomentOfInertia<T>)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
