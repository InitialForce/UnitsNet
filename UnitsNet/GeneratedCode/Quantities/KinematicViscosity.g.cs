//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The viscosity of a fluid is a measure of its resistance to gradual deformation by shear stress or tensile stress.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class KinematicViscosity
#else
    public partial struct KinematicViscosity : IComparable, IComparable<KinematicViscosity>
#endif
    {
        /// <summary>
        ///     Base unit of KinematicViscosity.
        /// </summary>
        private readonly double _squareMetersPerSecond;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public KinematicViscosity() : this(0)
        {
        }
#endif

        public KinematicViscosity(double squaremeterspersecond)
        {
            _squareMetersPerSecond = Convert.ToDouble(squaremeterspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        KinematicViscosity(long squaremeterspersecond)
        {
            _squareMetersPerSecond = Convert.ToDouble(squaremeterspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        KinematicViscosity(decimal squaremeterspersecond)
        {
            _squareMetersPerSecond = Convert.ToDouble(squaremeterspersecond);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.KinematicViscosity;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static KinematicViscosityUnit BaseUnit
        {
            get { return KinematicViscosityUnit.SquareMeterPerSecond; }
        }

        /// <summary>
        ///     All units of measurement for the KinematicViscosity quantity.
        /// </summary>
        public static KinematicViscosityUnit[] Units { get; } = Enum.GetValues(typeof(KinematicViscosityUnit)).Cast<KinematicViscosityUnit>().ToArray();

        /// <summary>
        ///     Get KinematicViscosity in Centistokes.
        /// </summary>
        public double Centistokes
        {
            get { return (_squareMetersPerSecond*1e4) / 1e-2d; }
        }

        /// <summary>
        ///     Get KinematicViscosity in Decistokes.
        /// </summary>
        public double Decistokes
        {
            get { return (_squareMetersPerSecond*1e4) / 1e-1d; }
        }

        /// <summary>
        ///     Get KinematicViscosity in Kilostokes.
        /// </summary>
        public double Kilostokes
        {
            get { return (_squareMetersPerSecond*1e4) / 1e3d; }
        }

        /// <summary>
        ///     Get KinematicViscosity in Microstokes.
        /// </summary>
        public double Microstokes
        {
            get { return (_squareMetersPerSecond*1e4) / 1e-6d; }
        }

        /// <summary>
        ///     Get KinematicViscosity in Millistokes.
        /// </summary>
        public double Millistokes
        {
            get { return (_squareMetersPerSecond*1e4) / 1e-3d; }
        }

        /// <summary>
        ///     Get KinematicViscosity in Nanostokes.
        /// </summary>
        public double Nanostokes
        {
            get { return (_squareMetersPerSecond*1e4) / 1e-9d; }
        }

        /// <summary>
        ///     Get KinematicViscosity in SquareMetersPerSecond.
        /// </summary>
        public double SquareMetersPerSecond
        {
            get { return _squareMetersPerSecond; }
        }

        /// <summary>
        ///     Get KinematicViscosity in Stokes.
        /// </summary>
        public double Stokes
        {
            get { return _squareMetersPerSecond*1e4; }
        }

        #endregion

        #region Static

        public static KinematicViscosity Zero
        {
            get { return new KinematicViscosity(); }
        }

        /// <summary>
        ///     Get KinematicViscosity from Centistokes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromCentistokes(double centistokes)
        {
            return new KinematicViscosity((centistokes/1e4) * 1e-2d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Centistokes.
        /// </summary>
        public static KinematicViscosity FromCentistokes(int centistokes)
        {
            return new KinematicViscosity((centistokes/1e4) * 1e-2d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Centistokes.
        /// </summary>
        public static KinematicViscosity FromCentistokes(long centistokes)
        {
            return new KinematicViscosity((centistokes/1e4) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from Centistokes of type decimal.
        /// </summary>
        public static KinematicViscosity FromCentistokes(decimal centistokes)
        {
            return new KinematicViscosity((Convert.ToDouble(centistokes)/1e4) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get KinematicViscosity from Decistokes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromDecistokes(double decistokes)
        {
            return new KinematicViscosity((decistokes/1e4) * 1e-1d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Decistokes.
        /// </summary>
        public static KinematicViscosity FromDecistokes(int decistokes)
        {
            return new KinematicViscosity((decistokes/1e4) * 1e-1d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Decistokes.
        /// </summary>
        public static KinematicViscosity FromDecistokes(long decistokes)
        {
            return new KinematicViscosity((decistokes/1e4) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from Decistokes of type decimal.
        /// </summary>
        public static KinematicViscosity FromDecistokes(decimal decistokes)
        {
            return new KinematicViscosity((Convert.ToDouble(decistokes)/1e4) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get KinematicViscosity from Kilostokes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromKilostokes(double kilostokes)
        {
            return new KinematicViscosity((kilostokes/1e4) * 1e3d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Kilostokes.
        /// </summary>
        public static KinematicViscosity FromKilostokes(int kilostokes)
        {
            return new KinematicViscosity((kilostokes/1e4) * 1e3d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Kilostokes.
        /// </summary>
        public static KinematicViscosity FromKilostokes(long kilostokes)
        {
            return new KinematicViscosity((kilostokes/1e4) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from Kilostokes of type decimal.
        /// </summary>
        public static KinematicViscosity FromKilostokes(decimal kilostokes)
        {
            return new KinematicViscosity((Convert.ToDouble(kilostokes)/1e4) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get KinematicViscosity from Microstokes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromMicrostokes(double microstokes)
        {
            return new KinematicViscosity((microstokes/1e4) * 1e-6d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Microstokes.
        /// </summary>
        public static KinematicViscosity FromMicrostokes(int microstokes)
        {
            return new KinematicViscosity((microstokes/1e4) * 1e-6d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Microstokes.
        /// </summary>
        public static KinematicViscosity FromMicrostokes(long microstokes)
        {
            return new KinematicViscosity((microstokes/1e4) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from Microstokes of type decimal.
        /// </summary>
        public static KinematicViscosity FromMicrostokes(decimal microstokes)
        {
            return new KinematicViscosity((Convert.ToDouble(microstokes)/1e4) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get KinematicViscosity from Millistokes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromMillistokes(double millistokes)
        {
            return new KinematicViscosity((millistokes/1e4) * 1e-3d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Millistokes.
        /// </summary>
        public static KinematicViscosity FromMillistokes(int millistokes)
        {
            return new KinematicViscosity((millistokes/1e4) * 1e-3d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Millistokes.
        /// </summary>
        public static KinematicViscosity FromMillistokes(long millistokes)
        {
            return new KinematicViscosity((millistokes/1e4) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from Millistokes of type decimal.
        /// </summary>
        public static KinematicViscosity FromMillistokes(decimal millistokes)
        {
            return new KinematicViscosity((Convert.ToDouble(millistokes)/1e4) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get KinematicViscosity from Nanostokes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromNanostokes(double nanostokes)
        {
            return new KinematicViscosity((nanostokes/1e4) * 1e-9d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Nanostokes.
        /// </summary>
        public static KinematicViscosity FromNanostokes(int nanostokes)
        {
            return new KinematicViscosity((nanostokes/1e4) * 1e-9d);
        }

        /// <summary>
        ///     Get KinematicViscosity from Nanostokes.
        /// </summary>
        public static KinematicViscosity FromNanostokes(long nanostokes)
        {
            return new KinematicViscosity((nanostokes/1e4) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from Nanostokes of type decimal.
        /// </summary>
        public static KinematicViscosity FromNanostokes(decimal nanostokes)
        {
            return new KinematicViscosity((Convert.ToDouble(nanostokes)/1e4) * 1e-9d);
        }
#endif

        /// <summary>
        ///     Get KinematicViscosity from SquareMetersPerSecond.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromSquareMetersPerSecond(double squaremeterspersecond)
        {
            return new KinematicViscosity(squaremeterspersecond);
        }

        /// <summary>
        ///     Get KinematicViscosity from SquareMetersPerSecond.
        /// </summary>
        public static KinematicViscosity FromSquareMetersPerSecond(int squaremeterspersecond)
        {
            return new KinematicViscosity(squaremeterspersecond);
        }

        /// <summary>
        ///     Get KinematicViscosity from SquareMetersPerSecond.
        /// </summary>
        public static KinematicViscosity FromSquareMetersPerSecond(long squaremeterspersecond)
        {
            return new KinematicViscosity(squaremeterspersecond);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from SquareMetersPerSecond of type decimal.
        /// </summary>
        public static KinematicViscosity FromSquareMetersPerSecond(decimal squaremeterspersecond)
        {
            return new KinematicViscosity(Convert.ToDouble(squaremeterspersecond));
        }
#endif

        /// <summary>
        ///     Get KinematicViscosity from Stokes.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static KinematicViscosity FromStokes(double stokes)
        {
            return new KinematicViscosity(stokes/1e4);
        }

        /// <summary>
        ///     Get KinematicViscosity from Stokes.
        /// </summary>
        public static KinematicViscosity FromStokes(int stokes)
        {
            return new KinematicViscosity(stokes/1e4);
        }

        /// <summary>
        ///     Get KinematicViscosity from Stokes.
        /// </summary>
        public static KinematicViscosity FromStokes(long stokes)
        {
            return new KinematicViscosity(stokes/1e4);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get KinematicViscosity from Stokes of type decimal.
        /// </summary>
        public static KinematicViscosity FromStokes(decimal stokes)
        {
            return new KinematicViscosity(Convert.ToDouble(stokes)/1e4);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Centistokes.
        /// </summary>
        public static KinematicViscosity? FromCentistokes(double? centistokes)
        {
            if (centistokes.HasValue)
            {
                return FromCentistokes(centistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Centistokes.
        /// </summary>
        public static KinematicViscosity? FromCentistokes(int? centistokes)
        {
            if (centistokes.HasValue)
            {
                return FromCentistokes(centistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Centistokes.
        /// </summary>
        public static KinematicViscosity? FromCentistokes(long? centistokes)
        {
            if (centistokes.HasValue)
            {
                return FromCentistokes(centistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from Centistokes of type decimal.
        /// </summary>
        public static KinematicViscosity? FromCentistokes(decimal? centistokes)
        {
            if (centistokes.HasValue)
            {
                return FromCentistokes(centistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Decistokes.
        /// </summary>
        public static KinematicViscosity? FromDecistokes(double? decistokes)
        {
            if (decistokes.HasValue)
            {
                return FromDecistokes(decistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Decistokes.
        /// </summary>
        public static KinematicViscosity? FromDecistokes(int? decistokes)
        {
            if (decistokes.HasValue)
            {
                return FromDecistokes(decistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Decistokes.
        /// </summary>
        public static KinematicViscosity? FromDecistokes(long? decistokes)
        {
            if (decistokes.HasValue)
            {
                return FromDecistokes(decistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from Decistokes of type decimal.
        /// </summary>
        public static KinematicViscosity? FromDecistokes(decimal? decistokes)
        {
            if (decistokes.HasValue)
            {
                return FromDecistokes(decistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Kilostokes.
        /// </summary>
        public static KinematicViscosity? FromKilostokes(double? kilostokes)
        {
            if (kilostokes.HasValue)
            {
                return FromKilostokes(kilostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Kilostokes.
        /// </summary>
        public static KinematicViscosity? FromKilostokes(int? kilostokes)
        {
            if (kilostokes.HasValue)
            {
                return FromKilostokes(kilostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Kilostokes.
        /// </summary>
        public static KinematicViscosity? FromKilostokes(long? kilostokes)
        {
            if (kilostokes.HasValue)
            {
                return FromKilostokes(kilostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from Kilostokes of type decimal.
        /// </summary>
        public static KinematicViscosity? FromKilostokes(decimal? kilostokes)
        {
            if (kilostokes.HasValue)
            {
                return FromKilostokes(kilostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Microstokes.
        /// </summary>
        public static KinematicViscosity? FromMicrostokes(double? microstokes)
        {
            if (microstokes.HasValue)
            {
                return FromMicrostokes(microstokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Microstokes.
        /// </summary>
        public static KinematicViscosity? FromMicrostokes(int? microstokes)
        {
            if (microstokes.HasValue)
            {
                return FromMicrostokes(microstokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Microstokes.
        /// </summary>
        public static KinematicViscosity? FromMicrostokes(long? microstokes)
        {
            if (microstokes.HasValue)
            {
                return FromMicrostokes(microstokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from Microstokes of type decimal.
        /// </summary>
        public static KinematicViscosity? FromMicrostokes(decimal? microstokes)
        {
            if (microstokes.HasValue)
            {
                return FromMicrostokes(microstokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Millistokes.
        /// </summary>
        public static KinematicViscosity? FromMillistokes(double? millistokes)
        {
            if (millistokes.HasValue)
            {
                return FromMillistokes(millistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Millistokes.
        /// </summary>
        public static KinematicViscosity? FromMillistokes(int? millistokes)
        {
            if (millistokes.HasValue)
            {
                return FromMillistokes(millistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Millistokes.
        /// </summary>
        public static KinematicViscosity? FromMillistokes(long? millistokes)
        {
            if (millistokes.HasValue)
            {
                return FromMillistokes(millistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from Millistokes of type decimal.
        /// </summary>
        public static KinematicViscosity? FromMillistokes(decimal? millistokes)
        {
            if (millistokes.HasValue)
            {
                return FromMillistokes(millistokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Nanostokes.
        /// </summary>
        public static KinematicViscosity? FromNanostokes(double? nanostokes)
        {
            if (nanostokes.HasValue)
            {
                return FromNanostokes(nanostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Nanostokes.
        /// </summary>
        public static KinematicViscosity? FromNanostokes(int? nanostokes)
        {
            if (nanostokes.HasValue)
            {
                return FromNanostokes(nanostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Nanostokes.
        /// </summary>
        public static KinematicViscosity? FromNanostokes(long? nanostokes)
        {
            if (nanostokes.HasValue)
            {
                return FromNanostokes(nanostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from Nanostokes of type decimal.
        /// </summary>
        public static KinematicViscosity? FromNanostokes(decimal? nanostokes)
        {
            if (nanostokes.HasValue)
            {
                return FromNanostokes(nanostokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable SquareMetersPerSecond.
        /// </summary>
        public static KinematicViscosity? FromSquareMetersPerSecond(double? squaremeterspersecond)
        {
            if (squaremeterspersecond.HasValue)
            {
                return FromSquareMetersPerSecond(squaremeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable SquareMetersPerSecond.
        /// </summary>
        public static KinematicViscosity? FromSquareMetersPerSecond(int? squaremeterspersecond)
        {
            if (squaremeterspersecond.HasValue)
            {
                return FromSquareMetersPerSecond(squaremeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable SquareMetersPerSecond.
        /// </summary>
        public static KinematicViscosity? FromSquareMetersPerSecond(long? squaremeterspersecond)
        {
            if (squaremeterspersecond.HasValue)
            {
                return FromSquareMetersPerSecond(squaremeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from SquareMetersPerSecond of type decimal.
        /// </summary>
        public static KinematicViscosity? FromSquareMetersPerSecond(decimal? squaremeterspersecond)
        {
            if (squaremeterspersecond.HasValue)
            {
                return FromSquareMetersPerSecond(squaremeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Stokes.
        /// </summary>
        public static KinematicViscosity? FromStokes(double? stokes)
        {
            if (stokes.HasValue)
            {
                return FromStokes(stokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Stokes.
        /// </summary>
        public static KinematicViscosity? FromStokes(int? stokes)
        {
            if (stokes.HasValue)
            {
                return FromStokes(stokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from nullable Stokes.
        /// </summary>
        public static KinematicViscosity? FromStokes(long? stokes)
        {
            if (stokes.HasValue)
            {
                return FromStokes(stokes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable KinematicViscosity from Stokes of type decimal.
        /// </summary>
        public static KinematicViscosity? FromStokes(decimal? stokes)
        {
            if (stokes.HasValue)
            {
                return FromStokes(stokes.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="KinematicViscosityUnit" /> to <see cref="KinematicViscosity" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>KinematicViscosity unit value.</returns>
        public static KinematicViscosity From(double val, KinematicViscosityUnit fromUnit)
        {
            switch (fromUnit)
            {
                case KinematicViscosityUnit.Centistokes:
                    return FromCentistokes(val);
                case KinematicViscosityUnit.Decistokes:
                    return FromDecistokes(val);
                case KinematicViscosityUnit.Kilostokes:
                    return FromKilostokes(val);
                case KinematicViscosityUnit.Microstokes:
                    return FromMicrostokes(val);
                case KinematicViscosityUnit.Millistokes:
                    return FromMillistokes(val);
                case KinematicViscosityUnit.Nanostokes:
                    return FromNanostokes(val);
                case KinematicViscosityUnit.SquareMeterPerSecond:
                    return FromSquareMetersPerSecond(val);
                case KinematicViscosityUnit.Stokes:
                    return FromStokes(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="KinematicViscosityUnit" /> to <see cref="KinematicViscosity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>KinematicViscosity unit value.</returns>
        public static KinematicViscosity? From(double? value, KinematicViscosityUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case KinematicViscosityUnit.Centistokes:
                    return FromCentistokes(value.Value);
                case KinematicViscosityUnit.Decistokes:
                    return FromDecistokes(value.Value);
                case KinematicViscosityUnit.Kilostokes:
                    return FromKilostokes(value.Value);
                case KinematicViscosityUnit.Microstokes:
                    return FromMicrostokes(value.Value);
                case KinematicViscosityUnit.Millistokes:
                    return FromMillistokes(value.Value);
                case KinematicViscosityUnit.Nanostokes:
                    return FromNanostokes(value.Value);
                case KinematicViscosityUnit.SquareMeterPerSecond:
                    return FromSquareMetersPerSecond(value.Value);
                case KinematicViscosityUnit.Stokes:
                    return FromStokes(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(KinematicViscosityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(KinematicViscosityUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static KinematicViscosity operator -(KinematicViscosity right)
        {
            return new KinematicViscosity(-right._squareMetersPerSecond);
        }

        public static KinematicViscosity operator +(KinematicViscosity left, KinematicViscosity right)
        {
            return new KinematicViscosity(left._squareMetersPerSecond + right._squareMetersPerSecond);
        }

        public static KinematicViscosity operator -(KinematicViscosity left, KinematicViscosity right)
        {
            return new KinematicViscosity(left._squareMetersPerSecond - right._squareMetersPerSecond);
        }

        public static KinematicViscosity operator *(double left, KinematicViscosity right)
        {
            return new KinematicViscosity(left*right._squareMetersPerSecond);
        }

        public static KinematicViscosity operator *(KinematicViscosity left, double right)
        {
            return new KinematicViscosity(left._squareMetersPerSecond*(double)right);
        }

        public static KinematicViscosity operator /(KinematicViscosity left, double right)
        {
            return new KinematicViscosity(left._squareMetersPerSecond/(double)right);
        }

        public static double operator /(KinematicViscosity left, KinematicViscosity right)
        {
            return Convert.ToDouble(left._squareMetersPerSecond/right._squareMetersPerSecond);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is KinematicViscosity)) throw new ArgumentException("Expected type KinematicViscosity.", "obj");
            return CompareTo((KinematicViscosity) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(KinematicViscosity other)
        {
            return _squareMetersPerSecond.CompareTo(other._squareMetersPerSecond);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(KinematicViscosity left, KinematicViscosity right)
        {
            return left._squareMetersPerSecond <= right._squareMetersPerSecond;
        }

        public static bool operator >=(KinematicViscosity left, KinematicViscosity right)
        {
            return left._squareMetersPerSecond >= right._squareMetersPerSecond;
        }

        public static bool operator <(KinematicViscosity left, KinematicViscosity right)
        {
            return left._squareMetersPerSecond < right._squareMetersPerSecond;
        }

        public static bool operator >(KinematicViscosity left, KinematicViscosity right)
        {
            return left._squareMetersPerSecond > right._squareMetersPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(KinematicViscosity left, KinematicViscosity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._squareMetersPerSecond == right._squareMetersPerSecond;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(KinematicViscosity left, KinematicViscosity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._squareMetersPerSecond != right._squareMetersPerSecond;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _squareMetersPerSecond.Equals(((KinematicViscosity) obj)._squareMetersPerSecond);
        }

        /// <summary>
        ///     Compare equality to another KinematicViscosity by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(KinematicViscosity other, KinematicViscosity maxError)
        {
            return Math.Abs(_squareMetersPerSecond - other._squareMetersPerSecond) <= maxError._squareMetersPerSecond;
        }

        public override int GetHashCode()
        {
            return _squareMetersPerSecond.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(KinematicViscosityUnit unit)
        {
            switch (unit)
            {
                case KinematicViscosityUnit.Centistokes:
                    return Centistokes;
                case KinematicViscosityUnit.Decistokes:
                    return Decistokes;
                case KinematicViscosityUnit.Kilostokes:
                    return Kilostokes;
                case KinematicViscosityUnit.Microstokes:
                    return Microstokes;
                case KinematicViscosityUnit.Millistokes:
                    return Millistokes;
                case KinematicViscosityUnit.Nanostokes:
                    return Nanostokes;
                case KinematicViscosityUnit.SquareMeterPerSecond:
                    return SquareMetersPerSecond;
                case KinematicViscosityUnit.Stokes:
                    return Stokes;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static KinematicViscosity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static KinematicViscosity Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<KinematicViscosity, KinematicViscosityUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    KinematicViscosityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromSquareMetersPerSecond(x.SquareMetersPerSecond + y.SquareMetersPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out KinematicViscosity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out KinematicViscosity result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(KinematicViscosity);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static KinematicViscosityUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static KinematicViscosityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static KinematicViscosityUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<KinematicViscosityUnit>(str.Trim());

            if (unit == KinematicViscosityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized KinematicViscosityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is SquareMeterPerSecond
        /// </summary>
        public static KinematicViscosityUnit ToStringDefaultUnit { get; set; } = KinematicViscosityUnit.SquareMeterPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(KinematicViscosityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(KinematicViscosityUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(KinematicViscosityUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(KinematicViscosityUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of KinematicViscosity
        /// </summary>
        public static KinematicViscosity MaxValue
        {
            get
            {
                return new KinematicViscosity(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of KinematicViscosity
        /// </summary>
        public static KinematicViscosity MinValue
        {
            get
            {
                return new KinematicViscosity(double.MinValue);
            }
        }
    }
}
