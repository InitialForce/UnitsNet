//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In chemistry, the molar mass M is a physical property defined as the mass of a given substance (chemical element or chemical compound) divided by the amount of substance.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct MolarMass : IComparable, IComparable<MolarMass>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable MolarMass from nullable CentigramsPerMole.
        /// </summary>
        public static MolarMass? FromCentigramsPerMole(QuantityValue? centigramspermole)
        {
            return centigramspermole.HasValue ? FromCentigramsPerMole(centigramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecagramsPerMole.
        /// </summary>
        public static MolarMass? FromDecagramsPerMole(QuantityValue? decagramspermole)
        {
            return decagramspermole.HasValue ? FromDecagramsPerMole(decagramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable DecigramsPerMole.
        /// </summary>
        public static MolarMass? FromDecigramsPerMole(QuantityValue? decigramspermole)
        {
            return decigramspermole.HasValue ? FromDecigramsPerMole(decigramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable GramsPerMole.
        /// </summary>
        public static MolarMass? FromGramsPerMole(QuantityValue? gramspermole)
        {
            return gramspermole.HasValue ? FromGramsPerMole(gramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable HectogramsPerMole.
        /// </summary>
        public static MolarMass? FromHectogramsPerMole(QuantityValue? hectogramspermole)
        {
            return hectogramspermole.HasValue ? FromHectogramsPerMole(hectogramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilogramsPerMole.
        /// </summary>
        public static MolarMass? FromKilogramsPerMole(QuantityValue? kilogramspermole)
        {
            return kilogramspermole.HasValue ? FromKilogramsPerMole(kilogramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable KilopoundsPerMole.
        /// </summary>
        public static MolarMass? FromKilopoundsPerMole(QuantityValue? kilopoundspermole)
        {
            return kilopoundspermole.HasValue ? FromKilopoundsPerMole(kilopoundspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MegapoundsPerMole.
        /// </summary>
        public static MolarMass? FromMegapoundsPerMole(QuantityValue? megapoundspermole)
        {
            return megapoundspermole.HasValue ? FromMegapoundsPerMole(megapoundspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MicrogramsPerMole.
        /// </summary>
        public static MolarMass? FromMicrogramsPerMole(QuantityValue? microgramspermole)
        {
            return microgramspermole.HasValue ? FromMicrogramsPerMole(microgramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable MilligramsPerMole.
        /// </summary>
        public static MolarMass? FromMilligramsPerMole(QuantityValue? milligramspermole)
        {
            return milligramspermole.HasValue ? FromMilligramsPerMole(milligramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable NanogramsPerMole.
        /// </summary>
        public static MolarMass? FromNanogramsPerMole(QuantityValue? nanogramspermole)
        {
            return nanogramspermole.HasValue ? FromNanogramsPerMole(nanogramspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Get nullable MolarMass from nullable PoundsPerMole.
        /// </summary>
        public static MolarMass? FromPoundsPerMole(QuantityValue? poundspermole)
        {
            return poundspermole.HasValue ? FromPoundsPerMole(poundspermole.Value) : default(MolarMass?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarMassUnit" /> to <see cref="MolarMass" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarMass unit value.</returns>
        public static MolarMass? From(QuantityValue? value, MolarMassUnit fromUnit)
        {
            return value.HasValue ? new MolarMass((double)value.Value, fromUnit) : default(MolarMass?);
        }

        #endregion

        #region Arithmetic Operators

        public static MolarMass operator -(MolarMass right)
        {
            return new MolarMass(-right.Value, right.Unit);
        }

        public static MolarMass operator +(MolarMass left, MolarMass right)
        {
            return new MolarMass(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static MolarMass operator -(MolarMass left, MolarMass right)
        {
            return new MolarMass(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static MolarMass operator *(double left, MolarMass right)
        {
            return new MolarMass(left * right.Value, right.Unit);
        }

        public static MolarMass operator *(MolarMass left, double right)
        {
            return new MolarMass(left.Value * right, left.Unit);
        }

        public static MolarMass operator /(MolarMass left, double right)
        {
            return new MolarMass(left.Value / right, left.Unit);
        }

        public static double operator /(MolarMass left, MolarMass right)
        {
            return left.KilogramsPerMole / right.KilogramsPerMole;
        }

        #endregion

        public static bool operator <=(MolarMass left, MolarMass right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(MolarMass left, MolarMass right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(MolarMass left, MolarMass right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(MolarMass left, MolarMass right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(MolarMass left, MolarMass right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(MolarMass left, MolarMass right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
