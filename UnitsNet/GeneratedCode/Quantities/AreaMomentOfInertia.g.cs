//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     A geometric property of an area that reflects how its points are distributed with regard to an axis.
    /// </summary>
    public partial struct AreaMomentOfInertia<T> : IQuantityT<AreaMomentOfInertiaUnit, T>, IEquatable<AreaMomentOfInertia<T>>, IComparable, IComparable<AreaMomentOfInertia<T>>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly AreaMomentOfInertiaUnit? _unit;

        static AreaMomentOfInertia()
        {
            BaseDimensions = new BaseDimensions(4, 0, 0, 0, 0, 0, 0);

            Info = new QuantityInfo<AreaMomentOfInertiaUnit>("AreaMomentOfInertia",
                new UnitInfo<AreaMomentOfInertiaUnit>[] {
                    new UnitInfo<AreaMomentOfInertiaUnit>(AreaMomentOfInertiaUnit.CentimeterToTheFourth, new BaseUnits(length: LengthUnit.Centimeter)),
                    new UnitInfo<AreaMomentOfInertiaUnit>(AreaMomentOfInertiaUnit.DecimeterToTheFourth, new BaseUnits(length: LengthUnit.Decimeter)),
                    new UnitInfo<AreaMomentOfInertiaUnit>(AreaMomentOfInertiaUnit.FootToTheFourth, new BaseUnits(length: LengthUnit.Foot)),
                    new UnitInfo<AreaMomentOfInertiaUnit>(AreaMomentOfInertiaUnit.InchToTheFourth, new BaseUnits(length: LengthUnit.Inch)),
                    new UnitInfo<AreaMomentOfInertiaUnit>(AreaMomentOfInertiaUnit.MeterToTheFourth, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<AreaMomentOfInertiaUnit>(AreaMomentOfInertiaUnit.MillimeterToTheFourth, new BaseUnits(length: LengthUnit.Millimeter)),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.AreaMomentOfInertia);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public AreaMomentOfInertia(T value, AreaMomentOfInertiaUnit unit)
        {
            if(unit == AreaMomentOfInertiaUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            Value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public AreaMomentOfInertia(T value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            Value = value;
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<AreaMomentOfInertiaUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of <see cref="AreaMomentOfInertia{T}" />, which is MeterToTheFourth. All conversions go via this value.
        /// </summary>
        public static AreaMomentOfInertiaUnit BaseUnit { get; } = AreaMomentOfInertiaUnit.MeterToTheFourth;

        /// <summary>
        /// Represents the largest possible value of <see cref="AreaMomentOfInertia{T}" />
        /// </summary>
        public static AreaMomentOfInertia<T> MaxValue { get; } = new AreaMomentOfInertia<T>(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of <see cref="AreaMomentOfInertia{T}" />
        /// </summary>
        public static AreaMomentOfInertia<T> MinValue { get; } = new AreaMomentOfInertia<T>(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use Info property instead.")]
        public static QuantityType QuantityType { get; } = QuantityType.AreaMomentOfInertia;

        /// <summary>
        ///     All units of measurement for the <see cref="AreaMomentOfInertia{T}" /> quantity.
        /// </summary>
        public static AreaMomentOfInertiaUnit[] Units { get; } = Enum.GetValues(typeof(AreaMomentOfInertiaUnit)).Cast<AreaMomentOfInertiaUnit>().Except(new AreaMomentOfInertiaUnit[]{ AreaMomentOfInertiaUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MeterToTheFourth.
        /// </summary>
        public static AreaMomentOfInertia<T> Zero { get; } = new AreaMomentOfInertia<T>((T)0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public T Value{ get; }

        double IQuantity.Value => Convert.ToDouble(Value);

        #region Conversion Properties

        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> in CentimetersToTheFourth.
        /// </summary>
        public T CentimetersToTheFourth => As(AreaMomentOfInertiaUnit.CentimeterToTheFourth);

        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> in DecimetersToTheFourth.
        /// </summary>
        public T DecimetersToTheFourth => As(AreaMomentOfInertiaUnit.DecimeterToTheFourth);

        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> in FeetToTheFourth.
        /// </summary>
        public T FeetToTheFourth => As(AreaMomentOfInertiaUnit.FootToTheFourth);

        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> in InchesToTheFourth.
        /// </summary>
        public T InchesToTheFourth => As(AreaMomentOfInertiaUnit.InchToTheFourth);

        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> in MetersToTheFourth.
        /// </summary>
        public T MetersToTheFourth => As(AreaMomentOfInertiaUnit.MeterToTheFourth);

        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> in MillimetersToTheFourth.
        /// </summary>
        public T MillimetersToTheFourth => As(AreaMomentOfInertiaUnit.MillimeterToTheFourth);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(AreaMomentOfInertiaUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(AreaMomentOfInertiaUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> from CentimetersToTheFourth.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AreaMomentOfInertia<T> FromCentimetersToTheFourth(T centimeterstothefourth)
        {
            return new AreaMomentOfInertia<T>(centimeterstothefourth, AreaMomentOfInertiaUnit.CentimeterToTheFourth);
        }
        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> from DecimetersToTheFourth.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AreaMomentOfInertia<T> FromDecimetersToTheFourth(T decimeterstothefourth)
        {
            return new AreaMomentOfInertia<T>(decimeterstothefourth, AreaMomentOfInertiaUnit.DecimeterToTheFourth);
        }
        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> from FeetToTheFourth.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AreaMomentOfInertia<T> FromFeetToTheFourth(T feettothefourth)
        {
            return new AreaMomentOfInertia<T>(feettothefourth, AreaMomentOfInertiaUnit.FootToTheFourth);
        }
        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> from InchesToTheFourth.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AreaMomentOfInertia<T> FromInchesToTheFourth(T inchestothefourth)
        {
            return new AreaMomentOfInertia<T>(inchestothefourth, AreaMomentOfInertiaUnit.InchToTheFourth);
        }
        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> from MetersToTheFourth.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AreaMomentOfInertia<T> FromMetersToTheFourth(T meterstothefourth)
        {
            return new AreaMomentOfInertia<T>(meterstothefourth, AreaMomentOfInertiaUnit.MeterToTheFourth);
        }
        /// <summary>
        ///     Get <see cref="AreaMomentOfInertia{T}" /> from MillimetersToTheFourth.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AreaMomentOfInertia<T> FromMillimetersToTheFourth(T millimeterstothefourth)
        {
            return new AreaMomentOfInertia<T>(millimeterstothefourth, AreaMomentOfInertiaUnit.MillimeterToTheFourth);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="AreaMomentOfInertiaUnit" /> to <see cref="AreaMomentOfInertia{T}" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><see cref="AreaMomentOfInertia{T}" /> unit value.</returns>
        public static AreaMomentOfInertia<T> From(T value, AreaMomentOfInertiaUnit fromUnit)
        {
            return new AreaMomentOfInertia<T>(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static AreaMomentOfInertia<T> Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static AreaMomentOfInertia<T> Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<AreaMomentOfInertia<T>, AreaMomentOfInertiaUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out AreaMomentOfInertia<T> result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out AreaMomentOfInertia<T> result)
        {
            return QuantityParser.Default.TryParse<AreaMomentOfInertia<T>, AreaMomentOfInertiaUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static AreaMomentOfInertiaUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static AreaMomentOfInertiaUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<AreaMomentOfInertiaUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.AreaMomentOfInertiaUnit)"/>
        public static bool TryParseUnit(string str, out AreaMomentOfInertiaUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out AreaMomentOfInertiaUnit unit)
        {
            return UnitParser.Default.TryParse<AreaMomentOfInertiaUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static AreaMomentOfInertia<T> operator -(AreaMomentOfInertia<T> right)
        {
            return new AreaMomentOfInertia<T>(CompiledLambdas.Negate(right.Value), right.Unit);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia{T}"/> from adding two <see cref="AreaMomentOfInertia{T}"/>.</summary>
        public static AreaMomentOfInertia<T> operator +(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            var value = CompiledLambdas.Add(left.Value, right.GetValueAs(left.Unit));
            return new AreaMomentOfInertia<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia{T}"/> from subtracting two <see cref="AreaMomentOfInertia{T}"/>.</summary>
        public static AreaMomentOfInertia<T> operator -(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            var value = CompiledLambdas.Subtract(left.Value, right.GetValueAs(left.Unit));
            return new AreaMomentOfInertia<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia{T}"/> from multiplying value and <see cref="AreaMomentOfInertia{T}"/>.</summary>
        public static AreaMomentOfInertia<T> operator *(T left, AreaMomentOfInertia<T> right)
        {
            var value = CompiledLambdas.Multiply(left, right.Value);
            return new AreaMomentOfInertia<T>(value, right.Unit);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia{T}"/> from multiplying value and <see cref="AreaMomentOfInertia{T}"/>.</summary>
        public static AreaMomentOfInertia<T> operator *(AreaMomentOfInertia<T> left, T right)
        {
            var value = CompiledLambdas.Multiply(left.Value, right);
            return new AreaMomentOfInertia<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia{T}"/> from dividing <see cref="AreaMomentOfInertia{T}"/> by value.</summary>
        public static AreaMomentOfInertia<T> operator /(AreaMomentOfInertia<T> left, T right)
        {
            var value = CompiledLambdas.Divide(left.Value, right);
            return new AreaMomentOfInertia<T>(value, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="AreaMomentOfInertia{T}"/> by <see cref="AreaMomentOfInertia{T}"/>.</summary>
        public static T operator /(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            return CompiledLambdas.Divide(left.MetersToTheFourth, right.MetersToTheFourth);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            return CompiledLambdas.LessThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            return CompiledLambdas.GreaterThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            return CompiledLambdas.LessThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            return CompiledLambdas.GreaterThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(AreaMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(AreaMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(AreaMomentOfInertia<T> left, AreaMomentOfInertia<T> right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is AreaMomentOfInertia<T> objAreaMomentOfInertia)) throw new ArgumentException("Expected type AreaMomentOfInertia.", nameof(obj));

            return CompareTo(objAreaMomentOfInertia);
        }

        /// <inheritdoc />
        public int CompareTo(AreaMomentOfInertia<T> other)
        {
            return System.Collections.Generic.Comparer<T>.Default.Compare(Value, other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(AreaMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is AreaMomentOfInertia<T> objAreaMomentOfInertia))
                return false;

            return Equals(objAreaMomentOfInertia);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(AreaMomentOfInertia{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(AreaMomentOfInertia<T> other)
        {
            return Value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another <see cref="AreaMomentOfInertia{T}" /> within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(AreaMomentOfInertia<T> other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            var otherValueInThisUnits = other.As(this.Unit);
            return UnitsNet.Comparison.Equals(Value, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="AreaMomentOfInertia{T}" />.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public T As(AreaMomentOfInertiaUnit unit)
        {
            if(Unit == unit)
                return Value;

            var converted = GetValueAs(unit);
            return converted;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public T As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is AreaMomentOfInertiaUnit unitAsAreaMomentOfInertiaUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(AreaMomentOfInertiaUnit)} is supported.", nameof(unit));

            var asValue = As(unitAsAreaMomentOfInertiaUnit);
            return Convert.ToDouble(asValue);
        }

        double IQuantity.As(UnitSystem unitSystem) => Convert.ToDouble(As(unitSystem));

        double IQuantity<AreaMomentOfInertiaUnit>.As(AreaMomentOfInertiaUnit unit) => Convert.ToDouble(As(unit));

        /// <summary>
        ///     Converts this <see cref="AreaMomentOfInertia{T}" /> to another <see cref="AreaMomentOfInertia{T}" /> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A <see cref="AreaMomentOfInertia{T}" /> with the specified unit.</returns>
        public AreaMomentOfInertia<T> ToUnit(AreaMomentOfInertiaUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new AreaMomentOfInertia<T>(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is AreaMomentOfInertiaUnit unitAsAreaMomentOfInertiaUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(AreaMomentOfInertiaUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsAreaMomentOfInertiaUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public AreaMomentOfInertia<T> ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<AreaMomentOfInertiaUnit> IQuantity<AreaMomentOfInertiaUnit>.ToUnit(AreaMomentOfInertiaUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantityT<AreaMomentOfInertiaUnit, T> IQuantityT<AreaMomentOfInertiaUnit, T>.ToUnit(AreaMomentOfInertiaUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<AreaMomentOfInertiaUnit> IQuantity<AreaMomentOfInertiaUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantityT<AreaMomentOfInertiaUnit, T> IQuantityT<AreaMomentOfInertiaUnit, T>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private T GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case AreaMomentOfInertiaUnit.CentimeterToTheFourth: return Value/1e8;
                case AreaMomentOfInertiaUnit.DecimeterToTheFourth: return Value/1e4;
                case AreaMomentOfInertiaUnit.FootToTheFourth: return Value*Math.Pow(0.3048, 4);
                case AreaMomentOfInertiaUnit.InchToTheFourth: return Value*Math.Pow(2.54e-2, 4);
                case AreaMomentOfInertiaUnit.MeterToTheFourth: return Value;
                case AreaMomentOfInertiaUnit.MillimeterToTheFourth: return Value/1e12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal AreaMomentOfInertia<T> ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new AreaMomentOfInertia<T>(baseUnitValue, BaseUnit);
        }

        private T GetValueAs(AreaMomentOfInertiaUnit unit)
        {
            if(Unit == unit)
                return Value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case AreaMomentOfInertiaUnit.CentimeterToTheFourth: return baseUnitValue*1e8;
                case AreaMomentOfInertiaUnit.DecimeterToTheFourth: return baseUnitValue*1e4;
                case AreaMomentOfInertiaUnit.FootToTheFourth: return baseUnitValue/Math.Pow(0.3048, 4);
                case AreaMomentOfInertiaUnit.InchToTheFourth: return baseUnitValue/Math.Pow(2.54e-2, 4);
                case AreaMomentOfInertiaUnit.MeterToTheFourth: return baseUnitValue;
                case AreaMomentOfInertiaUnit.MillimeterToTheFourth: return baseUnitValue*1e12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<AreaMomentOfInertiaUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(AreaMomentOfInertia<T>)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(Value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(AreaMomentOfInertia<T>)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(AreaMomentOfInertia<T>)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(Value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(Value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(Value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(Value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(Value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(Value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(Value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(AreaMomentOfInertia<T>))
                return this;
            else if(conversionType == typeof(AreaMomentOfInertiaUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return AreaMomentOfInertia<T>.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return AreaMomentOfInertia<T>.Info;
            else if(conversionType == typeof(BaseDimensions))
                return AreaMomentOfInertia<T>.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(AreaMomentOfInertia<T>)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(Value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(Value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(Value);
        }

        #endregion
    }
}
