//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Length
#else
    public partial struct Length : IComparable, IComparable<Length>
#endif
    {
        /// <summary>
        ///     Base unit of Length.
        /// </summary>
        private readonly double _meters;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Length() : this(0)
        {
        }
#endif

        public Length(double meters)
        {
            _meters = Convert.ToDouble(meters);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        Length(long meters)
        {
            _meters = Convert.ToDouble(meters);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        Length(decimal meters)
        {
            _meters = Convert.ToDouble(meters);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Length;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static LengthUnit BaseUnit
        {
            get { return LengthUnit.Meter; }
        }

        /// <summary>
        ///     All units of measurement for the Length quantity.
        /// </summary>
        public static LengthUnit[] Units { get; } = Enum.GetValues(typeof(LengthUnit)).Cast<LengthUnit>().ToArray();

        /// <summary>
        ///     Get Length in Centimeters.
        /// </summary>
        public double Centimeters
        {
            get { return (_meters) / 1e-2d; }
        }

        /// <summary>
        ///     Get Length in Decimeters.
        /// </summary>
        public double Decimeters
        {
            get { return (_meters) / 1e-1d; }
        }

        /// <summary>
        ///     Get Length in DtpPicas.
        /// </summary>
        public double DtpPicas
        {
            get { return _meters*236.220472441; }
        }

        /// <summary>
        ///     Get Length in DtpPoints.
        /// </summary>
        public double DtpPoints
        {
            get { return (_meters/2.54e-2)*72; }
        }

        /// <summary>
        ///     Get Length in Fathoms.
        /// </summary>
        public double Fathoms
        {
            get { return _meters/1.8288; }
        }

        /// <summary>
        ///     Get Length in Feet.
        /// </summary>
        public double Feet
        {
            get { return _meters/0.3048; }
        }

        /// <summary>
        ///     Get Length in Inches.
        /// </summary>
        public double Inches
        {
            get { return _meters/2.54e-2; }
        }

        /// <summary>
        ///     Get Length in Kilometers.
        /// </summary>
        public double Kilometers
        {
            get { return (_meters) / 1e3d; }
        }

        /// <summary>
        ///     Get Length in Meters.
        /// </summary>
        public double Meters
        {
            get { return _meters; }
        }

        /// <summary>
        ///     Get Length in Microinches.
        /// </summary>
        public double Microinches
        {
            get { return _meters/2.54e-8; }
        }

        /// <summary>
        ///     Get Length in Micrometers.
        /// </summary>
        public double Micrometers
        {
            get { return (_meters) / 1e-6d; }
        }

        /// <summary>
        ///     Get Length in Mils.
        /// </summary>
        public double Mils
        {
            get { return _meters/2.54e-5; }
        }

        /// <summary>
        ///     Get Length in Miles.
        /// </summary>
        public double Miles
        {
            get { return _meters/1609.34; }
        }

        /// <summary>
        ///     Get Length in Millimeters.
        /// </summary>
        public double Millimeters
        {
            get { return (_meters) / 1e-3d; }
        }

        /// <summary>
        ///     Get Length in Nanometers.
        /// </summary>
        public double Nanometers
        {
            get { return (_meters) / 1e-9d; }
        }

        /// <summary>
        ///     Get Length in NauticalMiles.
        /// </summary>
        public double NauticalMiles
        {
            get { return _meters/1852; }
        }

        /// <summary>
        ///     Get Length in PrinterPicas.
        /// </summary>
        public double PrinterPicas
        {
            get { return _meters*237.106301584; }
        }

        /// <summary>
        ///     Get Length in PrinterPoints.
        /// </summary>
        public double PrinterPoints
        {
            get { return (_meters/2.54e-2)*72.27; }
        }

        /// <summary>
        ///     Get Length in Shackles.
        /// </summary>
        public double Shackles
        {
            get { return _meters/27.432; }
        }

        /// <summary>
        ///     Get Length in Twips.
        /// </summary>
        public double Twips
        {
            get { return _meters*56692.913385826; }
        }

        /// <summary>
        ///     Get Length in UsSurveyFeet.
        /// </summary>
        public double UsSurveyFeet
        {
            get { return _meters*3937/1200; }
        }

        /// <summary>
        ///     Get Length in Yards.
        /// </summary>
        public double Yards
        {
            get { return _meters/0.9144; }
        }

        #endregion

        #region Static

        public static Length Zero
        {
            get { return new Length(); }
        }

        /// <summary>
        ///     Get Length from Centimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromCentimeters(double centimeters)
        {
            return new Length((centimeters) * 1e-2d);
        }

        /// <summary>
        ///     Get Length from Centimeters.
        /// </summary>
        public static Length FromCentimeters(int centimeters)
        {
            return new Length((centimeters) * 1e-2d);
        }

        /// <summary>
        ///     Get Length from Centimeters.
        /// </summary>
        public static Length FromCentimeters(long centimeters)
        {
            return new Length((centimeters) * 1e-2d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Centimeters of type decimal.
        /// </summary>
        public static Length FromCentimeters(decimal centimeters)
        {
            return new Length((Convert.ToDouble(centimeters)) * 1e-2d);
        }
#endif

        /// <summary>
        ///     Get Length from Decimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromDecimeters(double decimeters)
        {
            return new Length((decimeters) * 1e-1d);
        }

        /// <summary>
        ///     Get Length from Decimeters.
        /// </summary>
        public static Length FromDecimeters(int decimeters)
        {
            return new Length((decimeters) * 1e-1d);
        }

        /// <summary>
        ///     Get Length from Decimeters.
        /// </summary>
        public static Length FromDecimeters(long decimeters)
        {
            return new Length((decimeters) * 1e-1d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Decimeters of type decimal.
        /// </summary>
        public static Length FromDecimeters(decimal decimeters)
        {
            return new Length((Convert.ToDouble(decimeters)) * 1e-1d);
        }
#endif

        /// <summary>
        ///     Get Length from DtpPicas.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromDtpPicas(double dtppicas)
        {
            return new Length(dtppicas/236.220472441);
        }

        /// <summary>
        ///     Get Length from DtpPicas.
        /// </summary>
        public static Length FromDtpPicas(int dtppicas)
        {
            return new Length(dtppicas/236.220472441);
        }

        /// <summary>
        ///     Get Length from DtpPicas.
        /// </summary>
        public static Length FromDtpPicas(long dtppicas)
        {
            return new Length(dtppicas/236.220472441);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from DtpPicas of type decimal.
        /// </summary>
        public static Length FromDtpPicas(decimal dtppicas)
        {
            return new Length(Convert.ToDouble(dtppicas)/236.220472441);
        }
#endif

        /// <summary>
        ///     Get Length from DtpPoints.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromDtpPoints(double dtppoints)
        {
            return new Length((dtppoints/72)*2.54e-2);
        }

        /// <summary>
        ///     Get Length from DtpPoints.
        /// </summary>
        public static Length FromDtpPoints(int dtppoints)
        {
            return new Length((dtppoints/72)*2.54e-2);
        }

        /// <summary>
        ///     Get Length from DtpPoints.
        /// </summary>
        public static Length FromDtpPoints(long dtppoints)
        {
            return new Length((dtppoints/72)*2.54e-2);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from DtpPoints of type decimal.
        /// </summary>
        public static Length FromDtpPoints(decimal dtppoints)
        {
            return new Length((Convert.ToDouble(dtppoints)/72)*2.54e-2);
        }
#endif

        /// <summary>
        ///     Get Length from Fathoms.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromFathoms(double fathoms)
        {
            return new Length(fathoms*1.8288);
        }

        /// <summary>
        ///     Get Length from Fathoms.
        /// </summary>
        public static Length FromFathoms(int fathoms)
        {
            return new Length(fathoms*1.8288);
        }

        /// <summary>
        ///     Get Length from Fathoms.
        /// </summary>
        public static Length FromFathoms(long fathoms)
        {
            return new Length(fathoms*1.8288);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Fathoms of type decimal.
        /// </summary>
        public static Length FromFathoms(decimal fathoms)
        {
            return new Length(Convert.ToDouble(fathoms)*1.8288);
        }
#endif

        /// <summary>
        ///     Get Length from Feet.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromFeet(double feet)
        {
            return new Length(feet*0.3048);
        }

        /// <summary>
        ///     Get Length from Feet.
        /// </summary>
        public static Length FromFeet(int feet)
        {
            return new Length(feet*0.3048);
        }

        /// <summary>
        ///     Get Length from Feet.
        /// </summary>
        public static Length FromFeet(long feet)
        {
            return new Length(feet*0.3048);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Feet of type decimal.
        /// </summary>
        public static Length FromFeet(decimal feet)
        {
            return new Length(Convert.ToDouble(feet)*0.3048);
        }
#endif

        /// <summary>
        ///     Get Length from Inches.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromInches(double inches)
        {
            return new Length(inches*2.54e-2);
        }

        /// <summary>
        ///     Get Length from Inches.
        /// </summary>
        public static Length FromInches(int inches)
        {
            return new Length(inches*2.54e-2);
        }

        /// <summary>
        ///     Get Length from Inches.
        /// </summary>
        public static Length FromInches(long inches)
        {
            return new Length(inches*2.54e-2);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Inches of type decimal.
        /// </summary>
        public static Length FromInches(decimal inches)
        {
            return new Length(Convert.ToDouble(inches)*2.54e-2);
        }
#endif

        /// <summary>
        ///     Get Length from Kilometers.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromKilometers(double kilometers)
        {
            return new Length((kilometers) * 1e3d);
        }

        /// <summary>
        ///     Get Length from Kilometers.
        /// </summary>
        public static Length FromKilometers(int kilometers)
        {
            return new Length((kilometers) * 1e3d);
        }

        /// <summary>
        ///     Get Length from Kilometers.
        /// </summary>
        public static Length FromKilometers(long kilometers)
        {
            return new Length((kilometers) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Kilometers of type decimal.
        /// </summary>
        public static Length FromKilometers(decimal kilometers)
        {
            return new Length((Convert.ToDouble(kilometers)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Length from Meters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromMeters(double meters)
        {
            return new Length(meters);
        }

        /// <summary>
        ///     Get Length from Meters.
        /// </summary>
        public static Length FromMeters(int meters)
        {
            return new Length(meters);
        }

        /// <summary>
        ///     Get Length from Meters.
        /// </summary>
        public static Length FromMeters(long meters)
        {
            return new Length(meters);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Meters of type decimal.
        /// </summary>
        public static Length FromMeters(decimal meters)
        {
            return new Length(Convert.ToDouble(meters));
        }
#endif

        /// <summary>
        ///     Get Length from Microinches.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromMicroinches(double microinches)
        {
            return new Length(microinches*2.54e-8);
        }

        /// <summary>
        ///     Get Length from Microinches.
        /// </summary>
        public static Length FromMicroinches(int microinches)
        {
            return new Length(microinches*2.54e-8);
        }

        /// <summary>
        ///     Get Length from Microinches.
        /// </summary>
        public static Length FromMicroinches(long microinches)
        {
            return new Length(microinches*2.54e-8);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Microinches of type decimal.
        /// </summary>
        public static Length FromMicroinches(decimal microinches)
        {
            return new Length(Convert.ToDouble(microinches)*2.54e-8);
        }
#endif

        /// <summary>
        ///     Get Length from Micrometers.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromMicrometers(double micrometers)
        {
            return new Length((micrometers) * 1e-6d);
        }

        /// <summary>
        ///     Get Length from Micrometers.
        /// </summary>
        public static Length FromMicrometers(int micrometers)
        {
            return new Length((micrometers) * 1e-6d);
        }

        /// <summary>
        ///     Get Length from Micrometers.
        /// </summary>
        public static Length FromMicrometers(long micrometers)
        {
            return new Length((micrometers) * 1e-6d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Micrometers of type decimal.
        /// </summary>
        public static Length FromMicrometers(decimal micrometers)
        {
            return new Length((Convert.ToDouble(micrometers)) * 1e-6d);
        }
#endif

        /// <summary>
        ///     Get Length from Mils.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromMils(double mils)
        {
            return new Length(mils*2.54e-5);
        }

        /// <summary>
        ///     Get Length from Mils.
        /// </summary>
        public static Length FromMils(int mils)
        {
            return new Length(mils*2.54e-5);
        }

        /// <summary>
        ///     Get Length from Mils.
        /// </summary>
        public static Length FromMils(long mils)
        {
            return new Length(mils*2.54e-5);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Mils of type decimal.
        /// </summary>
        public static Length FromMils(decimal mils)
        {
            return new Length(Convert.ToDouble(mils)*2.54e-5);
        }
#endif

        /// <summary>
        ///     Get Length from Miles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromMiles(double miles)
        {
            return new Length(miles*1609.34);
        }

        /// <summary>
        ///     Get Length from Miles.
        /// </summary>
        public static Length FromMiles(int miles)
        {
            return new Length(miles*1609.34);
        }

        /// <summary>
        ///     Get Length from Miles.
        /// </summary>
        public static Length FromMiles(long miles)
        {
            return new Length(miles*1609.34);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Miles of type decimal.
        /// </summary>
        public static Length FromMiles(decimal miles)
        {
            return new Length(Convert.ToDouble(miles)*1609.34);
        }
#endif

        /// <summary>
        ///     Get Length from Millimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromMillimeters(double millimeters)
        {
            return new Length((millimeters) * 1e-3d);
        }

        /// <summary>
        ///     Get Length from Millimeters.
        /// </summary>
        public static Length FromMillimeters(int millimeters)
        {
            return new Length((millimeters) * 1e-3d);
        }

        /// <summary>
        ///     Get Length from Millimeters.
        /// </summary>
        public static Length FromMillimeters(long millimeters)
        {
            return new Length((millimeters) * 1e-3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Millimeters of type decimal.
        /// </summary>
        public static Length FromMillimeters(decimal millimeters)
        {
            return new Length((Convert.ToDouble(millimeters)) * 1e-3d);
        }
#endif

        /// <summary>
        ///     Get Length from Nanometers.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromNanometers(double nanometers)
        {
            return new Length((nanometers) * 1e-9d);
        }

        /// <summary>
        ///     Get Length from Nanometers.
        /// </summary>
        public static Length FromNanometers(int nanometers)
        {
            return new Length((nanometers) * 1e-9d);
        }

        /// <summary>
        ///     Get Length from Nanometers.
        /// </summary>
        public static Length FromNanometers(long nanometers)
        {
            return new Length((nanometers) * 1e-9d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Nanometers of type decimal.
        /// </summary>
        public static Length FromNanometers(decimal nanometers)
        {
            return new Length((Convert.ToDouble(nanometers)) * 1e-9d);
        }
#endif

        /// <summary>
        ///     Get Length from NauticalMiles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromNauticalMiles(double nauticalmiles)
        {
            return new Length(nauticalmiles*1852);
        }

        /// <summary>
        ///     Get Length from NauticalMiles.
        /// </summary>
        public static Length FromNauticalMiles(int nauticalmiles)
        {
            return new Length(nauticalmiles*1852);
        }

        /// <summary>
        ///     Get Length from NauticalMiles.
        /// </summary>
        public static Length FromNauticalMiles(long nauticalmiles)
        {
            return new Length(nauticalmiles*1852);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from NauticalMiles of type decimal.
        /// </summary>
        public static Length FromNauticalMiles(decimal nauticalmiles)
        {
            return new Length(Convert.ToDouble(nauticalmiles)*1852);
        }
#endif

        /// <summary>
        ///     Get Length from PrinterPicas.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromPrinterPicas(double printerpicas)
        {
            return new Length(printerpicas/237.106301584);
        }

        /// <summary>
        ///     Get Length from PrinterPicas.
        /// </summary>
        public static Length FromPrinterPicas(int printerpicas)
        {
            return new Length(printerpicas/237.106301584);
        }

        /// <summary>
        ///     Get Length from PrinterPicas.
        /// </summary>
        public static Length FromPrinterPicas(long printerpicas)
        {
            return new Length(printerpicas/237.106301584);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from PrinterPicas of type decimal.
        /// </summary>
        public static Length FromPrinterPicas(decimal printerpicas)
        {
            return new Length(Convert.ToDouble(printerpicas)/237.106301584);
        }
#endif

        /// <summary>
        ///     Get Length from PrinterPoints.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromPrinterPoints(double printerpoints)
        {
            return new Length((printerpoints/72.27)*2.54e-2);
        }

        /// <summary>
        ///     Get Length from PrinterPoints.
        /// </summary>
        public static Length FromPrinterPoints(int printerpoints)
        {
            return new Length((printerpoints/72.27)*2.54e-2);
        }

        /// <summary>
        ///     Get Length from PrinterPoints.
        /// </summary>
        public static Length FromPrinterPoints(long printerpoints)
        {
            return new Length((printerpoints/72.27)*2.54e-2);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from PrinterPoints of type decimal.
        /// </summary>
        public static Length FromPrinterPoints(decimal printerpoints)
        {
            return new Length((Convert.ToDouble(printerpoints)/72.27)*2.54e-2);
        }
#endif

        /// <summary>
        ///     Get Length from Shackles.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromShackles(double shackles)
        {
            return new Length(shackles*27.432);
        }

        /// <summary>
        ///     Get Length from Shackles.
        /// </summary>
        public static Length FromShackles(int shackles)
        {
            return new Length(shackles*27.432);
        }

        /// <summary>
        ///     Get Length from Shackles.
        /// </summary>
        public static Length FromShackles(long shackles)
        {
            return new Length(shackles*27.432);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Shackles of type decimal.
        /// </summary>
        public static Length FromShackles(decimal shackles)
        {
            return new Length(Convert.ToDouble(shackles)*27.432);
        }
#endif

        /// <summary>
        ///     Get Length from Twips.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromTwips(double twips)
        {
            return new Length(twips/56692.913385826);
        }

        /// <summary>
        ///     Get Length from Twips.
        /// </summary>
        public static Length FromTwips(int twips)
        {
            return new Length(twips/56692.913385826);
        }

        /// <summary>
        ///     Get Length from Twips.
        /// </summary>
        public static Length FromTwips(long twips)
        {
            return new Length(twips/56692.913385826);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Twips of type decimal.
        /// </summary>
        public static Length FromTwips(decimal twips)
        {
            return new Length(Convert.ToDouble(twips)/56692.913385826);
        }
#endif

        /// <summary>
        ///     Get Length from UsSurveyFeet.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromUsSurveyFeet(double ussurveyfeet)
        {
            return new Length(ussurveyfeet*1200/3937);
        }

        /// <summary>
        ///     Get Length from UsSurveyFeet.
        /// </summary>
        public static Length FromUsSurveyFeet(int ussurveyfeet)
        {
            return new Length(ussurveyfeet*1200/3937);
        }

        /// <summary>
        ///     Get Length from UsSurveyFeet.
        /// </summary>
        public static Length FromUsSurveyFeet(long ussurveyfeet)
        {
            return new Length(ussurveyfeet*1200/3937);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from UsSurveyFeet of type decimal.
        /// </summary>
        public static Length FromUsSurveyFeet(decimal ussurveyfeet)
        {
            return new Length(Convert.ToDouble(ussurveyfeet)*1200/3937);
        }
#endif

        /// <summary>
        ///     Get Length from Yards.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Length FromYards(double yards)
        {
            return new Length(yards*0.9144);
        }

        /// <summary>
        ///     Get Length from Yards.
        /// </summary>
        public static Length FromYards(int yards)
        {
            return new Length(yards*0.9144);
        }

        /// <summary>
        ///     Get Length from Yards.
        /// </summary>
        public static Length FromYards(long yards)
        {
            return new Length(yards*0.9144);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Length from Yards of type decimal.
        /// </summary>
        public static Length FromYards(decimal yards)
        {
            return new Length(Convert.ToDouble(yards)*0.9144);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Length from nullable Centimeters.
        /// </summary>
        public static Length? FromCentimeters(double? centimeters)
        {
            if (centimeters.HasValue)
            {
                return FromCentimeters(centimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Centimeters.
        /// </summary>
        public static Length? FromCentimeters(int? centimeters)
        {
            if (centimeters.HasValue)
            {
                return FromCentimeters(centimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Centimeters.
        /// </summary>
        public static Length? FromCentimeters(long? centimeters)
        {
            if (centimeters.HasValue)
            {
                return FromCentimeters(centimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Centimeters of type decimal.
        /// </summary>
        public static Length? FromCentimeters(decimal? centimeters)
        {
            if (centimeters.HasValue)
            {
                return FromCentimeters(centimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Decimeters.
        /// </summary>
        public static Length? FromDecimeters(double? decimeters)
        {
            if (decimeters.HasValue)
            {
                return FromDecimeters(decimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Decimeters.
        /// </summary>
        public static Length? FromDecimeters(int? decimeters)
        {
            if (decimeters.HasValue)
            {
                return FromDecimeters(decimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Decimeters.
        /// </summary>
        public static Length? FromDecimeters(long? decimeters)
        {
            if (decimeters.HasValue)
            {
                return FromDecimeters(decimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Decimeters of type decimal.
        /// </summary>
        public static Length? FromDecimeters(decimal? decimeters)
        {
            if (decimeters.HasValue)
            {
                return FromDecimeters(decimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable DtpPicas.
        /// </summary>
        public static Length? FromDtpPicas(double? dtppicas)
        {
            if (dtppicas.HasValue)
            {
                return FromDtpPicas(dtppicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable DtpPicas.
        /// </summary>
        public static Length? FromDtpPicas(int? dtppicas)
        {
            if (dtppicas.HasValue)
            {
                return FromDtpPicas(dtppicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable DtpPicas.
        /// </summary>
        public static Length? FromDtpPicas(long? dtppicas)
        {
            if (dtppicas.HasValue)
            {
                return FromDtpPicas(dtppicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from DtpPicas of type decimal.
        /// </summary>
        public static Length? FromDtpPicas(decimal? dtppicas)
        {
            if (dtppicas.HasValue)
            {
                return FromDtpPicas(dtppicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable DtpPoints.
        /// </summary>
        public static Length? FromDtpPoints(double? dtppoints)
        {
            if (dtppoints.HasValue)
            {
                return FromDtpPoints(dtppoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable DtpPoints.
        /// </summary>
        public static Length? FromDtpPoints(int? dtppoints)
        {
            if (dtppoints.HasValue)
            {
                return FromDtpPoints(dtppoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable DtpPoints.
        /// </summary>
        public static Length? FromDtpPoints(long? dtppoints)
        {
            if (dtppoints.HasValue)
            {
                return FromDtpPoints(dtppoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from DtpPoints of type decimal.
        /// </summary>
        public static Length? FromDtpPoints(decimal? dtppoints)
        {
            if (dtppoints.HasValue)
            {
                return FromDtpPoints(dtppoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Fathoms.
        /// </summary>
        public static Length? FromFathoms(double? fathoms)
        {
            if (fathoms.HasValue)
            {
                return FromFathoms(fathoms.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Fathoms.
        /// </summary>
        public static Length? FromFathoms(int? fathoms)
        {
            if (fathoms.HasValue)
            {
                return FromFathoms(fathoms.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Fathoms.
        /// </summary>
        public static Length? FromFathoms(long? fathoms)
        {
            if (fathoms.HasValue)
            {
                return FromFathoms(fathoms.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Fathoms of type decimal.
        /// </summary>
        public static Length? FromFathoms(decimal? fathoms)
        {
            if (fathoms.HasValue)
            {
                return FromFathoms(fathoms.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Feet.
        /// </summary>
        public static Length? FromFeet(double? feet)
        {
            if (feet.HasValue)
            {
                return FromFeet(feet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Feet.
        /// </summary>
        public static Length? FromFeet(int? feet)
        {
            if (feet.HasValue)
            {
                return FromFeet(feet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Feet.
        /// </summary>
        public static Length? FromFeet(long? feet)
        {
            if (feet.HasValue)
            {
                return FromFeet(feet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Feet of type decimal.
        /// </summary>
        public static Length? FromFeet(decimal? feet)
        {
            if (feet.HasValue)
            {
                return FromFeet(feet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Inches.
        /// </summary>
        public static Length? FromInches(double? inches)
        {
            if (inches.HasValue)
            {
                return FromInches(inches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Inches.
        /// </summary>
        public static Length? FromInches(int? inches)
        {
            if (inches.HasValue)
            {
                return FromInches(inches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Inches.
        /// </summary>
        public static Length? FromInches(long? inches)
        {
            if (inches.HasValue)
            {
                return FromInches(inches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Inches of type decimal.
        /// </summary>
        public static Length? FromInches(decimal? inches)
        {
            if (inches.HasValue)
            {
                return FromInches(inches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Kilometers.
        /// </summary>
        public static Length? FromKilometers(double? kilometers)
        {
            if (kilometers.HasValue)
            {
                return FromKilometers(kilometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Kilometers.
        /// </summary>
        public static Length? FromKilometers(int? kilometers)
        {
            if (kilometers.HasValue)
            {
                return FromKilometers(kilometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Kilometers.
        /// </summary>
        public static Length? FromKilometers(long? kilometers)
        {
            if (kilometers.HasValue)
            {
                return FromKilometers(kilometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Kilometers of type decimal.
        /// </summary>
        public static Length? FromKilometers(decimal? kilometers)
        {
            if (kilometers.HasValue)
            {
                return FromKilometers(kilometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Meters.
        /// </summary>
        public static Length? FromMeters(double? meters)
        {
            if (meters.HasValue)
            {
                return FromMeters(meters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Meters.
        /// </summary>
        public static Length? FromMeters(int? meters)
        {
            if (meters.HasValue)
            {
                return FromMeters(meters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Meters.
        /// </summary>
        public static Length? FromMeters(long? meters)
        {
            if (meters.HasValue)
            {
                return FromMeters(meters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Meters of type decimal.
        /// </summary>
        public static Length? FromMeters(decimal? meters)
        {
            if (meters.HasValue)
            {
                return FromMeters(meters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Microinches.
        /// </summary>
        public static Length? FromMicroinches(double? microinches)
        {
            if (microinches.HasValue)
            {
                return FromMicroinches(microinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Microinches.
        /// </summary>
        public static Length? FromMicroinches(int? microinches)
        {
            if (microinches.HasValue)
            {
                return FromMicroinches(microinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Microinches.
        /// </summary>
        public static Length? FromMicroinches(long? microinches)
        {
            if (microinches.HasValue)
            {
                return FromMicroinches(microinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Microinches of type decimal.
        /// </summary>
        public static Length? FromMicroinches(decimal? microinches)
        {
            if (microinches.HasValue)
            {
                return FromMicroinches(microinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Micrometers.
        /// </summary>
        public static Length? FromMicrometers(double? micrometers)
        {
            if (micrometers.HasValue)
            {
                return FromMicrometers(micrometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Micrometers.
        /// </summary>
        public static Length? FromMicrometers(int? micrometers)
        {
            if (micrometers.HasValue)
            {
                return FromMicrometers(micrometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Micrometers.
        /// </summary>
        public static Length? FromMicrometers(long? micrometers)
        {
            if (micrometers.HasValue)
            {
                return FromMicrometers(micrometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Micrometers of type decimal.
        /// </summary>
        public static Length? FromMicrometers(decimal? micrometers)
        {
            if (micrometers.HasValue)
            {
                return FromMicrometers(micrometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Mils.
        /// </summary>
        public static Length? FromMils(double? mils)
        {
            if (mils.HasValue)
            {
                return FromMils(mils.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Mils.
        /// </summary>
        public static Length? FromMils(int? mils)
        {
            if (mils.HasValue)
            {
                return FromMils(mils.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Mils.
        /// </summary>
        public static Length? FromMils(long? mils)
        {
            if (mils.HasValue)
            {
                return FromMils(mils.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Mils of type decimal.
        /// </summary>
        public static Length? FromMils(decimal? mils)
        {
            if (mils.HasValue)
            {
                return FromMils(mils.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Miles.
        /// </summary>
        public static Length? FromMiles(double? miles)
        {
            if (miles.HasValue)
            {
                return FromMiles(miles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Miles.
        /// </summary>
        public static Length? FromMiles(int? miles)
        {
            if (miles.HasValue)
            {
                return FromMiles(miles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Miles.
        /// </summary>
        public static Length? FromMiles(long? miles)
        {
            if (miles.HasValue)
            {
                return FromMiles(miles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Miles of type decimal.
        /// </summary>
        public static Length? FromMiles(decimal? miles)
        {
            if (miles.HasValue)
            {
                return FromMiles(miles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Millimeters.
        /// </summary>
        public static Length? FromMillimeters(double? millimeters)
        {
            if (millimeters.HasValue)
            {
                return FromMillimeters(millimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Millimeters.
        /// </summary>
        public static Length? FromMillimeters(int? millimeters)
        {
            if (millimeters.HasValue)
            {
                return FromMillimeters(millimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Millimeters.
        /// </summary>
        public static Length? FromMillimeters(long? millimeters)
        {
            if (millimeters.HasValue)
            {
                return FromMillimeters(millimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Millimeters of type decimal.
        /// </summary>
        public static Length? FromMillimeters(decimal? millimeters)
        {
            if (millimeters.HasValue)
            {
                return FromMillimeters(millimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Nanometers.
        /// </summary>
        public static Length? FromNanometers(double? nanometers)
        {
            if (nanometers.HasValue)
            {
                return FromNanometers(nanometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Nanometers.
        /// </summary>
        public static Length? FromNanometers(int? nanometers)
        {
            if (nanometers.HasValue)
            {
                return FromNanometers(nanometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Nanometers.
        /// </summary>
        public static Length? FromNanometers(long? nanometers)
        {
            if (nanometers.HasValue)
            {
                return FromNanometers(nanometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Nanometers of type decimal.
        /// </summary>
        public static Length? FromNanometers(decimal? nanometers)
        {
            if (nanometers.HasValue)
            {
                return FromNanometers(nanometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable NauticalMiles.
        /// </summary>
        public static Length? FromNauticalMiles(double? nauticalmiles)
        {
            if (nauticalmiles.HasValue)
            {
                return FromNauticalMiles(nauticalmiles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable NauticalMiles.
        /// </summary>
        public static Length? FromNauticalMiles(int? nauticalmiles)
        {
            if (nauticalmiles.HasValue)
            {
                return FromNauticalMiles(nauticalmiles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable NauticalMiles.
        /// </summary>
        public static Length? FromNauticalMiles(long? nauticalmiles)
        {
            if (nauticalmiles.HasValue)
            {
                return FromNauticalMiles(nauticalmiles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from NauticalMiles of type decimal.
        /// </summary>
        public static Length? FromNauticalMiles(decimal? nauticalmiles)
        {
            if (nauticalmiles.HasValue)
            {
                return FromNauticalMiles(nauticalmiles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable PrinterPicas.
        /// </summary>
        public static Length? FromPrinterPicas(double? printerpicas)
        {
            if (printerpicas.HasValue)
            {
                return FromPrinterPicas(printerpicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable PrinterPicas.
        /// </summary>
        public static Length? FromPrinterPicas(int? printerpicas)
        {
            if (printerpicas.HasValue)
            {
                return FromPrinterPicas(printerpicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable PrinterPicas.
        /// </summary>
        public static Length? FromPrinterPicas(long? printerpicas)
        {
            if (printerpicas.HasValue)
            {
                return FromPrinterPicas(printerpicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from PrinterPicas of type decimal.
        /// </summary>
        public static Length? FromPrinterPicas(decimal? printerpicas)
        {
            if (printerpicas.HasValue)
            {
                return FromPrinterPicas(printerpicas.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable PrinterPoints.
        /// </summary>
        public static Length? FromPrinterPoints(double? printerpoints)
        {
            if (printerpoints.HasValue)
            {
                return FromPrinterPoints(printerpoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable PrinterPoints.
        /// </summary>
        public static Length? FromPrinterPoints(int? printerpoints)
        {
            if (printerpoints.HasValue)
            {
                return FromPrinterPoints(printerpoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable PrinterPoints.
        /// </summary>
        public static Length? FromPrinterPoints(long? printerpoints)
        {
            if (printerpoints.HasValue)
            {
                return FromPrinterPoints(printerpoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from PrinterPoints of type decimal.
        /// </summary>
        public static Length? FromPrinterPoints(decimal? printerpoints)
        {
            if (printerpoints.HasValue)
            {
                return FromPrinterPoints(printerpoints.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Shackles.
        /// </summary>
        public static Length? FromShackles(double? shackles)
        {
            if (shackles.HasValue)
            {
                return FromShackles(shackles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Shackles.
        /// </summary>
        public static Length? FromShackles(int? shackles)
        {
            if (shackles.HasValue)
            {
                return FromShackles(shackles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Shackles.
        /// </summary>
        public static Length? FromShackles(long? shackles)
        {
            if (shackles.HasValue)
            {
                return FromShackles(shackles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Shackles of type decimal.
        /// </summary>
        public static Length? FromShackles(decimal? shackles)
        {
            if (shackles.HasValue)
            {
                return FromShackles(shackles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Twips.
        /// </summary>
        public static Length? FromTwips(double? twips)
        {
            if (twips.HasValue)
            {
                return FromTwips(twips.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Twips.
        /// </summary>
        public static Length? FromTwips(int? twips)
        {
            if (twips.HasValue)
            {
                return FromTwips(twips.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Twips.
        /// </summary>
        public static Length? FromTwips(long? twips)
        {
            if (twips.HasValue)
            {
                return FromTwips(twips.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Twips of type decimal.
        /// </summary>
        public static Length? FromTwips(decimal? twips)
        {
            if (twips.HasValue)
            {
                return FromTwips(twips.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable UsSurveyFeet.
        /// </summary>
        public static Length? FromUsSurveyFeet(double? ussurveyfeet)
        {
            if (ussurveyfeet.HasValue)
            {
                return FromUsSurveyFeet(ussurveyfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable UsSurveyFeet.
        /// </summary>
        public static Length? FromUsSurveyFeet(int? ussurveyfeet)
        {
            if (ussurveyfeet.HasValue)
            {
                return FromUsSurveyFeet(ussurveyfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable UsSurveyFeet.
        /// </summary>
        public static Length? FromUsSurveyFeet(long? ussurveyfeet)
        {
            if (ussurveyfeet.HasValue)
            {
                return FromUsSurveyFeet(ussurveyfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from UsSurveyFeet of type decimal.
        /// </summary>
        public static Length? FromUsSurveyFeet(decimal? ussurveyfeet)
        {
            if (ussurveyfeet.HasValue)
            {
                return FromUsSurveyFeet(ussurveyfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Yards.
        /// </summary>
        public static Length? FromYards(double? yards)
        {
            if (yards.HasValue)
            {
                return FromYards(yards.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Yards.
        /// </summary>
        public static Length? FromYards(int? yards)
        {
            if (yards.HasValue)
            {
                return FromYards(yards.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from nullable Yards.
        /// </summary>
        public static Length? FromYards(long? yards)
        {
            if (yards.HasValue)
            {
                return FromYards(yards.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Length from Yards of type decimal.
        /// </summary>
        public static Length? FromYards(decimal? yards)
        {
            if (yards.HasValue)
            {
                return FromYards(yards.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LengthUnit" /> to <see cref="Length" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Length unit value.</returns>
        public static Length From(double val, LengthUnit fromUnit)
        {
            switch (fromUnit)
            {
                case LengthUnit.Centimeter:
                    return FromCentimeters(val);
                case LengthUnit.Decimeter:
                    return FromDecimeters(val);
                case LengthUnit.DtpPica:
                    return FromDtpPicas(val);
                case LengthUnit.DtpPoint:
                    return FromDtpPoints(val);
                case LengthUnit.Fathom:
                    return FromFathoms(val);
                case LengthUnit.Foot:
                    return FromFeet(val);
                case LengthUnit.Inch:
                    return FromInches(val);
                case LengthUnit.Kilometer:
                    return FromKilometers(val);
                case LengthUnit.Meter:
                    return FromMeters(val);
                case LengthUnit.Microinch:
                    return FromMicroinches(val);
                case LengthUnit.Micrometer:
                    return FromMicrometers(val);
                case LengthUnit.Mil:
                    return FromMils(val);
                case LengthUnit.Mile:
                    return FromMiles(val);
                case LengthUnit.Millimeter:
                    return FromMillimeters(val);
                case LengthUnit.Nanometer:
                    return FromNanometers(val);
                case LengthUnit.NauticalMile:
                    return FromNauticalMiles(val);
                case LengthUnit.PrinterPica:
                    return FromPrinterPicas(val);
                case LengthUnit.PrinterPoint:
                    return FromPrinterPoints(val);
                case LengthUnit.Shackle:
                    return FromShackles(val);
                case LengthUnit.Twip:
                    return FromTwips(val);
                case LengthUnit.UsSurveyFoot:
                    return FromUsSurveyFeet(val);
                case LengthUnit.Yard:
                    return FromYards(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LengthUnit" /> to <see cref="Length" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Length unit value.</returns>
        public static Length? From(double? value, LengthUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case LengthUnit.Centimeter:
                    return FromCentimeters(value.Value);
                case LengthUnit.Decimeter:
                    return FromDecimeters(value.Value);
                case LengthUnit.DtpPica:
                    return FromDtpPicas(value.Value);
                case LengthUnit.DtpPoint:
                    return FromDtpPoints(value.Value);
                case LengthUnit.Fathom:
                    return FromFathoms(value.Value);
                case LengthUnit.Foot:
                    return FromFeet(value.Value);
                case LengthUnit.Inch:
                    return FromInches(value.Value);
                case LengthUnit.Kilometer:
                    return FromKilometers(value.Value);
                case LengthUnit.Meter:
                    return FromMeters(value.Value);
                case LengthUnit.Microinch:
                    return FromMicroinches(value.Value);
                case LengthUnit.Micrometer:
                    return FromMicrometers(value.Value);
                case LengthUnit.Mil:
                    return FromMils(value.Value);
                case LengthUnit.Mile:
                    return FromMiles(value.Value);
                case LengthUnit.Millimeter:
                    return FromMillimeters(value.Value);
                case LengthUnit.Nanometer:
                    return FromNanometers(value.Value);
                case LengthUnit.NauticalMile:
                    return FromNauticalMiles(value.Value);
                case LengthUnit.PrinterPica:
                    return FromPrinterPicas(value.Value);
                case LengthUnit.PrinterPoint:
                    return FromPrinterPoints(value.Value);
                case LengthUnit.Shackle:
                    return FromShackles(value.Value);
                case LengthUnit.Twip:
                    return FromTwips(value.Value);
                case LengthUnit.UsSurveyFoot:
                    return FromUsSurveyFeet(value.Value);
                case LengthUnit.Yard:
                    return FromYards(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(LengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(LengthUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Length operator -(Length right)
        {
            return new Length(-right._meters);
        }

        public static Length operator +(Length left, Length right)
        {
            return new Length(left._meters + right._meters);
        }

        public static Length operator -(Length left, Length right)
        {
            return new Length(left._meters - right._meters);
        }

        public static Length operator *(double left, Length right)
        {
            return new Length(left*right._meters);
        }

        public static Length operator *(Length left, double right)
        {
            return new Length(left._meters*(double)right);
        }

        public static Length operator /(Length left, double right)
        {
            return new Length(left._meters/(double)right);
        }

        public static double operator /(Length left, Length right)
        {
            return Convert.ToDouble(left._meters/right._meters);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Length)) throw new ArgumentException("Expected type Length.", "obj");
            return CompareTo((Length) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Length other)
        {
            return _meters.CompareTo(other._meters);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Length left, Length right)
        {
            return left._meters <= right._meters;
        }

        public static bool operator >=(Length left, Length right)
        {
            return left._meters >= right._meters;
        }

        public static bool operator <(Length left, Length right)
        {
            return left._meters < right._meters;
        }

        public static bool operator >(Length left, Length right)
        {
            return left._meters > right._meters;
        }

        public static bool operator ==(Length left, Length right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._meters == right._meters;
        }

        public static bool operator !=(Length left, Length right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._meters != right._meters;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _meters.Equals(((Length) obj)._meters);
        }

        public override int GetHashCode()
        {
            return _meters.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(LengthUnit unit)
        {
            switch (unit)
            {
                case LengthUnit.Centimeter:
                    return Centimeters;
                case LengthUnit.Decimeter:
                    return Decimeters;
                case LengthUnit.DtpPica:
                    return DtpPicas;
                case LengthUnit.DtpPoint:
                    return DtpPoints;
                case LengthUnit.Fathom:
                    return Fathoms;
                case LengthUnit.Foot:
                    return Feet;
                case LengthUnit.Inch:
                    return Inches;
                case LengthUnit.Kilometer:
                    return Kilometers;
                case LengthUnit.Meter:
                    return Meters;
                case LengthUnit.Microinch:
                    return Microinches;
                case LengthUnit.Micrometer:
                    return Micrometers;
                case LengthUnit.Mil:
                    return Mils;
                case LengthUnit.Mile:
                    return Miles;
                case LengthUnit.Millimeter:
                    return Millimeters;
                case LengthUnit.Nanometer:
                    return Nanometers;
                case LengthUnit.NauticalMile:
                    return NauticalMiles;
                case LengthUnit.PrinterPica:
                    return PrinterPicas;
                case LengthUnit.PrinterPoint:
                    return PrinterPoints;
                case LengthUnit.Shackle:
                    return Shackles;
                case LengthUnit.Twip:
                    return Twips;
                case LengthUnit.UsSurveyFoot:
                    return UsSurveyFeet;
                case LengthUnit.Yard:
                    return Yards;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Length Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Length Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<Length, LengthUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    LengthUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromMeters(x.Meters + y.Meters));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Length result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Length result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Length);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static LengthUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<LengthUnit>(str.Trim());

            if (unit == LengthUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized LengthUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is Meter
        /// </summary>
        public static LengthUnit ToStringDefaultUnit { get; set; } = LengthUnit.Meter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(LengthUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(LengthUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(LengthUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(LengthUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Length
        /// </summary>
        public static Length MaxValue
        {
            get
            {
                return new Length(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Length
        /// </summary>
        public static Length MinValue
        {
            get
            {
                return new Length(double.MinValue);
            }
        }
    }
}
