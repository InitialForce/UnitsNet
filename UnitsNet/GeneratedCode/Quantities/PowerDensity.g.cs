//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The amount of power in a volume.
    /// </summary>
    [DataContract]
    public partial struct PowerDensity : IQuantity<PowerDensityUnit>, IEquatable<PowerDensity>, IComparable, IComparable<PowerDensity>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 0)]
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 1)]
        private readonly PowerDensityUnit? _unit;

        static PowerDensity()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -3, 0, 0, 0, 0);
            BaseUnit = PowerDensityUnit.WattPerCubicMeter;
            MaxValue = new PowerDensity(double.MaxValue, BaseUnit);
            MinValue = new PowerDensity(double.MinValue, BaseUnit);
            QuantityType = QuantityType.PowerDensity;
            Units = Enum.GetValues(typeof(PowerDensityUnit)).Cast<PowerDensityUnit>().Except(new PowerDensityUnit[]{ PowerDensityUnit.Undefined }).ToArray();
            Zero = new PowerDensity(0, BaseUnit);
            Info = new QuantityInfo<PowerDensityUnit>("PowerDensity",
                new UnitInfo<PowerDensityUnit>[]
                {
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DecawattPerCubicFoot, "DecawattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DecawattPerCubicInch, "DecawattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DecawattPerCubicMeter, "DecawattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DecawattPerLiter, "DecawattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DeciwattPerCubicFoot, "DeciwattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DeciwattPerCubicInch, "DeciwattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DeciwattPerCubicMeter, "DeciwattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.DeciwattPerLiter, "DeciwattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.GigawattPerCubicFoot, "GigawattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.GigawattPerCubicInch, "GigawattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.GigawattPerCubicMeter, "GigawattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.GigawattPerLiter, "GigawattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.KilowattPerCubicFoot, "KilowattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.KilowattPerCubicInch, "KilowattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.KilowattPerCubicMeter, "KilowattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.KilowattPerLiter, "KilowattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MegawattPerCubicFoot, "MegawattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MegawattPerCubicInch, "MegawattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MegawattPerCubicMeter, "MegawattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MegawattPerLiter, "MegawattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MicrowattPerCubicFoot, "MicrowattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MicrowattPerCubicInch, "MicrowattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MicrowattPerCubicMeter, "MicrowattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MicrowattPerLiter, "MicrowattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MilliwattPerCubicFoot, "MilliwattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MilliwattPerCubicInch, "MilliwattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MilliwattPerCubicMeter, "MilliwattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.MilliwattPerLiter, "MilliwattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.NanowattPerCubicFoot, "NanowattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.NanowattPerCubicInch, "NanowattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.NanowattPerCubicMeter, "NanowattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.NanowattPerLiter, "NanowattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.PicowattPerCubicFoot, "PicowattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.PicowattPerCubicInch, "PicowattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.PicowattPerCubicMeter, "PicowattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.PicowattPerLiter, "PicowattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.TerawattPerCubicFoot, "TerawattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.TerawattPerCubicInch, "TerawattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.TerawattPerCubicMeter, "TerawattsPerCubicMeter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.TerawattPerLiter, "TerawattsPerLiter", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.WattPerCubicFoot, "WattsPerCubicFoot", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.WattPerCubicInch, "WattsPerCubicInch", BaseUnits.Undefined),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.WattPerCubicMeter, "WattsPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<PowerDensityUnit>(PowerDensityUnit.WattPerLiter, "WattsPerLiter", BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.PowerDensity);

            DefaultConversionFunctions = new UnitConverter();

            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public PowerDensity(double value, PowerDensityUnit unit)
        {
            if(unit == PowerDensityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public PowerDensity(double value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="PowerDensity" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<PowerDensityUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of PowerDensity, which is WattPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static PowerDensityUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of PowerDensity
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static PowerDensity MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of PowerDensity
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static PowerDensity MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the PowerDensity quantity.
        /// </summary>
        public static PowerDensityUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit WattPerCubicMeter.
        /// </summary>
        public static PowerDensity Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public PowerDensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<PowerDensityUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => QuantityType.PowerDensity;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => PowerDensity.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicFoot.
        /// </summary>
        public double DecawattsPerCubicFoot => As(PowerDensityUnit.DecawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicInch.
        /// </summary>
        public double DecawattsPerCubicInch => As(PowerDensityUnit.DecawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicMeter.
        /// </summary>
        public double DecawattsPerCubicMeter => As(PowerDensityUnit.DecawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerLiter.
        /// </summary>
        public double DecawattsPerLiter => As(PowerDensityUnit.DecawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicFoot.
        /// </summary>
        public double DeciwattsPerCubicFoot => As(PowerDensityUnit.DeciwattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicInch.
        /// </summary>
        public double DeciwattsPerCubicInch => As(PowerDensityUnit.DeciwattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicMeter.
        /// </summary>
        public double DeciwattsPerCubicMeter => As(PowerDensityUnit.DeciwattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerLiter.
        /// </summary>
        public double DeciwattsPerLiter => As(PowerDensityUnit.DeciwattPerLiter);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicFoot.
        /// </summary>
        public double GigawattsPerCubicFoot => As(PowerDensityUnit.GigawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicInch.
        /// </summary>
        public double GigawattsPerCubicInch => As(PowerDensityUnit.GigawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicMeter.
        /// </summary>
        public double GigawattsPerCubicMeter => As(PowerDensityUnit.GigawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerLiter.
        /// </summary>
        public double GigawattsPerLiter => As(PowerDensityUnit.GigawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicFoot.
        /// </summary>
        public double KilowattsPerCubicFoot => As(PowerDensityUnit.KilowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicInch.
        /// </summary>
        public double KilowattsPerCubicInch => As(PowerDensityUnit.KilowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicMeter.
        /// </summary>
        public double KilowattsPerCubicMeter => As(PowerDensityUnit.KilowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerLiter.
        /// </summary>
        public double KilowattsPerLiter => As(PowerDensityUnit.KilowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicFoot.
        /// </summary>
        public double MegawattsPerCubicFoot => As(PowerDensityUnit.MegawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicInch.
        /// </summary>
        public double MegawattsPerCubicInch => As(PowerDensityUnit.MegawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicMeter.
        /// </summary>
        public double MegawattsPerCubicMeter => As(PowerDensityUnit.MegawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerLiter.
        /// </summary>
        public double MegawattsPerLiter => As(PowerDensityUnit.MegawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicFoot.
        /// </summary>
        public double MicrowattsPerCubicFoot => As(PowerDensityUnit.MicrowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicInch.
        /// </summary>
        public double MicrowattsPerCubicInch => As(PowerDensityUnit.MicrowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicMeter.
        /// </summary>
        public double MicrowattsPerCubicMeter => As(PowerDensityUnit.MicrowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerLiter.
        /// </summary>
        public double MicrowattsPerLiter => As(PowerDensityUnit.MicrowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicFoot.
        /// </summary>
        public double MilliwattsPerCubicFoot => As(PowerDensityUnit.MilliwattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicInch.
        /// </summary>
        public double MilliwattsPerCubicInch => As(PowerDensityUnit.MilliwattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicMeter.
        /// </summary>
        public double MilliwattsPerCubicMeter => As(PowerDensityUnit.MilliwattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerLiter.
        /// </summary>
        public double MilliwattsPerLiter => As(PowerDensityUnit.MilliwattPerLiter);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicFoot.
        /// </summary>
        public double NanowattsPerCubicFoot => As(PowerDensityUnit.NanowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicInch.
        /// </summary>
        public double NanowattsPerCubicInch => As(PowerDensityUnit.NanowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicMeter.
        /// </summary>
        public double NanowattsPerCubicMeter => As(PowerDensityUnit.NanowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerLiter.
        /// </summary>
        public double NanowattsPerLiter => As(PowerDensityUnit.NanowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicFoot.
        /// </summary>
        public double PicowattsPerCubicFoot => As(PowerDensityUnit.PicowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicInch.
        /// </summary>
        public double PicowattsPerCubicInch => As(PowerDensityUnit.PicowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicMeter.
        /// </summary>
        public double PicowattsPerCubicMeter => As(PowerDensityUnit.PicowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerLiter.
        /// </summary>
        public double PicowattsPerLiter => As(PowerDensityUnit.PicowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicFoot.
        /// </summary>
        public double TerawattsPerCubicFoot => As(PowerDensityUnit.TerawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicInch.
        /// </summary>
        public double TerawattsPerCubicInch => As(PowerDensityUnit.TerawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicMeter.
        /// </summary>
        public double TerawattsPerCubicMeter => As(PowerDensityUnit.TerawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerLiter.
        /// </summary>
        public double TerawattsPerLiter => As(PowerDensityUnit.TerawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicFoot.
        /// </summary>
        public double WattsPerCubicFoot => As(PowerDensityUnit.WattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicInch.
        /// </summary>
        public double WattsPerCubicInch => As(PowerDensityUnit.WattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicMeter.
        /// </summary>
        public double WattsPerCubicMeter => As(PowerDensityUnit.WattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in WattsPerLiter.
        /// </summary>
        public double WattsPerLiter => As(PowerDensityUnit.WattPerLiter);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: BaseUnit -> PowerDensityUnit
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DecawattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e1d, PowerDensityUnit.DecawattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DecawattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e1d, PowerDensityUnit.DecawattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DecawattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e1d, PowerDensityUnit.DecawattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DecawattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e1d, PowerDensityUnit.DecawattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DeciwattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e-1d, PowerDensityUnit.DeciwattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DeciwattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e-1d, PowerDensityUnit.DeciwattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DeciwattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e-1d, PowerDensityUnit.DeciwattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.DeciwattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e-1d, PowerDensityUnit.DeciwattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.GigawattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e9d, PowerDensityUnit.GigawattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.GigawattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e9d, PowerDensityUnit.GigawattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.GigawattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e9d, PowerDensityUnit.GigawattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.GigawattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e9d, PowerDensityUnit.GigawattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.KilowattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e3d, PowerDensityUnit.KilowattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.KilowattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e3d, PowerDensityUnit.KilowattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.KilowattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e3d, PowerDensityUnit.KilowattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.KilowattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e3d, PowerDensityUnit.KilowattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MegawattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e6d, PowerDensityUnit.MegawattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MegawattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e6d, PowerDensityUnit.MegawattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MegawattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e6d, PowerDensityUnit.MegawattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MegawattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e6d, PowerDensityUnit.MegawattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MicrowattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e-6d, PowerDensityUnit.MicrowattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MicrowattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e-6d, PowerDensityUnit.MicrowattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MicrowattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e-6d, PowerDensityUnit.MicrowattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MicrowattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e-6d, PowerDensityUnit.MicrowattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MilliwattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e-3d, PowerDensityUnit.MilliwattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MilliwattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e-3d, PowerDensityUnit.MilliwattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MilliwattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e-3d, PowerDensityUnit.MilliwattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.MilliwattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e-3d, PowerDensityUnit.MilliwattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.NanowattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e-9d, PowerDensityUnit.NanowattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.NanowattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e-9d, PowerDensityUnit.NanowattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.NanowattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e-9d, PowerDensityUnit.NanowattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.NanowattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e-9d, PowerDensityUnit.NanowattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.PicowattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e-12d, PowerDensityUnit.PicowattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.PicowattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e-12d, PowerDensityUnit.PicowattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.PicowattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e-12d, PowerDensityUnit.PicowattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.PicowattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e-12d, PowerDensityUnit.PicowattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.TerawattPerCubicFoot, quantity => new PowerDensity((quantity.Value/3.531466672148859e1) / 1e12d, PowerDensityUnit.TerawattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.TerawattPerCubicInch, quantity => new PowerDensity((quantity.Value/6.102374409473228e4) / 1e12d, PowerDensityUnit.TerawattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.TerawattPerCubicMeter, quantity => new PowerDensity((quantity.Value) / 1e12d, PowerDensityUnit.TerawattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.TerawattPerLiter, quantity => new PowerDensity((quantity.Value/1.0e3) / 1e12d, PowerDensityUnit.TerawattPerLiter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.WattPerCubicFoot, quantity => new PowerDensity(quantity.Value/3.531466672148859e1, PowerDensityUnit.WattPerCubicFoot));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.WattPerCubicInch, quantity => new PowerDensity(quantity.Value/6.102374409473228e4, PowerDensityUnit.WattPerCubicInch));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.WattPerLiter, quantity => new PowerDensity(quantity.Value/1.0e3, PowerDensityUnit.WattPerLiter));
            
            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => quantity);

            // Register in unit converter: PowerDensityUnit -> BaseUnit
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DecawattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DecawattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DecawattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DecawattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DeciwattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e-1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DeciwattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e-1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DeciwattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e-1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.DeciwattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e-1d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.GigawattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.GigawattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.GigawattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.GigawattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.KilowattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.KilowattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.KilowattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.KilowattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MegawattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MegawattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MegawattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MegawattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MicrowattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e-6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MicrowattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e-6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MicrowattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e-6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MicrowattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e-6d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MilliwattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e-3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MilliwattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e-3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MilliwattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e-3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.MilliwattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e-3d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.NanowattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e-9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.NanowattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e-9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.NanowattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e-9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.NanowattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e-9d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.PicowattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e-12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.PicowattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e-12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.PicowattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e-12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.PicowattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e-12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.TerawattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*3.531466672148859e1) * 1e12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.TerawattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*6.102374409473228e4) * 1e12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.TerawattPerCubicMeter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value) * 1e12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.TerawattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity((quantity.Value*1.0e3) * 1e12d, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicFoot, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity(quantity.Value*3.531466672148859e1, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerCubicInch, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity(quantity.Value*6.102374409473228e4, PowerDensityUnit.WattPerCubicMeter));
            unitConverter.SetConversionFunction<PowerDensity>(PowerDensityUnit.WattPerLiter, PowerDensityUnit.WattPerCubicMeter, quantity => new PowerDensity(quantity.Value*1.0e3, PowerDensityUnit.WattPerCubicMeter));
        }

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DecawattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"daW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DecawattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"daW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DecawattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"daW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DecawattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"daW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DeciwattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"dW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DeciwattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"dW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DeciwattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"dW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.DeciwattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"dW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.GigawattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"GW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.GigawattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"GW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.GigawattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"GW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.GigawattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"GW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.KilowattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"kW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.KilowattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"kW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.KilowattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"kW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.KilowattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"kW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MegawattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"MW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MegawattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"MW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MegawattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"MW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MegawattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"MW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MicrowattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"µW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MicrowattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"µW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MicrowattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"µW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MicrowattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"µW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MilliwattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"mW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MilliwattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"mW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MilliwattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"mW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.MilliwattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"mW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.NanowattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"nW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.NanowattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"nW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.NanowattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"nW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.NanowattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"nW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.PicowattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"pW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.PicowattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"pW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.PicowattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"pW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.PicowattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"pW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.TerawattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"TW/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.TerawattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"TW/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.TerawattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"TW/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.TerawattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"TW/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.WattPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"W/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.WattPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"W/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.WattPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"W/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PowerDensityUnit.WattPerLiter, new CultureInfo("en-US"), false, true, new string[]{"W/l"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PowerDensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(PowerDensityUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerCubicFoot(QuantityValue decawattspercubicfoot)
        {
            double value = (double) decawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerCubicInch(QuantityValue decawattspercubicinch)
        {
            double value = (double) decawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerCubicMeter(QuantityValue decawattspercubicmeter)
        {
            double value = (double) decawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from DecawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerLiter(QuantityValue decawattsperliter)
        {
            double value = (double) decawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerCubicFoot(QuantityValue deciwattspercubicfoot)
        {
            double value = (double) deciwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerCubicInch(QuantityValue deciwattspercubicinch)
        {
            double value = (double) deciwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerCubicMeter(QuantityValue deciwattspercubicmeter)
        {
            double value = (double) deciwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerLiter(QuantityValue deciwattsperliter)
        {
            double value = (double) deciwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerCubicFoot(QuantityValue gigawattspercubicfoot)
        {
            double value = (double) gigawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerCubicInch(QuantityValue gigawattspercubicinch)
        {
            double value = (double) gigawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerCubicMeter(QuantityValue gigawattspercubicmeter)
        {
            double value = (double) gigawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerLiter(QuantityValue gigawattsperliter)
        {
            double value = (double) gigawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerCubicFoot(QuantityValue kilowattspercubicfoot)
        {
            double value = (double) kilowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerCubicInch(QuantityValue kilowattspercubicinch)
        {
            double value = (double) kilowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerCubicMeter(QuantityValue kilowattspercubicmeter)
        {
            double value = (double) kilowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerLiter(QuantityValue kilowattsperliter)
        {
            double value = (double) kilowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerCubicFoot(QuantityValue megawattspercubicfoot)
        {
            double value = (double) megawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerCubicInch(QuantityValue megawattspercubicinch)
        {
            double value = (double) megawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerCubicMeter(QuantityValue megawattspercubicmeter)
        {
            double value = (double) megawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerLiter(QuantityValue megawattsperliter)
        {
            double value = (double) megawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerCubicFoot(QuantityValue microwattspercubicfoot)
        {
            double value = (double) microwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerCubicInch(QuantityValue microwattspercubicinch)
        {
            double value = (double) microwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerCubicMeter(QuantityValue microwattspercubicmeter)
        {
            double value = (double) microwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerLiter(QuantityValue microwattsperliter)
        {
            double value = (double) microwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerCubicFoot(QuantityValue milliwattspercubicfoot)
        {
            double value = (double) milliwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerCubicInch(QuantityValue milliwattspercubicinch)
        {
            double value = (double) milliwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerCubicMeter(QuantityValue milliwattspercubicmeter)
        {
            double value = (double) milliwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerLiter(QuantityValue milliwattsperliter)
        {
            double value = (double) milliwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerCubicFoot(QuantityValue nanowattspercubicfoot)
        {
            double value = (double) nanowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerCubicInch(QuantityValue nanowattspercubicinch)
        {
            double value = (double) nanowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerCubicMeter(QuantityValue nanowattspercubicmeter)
        {
            double value = (double) nanowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerLiter(QuantityValue nanowattsperliter)
        {
            double value = (double) nanowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerCubicFoot(QuantityValue picowattspercubicfoot)
        {
            double value = (double) picowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerCubicInch(QuantityValue picowattspercubicinch)
        {
            double value = (double) picowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerCubicMeter(QuantityValue picowattspercubicmeter)
        {
            double value = (double) picowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerLiter(QuantityValue picowattsperliter)
        {
            double value = (double) picowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerCubicFoot(QuantityValue terawattspercubicfoot)
        {
            double value = (double) terawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerCubicInch(QuantityValue terawattspercubicinch)
        {
            double value = (double) terawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerCubicMeter(QuantityValue terawattspercubicmeter)
        {
            double value = (double) terawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerLiter(QuantityValue terawattsperliter)
        {
            double value = (double) terawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerCubicFoot(QuantityValue wattspercubicfoot)
        {
            double value = (double) wattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerCubicInch(QuantityValue wattspercubicinch)
        {
            double value = (double) wattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerCubicMeter(QuantityValue wattspercubicmeter)
        {
            double value = (double) wattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerLiter(QuantityValue wattsperliter)
        {
            double value = (double) wattsperliter;
            return new PowerDensity(value, PowerDensityUnit.WattPerLiter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerDensityUnit" /> to <see cref="PowerDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PowerDensity unit value.</returns>
        public static PowerDensity From(QuantityValue value, PowerDensityUnit fromUnit)
        {
            return new PowerDensity((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static PowerDensity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static PowerDensity Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<PowerDensity, PowerDensityUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out PowerDensity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out PowerDensity result)
        {
            return QuantityParser.Default.TryParse<PowerDensity, PowerDensityUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerDensityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerDensityUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<PowerDensityUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.PowerDensityUnit)"/>
        public static bool TryParseUnit(string str, out PowerDensityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out PowerDensityUnit unit)
        {
            return UnitParser.Default.TryParse<PowerDensityUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static PowerDensity operator -(PowerDensity right)
        {
            return new PowerDensity(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="PowerDensity"/> from adding two <see cref="PowerDensity"/>.</summary>
        public static PowerDensity operator +(PowerDensity left, PowerDensity right)
        {
            return new PowerDensity(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="PowerDensity"/> from subtracting two <see cref="PowerDensity"/>.</summary>
        public static PowerDensity operator -(PowerDensity left, PowerDensity right)
        {
            return new PowerDensity(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="PowerDensity"/> from multiplying value and <see cref="PowerDensity"/>.</summary>
        public static PowerDensity operator *(double left, PowerDensity right)
        {
            return new PowerDensity(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="PowerDensity"/> from multiplying value and <see cref="PowerDensity"/>.</summary>
        public static PowerDensity operator *(PowerDensity left, double right)
        {
            return new PowerDensity(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="PowerDensity"/> from dividing <see cref="PowerDensity"/> by value.</summary>
        public static PowerDensity operator /(PowerDensity left, double right)
        {
            return new PowerDensity(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="PowerDensity"/> by <see cref="PowerDensity"/>.</summary>
        public static double operator /(PowerDensity left, PowerDensity right)
        {
            return left.WattsPerCubicMeter / right.WattsPerCubicMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(PowerDensity left, PowerDensity right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(PowerDensity left, PowerDensity right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(PowerDensity left, PowerDensity right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(PowerDensity left, PowerDensity right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(PowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(PowerDensity left, PowerDensity right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(PowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(PowerDensity left, PowerDensity right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is PowerDensity objPowerDensity)) throw new ArgumentException("Expected type PowerDensity.", nameof(obj));

            return CompareTo(objPowerDensity);
        }

        /// <inheritdoc />
        public int CompareTo(PowerDensity other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(PowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is PowerDensity objPowerDensity))
                return false;

            return Equals(objPowerDensity);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(PowerDensity, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(PowerDensity other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another PowerDensity within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(PowerDensity other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current PowerDensity.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PowerDensityUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is PowerDensityUnit unitAsPowerDensityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PowerDensityUnit)} is supported.", nameof(unit));

            return As(unitAsPowerDensityUnit);
        }

        /// <summary>
        ///     Converts this PowerDensity to another PowerDensity with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A PowerDensity with the specified unit.</returns>
        public PowerDensity ToUnit(PowerDensityUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this PowerDensity to another PowerDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A PowerDensity with the specified unit.</returns>
        public PowerDensity ToUnit(PowerDensityUnit unit, UnitConverter unitConverter)
        {
            if(Unit == unit)
            {
                // Already in requested units.
                return this;
            }
            else if(unitConverter.TryGetConversionFunction((typeof(PowerDensity), Unit, typeof(PowerDensity), unit), out var conversionFunction))
            {
                // Direct conversion to requested unit found. Return the converted quantity.
                var converted = conversionFunction(this);
                return (PowerDensity)converted;
            }
            else if(Unit != BaseUnit)
            {
                // Direct conversion to requested unit NOT found. Convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is PowerDensityUnit unitAsPowerDensityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PowerDensityUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsPowerDensityUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit, UnitConverter unitConverter)
        {
            if(!(unit is PowerDensityUnit unitAsPowerDensityUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PowerDensityUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsPowerDensityUnit, unitConverter);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public PowerDensity ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<PowerDensityUnit> IQuantity<PowerDensityUnit>.ToUnit(PowerDensityUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<PowerDensityUnit> IQuantity<PowerDensityUnit>.ToUnit(PowerDensityUnit unit, UnitConverter unitConverter) => ToUnit(unit, unitConverter);

        /// <inheritdoc />
        IQuantity<PowerDensityUnit> IQuantity<PowerDensityUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        private double GetValueAs(PowerDensityUnit unit)
        {
            var converted = ToUnit(unit);
            return (double)converted.Value;
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<PowerDensityUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(PowerDensity)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(PowerDensity)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(PowerDensity)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(PowerDensity))
                return this;
            else if(conversionType == typeof(PowerDensityUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return PowerDensity.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return PowerDensity.Info;
            else if(conversionType == typeof(BaseDimensions))
                return PowerDensity.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(PowerDensity)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
