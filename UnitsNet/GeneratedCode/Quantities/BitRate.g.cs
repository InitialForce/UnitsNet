//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In telecommunications and computing, bit rate is the number of bits that are conveyed or processed per unit of time.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class BitRate
#else
    public partial struct BitRate : IComparable, IComparable<BitRate>
#endif
    {
        /// <summary>
        ///     Base unit of BitRate.
        /// </summary>
        private readonly decimal _bitsPerSecond;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public BitRate() : this(0)
        {
        }
#endif

        public BitRate(double bitspersecond)
        {
            _bitsPerSecond = Convert.ToDecimal(bitspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        BitRate(long bitspersecond)
        {
            _bitsPerSecond = Convert.ToDecimal(bitspersecond);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        BitRate(decimal bitspersecond)
        {
            _bitsPerSecond = Convert.ToDecimal(bitspersecond);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.BitRate;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static BitRateUnit BaseUnit
        {
            get { return BitRateUnit.BitPerSecond; }
        }

        /// <summary>
        ///     All units of measurement for the BitRate quantity.
        /// </summary>
        public static BitRateUnit[] Units { get; } = Enum.GetValues(typeof(BitRateUnit)).Cast<BitRateUnit>().ToArray();

        /// <summary>
        ///     Get BitRate in BitsPerSecond.
        /// </summary>
        public double BitsPerSecond
        {
            get { return Convert.ToDouble(_bitsPerSecond); }
        }

        /// <summary>
        ///     Get BitRate in BytesPerSecond.
        /// </summary>
        public double BytesPerSecond
        {
            get { return Convert.ToDouble(_bitsPerSecond/8m); }
        }

        /// <summary>
        ///     Get BitRate in ExabitsPerSecond.
        /// </summary>
        public double ExabitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / 1e18m); }
        }

        /// <summary>
        ///     Get BitRate in ExabytesPerSecond.
        /// </summary>
        public double ExabytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / 1e18m); }
        }

        /// <summary>
        ///     Get BitRate in ExbibitsPerSecond.
        /// </summary>
        public double ExbibitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in ExbibytesPerSecond.
        /// </summary>
        public double ExbibytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in GibibitsPerSecond.
        /// </summary>
        public double GibibitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / (1024m * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in GibibytesPerSecond.
        /// </summary>
        public double GibibytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / (1024m * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in GigabitsPerSecond.
        /// </summary>
        public double GigabitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / 1e9m); }
        }

        /// <summary>
        ///     Get BitRate in GigabytesPerSecond.
        /// </summary>
        public double GigabytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / 1e9m); }
        }

        /// <summary>
        ///     Get BitRate in KibibitsPerSecond.
        /// </summary>
        public double KibibitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / 1024m); }
        }

        /// <summary>
        ///     Get BitRate in KibibytesPerSecond.
        /// </summary>
        public double KibibytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / 1024m); }
        }

        /// <summary>
        ///     Get BitRate in KilobitsPerSecond.
        /// </summary>
        public double KilobitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / 1e3m); }
        }

        /// <summary>
        ///     Get BitRate in KilobytesPerSecond.
        /// </summary>
        public double KilobytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / 1e3m); }
        }

        /// <summary>
        ///     Get BitRate in MebibitsPerSecond.
        /// </summary>
        public double MebibitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / (1024m * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in MebibytesPerSecond.
        /// </summary>
        public double MebibytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / (1024m * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in MegabitsPerSecond.
        /// </summary>
        public double MegabitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / 1e6m); }
        }

        /// <summary>
        ///     Get BitRate in MegabytesPerSecond.
        /// </summary>
        public double MegabytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / 1e6m); }
        }

        /// <summary>
        ///     Get BitRate in PebibitsPerSecond.
        /// </summary>
        public double PebibitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / (1024m * 1024 * 1024 * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in PebibytesPerSecond.
        /// </summary>
        public double PebibytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / (1024m * 1024 * 1024 * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in PetabitsPerSecond.
        /// </summary>
        public double PetabitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / 1e15m); }
        }

        /// <summary>
        ///     Get BitRate in PetabytesPerSecond.
        /// </summary>
        public double PetabytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / 1e15m); }
        }

        /// <summary>
        ///     Get BitRate in TebibitsPerSecond.
        /// </summary>
        public double TebibitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / (1024m * 1024 * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in TebibytesPerSecond.
        /// </summary>
        public double TebibytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / (1024m * 1024 * 1024 * 1024)); }
        }

        /// <summary>
        ///     Get BitRate in TerabitsPerSecond.
        /// </summary>
        public double TerabitsPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond) / 1e12m); }
        }

        /// <summary>
        ///     Get BitRate in TerabytesPerSecond.
        /// </summary>
        public double TerabytesPerSecond
        {
            get { return Convert.ToDouble((_bitsPerSecond/8m) / 1e12m); }
        }

        #endregion

        #region Static

        public static BitRate Zero
        {
            get { return new BitRate(); }
        }

        /// <summary>
        ///     Get BitRate from BitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromBitsPerSecond(double bitspersecond)
        {
            double value = (double) bitspersecond;
            return new BitRate(Convert.ToDecimal(value));
        }
#else
        public static BitRate FromBitsPerSecond(QuantityValue bitspersecond)
        {
            double value = (double) bitspersecond;
            return new BitRate((Convert.ToDecimal(value)));
        }
#endif

        /// <summary>
        ///     Get BitRate from BytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromBytesPerSecond(double bytespersecond)
        {
            double value = (double) bytespersecond;
            return new BitRate(Convert.ToDecimal(value*8d));
        }
#else
        public static BitRate FromBytesPerSecond(QuantityValue bytespersecond)
        {
            double value = (double) bytespersecond;
            return new BitRate((Convert.ToDecimal(value*8d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from ExabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExabitsPerSecond(double exabitspersecond)
        {
            double value = (double) exabitspersecond;
            return new BitRate(Convert.ToDecimal((value) * 1e18d));
        }
#else
        public static BitRate FromExabitsPerSecond(QuantityValue exabitspersecond)
        {
            double value = (double) exabitspersecond;
            return new BitRate((Convert.ToDecimal((value) * 1e18d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from ExabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExabytesPerSecond(double exabytespersecond)
        {
            double value = (double) exabytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * 1e18d));
        }
#else
        public static BitRate FromExabytesPerSecond(QuantityValue exabytespersecond)
        {
            double value = (double) exabytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * 1e18d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from ExbibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExbibitsPerSecond(double exbibitspersecond)
        {
            double value = (double) exbibitspersecond;
            return new BitRate(Convert.ToDecimal((value) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024)));
        }
#else
        public static BitRate FromExbibitsPerSecond(QuantityValue exbibitspersecond)
        {
            double value = (double) exbibitspersecond;
            return new BitRate((Convert.ToDecimal((value) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from ExbibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExbibytesPerSecond(double exbibytespersecond)
        {
            double value = (double) exbibytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024)));
        }
#else
        public static BitRate FromExbibytesPerSecond(QuantityValue exbibytespersecond)
        {
            double value = (double) exbibytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from GibibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGibibitsPerSecond(double gibibitspersecond)
        {
            double value = (double) gibibitspersecond;
            return new BitRate(Convert.ToDecimal((value) * (1024d * 1024 * 1024)));
        }
#else
        public static BitRate FromGibibitsPerSecond(QuantityValue gibibitspersecond)
        {
            double value = (double) gibibitspersecond;
            return new BitRate((Convert.ToDecimal((value) * (1024d * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from GibibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGibibytesPerSecond(double gibibytespersecond)
        {
            double value = (double) gibibytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024)));
        }
#else
        public static BitRate FromGibibytesPerSecond(QuantityValue gibibytespersecond)
        {
            double value = (double) gibibytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from GigabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGigabitsPerSecond(double gigabitspersecond)
        {
            double value = (double) gigabitspersecond;
            return new BitRate(Convert.ToDecimal((value) * 1e9d));
        }
#else
        public static BitRate FromGigabitsPerSecond(QuantityValue gigabitspersecond)
        {
            double value = (double) gigabitspersecond;
            return new BitRate((Convert.ToDecimal((value) * 1e9d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from GigabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGigabytesPerSecond(double gigabytespersecond)
        {
            double value = (double) gigabytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * 1e9d));
        }
#else
        public static BitRate FromGigabytesPerSecond(QuantityValue gigabytespersecond)
        {
            double value = (double) gigabytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * 1e9d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from KibibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKibibitsPerSecond(double kibibitspersecond)
        {
            double value = (double) kibibitspersecond;
            return new BitRate(Convert.ToDecimal((value) * 1024d));
        }
#else
        public static BitRate FromKibibitsPerSecond(QuantityValue kibibitspersecond)
        {
            double value = (double) kibibitspersecond;
            return new BitRate((Convert.ToDecimal((value) * 1024d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from KibibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKibibytesPerSecond(double kibibytespersecond)
        {
            double value = (double) kibibytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * 1024d));
        }
#else
        public static BitRate FromKibibytesPerSecond(QuantityValue kibibytespersecond)
        {
            double value = (double) kibibytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * 1024d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from KilobitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKilobitsPerSecond(double kilobitspersecond)
        {
            double value = (double) kilobitspersecond;
            return new BitRate(Convert.ToDecimal((value) * 1e3d));
        }
#else
        public static BitRate FromKilobitsPerSecond(QuantityValue kilobitspersecond)
        {
            double value = (double) kilobitspersecond;
            return new BitRate((Convert.ToDecimal((value) * 1e3d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from KilobytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKilobytesPerSecond(double kilobytespersecond)
        {
            double value = (double) kilobytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * 1e3d));
        }
#else
        public static BitRate FromKilobytesPerSecond(QuantityValue kilobytespersecond)
        {
            double value = (double) kilobytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * 1e3d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from MebibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMebibitsPerSecond(double mebibitspersecond)
        {
            double value = (double) mebibitspersecond;
            return new BitRate(Convert.ToDecimal((value) * (1024d * 1024)));
        }
#else
        public static BitRate FromMebibitsPerSecond(QuantityValue mebibitspersecond)
        {
            double value = (double) mebibitspersecond;
            return new BitRate((Convert.ToDecimal((value) * (1024d * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from MebibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMebibytesPerSecond(double mebibytespersecond)
        {
            double value = (double) mebibytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * (1024d * 1024)));
        }
#else
        public static BitRate FromMebibytesPerSecond(QuantityValue mebibytespersecond)
        {
            double value = (double) mebibytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * (1024d * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from MegabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMegabitsPerSecond(double megabitspersecond)
        {
            double value = (double) megabitspersecond;
            return new BitRate(Convert.ToDecimal((value) * 1e6d));
        }
#else
        public static BitRate FromMegabitsPerSecond(QuantityValue megabitspersecond)
        {
            double value = (double) megabitspersecond;
            return new BitRate((Convert.ToDecimal((value) * 1e6d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from MegabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMegabytesPerSecond(double megabytespersecond)
        {
            double value = (double) megabytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * 1e6d));
        }
#else
        public static BitRate FromMegabytesPerSecond(QuantityValue megabytespersecond)
        {
            double value = (double) megabytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * 1e6d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from PebibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPebibitsPerSecond(double pebibitspersecond)
        {
            double value = (double) pebibitspersecond;
            return new BitRate(Convert.ToDecimal((value) * (1024d * 1024 * 1024 * 1024 * 1024)));
        }
#else
        public static BitRate FromPebibitsPerSecond(QuantityValue pebibitspersecond)
        {
            double value = (double) pebibitspersecond;
            return new BitRate((Convert.ToDecimal((value) * (1024d * 1024 * 1024 * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from PebibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPebibytesPerSecond(double pebibytespersecond)
        {
            double value = (double) pebibytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024)));
        }
#else
        public static BitRate FromPebibytesPerSecond(QuantityValue pebibytespersecond)
        {
            double value = (double) pebibytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from PetabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPetabitsPerSecond(double petabitspersecond)
        {
            double value = (double) petabitspersecond;
            return new BitRate(Convert.ToDecimal((value) * 1e15d));
        }
#else
        public static BitRate FromPetabitsPerSecond(QuantityValue petabitspersecond)
        {
            double value = (double) petabitspersecond;
            return new BitRate((Convert.ToDecimal((value) * 1e15d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from PetabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPetabytesPerSecond(double petabytespersecond)
        {
            double value = (double) petabytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * 1e15d));
        }
#else
        public static BitRate FromPetabytesPerSecond(QuantityValue petabytespersecond)
        {
            double value = (double) petabytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * 1e15d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from TebibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTebibitsPerSecond(double tebibitspersecond)
        {
            double value = (double) tebibitspersecond;
            return new BitRate(Convert.ToDecimal((value) * (1024d * 1024 * 1024 * 1024)));
        }
#else
        public static BitRate FromTebibitsPerSecond(QuantityValue tebibitspersecond)
        {
            double value = (double) tebibitspersecond;
            return new BitRate((Convert.ToDecimal((value) * (1024d * 1024 * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from TebibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTebibytesPerSecond(double tebibytespersecond)
        {
            double value = (double) tebibytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024 * 1024)));
        }
#else
        public static BitRate FromTebibytesPerSecond(QuantityValue tebibytespersecond)
        {
            double value = (double) tebibytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * (1024d * 1024 * 1024 * 1024))));
        }
#endif

        /// <summary>
        ///     Get BitRate from TerabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTerabitsPerSecond(double terabitspersecond)
        {
            double value = (double) terabitspersecond;
            return new BitRate(Convert.ToDecimal((value) * 1e12d));
        }
#else
        public static BitRate FromTerabitsPerSecond(QuantityValue terabitspersecond)
        {
            double value = (double) terabitspersecond;
            return new BitRate((Convert.ToDecimal((value) * 1e12d)));
        }
#endif

        /// <summary>
        ///     Get BitRate from TerabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTerabytesPerSecond(double terabytespersecond)
        {
            double value = (double) terabytespersecond;
            return new BitRate(Convert.ToDecimal((value*8d) * 1e12d));
        }
#else
        public static BitRate FromTerabytesPerSecond(QuantityValue terabytespersecond)
        {
            double value = (double) terabytespersecond;
            return new BitRate((Convert.ToDecimal((value*8d) * 1e12d)));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable BitRate from nullable BitsPerSecond.
        /// </summary>
        public static BitRate? FromBitsPerSecond(QuantityValue? bitspersecond)
        {
            if (bitspersecond.HasValue)
            {
                return FromBitsPerSecond(bitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable BytesPerSecond.
        /// </summary>
        public static BitRate? FromBytesPerSecond(QuantityValue? bytespersecond)
        {
            if (bytespersecond.HasValue)
            {
                return FromBytesPerSecond(bytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExabitsPerSecond.
        /// </summary>
        public static BitRate? FromExabitsPerSecond(QuantityValue? exabitspersecond)
        {
            if (exabitspersecond.HasValue)
            {
                return FromExabitsPerSecond(exabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExabytesPerSecond.
        /// </summary>
        public static BitRate? FromExabytesPerSecond(QuantityValue? exabytespersecond)
        {
            if (exabytespersecond.HasValue)
            {
                return FromExabytesPerSecond(exabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExbibitsPerSecond.
        /// </summary>
        public static BitRate? FromExbibitsPerSecond(QuantityValue? exbibitspersecond)
        {
            if (exbibitspersecond.HasValue)
            {
                return FromExbibitsPerSecond(exbibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExbibytesPerSecond.
        /// </summary>
        public static BitRate? FromExbibytesPerSecond(QuantityValue? exbibytespersecond)
        {
            if (exbibytespersecond.HasValue)
            {
                return FromExbibytesPerSecond(exbibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GibibitsPerSecond.
        /// </summary>
        public static BitRate? FromGibibitsPerSecond(QuantityValue? gibibitspersecond)
        {
            if (gibibitspersecond.HasValue)
            {
                return FromGibibitsPerSecond(gibibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GibibytesPerSecond.
        /// </summary>
        public static BitRate? FromGibibytesPerSecond(QuantityValue? gibibytespersecond)
        {
            if (gibibytespersecond.HasValue)
            {
                return FromGibibytesPerSecond(gibibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GigabitsPerSecond.
        /// </summary>
        public static BitRate? FromGigabitsPerSecond(QuantityValue? gigabitspersecond)
        {
            if (gigabitspersecond.HasValue)
            {
                return FromGigabitsPerSecond(gigabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GigabytesPerSecond.
        /// </summary>
        public static BitRate? FromGigabytesPerSecond(QuantityValue? gigabytespersecond)
        {
            if (gigabytespersecond.HasValue)
            {
                return FromGigabytesPerSecond(gigabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KibibitsPerSecond.
        /// </summary>
        public static BitRate? FromKibibitsPerSecond(QuantityValue? kibibitspersecond)
        {
            if (kibibitspersecond.HasValue)
            {
                return FromKibibitsPerSecond(kibibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KibibytesPerSecond.
        /// </summary>
        public static BitRate? FromKibibytesPerSecond(QuantityValue? kibibytespersecond)
        {
            if (kibibytespersecond.HasValue)
            {
                return FromKibibytesPerSecond(kibibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KilobitsPerSecond.
        /// </summary>
        public static BitRate? FromKilobitsPerSecond(QuantityValue? kilobitspersecond)
        {
            if (kilobitspersecond.HasValue)
            {
                return FromKilobitsPerSecond(kilobitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KilobytesPerSecond.
        /// </summary>
        public static BitRate? FromKilobytesPerSecond(QuantityValue? kilobytespersecond)
        {
            if (kilobytespersecond.HasValue)
            {
                return FromKilobytesPerSecond(kilobytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MebibitsPerSecond.
        /// </summary>
        public static BitRate? FromMebibitsPerSecond(QuantityValue? mebibitspersecond)
        {
            if (mebibitspersecond.HasValue)
            {
                return FromMebibitsPerSecond(mebibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MebibytesPerSecond.
        /// </summary>
        public static BitRate? FromMebibytesPerSecond(QuantityValue? mebibytespersecond)
        {
            if (mebibytespersecond.HasValue)
            {
                return FromMebibytesPerSecond(mebibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MegabitsPerSecond.
        /// </summary>
        public static BitRate? FromMegabitsPerSecond(QuantityValue? megabitspersecond)
        {
            if (megabitspersecond.HasValue)
            {
                return FromMegabitsPerSecond(megabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MegabytesPerSecond.
        /// </summary>
        public static BitRate? FromMegabytesPerSecond(QuantityValue? megabytespersecond)
        {
            if (megabytespersecond.HasValue)
            {
                return FromMegabytesPerSecond(megabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PebibitsPerSecond.
        /// </summary>
        public static BitRate? FromPebibitsPerSecond(QuantityValue? pebibitspersecond)
        {
            if (pebibitspersecond.HasValue)
            {
                return FromPebibitsPerSecond(pebibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PebibytesPerSecond.
        /// </summary>
        public static BitRate? FromPebibytesPerSecond(QuantityValue? pebibytespersecond)
        {
            if (pebibytespersecond.HasValue)
            {
                return FromPebibytesPerSecond(pebibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PetabitsPerSecond.
        /// </summary>
        public static BitRate? FromPetabitsPerSecond(QuantityValue? petabitspersecond)
        {
            if (petabitspersecond.HasValue)
            {
                return FromPetabitsPerSecond(petabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PetabytesPerSecond.
        /// </summary>
        public static BitRate? FromPetabytesPerSecond(QuantityValue? petabytespersecond)
        {
            if (petabytespersecond.HasValue)
            {
                return FromPetabytesPerSecond(petabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TebibitsPerSecond.
        /// </summary>
        public static BitRate? FromTebibitsPerSecond(QuantityValue? tebibitspersecond)
        {
            if (tebibitspersecond.HasValue)
            {
                return FromTebibitsPerSecond(tebibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TebibytesPerSecond.
        /// </summary>
        public static BitRate? FromTebibytesPerSecond(QuantityValue? tebibytespersecond)
        {
            if (tebibytespersecond.HasValue)
            {
                return FromTebibytesPerSecond(tebibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TerabitsPerSecond.
        /// </summary>
        public static BitRate? FromTerabitsPerSecond(QuantityValue? terabitspersecond)
        {
            if (terabitspersecond.HasValue)
            {
                return FromTerabitsPerSecond(terabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TerabytesPerSecond.
        /// </summary>
        public static BitRate? FromTerabytesPerSecond(QuantityValue? terabytespersecond)
        {
            if (terabytespersecond.HasValue)
            {
                return FromTerabytesPerSecond(terabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="BitRateUnit" /> to <see cref="BitRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>BitRate unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static BitRate From(double value, BitRateUnit fromUnit)
#else
        public static BitRate From(QuantityValue value, BitRateUnit fromUnit)
#endif
        {
            switch (fromUnit)
            {
                case BitRateUnit.BitPerSecond:
                    return FromBitsPerSecond(value);
                case BitRateUnit.BytePerSecond:
                    return FromBytesPerSecond(value);
                case BitRateUnit.ExabitPerSecond:
                    return FromExabitsPerSecond(value);
                case BitRateUnit.ExabytePerSecond:
                    return FromExabytesPerSecond(value);
                case BitRateUnit.ExbibitPerSecond:
                    return FromExbibitsPerSecond(value);
                case BitRateUnit.ExbibytePerSecond:
                    return FromExbibytesPerSecond(value);
                case BitRateUnit.GibibitPerSecond:
                    return FromGibibitsPerSecond(value);
                case BitRateUnit.GibibytePerSecond:
                    return FromGibibytesPerSecond(value);
                case BitRateUnit.GigabitPerSecond:
                    return FromGigabitsPerSecond(value);
                case BitRateUnit.GigabytePerSecond:
                    return FromGigabytesPerSecond(value);
                case BitRateUnit.KibibitPerSecond:
                    return FromKibibitsPerSecond(value);
                case BitRateUnit.KibibytePerSecond:
                    return FromKibibytesPerSecond(value);
                case BitRateUnit.KilobitPerSecond:
                    return FromKilobitsPerSecond(value);
                case BitRateUnit.KilobytePerSecond:
                    return FromKilobytesPerSecond(value);
                case BitRateUnit.MebibitPerSecond:
                    return FromMebibitsPerSecond(value);
                case BitRateUnit.MebibytePerSecond:
                    return FromMebibytesPerSecond(value);
                case BitRateUnit.MegabitPerSecond:
                    return FromMegabitsPerSecond(value);
                case BitRateUnit.MegabytePerSecond:
                    return FromMegabytesPerSecond(value);
                case BitRateUnit.PebibitPerSecond:
                    return FromPebibitsPerSecond(value);
                case BitRateUnit.PebibytePerSecond:
                    return FromPebibytesPerSecond(value);
                case BitRateUnit.PetabitPerSecond:
                    return FromPetabitsPerSecond(value);
                case BitRateUnit.PetabytePerSecond:
                    return FromPetabytesPerSecond(value);
                case BitRateUnit.TebibitPerSecond:
                    return FromTebibitsPerSecond(value);
                case BitRateUnit.TebibytePerSecond:
                    return FromTebibytesPerSecond(value);
                case BitRateUnit.TerabitPerSecond:
                    return FromTerabitsPerSecond(value);
                case BitRateUnit.TerabytePerSecond:
                    return FromTerabytesPerSecond(value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="BitRateUnit" /> to <see cref="BitRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>BitRate unit value.</returns>
        public static BitRate? From(QuantityValue? value, BitRateUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case BitRateUnit.BitPerSecond:
                    return FromBitsPerSecond(value.Value);
                case BitRateUnit.BytePerSecond:
                    return FromBytesPerSecond(value.Value);
                case BitRateUnit.ExabitPerSecond:
                    return FromExabitsPerSecond(value.Value);
                case BitRateUnit.ExabytePerSecond:
                    return FromExabytesPerSecond(value.Value);
                case BitRateUnit.ExbibitPerSecond:
                    return FromExbibitsPerSecond(value.Value);
                case BitRateUnit.ExbibytePerSecond:
                    return FromExbibytesPerSecond(value.Value);
                case BitRateUnit.GibibitPerSecond:
                    return FromGibibitsPerSecond(value.Value);
                case BitRateUnit.GibibytePerSecond:
                    return FromGibibytesPerSecond(value.Value);
                case BitRateUnit.GigabitPerSecond:
                    return FromGigabitsPerSecond(value.Value);
                case BitRateUnit.GigabytePerSecond:
                    return FromGigabytesPerSecond(value.Value);
                case BitRateUnit.KibibitPerSecond:
                    return FromKibibitsPerSecond(value.Value);
                case BitRateUnit.KibibytePerSecond:
                    return FromKibibytesPerSecond(value.Value);
                case BitRateUnit.KilobitPerSecond:
                    return FromKilobitsPerSecond(value.Value);
                case BitRateUnit.KilobytePerSecond:
                    return FromKilobytesPerSecond(value.Value);
                case BitRateUnit.MebibitPerSecond:
                    return FromMebibitsPerSecond(value.Value);
                case BitRateUnit.MebibytePerSecond:
                    return FromMebibytesPerSecond(value.Value);
                case BitRateUnit.MegabitPerSecond:
                    return FromMegabitsPerSecond(value.Value);
                case BitRateUnit.MegabytePerSecond:
                    return FromMegabytesPerSecond(value.Value);
                case BitRateUnit.PebibitPerSecond:
                    return FromPebibitsPerSecond(value.Value);
                case BitRateUnit.PebibytePerSecond:
                    return FromPebibytesPerSecond(value.Value);
                case BitRateUnit.PetabitPerSecond:
                    return FromPetabitsPerSecond(value.Value);
                case BitRateUnit.PetabytePerSecond:
                    return FromPetabytesPerSecond(value.Value);
                case BitRateUnit.TebibitPerSecond:
                    return FromTebibitsPerSecond(value.Value);
                case BitRateUnit.TebibytePerSecond:
                    return FromTebibytesPerSecond(value.Value);
                case BitRateUnit.TerabitPerSecond:
                    return FromTerabitsPerSecond(value.Value);
                case BitRateUnit.TerabytePerSecond:
                    return FromTerabytesPerSecond(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(BitRateUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(BitRateUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static BitRate operator -(BitRate right)
        {
            return new BitRate(-right._bitsPerSecond);
        }

        public static BitRate operator +(BitRate left, BitRate right)
        {
            return new BitRate(left._bitsPerSecond + right._bitsPerSecond);
        }

        public static BitRate operator -(BitRate left, BitRate right)
        {
            return new BitRate(left._bitsPerSecond - right._bitsPerSecond);
        }

        public static BitRate operator *(decimal left, BitRate right)
        {
            return new BitRate(left*right._bitsPerSecond);
        }

        public static BitRate operator *(BitRate left, double right)
        {
            return new BitRate(left._bitsPerSecond*(decimal)right);
        }

        public static BitRate operator /(BitRate left, double right)
        {
            return new BitRate(left._bitsPerSecond/(decimal)right);
        }

        public static double operator /(BitRate left, BitRate right)
        {
            return Convert.ToDouble(left._bitsPerSecond/right._bitsPerSecond);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is BitRate)) throw new ArgumentException("Expected type BitRate.", "obj");
            return CompareTo((BitRate) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(BitRate other)
        {
            return _bitsPerSecond.CompareTo(other._bitsPerSecond);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(BitRate left, BitRate right)
        {
            return left._bitsPerSecond <= right._bitsPerSecond;
        }

        public static bool operator >=(BitRate left, BitRate right)
        {
            return left._bitsPerSecond >= right._bitsPerSecond;
        }

        public static bool operator <(BitRate left, BitRate right)
        {
            return left._bitsPerSecond < right._bitsPerSecond;
        }

        public static bool operator >(BitRate left, BitRate right)
        {
            return left._bitsPerSecond > right._bitsPerSecond;
        }

        public static bool operator ==(BitRate left, BitRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._bitsPerSecond == right._bitsPerSecond;
        }

        public static bool operator !=(BitRate left, BitRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._bitsPerSecond != right._bitsPerSecond;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _bitsPerSecond.Equals(((BitRate) obj)._bitsPerSecond);
        }

        /// <summary>
        ///     Compare equality to another BitRate by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(BitRate other, BitRate maxError)
        {
            return Math.Abs(_bitsPerSecond - other._bitsPerSecond) <= maxError._bitsPerSecond;
        }

        public override int GetHashCode()
        {
            return _bitsPerSecond.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(BitRateUnit unit)
        {
            switch (unit)
            {
                case BitRateUnit.BitPerSecond:
                    return BitsPerSecond;
                case BitRateUnit.BytePerSecond:
                    return BytesPerSecond;
                case BitRateUnit.ExabitPerSecond:
                    return ExabitsPerSecond;
                case BitRateUnit.ExabytePerSecond:
                    return ExabytesPerSecond;
                case BitRateUnit.ExbibitPerSecond:
                    return ExbibitsPerSecond;
                case BitRateUnit.ExbibytePerSecond:
                    return ExbibytesPerSecond;
                case BitRateUnit.GibibitPerSecond:
                    return GibibitsPerSecond;
                case BitRateUnit.GibibytePerSecond:
                    return GibibytesPerSecond;
                case BitRateUnit.GigabitPerSecond:
                    return GigabitsPerSecond;
                case BitRateUnit.GigabytePerSecond:
                    return GigabytesPerSecond;
                case BitRateUnit.KibibitPerSecond:
                    return KibibitsPerSecond;
                case BitRateUnit.KibibytePerSecond:
                    return KibibytesPerSecond;
                case BitRateUnit.KilobitPerSecond:
                    return KilobitsPerSecond;
                case BitRateUnit.KilobytePerSecond:
                    return KilobytesPerSecond;
                case BitRateUnit.MebibitPerSecond:
                    return MebibitsPerSecond;
                case BitRateUnit.MebibytePerSecond:
                    return MebibytesPerSecond;
                case BitRateUnit.MegabitPerSecond:
                    return MegabitsPerSecond;
                case BitRateUnit.MegabytePerSecond:
                    return MegabytesPerSecond;
                case BitRateUnit.PebibitPerSecond:
                    return PebibitsPerSecond;
                case BitRateUnit.PebibytePerSecond:
                    return PebibytesPerSecond;
                case BitRateUnit.PetabitPerSecond:
                    return PetabitsPerSecond;
                case BitRateUnit.PetabytePerSecond:
                    return PetabytesPerSecond;
                case BitRateUnit.TebibitPerSecond:
                    return TebibitsPerSecond;
                case BitRateUnit.TebibytePerSecond:
                    return TebibytesPerSecond;
                case BitRateUnit.TerabitPerSecond:
                    return TerabitsPerSecond;
                case BitRateUnit.TerabytePerSecond:
                    return TerabytesPerSecond;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static BitRate Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static BitRate Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<BitRate, BitRateUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    BitRateUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromBitsPerSecond(x.BitsPerSecond + y.BitsPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out BitRate result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out BitRate result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(BitRate);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static BitRateUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static BitRateUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static BitRateUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<BitRateUnit>(str.Trim());

            if (unit == BitRateUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized BitRateUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is BitPerSecond
        /// </summary>
        public static BitRateUnit ToStringDefaultUnit { get; set; } = BitRateUnit.BitPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(BitRateUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(BitRateUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(BitRateUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(BitRateUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of BitRate
        /// </summary>
        public static BitRate MaxValue
        {
            get
            {
                return new BitRate(decimal.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of BitRate
        /// </summary>
        public static BitRate MinValue
        {
            get
            {
                return new BitRate(decimal.MinValue);
            }
        }
    }
}
