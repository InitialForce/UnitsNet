//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct Duration : IComparable, IComparable<Duration>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable Duration from nullable Days.
        /// </summary>
        public static Duration? FromDays(QuantityValue? days)
        {
            return days.HasValue ? FromDays(days.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Hours.
        /// </summary>
        public static Duration? FromHours(QuantityValue? hours)
        {
            return hours.HasValue ? FromHours(hours.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Microseconds.
        /// </summary>
        public static Duration? FromMicroseconds(QuantityValue? microseconds)
        {
            return microseconds.HasValue ? FromMicroseconds(microseconds.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Milliseconds.
        /// </summary>
        public static Duration? FromMilliseconds(QuantityValue? milliseconds)
        {
            return milliseconds.HasValue ? FromMilliseconds(milliseconds.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Minutes.
        /// </summary>
        public static Duration? FromMinutes(QuantityValue? minutes)
        {
            return minutes.HasValue ? FromMinutes(minutes.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Months.
        /// </summary>
        public static Duration? FromMonths(QuantityValue? months)
        {
            return months.HasValue ? FromMonths(months.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Months30.
        /// </summary>
        public static Duration? FromMonths30(QuantityValue? months30)
        {
            return months30.HasValue ? FromMonths30(months30.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Nanoseconds.
        /// </summary>
        public static Duration? FromNanoseconds(QuantityValue? nanoseconds)
        {
            return nanoseconds.HasValue ? FromNanoseconds(nanoseconds.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Seconds.
        /// </summary>
        public static Duration? FromSeconds(QuantityValue? seconds)
        {
            return seconds.HasValue ? FromSeconds(seconds.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Weeks.
        /// </summary>
        public static Duration? FromWeeks(QuantityValue? weeks)
        {
            return weeks.HasValue ? FromWeeks(weeks.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Years.
        /// </summary>
        public static Duration? FromYears(QuantityValue? years)
        {
            return years.HasValue ? FromYears(years.Value) : default(Duration?);
        }

        /// <summary>
        ///     Get nullable Duration from nullable Years365.
        /// </summary>
        public static Duration? FromYears365(QuantityValue? years365)
        {
            return years365.HasValue ? FromYears365(years365.Value) : default(Duration?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DurationUnit" /> to <see cref="Duration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Duration unit value.</returns>
        public static Duration? From(QuantityValue? value, DurationUnit fromUnit)
        {
            return value.HasValue ? new Duration((double)value.Value, fromUnit) : default(Duration?);
        }

        #endregion

        #region Arithmetic Operators

        public static Duration operator -(Duration right)
        {
            return new Duration(-right.Value, right.Unit);
        }

        public static Duration operator +(Duration left, Duration right)
        {
            return new Duration(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Duration operator -(Duration left, Duration right)
        {
            return new Duration(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Duration operator *(double left, Duration right)
        {
            return new Duration(left * right.Value, right.Unit);
        }

        public static Duration operator *(Duration left, double right)
        {
            return new Duration(left.Value * right, left.Unit);
        }

        public static Duration operator /(Duration left, double right)
        {
            return new Duration(left.Value / right, left.Unit);
        }

        public static double operator /(Duration left, Duration right)
        {
            return left.Seconds / right.Seconds;
        }

        #endregion

        public static bool operator <=(Duration left, Duration right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Duration left, Duration right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Duration left, Duration right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Duration left, Duration right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Duration left, Duration right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Duration left, Duration right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
