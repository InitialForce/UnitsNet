//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The magnitude of torque per unit length.
    /// </summary>
    public partial struct TorquePerLength<T> : IQuantityT<TorquePerLengthUnit, T>, IEquatable<TorquePerLength<T>>, IComparable, IComparable<TorquePerLength<T>>, IConvertible, IFormattable
        where T : struct
    {
        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly TorquePerLengthUnit? _unit;

        static TorquePerLength()
        {
            BaseDimensions = new BaseDimensions(1, 1, -2, 0, 0, 0, 0);

            Info = new QuantityInfo<TorquePerLengthUnit>("TorquePerLength",
                new UnitInfo<TorquePerLengthUnit>[] {
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilogramForceCentimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilogramForceMeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilogramForceMillimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilonewtonCentimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilonewtonMeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilonewtonMillimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilopoundForceFootPerFoot, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.KilopoundForceInchPerFoot, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.MeganewtonCentimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.MeganewtonMeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.MeganewtonMillimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.MegapoundForceFootPerFoot, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.MegapoundForceInchPerFoot, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.NewtonCentimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.NewtonMeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.NewtonMillimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.PoundForceFootPerFoot, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.PoundForceInchPerFoot, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.TonneForceCentimeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.TonneForceMeterPerMeter, BaseUnits.Undefined),
                    new UnitInfo<TorquePerLengthUnit>(TorquePerLengthUnit.TonneForceMillimeterPerMeter, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.TorquePerLength);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public TorquePerLength(T value, TorquePerLengthUnit unit)
        {
            if(unit == TorquePerLengthUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            Value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public TorquePerLength(T value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            Value = value;
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<TorquePerLengthUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of <see cref="TorquePerLength{T}" />, which is NewtonMeterPerMeter. All conversions go via this value.
        /// </summary>
        public static TorquePerLengthUnit BaseUnit { get; } = TorquePerLengthUnit.NewtonMeterPerMeter;

        /// <summary>
        /// Represents the largest possible value of <see cref="TorquePerLength{T}" />
        /// </summary>
        public static TorquePerLength<T> MaxValue { get; } = new TorquePerLength<T>(GenericNumberHelper<T>.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of <see cref="TorquePerLength{T}" />
        /// </summary>
        public static TorquePerLength<T> MinValue { get; } = new TorquePerLength<T>(GenericNumberHelper<T>.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use Info property instead.")]
        public static QuantityType QuantityType { get; } = QuantityType.TorquePerLength;

        /// <summary>
        ///     All units of measurement for the <see cref="TorquePerLength{T}" /> quantity.
        /// </summary>
        public static TorquePerLengthUnit[] Units { get; } = Enum.GetValues(typeof(TorquePerLengthUnit)).Cast<TorquePerLengthUnit>().Except(new TorquePerLengthUnit[]{ TorquePerLengthUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerMeter.
        /// </summary>
        public static TorquePerLength<T> Zero { get; } = new TorquePerLength<T>(default(T), BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public T Value{ get; }

        double IQuantity.Value => Convert.ToDouble(Value);

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public TorquePerLengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<TorquePerLengthUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => TorquePerLength<T>.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => TorquePerLength<T>.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilogramForceCentimetersPerMeter.
        /// </summary>
        public T KilogramForceCentimetersPerMeter => As(TorquePerLengthUnit.KilogramForceCentimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilogramForceMetersPerMeter.
        /// </summary>
        public T KilogramForceMetersPerMeter => As(TorquePerLengthUnit.KilogramForceMeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilogramForceMillimetersPerMeter.
        /// </summary>
        public T KilogramForceMillimetersPerMeter => As(TorquePerLengthUnit.KilogramForceMillimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilonewtonCentimetersPerMeter.
        /// </summary>
        public T KilonewtonCentimetersPerMeter => As(TorquePerLengthUnit.KilonewtonCentimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilonewtonMetersPerMeter.
        /// </summary>
        public T KilonewtonMetersPerMeter => As(TorquePerLengthUnit.KilonewtonMeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilonewtonMillimetersPerMeter.
        /// </summary>
        public T KilonewtonMillimetersPerMeter => As(TorquePerLengthUnit.KilonewtonMillimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilopoundForceFeetPerFoot.
        /// </summary>
        public T KilopoundForceFeetPerFoot => As(TorquePerLengthUnit.KilopoundForceFootPerFoot);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in KilopoundForceInchesPerFoot.
        /// </summary>
        public T KilopoundForceInchesPerFoot => As(TorquePerLengthUnit.KilopoundForceInchPerFoot);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in MeganewtonCentimetersPerMeter.
        /// </summary>
        public T MeganewtonCentimetersPerMeter => As(TorquePerLengthUnit.MeganewtonCentimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in MeganewtonMetersPerMeter.
        /// </summary>
        public T MeganewtonMetersPerMeter => As(TorquePerLengthUnit.MeganewtonMeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in MeganewtonMillimetersPerMeter.
        /// </summary>
        public T MeganewtonMillimetersPerMeter => As(TorquePerLengthUnit.MeganewtonMillimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in MegapoundForceFeetPerFoot.
        /// </summary>
        public T MegapoundForceFeetPerFoot => As(TorquePerLengthUnit.MegapoundForceFootPerFoot);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in MegapoundForceInchesPerFoot.
        /// </summary>
        public T MegapoundForceInchesPerFoot => As(TorquePerLengthUnit.MegapoundForceInchPerFoot);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in NewtonCentimetersPerMeter.
        /// </summary>
        public T NewtonCentimetersPerMeter => As(TorquePerLengthUnit.NewtonCentimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in NewtonMetersPerMeter.
        /// </summary>
        public T NewtonMetersPerMeter => As(TorquePerLengthUnit.NewtonMeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in NewtonMillimetersPerMeter.
        /// </summary>
        public T NewtonMillimetersPerMeter => As(TorquePerLengthUnit.NewtonMillimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in PoundForceFeetPerFoot.
        /// </summary>
        public T PoundForceFeetPerFoot => As(TorquePerLengthUnit.PoundForceFootPerFoot);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in PoundForceInchesPerFoot.
        /// </summary>
        public T PoundForceInchesPerFoot => As(TorquePerLengthUnit.PoundForceInchPerFoot);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in TonneForceCentimetersPerMeter.
        /// </summary>
        public T TonneForceCentimetersPerMeter => As(TorquePerLengthUnit.TonneForceCentimeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in TonneForceMetersPerMeter.
        /// </summary>
        public T TonneForceMetersPerMeter => As(TorquePerLengthUnit.TonneForceMeterPerMeter);

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> in TonneForceMillimetersPerMeter.
        /// </summary>
        public T TonneForceMillimetersPerMeter => As(TorquePerLengthUnit.TonneForceMillimeterPerMeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(TorquePerLengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(TorquePerLengthUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilogramForceCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilogramForceCentimetersPerMeter(T kilogramforcecentimeterspermeter)
        {
            return new TorquePerLength<T>(kilogramforcecentimeterspermeter, TorquePerLengthUnit.KilogramForceCentimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilogramForceMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilogramForceMetersPerMeter(T kilogramforcemeterspermeter)
        {
            return new TorquePerLength<T>(kilogramforcemeterspermeter, TorquePerLengthUnit.KilogramForceMeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilogramForceMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilogramForceMillimetersPerMeter(T kilogramforcemillimeterspermeter)
        {
            return new TorquePerLength<T>(kilogramforcemillimeterspermeter, TorquePerLengthUnit.KilogramForceMillimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilonewtonCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilonewtonCentimetersPerMeter(T kilonewtoncentimeterspermeter)
        {
            return new TorquePerLength<T>(kilonewtoncentimeterspermeter, TorquePerLengthUnit.KilonewtonCentimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilonewtonMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilonewtonMetersPerMeter(T kilonewtonmeterspermeter)
        {
            return new TorquePerLength<T>(kilonewtonmeterspermeter, TorquePerLengthUnit.KilonewtonMeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilonewtonMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilonewtonMillimetersPerMeter(T kilonewtonmillimeterspermeter)
        {
            return new TorquePerLength<T>(kilonewtonmillimeterspermeter, TorquePerLengthUnit.KilonewtonMillimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilopoundForceFeetPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilopoundForceFeetPerFoot(T kilopoundforcefeetperfoot)
        {
            return new TorquePerLength<T>(kilopoundforcefeetperfoot, TorquePerLengthUnit.KilopoundForceFootPerFoot);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from KilopoundForceInchesPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromKilopoundForceInchesPerFoot(T kilopoundforceinchesperfoot)
        {
            return new TorquePerLength<T>(kilopoundforceinchesperfoot, TorquePerLengthUnit.KilopoundForceInchPerFoot);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from MeganewtonCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromMeganewtonCentimetersPerMeter(T meganewtoncentimeterspermeter)
        {
            return new TorquePerLength<T>(meganewtoncentimeterspermeter, TorquePerLengthUnit.MeganewtonCentimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from MeganewtonMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromMeganewtonMetersPerMeter(T meganewtonmeterspermeter)
        {
            return new TorquePerLength<T>(meganewtonmeterspermeter, TorquePerLengthUnit.MeganewtonMeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from MeganewtonMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromMeganewtonMillimetersPerMeter(T meganewtonmillimeterspermeter)
        {
            return new TorquePerLength<T>(meganewtonmillimeterspermeter, TorquePerLengthUnit.MeganewtonMillimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from MegapoundForceFeetPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromMegapoundForceFeetPerFoot(T megapoundforcefeetperfoot)
        {
            return new TorquePerLength<T>(megapoundforcefeetperfoot, TorquePerLengthUnit.MegapoundForceFootPerFoot);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from MegapoundForceInchesPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromMegapoundForceInchesPerFoot(T megapoundforceinchesperfoot)
        {
            return new TorquePerLength<T>(megapoundforceinchesperfoot, TorquePerLengthUnit.MegapoundForceInchPerFoot);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from NewtonCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromNewtonCentimetersPerMeter(T newtoncentimeterspermeter)
        {
            return new TorquePerLength<T>(newtoncentimeterspermeter, TorquePerLengthUnit.NewtonCentimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from NewtonMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromNewtonMetersPerMeter(T newtonmeterspermeter)
        {
            return new TorquePerLength<T>(newtonmeterspermeter, TorquePerLengthUnit.NewtonMeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from NewtonMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromNewtonMillimetersPerMeter(T newtonmillimeterspermeter)
        {
            return new TorquePerLength<T>(newtonmillimeterspermeter, TorquePerLengthUnit.NewtonMillimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from PoundForceFeetPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromPoundForceFeetPerFoot(T poundforcefeetperfoot)
        {
            return new TorquePerLength<T>(poundforcefeetperfoot, TorquePerLengthUnit.PoundForceFootPerFoot);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from PoundForceInchesPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromPoundForceInchesPerFoot(T poundforceinchesperfoot)
        {
            return new TorquePerLength<T>(poundforceinchesperfoot, TorquePerLengthUnit.PoundForceInchPerFoot);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from TonneForceCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromTonneForceCentimetersPerMeter(T tonneforcecentimeterspermeter)
        {
            return new TorquePerLength<T>(tonneforcecentimeterspermeter, TorquePerLengthUnit.TonneForceCentimeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from TonneForceMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromTonneForceMetersPerMeter(T tonneforcemeterspermeter)
        {
            return new TorquePerLength<T>(tonneforcemeterspermeter, TorquePerLengthUnit.TonneForceMeterPerMeter);
        }
        /// <summary>
        ///     Get <see cref="TorquePerLength{T}" /> from TonneForceMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static TorquePerLength<T> FromTonneForceMillimetersPerMeter(T tonneforcemillimeterspermeter)
        {
            return new TorquePerLength<T>(tonneforcemillimeterspermeter, TorquePerLengthUnit.TonneForceMillimeterPerMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorquePerLengthUnit" /> to <see cref="TorquePerLength{T}" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><see cref="TorquePerLength{T}" /> unit value.</returns>
        public static TorquePerLength<T> From(T value, TorquePerLengthUnit fromUnit)
        {
            return new TorquePerLength<T>(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static TorquePerLength<T> Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static TorquePerLength<T> Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<T, TorquePerLength<T>, TorquePerLengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out TorquePerLength<T> result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out TorquePerLength<T> result)
        {
            return QuantityParser.Default.TryParse<T, TorquePerLength<T>, TorquePerLengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorquePerLengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorquePerLengthUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<TorquePerLengthUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.TorquePerLengthUnit)"/>
        public static bool TryParseUnit(string str, out TorquePerLengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out TorquePerLengthUnit unit)
        {
            return UnitParser.Default.TryParse<TorquePerLengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static TorquePerLength<T> operator -(TorquePerLength<T> right)
        {
            return new TorquePerLength<T>(CompiledLambdas.Negate(right.Value), right.Unit);
        }

        /// <summary>Get <see cref="TorquePerLength{T}"/> from adding two <see cref="TorquePerLength{T}"/>.</summary>
        public static TorquePerLength<T> operator +(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            var value = CompiledLambdas.Add(left.Value, right.GetValueAs(left.Unit));
            return new TorquePerLength<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="TorquePerLength{T}"/> from subtracting two <see cref="TorquePerLength{T}"/>.</summary>
        public static TorquePerLength<T> operator -(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            var value = CompiledLambdas.Subtract(left.Value, right.GetValueAs(left.Unit));
            return new TorquePerLength<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="TorquePerLength{T}"/> from multiplying value and <see cref="TorquePerLength{T}"/>.</summary>
        public static TorquePerLength<T> operator *(T left, TorquePerLength<T> right)
        {
            var value = CompiledLambdas.Multiply(left, right.Value);
            return new TorquePerLength<T>(value, right.Unit);
        }

        /// <summary>Get <see cref="TorquePerLength{T}"/> from multiplying value and <see cref="TorquePerLength{T}"/>.</summary>
        public static TorquePerLength<T> operator *(TorquePerLength<T> left, T right)
        {
            var value = CompiledLambdas.Multiply(left.Value, right);
            return new TorquePerLength<T>(value, left.Unit);
        }

        /// <summary>Get <see cref="TorquePerLength{T}"/> from dividing <see cref="TorquePerLength{T}"/> by value.</summary>
        public static TorquePerLength<T> operator /(TorquePerLength<T> left, T right)
        {
            var value = CompiledLambdas.Divide(left.Value, right);
            return new TorquePerLength<T>(value, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="TorquePerLength{T}"/> by <see cref="TorquePerLength{T}"/>.</summary>
        public static T operator /(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            return CompiledLambdas.Divide(left.NewtonMetersPerMeter, right.NewtonMetersPerMeter);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            return CompiledLambdas.LessThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            return CompiledLambdas.GreaterThanOrEqual(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            return CompiledLambdas.LessThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            return CompiledLambdas.GreaterThan(left.Value, right.GetValueAs(left.Unit));
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(TorquePerLength{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(TorquePerLength{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(TorquePerLength<T> left, TorquePerLength<T> right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is TorquePerLength<T> objTorquePerLength)) throw new ArgumentException("Expected type TorquePerLength.", nameof(obj));

            return CompareTo(objTorquePerLength);
        }

        /// <inheritdoc />
        public int CompareTo(TorquePerLength<T> other)
        {
            return System.Collections.Generic.Comparer<T>.Default.Compare(Value, other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(TorquePerLength{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is TorquePerLength<T> objTorquePerLength))
                return false;

            return Equals(objTorquePerLength);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(TorquePerLength{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(TorquePerLength<T> other)
        {
            return Value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another <see cref="TorquePerLength{T}" /> within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(TorquePerLength<T> other, T tolerance, ComparisonType comparisonType)
        {
            if (CompiledLambdas.LessThan(tolerance, 0))
                throw new ArgumentOutOfRangeException(nameof(tolerance), "Tolerance must be greater than or equal to 0");

            var otherValueInThisUnits = other.As(this.Unit);
            return UnitsNet.Comparison.Equals(Value, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="TorquePerLength{T}" />.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public T As(TorquePerLengthUnit unit)
        {
            if(Unit == unit)
                return Value;

            var converted = GetValueAs(unit);
            return converted;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public T As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is TorquePerLengthUnit unitAsTorquePerLengthUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(TorquePerLengthUnit)} is supported.", nameof(unit));

            var asValue = As(unitAsTorquePerLengthUnit);
            return Convert.ToDouble(asValue);
        }

        double IQuantity.As(UnitSystem unitSystem) => Convert.ToDouble(As(unitSystem));

        double IQuantity<TorquePerLengthUnit>.As(TorquePerLengthUnit unit) => Convert.ToDouble(As(unit));

        /// <summary>
        ///     Converts this <see cref="TorquePerLength{T}" /> to another <see cref="TorquePerLength{T}" /> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A <see cref="TorquePerLength{T}" /> with the specified unit.</returns>
        public TorquePerLength<T> ToUnit(TorquePerLengthUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new TorquePerLength<T>(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is TorquePerLengthUnit unitAsTorquePerLengthUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(TorquePerLengthUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsTorquePerLengthUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public TorquePerLength<T> ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<TorquePerLengthUnit> IQuantity<TorquePerLengthUnit>.ToUnit(TorquePerLengthUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantityT<TorquePerLengthUnit, T> IQuantityT<TorquePerLengthUnit, T>.ToUnit(TorquePerLengthUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<TorquePerLengthUnit> IQuantity<TorquePerLengthUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantityT<TorquePerLengthUnit, T> IQuantityT<TorquePerLengthUnit, T>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private T GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case TorquePerLengthUnit.KilogramForceCentimeterPerMeter: return Value*0.0980665019960652;
                case TorquePerLengthUnit.KilogramForceMeterPerMeter: return Value*9.80665019960652;
                case TorquePerLengthUnit.KilogramForceMillimeterPerMeter: return Value*0.00980665019960652;
                case TorquePerLengthUnit.KilonewtonCentimeterPerMeter: return (Value*0.01) * 1e3d;
                case TorquePerLengthUnit.KilonewtonMeterPerMeter: return (Value) * 1e3d;
                case TorquePerLengthUnit.KilonewtonMillimeterPerMeter: return (Value*0.001) * 1e3d;
                case TorquePerLengthUnit.KilopoundForceFootPerFoot: return (Value*4.44822161526) * 1e3d;
                case TorquePerLengthUnit.KilopoundForceInchPerFoot: return (Value*0.370685147638) * 1e3d;
                case TorquePerLengthUnit.MeganewtonCentimeterPerMeter: return (Value*0.01) * 1e6d;
                case TorquePerLengthUnit.MeganewtonMeterPerMeter: return (Value) * 1e6d;
                case TorquePerLengthUnit.MeganewtonMillimeterPerMeter: return (Value*0.001) * 1e6d;
                case TorquePerLengthUnit.MegapoundForceFootPerFoot: return (Value*4.44822161526) * 1e6d;
                case TorquePerLengthUnit.MegapoundForceInchPerFoot: return (Value*0.370685147638) * 1e6d;
                case TorquePerLengthUnit.NewtonCentimeterPerMeter: return Value*0.01;
                case TorquePerLengthUnit.NewtonMeterPerMeter: return Value;
                case TorquePerLengthUnit.NewtonMillimeterPerMeter: return Value*0.001;
                case TorquePerLengthUnit.PoundForceFootPerFoot: return Value*4.44822161526;
                case TorquePerLengthUnit.PoundForceInchPerFoot: return Value*0.370685147638;
                case TorquePerLengthUnit.TonneForceCentimeterPerMeter: return Value*98.0665019960652;
                case TorquePerLengthUnit.TonneForceMeterPerMeter: return Value*9806.65019960653;
                case TorquePerLengthUnit.TonneForceMillimeterPerMeter: return Value*9.80665019960652;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal TorquePerLength<T> ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new TorquePerLength<T>(baseUnitValue, BaseUnit);
        }

        private T GetValueAs(TorquePerLengthUnit unit)
        {
            if(Unit == unit)
                return Value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case TorquePerLengthUnit.KilogramForceCentimeterPerMeter: return baseUnitValue*10.1971619222242;
                case TorquePerLengthUnit.KilogramForceMeterPerMeter: return baseUnitValue*0.101971619222242;
                case TorquePerLengthUnit.KilogramForceMillimeterPerMeter: return baseUnitValue*101.971619222242;
                case TorquePerLengthUnit.KilonewtonCentimeterPerMeter: return (baseUnitValue*100) / 1e3d;
                case TorquePerLengthUnit.KilonewtonMeterPerMeter: return (baseUnitValue) / 1e3d;
                case TorquePerLengthUnit.KilonewtonMillimeterPerMeter: return (baseUnitValue*1000) / 1e3d;
                case TorquePerLengthUnit.KilopoundForceFootPerFoot: return (baseUnitValue/4.44822161526) / 1e3d;
                case TorquePerLengthUnit.KilopoundForceInchPerFoot: return (baseUnitValue/0.370685147638) / 1e3d;
                case TorquePerLengthUnit.MeganewtonCentimeterPerMeter: return (baseUnitValue*100) / 1e6d;
                case TorquePerLengthUnit.MeganewtonMeterPerMeter: return (baseUnitValue) / 1e6d;
                case TorquePerLengthUnit.MeganewtonMillimeterPerMeter: return (baseUnitValue*1000) / 1e6d;
                case TorquePerLengthUnit.MegapoundForceFootPerFoot: return (baseUnitValue/4.44822161526) / 1e6d;
                case TorquePerLengthUnit.MegapoundForceInchPerFoot: return (baseUnitValue/0.370685147638) / 1e6d;
                case TorquePerLengthUnit.NewtonCentimeterPerMeter: return baseUnitValue*100;
                case TorquePerLengthUnit.NewtonMeterPerMeter: return baseUnitValue;
                case TorquePerLengthUnit.NewtonMillimeterPerMeter: return baseUnitValue*1000;
                case TorquePerLengthUnit.PoundForceFootPerFoot: return baseUnitValue/4.44822161526;
                case TorquePerLengthUnit.PoundForceInchPerFoot: return baseUnitValue/0.370685147638;
                case TorquePerLengthUnit.TonneForceCentimeterPerMeter: return baseUnitValue*0.0101971619222242;
                case TorquePerLengthUnit.TonneForceMeterPerMeter: return baseUnitValue*0.000101971619222242;
                case TorquePerLengthUnit.TonneForceMillimeterPerMeter: return baseUnitValue*0.101971619222242;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<TorquePerLengthUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(TorquePerLength<T>)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(Value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(TorquePerLength<T>)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(TorquePerLength<T>)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(Value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(Value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(Value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(Value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(Value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(Value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(Value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(TorquePerLength<T>))
                return this;
            else if(conversionType == typeof(TorquePerLengthUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return TorquePerLength<T>.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return TorquePerLength<T>.Info;
            else if(conversionType == typeof(BaseDimensions))
                return TorquePerLength<T>.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(TorquePerLength<T>)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(Value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(Value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(Value);
        }

        #endregion
    }
}
