//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The joule, symbol J, is a derived unit of energy, work, or amount of heat in the International System of Units. It is equal to the energy transferred (or work done) when applying a force of one newton through a distance of one metre (1 newton metre or NÂ·m), or in passing an electric current of one ampere through a resistance of one ohm for one second. Many other units of energy are included. Please do not confuse this definition of the calorie with the one colloquially used by the food industry, the large calorie, which is equivalent to 1 kcal. Thermochemical definition of the calorie is used. For BTU, the IT definition is used.
    /// </summary>
    [DataContract]
    public partial struct Energy : IQuantity<EnergyUnit>, IEquatable<Energy>, IComparable, IComparable<Energy>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 0)]
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 1)]
        private readonly EnergyUnit? _unit;

        static Energy()
        {
            BaseDimensions = new BaseDimensions(2, 1, -2, 0, 0, 0, 0);
            BaseUnit = EnergyUnit.Joule;
            MaxValue = new Energy(double.MaxValue, BaseUnit);
            MinValue = new Energy(double.MinValue, BaseUnit);
            QuantityType = QuantityType.Energy;
            Units = Enum.GetValues(typeof(EnergyUnit)).Cast<EnergyUnit>().Except(new EnergyUnit[]{ EnergyUnit.Undefined }).ToArray();
            Zero = new Energy(0, BaseUnit);
            Info = new QuantityInfo<EnergyUnit>("Energy",
                new UnitInfo<EnergyUnit>[]
                {
                    new UnitInfo<EnergyUnit>(EnergyUnit.BritishThermalUnit, "BritishThermalUnits", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Calorie, "Calories", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.DecathermEc, "DecathermsEc", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.DecathermImperial, "DecathermsImperial", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.DecathermUs, "DecathermsUs", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ElectronVolt, "ElectronVolts", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Erg, "Ergs", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.FootPound, "FootPounds", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.GigabritishThermalUnit, "GigabritishThermalUnits", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.GigaelectronVolt, "GigaelectronVolts", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Gigajoule, "Gigajoules", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.GigawattDay, "GigawattDays", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.GigawattHour, "GigawattHours", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.HorsepowerHour, "HorsepowerHours", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Joule, "Joules", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.KilobritishThermalUnit, "KilobritishThermalUnits", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Kilocalorie, "Kilocalories", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.KiloelectronVolt, "KiloelectronVolts", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Kilojoule, "Kilojoules", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.KilowattDay, "KilowattDays", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.KilowattHour, "KilowattHours", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.MegabritishThermalUnit, "MegabritishThermalUnits", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Megacalorie, "Megacalories", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.MegaelectronVolt, "MegaelectronVolts", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Megajoule, "Megajoules", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.MegawattDay, "MegawattDays", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.MegawattHour, "MegawattHours", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Millijoule, "Millijoules", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.TeraelectronVolt, "TeraelectronVolts", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.TerawattDay, "TerawattDays", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.TerawattHour, "TerawattHours", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ThermEc, "ThermsEc", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ThermImperial, "ThermsImperial", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ThermUs, "ThermsUs", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.WattDay, "WattDays", BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.WattHour, "WattHours", BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.Energy);

            DefaultConversionFunctions = new UnitConverter();

            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Energy(double value, EnergyUnit unit)
        {
            if(unit == EnergyUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Energy(double value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Energy" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<EnergyUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Energy, which is Joule. All conversions go via this value.
        /// </summary>
        public static EnergyUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of Energy
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static Energy MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of Energy
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static Energy MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the Energy quantity.
        /// </summary>
        public static EnergyUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Joule.
        /// </summary>
        public static Energy Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public EnergyUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<EnergyUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => QuantityType.Energy;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Energy.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Energy in BritishThermalUnits.
        /// </summary>
        public double BritishThermalUnits => As(EnergyUnit.BritishThermalUnit);

        /// <summary>
        ///     Get Energy in Calories.
        /// </summary>
        public double Calories => As(EnergyUnit.Calorie);

        /// <summary>
        ///     Get Energy in DecathermsEc.
        /// </summary>
        public double DecathermsEc => As(EnergyUnit.DecathermEc);

        /// <summary>
        ///     Get Energy in DecathermsImperial.
        /// </summary>
        public double DecathermsImperial => As(EnergyUnit.DecathermImperial);

        /// <summary>
        ///     Get Energy in DecathermsUs.
        /// </summary>
        public double DecathermsUs => As(EnergyUnit.DecathermUs);

        /// <summary>
        ///     Get Energy in ElectronVolts.
        /// </summary>
        public double ElectronVolts => As(EnergyUnit.ElectronVolt);

        /// <summary>
        ///     Get Energy in Ergs.
        /// </summary>
        public double Ergs => As(EnergyUnit.Erg);

        /// <summary>
        ///     Get Energy in FootPounds.
        /// </summary>
        public double FootPounds => As(EnergyUnit.FootPound);

        /// <summary>
        ///     Get Energy in GigabritishThermalUnits.
        /// </summary>
        public double GigabritishThermalUnits => As(EnergyUnit.GigabritishThermalUnit);

        /// <summary>
        ///     Get Energy in GigaelectronVolts.
        /// </summary>
        public double GigaelectronVolts => As(EnergyUnit.GigaelectronVolt);

        /// <summary>
        ///     Get Energy in Gigajoules.
        /// </summary>
        public double Gigajoules => As(EnergyUnit.Gigajoule);

        /// <summary>
        ///     Get Energy in GigawattDays.
        /// </summary>
        public double GigawattDays => As(EnergyUnit.GigawattDay);

        /// <summary>
        ///     Get Energy in GigawattHours.
        /// </summary>
        public double GigawattHours => As(EnergyUnit.GigawattHour);

        /// <summary>
        ///     Get Energy in HorsepowerHours.
        /// </summary>
        public double HorsepowerHours => As(EnergyUnit.HorsepowerHour);

        /// <summary>
        ///     Get Energy in Joules.
        /// </summary>
        public double Joules => As(EnergyUnit.Joule);

        /// <summary>
        ///     Get Energy in KilobritishThermalUnits.
        /// </summary>
        public double KilobritishThermalUnits => As(EnergyUnit.KilobritishThermalUnit);

        /// <summary>
        ///     Get Energy in Kilocalories.
        /// </summary>
        public double Kilocalories => As(EnergyUnit.Kilocalorie);

        /// <summary>
        ///     Get Energy in KiloelectronVolts.
        /// </summary>
        public double KiloelectronVolts => As(EnergyUnit.KiloelectronVolt);

        /// <summary>
        ///     Get Energy in Kilojoules.
        /// </summary>
        public double Kilojoules => As(EnergyUnit.Kilojoule);

        /// <summary>
        ///     Get Energy in KilowattDays.
        /// </summary>
        public double KilowattDays => As(EnergyUnit.KilowattDay);

        /// <summary>
        ///     Get Energy in KilowattHours.
        /// </summary>
        public double KilowattHours => As(EnergyUnit.KilowattHour);

        /// <summary>
        ///     Get Energy in MegabritishThermalUnits.
        /// </summary>
        public double MegabritishThermalUnits => As(EnergyUnit.MegabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Megacalories.
        /// </summary>
        public double Megacalories => As(EnergyUnit.Megacalorie);

        /// <summary>
        ///     Get Energy in MegaelectronVolts.
        /// </summary>
        public double MegaelectronVolts => As(EnergyUnit.MegaelectronVolt);

        /// <summary>
        ///     Get Energy in Megajoules.
        /// </summary>
        public double Megajoules => As(EnergyUnit.Megajoule);

        /// <summary>
        ///     Get Energy in MegawattDays.
        /// </summary>
        public double MegawattDays => As(EnergyUnit.MegawattDay);

        /// <summary>
        ///     Get Energy in MegawattHours.
        /// </summary>
        public double MegawattHours => As(EnergyUnit.MegawattHour);

        /// <summary>
        ///     Get Energy in Millijoules.
        /// </summary>
        public double Millijoules => As(EnergyUnit.Millijoule);

        /// <summary>
        ///     Get Energy in TeraelectronVolts.
        /// </summary>
        public double TeraelectronVolts => As(EnergyUnit.TeraelectronVolt);

        /// <summary>
        ///     Get Energy in TerawattDays.
        /// </summary>
        public double TerawattDays => As(EnergyUnit.TerawattDay);

        /// <summary>
        ///     Get Energy in TerawattHours.
        /// </summary>
        public double TerawattHours => As(EnergyUnit.TerawattHour);

        /// <summary>
        ///     Get Energy in ThermsEc.
        /// </summary>
        public double ThermsEc => As(EnergyUnit.ThermEc);

        /// <summary>
        ///     Get Energy in ThermsImperial.
        /// </summary>
        public double ThermsImperial => As(EnergyUnit.ThermImperial);

        /// <summary>
        ///     Get Energy in ThermsUs.
        /// </summary>
        public double ThermsUs => As(EnergyUnit.ThermUs);

        /// <summary>
        ///     Get Energy in WattDays.
        /// </summary>
        public double WattDays => As(EnergyUnit.WattDay);

        /// <summary>
        ///     Get Energy in WattHours.
        /// </summary>
        public double WattHours => As(EnergyUnit.WattHour);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: BaseUnit -> EnergyUnit
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.BritishThermalUnit, quantity => new Energy(quantity.Value/1055.05585262, EnergyUnit.BritishThermalUnit));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Calorie, quantity => new Energy(quantity.Value/4.184, EnergyUnit.Calorie));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.DecathermEc, quantity => new Energy((quantity.Value/1.05505585262e8) / 1e1d, EnergyUnit.DecathermEc));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.DecathermImperial, quantity => new Energy((quantity.Value/1.05505585257348e8) / 1e1d, EnergyUnit.DecathermImperial));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.DecathermUs, quantity => new Energy((quantity.Value/1.054804e8) / 1e1d, EnergyUnit.DecathermUs));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.ElectronVolt, quantity => new Energy(quantity.Value/1.602176565e-19, EnergyUnit.ElectronVolt));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Erg, quantity => new Energy(quantity.Value/1e-7, EnergyUnit.Erg));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.FootPound, quantity => new Energy(quantity.Value/1.355817948, EnergyUnit.FootPound));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.GigabritishThermalUnit, quantity => new Energy((quantity.Value/1055.05585262) / 1e9d, EnergyUnit.GigabritishThermalUnit));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.GigaelectronVolt, quantity => new Energy((quantity.Value/1.602176565e-19) / 1e9d, EnergyUnit.GigaelectronVolt));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Gigajoule, quantity => new Energy((quantity.Value) / 1e9d, EnergyUnit.Gigajoule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.GigawattDay, quantity => new Energy((quantity.Value/(24*3600d)) / 1e9d, EnergyUnit.GigawattDay));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.GigawattHour, quantity => new Energy((quantity.Value/3600d) / 1e9d, EnergyUnit.GigawattHour));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.HorsepowerHour, quantity => new Energy(quantity.Value/2.6845195377e6, EnergyUnit.HorsepowerHour));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.KilobritishThermalUnit, quantity => new Energy((quantity.Value/1055.05585262) / 1e3d, EnergyUnit.KilobritishThermalUnit));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Kilocalorie, quantity => new Energy((quantity.Value/4.184) / 1e3d, EnergyUnit.Kilocalorie));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.KiloelectronVolt, quantity => new Energy((quantity.Value/1.602176565e-19) / 1e3d, EnergyUnit.KiloelectronVolt));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Kilojoule, quantity => new Energy((quantity.Value) / 1e3d, EnergyUnit.Kilojoule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.KilowattDay, quantity => new Energy((quantity.Value/(24*3600d)) / 1e3d, EnergyUnit.KilowattDay));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.KilowattHour, quantity => new Energy((quantity.Value/3600d) / 1e3d, EnergyUnit.KilowattHour));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.MegabritishThermalUnit, quantity => new Energy((quantity.Value/1055.05585262) / 1e6d, EnergyUnit.MegabritishThermalUnit));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Megacalorie, quantity => new Energy((quantity.Value/4.184) / 1e6d, EnergyUnit.Megacalorie));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.MegaelectronVolt, quantity => new Energy((quantity.Value/1.602176565e-19) / 1e6d, EnergyUnit.MegaelectronVolt));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Megajoule, quantity => new Energy((quantity.Value) / 1e6d, EnergyUnit.Megajoule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.MegawattDay, quantity => new Energy((quantity.Value/(24*3600d)) / 1e6d, EnergyUnit.MegawattDay));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.MegawattHour, quantity => new Energy((quantity.Value/3600d) / 1e6d, EnergyUnit.MegawattHour));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Millijoule, quantity => new Energy((quantity.Value) / 1e-3d, EnergyUnit.Millijoule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.TeraelectronVolt, quantity => new Energy((quantity.Value/1.602176565e-19) / 1e12d, EnergyUnit.TeraelectronVolt));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.TerawattDay, quantity => new Energy((quantity.Value/(24*3600d)) / 1e12d, EnergyUnit.TerawattDay));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.TerawattHour, quantity => new Energy((quantity.Value/3600d) / 1e12d, EnergyUnit.TerawattHour));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.ThermEc, quantity => new Energy(quantity.Value/1.05505585262e8, EnergyUnit.ThermEc));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.ThermImperial, quantity => new Energy(quantity.Value/1.05505585257348e8, EnergyUnit.ThermImperial));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.ThermUs, quantity => new Energy(quantity.Value/1.054804e8, EnergyUnit.ThermUs));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.WattDay, quantity => new Energy(quantity.Value/(24*3600d), EnergyUnit.WattDay));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.WattHour, quantity => new Energy(quantity.Value/3600d, EnergyUnit.WattHour));
            
            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Joule, EnergyUnit.Joule, quantity => quantity);

            // Register in unit converter: EnergyUnit -> BaseUnit
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.BritishThermalUnit, EnergyUnit.Joule, quantity => new Energy(quantity.Value*1055.05585262, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Calorie, EnergyUnit.Joule, quantity => new Energy(quantity.Value*4.184, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.DecathermEc, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1.05505585262e8) * 1e1d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.DecathermImperial, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1.05505585257348e8) * 1e1d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.DecathermUs, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1.054804e8) * 1e1d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.ElectronVolt, EnergyUnit.Joule, quantity => new Energy(quantity.Value*1.602176565e-19, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Erg, EnergyUnit.Joule, quantity => new Energy(quantity.Value*1e-7, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.FootPound, EnergyUnit.Joule, quantity => new Energy(quantity.Value*1.355817948, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.GigabritishThermalUnit, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1055.05585262) * 1e9d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.GigaelectronVolt, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1.602176565e-19) * 1e9d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Gigajoule, EnergyUnit.Joule, quantity => new Energy((quantity.Value) * 1e9d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.GigawattDay, EnergyUnit.Joule, quantity => new Energy((quantity.Value*24*3600d) * 1e9d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.GigawattHour, EnergyUnit.Joule, quantity => new Energy((quantity.Value*3600d) * 1e9d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.HorsepowerHour, EnergyUnit.Joule, quantity => new Energy(quantity.Value*2.6845195377e6, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.KilobritishThermalUnit, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1055.05585262) * 1e3d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Kilocalorie, EnergyUnit.Joule, quantity => new Energy((quantity.Value*4.184) * 1e3d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.KiloelectronVolt, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1.602176565e-19) * 1e3d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Kilojoule, EnergyUnit.Joule, quantity => new Energy((quantity.Value) * 1e3d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.KilowattDay, EnergyUnit.Joule, quantity => new Energy((quantity.Value*24*3600d) * 1e3d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.KilowattHour, EnergyUnit.Joule, quantity => new Energy((quantity.Value*3600d) * 1e3d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.MegabritishThermalUnit, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1055.05585262) * 1e6d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Megacalorie, EnergyUnit.Joule, quantity => new Energy((quantity.Value*4.184) * 1e6d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.MegaelectronVolt, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1.602176565e-19) * 1e6d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Megajoule, EnergyUnit.Joule, quantity => new Energy((quantity.Value) * 1e6d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.MegawattDay, EnergyUnit.Joule, quantity => new Energy((quantity.Value*24*3600d) * 1e6d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.MegawattHour, EnergyUnit.Joule, quantity => new Energy((quantity.Value*3600d) * 1e6d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.Millijoule, EnergyUnit.Joule, quantity => new Energy((quantity.Value) * 1e-3d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.TeraelectronVolt, EnergyUnit.Joule, quantity => new Energy((quantity.Value*1.602176565e-19) * 1e12d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.TerawattDay, EnergyUnit.Joule, quantity => new Energy((quantity.Value*24*3600d) * 1e12d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.TerawattHour, EnergyUnit.Joule, quantity => new Energy((quantity.Value*3600d) * 1e12d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.ThermEc, EnergyUnit.Joule, quantity => new Energy(quantity.Value*1.05505585262e8, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.ThermImperial, EnergyUnit.Joule, quantity => new Energy(quantity.Value*1.05505585257348e8, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.ThermUs, EnergyUnit.Joule, quantity => new Energy(quantity.Value*1.054804e8, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.WattDay, EnergyUnit.Joule, quantity => new Energy(quantity.Value*24*3600d, EnergyUnit.Joule));
            unitConverter.SetConversionFunction<Energy>(EnergyUnit.WattHour, EnergyUnit.Joule, quantity => new Energy(quantity.Value*3600d, EnergyUnit.Joule));
        }

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.BritishThermalUnit, new CultureInfo("en-US"), new string[]{"BTU"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Calorie, new CultureInfo("en-US"), new string[]{"cal"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.DecathermEc, new CultureInfo("en-US"), new string[]{"Dth (E.C.)"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.DecathermEc, new CultureInfo("ru-RU"), new string[]{"ÐÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¸Ð¹ Ð´ÐµÐºÐ°ÑÐµÑÐ¼"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.DecathermImperial, new CultureInfo("en-US"), new string[]{"Dth (imp.)"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.DecathermImperial, new CultureInfo("ru-RU"), new string[]{"ÐÐ½Ð³Ð»Ð¸Ð¹ÑÐºÐ¸Ð¹ Ð´ÐµÐºÐ°ÑÐµÑÐ¼"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.DecathermUs, new CultureInfo("en-US"), new string[]{"Dth (U.S.)"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.DecathermUs, new CultureInfo("ru-RU"), new string[]{"ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸Ð¹ Ð´ÐµÐºÐ°ÑÐµÑÐ¼"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ElectronVolt, new CultureInfo("en-US"), new string[]{"eV"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ElectronVolt, new CultureInfo("ru-RU"), new string[]{"ÑÐ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Erg, new CultureInfo("en-US"), new string[]{"erg"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.FootPound, new CultureInfo("en-US"), new string[]{"ftÂ·lb"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.GigabritishThermalUnit, new CultureInfo("en-US"), new string[]{"GBTU"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.GigaelectronVolt, new CultureInfo("en-US"), new string[]{"GeV"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.GigaelectronVolt, new CultureInfo("ru-RU"), new string[]{"ÐÑÐ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Gigajoule, new CultureInfo("en-US"), new string[]{"GJ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.GigawattDay, new CultureInfo("en-US"), new string[]{"GWd"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.GigawattDay, new CultureInfo("ru-RU"), new string[]{"ÐÐÑ/Ð´"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.GigawattHour, new CultureInfo("en-US"), new string[]{"GWh"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.GigawattHour, new CultureInfo("ru-RU"), new string[]{"ÐÐÑ/Ñ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.HorsepowerHour, new CultureInfo("en-US"), new string[]{"hpÂ·h"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Joule, new CultureInfo("en-US"), new string[]{"J"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.KilobritishThermalUnit, new CultureInfo("en-US"), new string[]{"kBTU"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Kilocalorie, new CultureInfo("en-US"), new string[]{"kcal"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.KiloelectronVolt, new CultureInfo("en-US"), new string[]{"keV"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.KiloelectronVolt, new CultureInfo("ru-RU"), new string[]{"ÐºÑÐ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Kilojoule, new CultureInfo("en-US"), new string[]{"kJ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.KilowattDay, new CultureInfo("en-US"), new string[]{"kWd"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.KilowattDay, new CultureInfo("ru-RU"), new string[]{"ÐºÐÑ/Ð´"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.KilowattHour, new CultureInfo("en-US"), new string[]{"kWh"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.KilowattHour, new CultureInfo("ru-RU"), new string[]{"ÐºÐÑ/Ñ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.MegabritishThermalUnit, new CultureInfo("en-US"), new string[]{"MBTU"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Megacalorie, new CultureInfo("en-US"), new string[]{"Mcal"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.MegaelectronVolt, new CultureInfo("en-US"), new string[]{"MeV"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.MegaelectronVolt, new CultureInfo("ru-RU"), new string[]{"ÐÑÐ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Megajoule, new CultureInfo("en-US"), new string[]{"MJ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.MegawattDay, new CultureInfo("en-US"), new string[]{"MWd"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.MegawattDay, new CultureInfo("ru-RU"), new string[]{"ÐÐÑ/Ð´"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.MegawattHour, new CultureInfo("en-US"), new string[]{"MWh"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.MegawattHour, new CultureInfo("ru-RU"), new string[]{"ÐÐÑ/Ñ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.Millijoule, new CultureInfo("en-US"), new string[]{"mJ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.TeraelectronVolt, new CultureInfo("en-US"), new string[]{"TeV"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.TeraelectronVolt, new CultureInfo("ru-RU"), new string[]{"Ð¢ÑÐ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.TerawattDay, new CultureInfo("en-US"), new string[]{"TWd"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.TerawattDay, new CultureInfo("ru-RU"), new string[]{"Ð¢ÐÑ/Ð´"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.TerawattHour, new CultureInfo("en-US"), new string[]{"TWh"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.TerawattHour, new CultureInfo("ru-RU"), new string[]{"Ð¢ÐÑ/Ñ"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ThermEc, new CultureInfo("en-US"), new string[]{"th (E.C.)"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ThermEc, new CultureInfo("ru-RU"), new string[]{"ÐÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¸Ð¹ ÑÐµÑÐ¼"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ThermImperial, new CultureInfo("en-US"), new string[]{"th (imp.)"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ThermImperial, new CultureInfo("ru-RU"), new string[]{"ÐÐ½Ð³Ð»Ð¸Ð¹ÑÐºÐ¸Ð¹ ÑÐµÑÐ¼"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ThermUs, new CultureInfo("en-US"), new string[]{"th (U.S.)"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.ThermUs, new CultureInfo("ru-RU"), new string[]{"ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸Ð¹ ÑÐµÑÐ¼"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.WattDay, new CultureInfo("en-US"), new string[]{"Wd"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.WattDay, new CultureInfo("ru-RU"), new string[]{"ÐÑ/Ð´"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.WattHour, new CultureInfo("en-US"), new string[]{"Wh"});
            unitAbbreviationsCache.MapUnitToAbbreviation(EnergyUnit.WattHour, new CultureInfo("ru-RU"), new string[]{"ÐÑ/Ñ"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(EnergyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(EnergyUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Energy from BritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromBritishThermalUnits(QuantityValue britishthermalunits)
        {
            double value = (double) britishthermalunits;
            return new Energy(value, EnergyUnit.BritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Calories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromCalories(QuantityValue calories)
        {
            double value = (double) calories;
            return new Energy(value, EnergyUnit.Calorie);
        }
        /// <summary>
        ///     Get Energy from DecathermsEc.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsEc(QuantityValue decathermsec)
        {
            double value = (double) decathermsec;
            return new Energy(value, EnergyUnit.DecathermEc);
        }
        /// <summary>
        ///     Get Energy from DecathermsImperial.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsImperial(QuantityValue decathermsimperial)
        {
            double value = (double) decathermsimperial;
            return new Energy(value, EnergyUnit.DecathermImperial);
        }
        /// <summary>
        ///     Get Energy from DecathermsUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsUs(QuantityValue decathermsus)
        {
            double value = (double) decathermsus;
            return new Energy(value, EnergyUnit.DecathermUs);
        }
        /// <summary>
        ///     Get Energy from ElectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromElectronVolts(QuantityValue electronvolts)
        {
            double value = (double) electronvolts;
            return new Energy(value, EnergyUnit.ElectronVolt);
        }
        /// <summary>
        ///     Get Energy from Ergs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromErgs(QuantityValue ergs)
        {
            double value = (double) ergs;
            return new Energy(value, EnergyUnit.Erg);
        }
        /// <summary>
        ///     Get Energy from FootPounds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromFootPounds(QuantityValue footpounds)
        {
            double value = (double) footpounds;
            return new Energy(value, EnergyUnit.FootPound);
        }
        /// <summary>
        ///     Get Energy from GigabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigabritishThermalUnits(QuantityValue gigabritishthermalunits)
        {
            double value = (double) gigabritishthermalunits;
            return new Energy(value, EnergyUnit.GigabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from GigaelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigaelectronVolts(QuantityValue gigaelectronvolts)
        {
            double value = (double) gigaelectronvolts;
            return new Energy(value, EnergyUnit.GigaelectronVolt);
        }
        /// <summary>
        ///     Get Energy from Gigajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigajoules(QuantityValue gigajoules)
        {
            double value = (double) gigajoules;
            return new Energy(value, EnergyUnit.Gigajoule);
        }
        /// <summary>
        ///     Get Energy from GigawattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigawattDays(QuantityValue gigawattdays)
        {
            double value = (double) gigawattdays;
            return new Energy(value, EnergyUnit.GigawattDay);
        }
        /// <summary>
        ///     Get Energy from GigawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigawattHours(QuantityValue gigawatthours)
        {
            double value = (double) gigawatthours;
            return new Energy(value, EnergyUnit.GigawattHour);
        }
        /// <summary>
        ///     Get Energy from HorsepowerHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromHorsepowerHours(QuantityValue horsepowerhours)
        {
            double value = (double) horsepowerhours;
            return new Energy(value, EnergyUnit.HorsepowerHour);
        }
        /// <summary>
        ///     Get Energy from Joules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromJoules(QuantityValue joules)
        {
            double value = (double) joules;
            return new Energy(value, EnergyUnit.Joule);
        }
        /// <summary>
        ///     Get Energy from KilobritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilobritishThermalUnits(QuantityValue kilobritishthermalunits)
        {
            double value = (double) kilobritishthermalunits;
            return new Energy(value, EnergyUnit.KilobritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Kilocalories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilocalories(QuantityValue kilocalories)
        {
            double value = (double) kilocalories;
            return new Energy(value, EnergyUnit.Kilocalorie);
        }
        /// <summary>
        ///     Get Energy from KiloelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKiloelectronVolts(QuantityValue kiloelectronvolts)
        {
            double value = (double) kiloelectronvolts;
            return new Energy(value, EnergyUnit.KiloelectronVolt);
        }
        /// <summary>
        ///     Get Energy from Kilojoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilojoules(QuantityValue kilojoules)
        {
            double value = (double) kilojoules;
            return new Energy(value, EnergyUnit.Kilojoule);
        }
        /// <summary>
        ///     Get Energy from KilowattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilowattDays(QuantityValue kilowattdays)
        {
            double value = (double) kilowattdays;
            return new Energy(value, EnergyUnit.KilowattDay);
        }
        /// <summary>
        ///     Get Energy from KilowattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilowattHours(QuantityValue kilowatthours)
        {
            double value = (double) kilowatthours;
            return new Energy(value, EnergyUnit.KilowattHour);
        }
        /// <summary>
        ///     Get Energy from MegabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegabritishThermalUnits(QuantityValue megabritishthermalunits)
        {
            double value = (double) megabritishthermalunits;
            return new Energy(value, EnergyUnit.MegabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Megacalories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegacalories(QuantityValue megacalories)
        {
            double value = (double) megacalories;
            return new Energy(value, EnergyUnit.Megacalorie);
        }
        /// <summary>
        ///     Get Energy from MegaelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegaelectronVolts(QuantityValue megaelectronvolts)
        {
            double value = (double) megaelectronvolts;
            return new Energy(value, EnergyUnit.MegaelectronVolt);
        }
        /// <summary>
        ///     Get Energy from Megajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegajoules(QuantityValue megajoules)
        {
            double value = (double) megajoules;
            return new Energy(value, EnergyUnit.Megajoule);
        }
        /// <summary>
        ///     Get Energy from MegawattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegawattDays(QuantityValue megawattdays)
        {
            double value = (double) megawattdays;
            return new Energy(value, EnergyUnit.MegawattDay);
        }
        /// <summary>
        ///     Get Energy from MegawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegawattHours(QuantityValue megawatthours)
        {
            double value = (double) megawatthours;
            return new Energy(value, EnergyUnit.MegawattHour);
        }
        /// <summary>
        ///     Get Energy from Millijoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMillijoules(QuantityValue millijoules)
        {
            double value = (double) millijoules;
            return new Energy(value, EnergyUnit.Millijoule);
        }
        /// <summary>
        ///     Get Energy from TeraelectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTeraelectronVolts(QuantityValue teraelectronvolts)
        {
            double value = (double) teraelectronvolts;
            return new Energy(value, EnergyUnit.TeraelectronVolt);
        }
        /// <summary>
        ///     Get Energy from TerawattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerawattDays(QuantityValue terawattdays)
        {
            double value = (double) terawattdays;
            return new Energy(value, EnergyUnit.TerawattDay);
        }
        /// <summary>
        ///     Get Energy from TerawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerawattHours(QuantityValue terawatthours)
        {
            double value = (double) terawatthours;
            return new Energy(value, EnergyUnit.TerawattHour);
        }
        /// <summary>
        ///     Get Energy from ThermsEc.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsEc(QuantityValue thermsec)
        {
            double value = (double) thermsec;
            return new Energy(value, EnergyUnit.ThermEc);
        }
        /// <summary>
        ///     Get Energy from ThermsImperial.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsImperial(QuantityValue thermsimperial)
        {
            double value = (double) thermsimperial;
            return new Energy(value, EnergyUnit.ThermImperial);
        }
        /// <summary>
        ///     Get Energy from ThermsUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsUs(QuantityValue thermsus)
        {
            double value = (double) thermsus;
            return new Energy(value, EnergyUnit.ThermUs);
        }
        /// <summary>
        ///     Get Energy from WattDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromWattDays(QuantityValue wattdays)
        {
            double value = (double) wattdays;
            return new Energy(value, EnergyUnit.WattDay);
        }
        /// <summary>
        ///     Get Energy from WattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromWattHours(QuantityValue watthours)
        {
            double value = (double) watthours;
            return new Energy(value, EnergyUnit.WattHour);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EnergyUnit" /> to <see cref="Energy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Energy unit value.</returns>
        public static Energy From(QuantityValue value, EnergyUnit fromUnit)
        {
            return new Energy((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Energy Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Energy Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Energy, EnergyUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out Energy result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out Energy result)
        {
            return QuantityParser.Default.TryParse<Energy, EnergyUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static EnergyUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static EnergyUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<EnergyUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.EnergyUnit)"/>
        public static bool TryParseUnit(string str, out EnergyUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out EnergyUnit unit)
        {
            return UnitParser.Default.TryParse<EnergyUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Energy operator -(Energy right)
        {
            return new Energy(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from adding two <see cref="Energy"/>.</summary>
        public static Energy operator +(Energy left, Energy right)
        {
            return new Energy(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from subtracting two <see cref="Energy"/>.</summary>
        public static Energy operator -(Energy left, Energy right)
        {
            return new Energy(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from multiplying value and <see cref="Energy"/>.</summary>
        public static Energy operator *(double left, Energy right)
        {
            return new Energy(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from multiplying value and <see cref="Energy"/>.</summary>
        public static Energy operator *(Energy left, double right)
        {
            return new Energy(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from dividing <see cref="Energy"/> by value.</summary>
        public static Energy operator /(Energy left, double right)
        {
            return new Energy(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Energy"/> by <see cref="Energy"/>.</summary>
        public static double operator /(Energy left, Energy right)
        {
            return left.Joules / right.Joules;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Energy left, Energy right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Energy left, Energy right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Energy left, Energy right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Energy left, Energy right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Energy left, Energy right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Energy left, Energy right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Energy objEnergy)) throw new ArgumentException("Expected type Energy.", nameof(obj));

            return CompareTo(objEnergy);
        }

        /// <inheritdoc />
        public int CompareTo(Energy other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Energy objEnergy))
                return false;

            return Equals(objEnergy);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Energy other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Energy within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Energy other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Energy.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(EnergyUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is EnergyUnit unitAsEnergyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(EnergyUnit)} is supported.", nameof(unit));

            return As(unitAsEnergyUnit);
        }

        /// <summary>
        ///     Converts this Energy to another Energy with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A Energy with the specified unit.</returns>
        public Energy ToUnit(EnergyUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this Energy to another Energy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A Energy with the specified unit.</returns>
        public Energy ToUnit(EnergyUnit unit, UnitConverter unitConverter)
        {
            if(Unit == unit)
            {
                // Already in requested units.
                return this;
            }
            else if(unitConverter.TryGetConversionFunction((typeof(Energy), Unit, typeof(Energy), unit), out var conversionFunction))
            {
                // Direct conversion to requested unit found. Return the converted quantity.
                var converted = conversionFunction(this);
                return (Energy)converted;
            }
            else if(Unit != BaseUnit)
            {
                // Direct conversion to requested unit NOT found. Convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is EnergyUnit unitAsEnergyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(EnergyUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsEnergyUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit, UnitConverter unitConverter)
        {
            if(!(unit is EnergyUnit unitAsEnergyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(EnergyUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsEnergyUnit, unitConverter);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Energy ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<EnergyUnit> IQuantity<EnergyUnit>.ToUnit(EnergyUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<EnergyUnit> IQuantity<EnergyUnit>.ToUnit(EnergyUnit unit, UnitConverter unitConverter) => ToUnit(unit, unitConverter);

        /// <inheritdoc />
        IQuantity<EnergyUnit> IQuantity<EnergyUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        private double GetValueAs(EnergyUnit unit)
        {
            var converted = ToUnit(unit);
            return (double)converted.Value;
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<EnergyUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Energy)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Energy)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Energy)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Energy))
                return this;
            else if(conversionType == typeof(EnergyUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Energy.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return Energy.Info;
            else if(conversionType == typeof(BaseDimensions))
                return Energy.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Energy)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
