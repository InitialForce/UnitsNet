//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Luminance is a photometric measure of the luminous intensity per unit area of light travelling in a given direction.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Luminance
    /// </remarks>
    [DataContract]
    public partial struct Luminance : IQuantity<LuminanceUnit>, IEquatable<Luminance>, IComparable, IComparable<Luminance>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 0)]
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 1)]
        private readonly LuminanceUnit? _unit;

        static Luminance()
        {
            BaseDimensions = new BaseDimensions(-2, 0, 0, 0, 0, 0, 1);
            BaseUnit = LuminanceUnit.CandelaPerSquareMeter;
            MaxValue = new Luminance(double.MaxValue, BaseUnit);
            MinValue = new Luminance(double.MinValue, BaseUnit);
            QuantityType = QuantityType.Luminance;
            Units = Enum.GetValues(typeof(LuminanceUnit)).Cast<LuminanceUnit>().Except(new LuminanceUnit[]{ LuminanceUnit.Undefined }).ToArray();
            Zero = new Luminance(0, BaseUnit);
            Info = new QuantityInfo<LuminanceUnit>("Luminance",
                new UnitInfo<LuminanceUnit>[]
                {
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.CandelaPerSquareFoot, "CandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.CandelaPerSquareInch, "CandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.CandelaPerSquareMeter, "CandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.DecacandelaPerSquareFoot, "DecacandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.DecacandelaPerSquareInch, "DecacandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.DecacandelaPerSquareMeter, "DecacandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.DecicandelaPerSquareFoot, "DecicandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.DecicandelaPerSquareInch, "DecicandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.DecicandelaPerSquareMeter, "DecicandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.FemtocandelaPerSquareFoot, "FemtocandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.FemtocandelaPerSquareInch, "FemtocandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.FemtocandelaPerSquareMeter, "FemtocandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.GigacandelaPerSquareFoot, "GigacandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.GigacandelaPerSquareInch, "GigacandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.GigacandelaPerSquareMeter, "GigacandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.KilocandelaPerSquareFoot, "KilocandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.KilocandelaPerSquareInch, "KilocandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.KilocandelaPerSquareMeter, "KilocandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MegacandelaPerSquareFoot, "MegacandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MegacandelaPerSquareInch, "MegacandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MegacandelaPerSquareMeter, "MegacandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MicrocandelaPerSquareFoot, "MicrocandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MicrocandelaPerSquareInch, "MicrocandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MicrocandelaPerSquareMeter, "MicrocandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MillicandelaPerSquareFoot, "MillicandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MillicandelaPerSquareInch, "MillicandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.MillicandelaPerSquareMeter, "MillicandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.NanocandelaPerSquareFoot, "NanocandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.NanocandelaPerSquareInch, "NanocandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.NanocandelaPerSquareMeter, "NanocandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.Nit, "Nits", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.PetacandelaPerSquareFoot, "PetacandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.PetacandelaPerSquareInch, "PetacandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.PetacandelaPerSquareMeter, "PetacandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.PicocandelaPerSquareFoot, "PicocandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.PicocandelaPerSquareInch, "PicocandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.PicocandelaPerSquareMeter, "PicocandelasPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.TeracandelaPerSquareFoot, "TeracandelasPerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.TeracandelaPerSquareInch, "TeracandelasPerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<LuminanceUnit>(LuminanceUnit.TeracandelaPerSquareMeter, "TeracandelasPerSquareMeter", BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.Luminance);

            DefaultConversionFunctions = new UnitConverter();
            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Luminance(double value, LuminanceUnit unit)
        {
            if (unit == LuminanceUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Luminance(double value, UnitSystem unitSystem)
        {
            if (unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Luminance" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<LuminanceUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Luminance, which is CandelaPerSquareMeter. All conversions go via this value.
        /// </summary>
        public static LuminanceUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of Luminance
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static Luminance MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of Luminance
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static Luminance MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the Luminance quantity.
        /// </summary>
        public static LuminanceUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CandelaPerSquareMeter.
        /// </summary>
        public static Luminance Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public LuminanceUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<LuminanceUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => QuantityType.Luminance;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Luminance.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareFoot"/>
        /// </summary>
        public double CandelasPerSquareFoot => As(LuminanceUnit.CandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareInch"/>
        /// </summary>
        public double CandelasPerSquareInch => As(LuminanceUnit.CandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareMeter"/>
        /// </summary>
        public double CandelasPerSquareMeter => As(LuminanceUnit.CandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecacandelaPerSquareFoot"/>
        /// </summary>
        public double DecacandelasPerSquareFoot => As(LuminanceUnit.DecacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecacandelaPerSquareInch"/>
        /// </summary>
        public double DecacandelasPerSquareInch => As(LuminanceUnit.DecacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecacandelaPerSquareMeter"/>
        /// </summary>
        public double DecacandelasPerSquareMeter => As(LuminanceUnit.DecacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecicandelaPerSquareFoot"/>
        /// </summary>
        public double DecicandelasPerSquareFoot => As(LuminanceUnit.DecicandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecicandelaPerSquareInch"/>
        /// </summary>
        public double DecicandelasPerSquareInch => As(LuminanceUnit.DecicandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecicandelaPerSquareMeter"/>
        /// </summary>
        public double DecicandelasPerSquareMeter => As(LuminanceUnit.DecicandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.FemtocandelaPerSquareFoot"/>
        /// </summary>
        public double FemtocandelasPerSquareFoot => As(LuminanceUnit.FemtocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.FemtocandelaPerSquareInch"/>
        /// </summary>
        public double FemtocandelasPerSquareInch => As(LuminanceUnit.FemtocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.FemtocandelaPerSquareMeter"/>
        /// </summary>
        public double FemtocandelasPerSquareMeter => As(LuminanceUnit.FemtocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.GigacandelaPerSquareFoot"/>
        /// </summary>
        public double GigacandelasPerSquareFoot => As(LuminanceUnit.GigacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.GigacandelaPerSquareInch"/>
        /// </summary>
        public double GigacandelasPerSquareInch => As(LuminanceUnit.GigacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.GigacandelaPerSquareMeter"/>
        /// </summary>
        public double GigacandelasPerSquareMeter => As(LuminanceUnit.GigacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.KilocandelaPerSquareFoot"/>
        /// </summary>
        public double KilocandelasPerSquareFoot => As(LuminanceUnit.KilocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.KilocandelaPerSquareInch"/>
        /// </summary>
        public double KilocandelasPerSquareInch => As(LuminanceUnit.KilocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.KilocandelaPerSquareMeter"/>
        /// </summary>
        public double KilocandelasPerSquareMeter => As(LuminanceUnit.KilocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MegacandelaPerSquareFoot"/>
        /// </summary>
        public double MegacandelasPerSquareFoot => As(LuminanceUnit.MegacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MegacandelaPerSquareInch"/>
        /// </summary>
        public double MegacandelasPerSquareInch => As(LuminanceUnit.MegacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MegacandelaPerSquareMeter"/>
        /// </summary>
        public double MegacandelasPerSquareMeter => As(LuminanceUnit.MegacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MicrocandelaPerSquareFoot"/>
        /// </summary>
        public double MicrocandelasPerSquareFoot => As(LuminanceUnit.MicrocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MicrocandelaPerSquareInch"/>
        /// </summary>
        public double MicrocandelasPerSquareInch => As(LuminanceUnit.MicrocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MicrocandelaPerSquareMeter"/>
        /// </summary>
        public double MicrocandelasPerSquareMeter => As(LuminanceUnit.MicrocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MillicandelaPerSquareFoot"/>
        /// </summary>
        public double MillicandelasPerSquareFoot => As(LuminanceUnit.MillicandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MillicandelaPerSquareInch"/>
        /// </summary>
        public double MillicandelasPerSquareInch => As(LuminanceUnit.MillicandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MillicandelaPerSquareMeter"/>
        /// </summary>
        public double MillicandelasPerSquareMeter => As(LuminanceUnit.MillicandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.NanocandelaPerSquareFoot"/>
        /// </summary>
        public double NanocandelasPerSquareFoot => As(LuminanceUnit.NanocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.NanocandelaPerSquareInch"/>
        /// </summary>
        public double NanocandelasPerSquareInch => As(LuminanceUnit.NanocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.NanocandelaPerSquareMeter"/>
        /// </summary>
        public double NanocandelasPerSquareMeter => As(LuminanceUnit.NanocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.Nit"/>
        /// </summary>
        public double Nits => As(LuminanceUnit.Nit);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PetacandelaPerSquareFoot"/>
        /// </summary>
        public double PetacandelasPerSquareFoot => As(LuminanceUnit.PetacandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PetacandelaPerSquareInch"/>
        /// </summary>
        public double PetacandelasPerSquareInch => As(LuminanceUnit.PetacandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PetacandelaPerSquareMeter"/>
        /// </summary>
        public double PetacandelasPerSquareMeter => As(LuminanceUnit.PetacandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PicocandelaPerSquareFoot"/>
        /// </summary>
        public double PicocandelasPerSquareFoot => As(LuminanceUnit.PicocandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PicocandelaPerSquareInch"/>
        /// </summary>
        public double PicocandelasPerSquareInch => As(LuminanceUnit.PicocandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.PicocandelaPerSquareMeter"/>
        /// </summary>
        public double PicocandelasPerSquareMeter => As(LuminanceUnit.PicocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.TeracandelaPerSquareFoot"/>
        /// </summary>
        public double TeracandelasPerSquareFoot => As(LuminanceUnit.TeracandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.TeracandelaPerSquareInch"/>
        /// </summary>
        public double TeracandelasPerSquareInch => As(LuminanceUnit.TeracandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.TeracandelaPerSquareMeter"/>
        /// </summary>
        public double TeracandelasPerSquareMeter => As(LuminanceUnit.TeracandelaPerSquareMeter);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: BaseUnit -> LuminanceUnit
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareFoot, quantity => new Luminance(quantity.Value/ 9.290304e-2, LuminanceUnit.CandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareInch, quantity => new Luminance(quantity.Value/ 0.00064516, LuminanceUnit.CandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.DecacandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e1d, LuminanceUnit.DecacandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.DecacandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e1d, LuminanceUnit.DecacandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.DecacandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e1d, LuminanceUnit.DecacandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.DecicandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e-1d, LuminanceUnit.DecicandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.DecicandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e-1d, LuminanceUnit.DecicandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.DecicandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e-1d, LuminanceUnit.DecicandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.FemtocandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e-15d, LuminanceUnit.FemtocandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.FemtocandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e-15d, LuminanceUnit.FemtocandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.FemtocandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e-15d, LuminanceUnit.FemtocandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.GigacandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e9d, LuminanceUnit.GigacandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.GigacandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e9d, LuminanceUnit.GigacandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.GigacandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e9d, LuminanceUnit.GigacandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.KilocandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e3d, LuminanceUnit.KilocandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.KilocandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e3d, LuminanceUnit.KilocandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.KilocandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e3d, LuminanceUnit.KilocandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MegacandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e6d, LuminanceUnit.MegacandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MegacandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e6d, LuminanceUnit.MegacandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MegacandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e6d, LuminanceUnit.MegacandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MicrocandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e-6d, LuminanceUnit.MicrocandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MicrocandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e-6d, LuminanceUnit.MicrocandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MicrocandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e-6d, LuminanceUnit.MicrocandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MillicandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e-3d, LuminanceUnit.MillicandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MillicandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e-3d, LuminanceUnit.MillicandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.MillicandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e-3d, LuminanceUnit.MillicandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.NanocandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e-9d, LuminanceUnit.NanocandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.NanocandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e-9d, LuminanceUnit.NanocandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.NanocandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e-9d, LuminanceUnit.NanocandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.Nit, quantity => new Luminance(quantity.Value, LuminanceUnit.Nit));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.PetacandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e15d, LuminanceUnit.PetacandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.PetacandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e15d, LuminanceUnit.PetacandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.PetacandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e15d, LuminanceUnit.PetacandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.PicocandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e-12d, LuminanceUnit.PicocandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.PicocandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e-12d, LuminanceUnit.PicocandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.PicocandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e-12d, LuminanceUnit.PicocandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.TeracandelaPerSquareFoot, quantity => new Luminance((quantity.Value/ 9.290304e-2) / 1e12d, LuminanceUnit.TeracandelaPerSquareFoot));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.TeracandelaPerSquareInch, quantity => new Luminance((quantity.Value/ 0.00064516) / 1e12d, LuminanceUnit.TeracandelaPerSquareInch));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.TeracandelaPerSquareMeter, quantity => new Luminance((quantity.Value) / 1e12d, LuminanceUnit.TeracandelaPerSquareMeter));

            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => quantity);

            // Register in unit converter: LuminanceUnit -> BaseUnit
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance(quantity.Value* 9.290304e-2, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.CandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance(quantity.Value* 0.00064516, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.DecacandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e1d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.DecacandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e1d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.DecacandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e1d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.DecicandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e-1d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.DecicandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e-1d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.DecicandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e-1d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.FemtocandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e-15d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.FemtocandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e-15d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.FemtocandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e-15d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.GigacandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e9d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.GigacandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e9d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.GigacandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e9d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.KilocandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e3d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.KilocandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e3d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.KilocandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e3d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MegacandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e6d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MegacandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e6d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MegacandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e6d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MicrocandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e-6d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MicrocandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e-6d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MicrocandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e-6d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MillicandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e-3d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MillicandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e-3d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.MillicandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e-3d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.NanocandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e-9d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.NanocandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e-9d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.NanocandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e-9d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.Nit, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance(quantity.Value, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.PetacandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e15d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.PetacandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e15d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.PetacandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e15d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.PicocandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e-12d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.PicocandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e-12d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.PicocandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e-12d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.TeracandelaPerSquareFoot, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 9.290304e-2) * 1e12d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.TeracandelaPerSquareInch, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value* 0.00064516) * 1e12d, LuminanceUnit.CandelaPerSquareMeter));
            unitConverter.SetConversionFunction<Luminance>(LuminanceUnit.TeracandelaPerSquareMeter, LuminanceUnit.CandelaPerSquareMeter, quantity => new Luminance((quantity.Value) * 1e12d, LuminanceUnit.CandelaPerSquareMeter));
        }

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.CandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"Cd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.CandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"Cd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.CandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"Cd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"daCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"daCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"daCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecicandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"dCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecicandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"dCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.DecicandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"dCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.FemtocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"fCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.FemtocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"fCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.FemtocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"fCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.GigacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"GCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.GigacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"GCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.GigacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"GCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.KilocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"kCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.KilocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"kCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.KilocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"kCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MegacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"MCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MegacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"MCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MegacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"MCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MicrocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"µCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MicrocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"µCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MicrocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"µCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MillicandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"mCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MillicandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"mCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.MillicandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"mCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.NanocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"nCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.NanocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"nCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.NanocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"nCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.Nit, new CultureInfo("en-US"), false, true, new string[]{"L⊙"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PetacandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"PCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PetacandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"PCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PetacandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"PCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PicocandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"pCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PicocandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"pCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.PicocandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"pCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.TeracandelaPerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"TCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.TeracandelaPerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"TCd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(LuminanceUnit.TeracandelaPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"TCd"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(LuminanceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(LuminanceUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromCandelasPerSquareFoot(QuantityValue candelaspersquarefoot)
        {
            double value = (double) candelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.CandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromCandelasPerSquareInch(QuantityValue candelaspersquareinch)
        {
            double value = (double) candelaspersquareinch;
            return new Luminance(value, LuminanceUnit.CandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromCandelasPerSquareMeter(QuantityValue candelaspersquaremeter)
        {
            double value = (double) candelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.CandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromDecacandelasPerSquareFoot(QuantityValue decacandelaspersquarefoot)
        {
            double value = (double) decacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.DecacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromDecacandelasPerSquareInch(QuantityValue decacandelaspersquareinch)
        {
            double value = (double) decacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.DecacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromDecacandelasPerSquareMeter(QuantityValue decacandelaspersquaremeter)
        {
            double value = (double) decacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.DecacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecicandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromDecicandelasPerSquareFoot(QuantityValue decicandelaspersquarefoot)
        {
            double value = (double) decicandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.DecicandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecicandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromDecicandelasPerSquareInch(QuantityValue decicandelaspersquareinch)
        {
            double value = (double) decicandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.DecicandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecicandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromDecicandelasPerSquareMeter(QuantityValue decicandelaspersquaremeter)
        {
            double value = (double) decicandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.DecicandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.FemtocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromFemtocandelasPerSquareFoot(QuantityValue femtocandelaspersquarefoot)
        {
            double value = (double) femtocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.FemtocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.FemtocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromFemtocandelasPerSquareInch(QuantityValue femtocandelaspersquareinch)
        {
            double value = (double) femtocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.FemtocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.FemtocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromFemtocandelasPerSquareMeter(QuantityValue femtocandelaspersquaremeter)
        {
            double value = (double) femtocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.FemtocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.GigacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromGigacandelasPerSquareFoot(QuantityValue gigacandelaspersquarefoot)
        {
            double value = (double) gigacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.GigacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.GigacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromGigacandelasPerSquareInch(QuantityValue gigacandelaspersquareinch)
        {
            double value = (double) gigacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.GigacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.GigacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromGigacandelasPerSquareMeter(QuantityValue gigacandelaspersquaremeter)
        {
            double value = (double) gigacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.GigacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.KilocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromKilocandelasPerSquareFoot(QuantityValue kilocandelaspersquarefoot)
        {
            double value = (double) kilocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.KilocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.KilocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromKilocandelasPerSquareInch(QuantityValue kilocandelaspersquareinch)
        {
            double value = (double) kilocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.KilocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.KilocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromKilocandelasPerSquareMeter(QuantityValue kilocandelaspersquaremeter)
        {
            double value = (double) kilocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.KilocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MegacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMegacandelasPerSquareFoot(QuantityValue megacandelaspersquarefoot)
        {
            double value = (double) megacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.MegacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MegacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMegacandelasPerSquareInch(QuantityValue megacandelaspersquareinch)
        {
            double value = (double) megacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.MegacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MegacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMegacandelasPerSquareMeter(QuantityValue megacandelaspersquaremeter)
        {
            double value = (double) megacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.MegacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MicrocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMicrocandelasPerSquareFoot(QuantityValue microcandelaspersquarefoot)
        {
            double value = (double) microcandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.MicrocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MicrocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMicrocandelasPerSquareInch(QuantityValue microcandelaspersquareinch)
        {
            double value = (double) microcandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.MicrocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MicrocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMicrocandelasPerSquareMeter(QuantityValue microcandelaspersquaremeter)
        {
            double value = (double) microcandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.MicrocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MillicandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMillicandelasPerSquareFoot(QuantityValue millicandelaspersquarefoot)
        {
            double value = (double) millicandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.MillicandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MillicandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMillicandelasPerSquareInch(QuantityValue millicandelaspersquareinch)
        {
            double value = (double) millicandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.MillicandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MillicandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromMillicandelasPerSquareMeter(QuantityValue millicandelaspersquaremeter)
        {
            double value = (double) millicandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.MillicandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.NanocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromNanocandelasPerSquareFoot(QuantityValue nanocandelaspersquarefoot)
        {
            double value = (double) nanocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.NanocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.NanocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromNanocandelasPerSquareInch(QuantityValue nanocandelaspersquareinch)
        {
            double value = (double) nanocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.NanocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.NanocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromNanocandelasPerSquareMeter(QuantityValue nanocandelaspersquaremeter)
        {
            double value = (double) nanocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.NanocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.Nit"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromNits(QuantityValue nits)
        {
            double value = (double) nits;
            return new Luminance(value, LuminanceUnit.Nit);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PetacandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromPetacandelasPerSquareFoot(QuantityValue petacandelaspersquarefoot)
        {
            double value = (double) petacandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.PetacandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PetacandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromPetacandelasPerSquareInch(QuantityValue petacandelaspersquareinch)
        {
            double value = (double) petacandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.PetacandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PetacandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromPetacandelasPerSquareMeter(QuantityValue petacandelaspersquaremeter)
        {
            double value = (double) petacandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.PetacandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PicocandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromPicocandelasPerSquareFoot(QuantityValue picocandelaspersquarefoot)
        {
            double value = (double) picocandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.PicocandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PicocandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromPicocandelasPerSquareInch(QuantityValue picocandelaspersquareinch)
        {
            double value = (double) picocandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.PicocandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.PicocandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromPicocandelasPerSquareMeter(QuantityValue picocandelaspersquaremeter)
        {
            double value = (double) picocandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.PicocandelaPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.TeracandelaPerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromTeracandelasPerSquareFoot(QuantityValue teracandelaspersquarefoot)
        {
            double value = (double) teracandelaspersquarefoot;
            return new Luminance(value, LuminanceUnit.TeracandelaPerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.TeracandelaPerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromTeracandelasPerSquareInch(QuantityValue teracandelaspersquareinch)
        {
            double value = (double) teracandelaspersquareinch;
            return new Luminance(value, LuminanceUnit.TeracandelaPerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.TeracandelaPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Luminance FromTeracandelasPerSquareMeter(QuantityValue teracandelaspersquaremeter)
        {
            double value = (double) teracandelaspersquaremeter;
            return new Luminance(value, LuminanceUnit.TeracandelaPerSquareMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LuminanceUnit" /> to <see cref="Luminance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Luminance unit value.</returns>
        public static Luminance From(QuantityValue value, LuminanceUnit fromUnit)
        {
            return new Luminance((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Luminance Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Luminance Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Luminance, LuminanceUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out Luminance result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out Luminance result)
        {
            return QuantityParser.Default.TryParse<Luminance, LuminanceUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LuminanceUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LuminanceUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<LuminanceUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.LuminanceUnit)"/>
        public static bool TryParseUnit(string str, out LuminanceUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out LuminanceUnit unit)
        {
            return UnitParser.Default.TryParse<LuminanceUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Luminance operator -(Luminance right)
        {
            return new Luminance(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Luminance"/> from adding two <see cref="Luminance"/>.</summary>
        public static Luminance operator +(Luminance left, Luminance right)
        {
            return new Luminance(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Luminance"/> from subtracting two <see cref="Luminance"/>.</summary>
        public static Luminance operator -(Luminance left, Luminance right)
        {
            return new Luminance(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Luminance"/> from multiplying value and <see cref="Luminance"/>.</summary>
        public static Luminance operator *(double left, Luminance right)
        {
            return new Luminance(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Luminance"/> from multiplying value and <see cref="Luminance"/>.</summary>
        public static Luminance operator *(Luminance left, double right)
        {
            return new Luminance(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Luminance"/> from dividing <see cref="Luminance"/> by value.</summary>
        public static Luminance operator /(Luminance left, double right)
        {
            return new Luminance(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Luminance"/> by <see cref="Luminance"/>.</summary>
        public static double operator /(Luminance left, Luminance right)
        {
            return left.CandelasPerSquareMeter / right.CandelasPerSquareMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Luminance left, Luminance right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Luminance left, Luminance right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Luminance left, Luminance right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Luminance left, Luminance right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Luminance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Luminance left, Luminance right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Luminance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Luminance left, Luminance right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Luminance objLuminance)) throw new ArgumentException("Expected type Luminance.", nameof(obj));

            return CompareTo(objLuminance);
        }

        /// <inheritdoc />
        public int CompareTo(Luminance other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Luminance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is Luminance objLuminance))
                return false;

            return Equals(objLuminance);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Luminance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Luminance other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Luminance within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Luminance other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Luminance.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(LuminanceUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if (!(unit is LuminanceUnit unitAsLuminanceUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LuminanceUnit)} is supported.", nameof(unit));

            return As(unitAsLuminanceUnit);
        }

        /// <summary>
        ///     Converts this Luminance to another Luminance with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A Luminance with the specified unit.</returns>
        public Luminance ToUnit(LuminanceUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this Luminance to another Luminance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A Luminance with the specified unit.</returns>
        public Luminance ToUnit(LuminanceUnit unit, UnitConverter unitConverter)
        {
            if (Unit == unit)
            {
                // Already in requested units.
                return this;
            }
            else if (unitConverter.TryGetConversionFunction((typeof(Luminance), Unit, typeof(Luminance), unit), out var conversionFunction))
            {
                // Direct conversion to requested unit found. Return the converted quantity.
                var converted = conversionFunction(this);
                return (Luminance)converted;
            }
            else if (Unit != BaseUnit)
            {
                // Direct conversion to requested unit NOT found. Convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if (!(unit is LuminanceUnit unitAsLuminanceUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LuminanceUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsLuminanceUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Luminance ToUnit(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<LuminanceUnit> IQuantity<LuminanceUnit>.ToUnit(LuminanceUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<LuminanceUnit> IQuantity<LuminanceUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        private double GetValueAs(LuminanceUnit unit)
        {
            var converted = ToUnit(unit);
            return (double)converted.Value;
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<LuminanceUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Luminance)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Luminance)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Luminance)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if (conversionType == typeof(Luminance))
                return this;
            else if (conversionType == typeof(LuminanceUnit))
                return Unit;
            else if (conversionType == typeof(QuantityType))
                return Luminance.QuantityType;
            else if (conversionType == typeof(QuantityInfo))
                return Luminance.Info;
            else if (conversionType == typeof(BaseDimensions))
                return Luminance.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Luminance)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
