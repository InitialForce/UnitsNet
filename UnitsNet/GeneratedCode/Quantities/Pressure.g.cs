//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    public partial struct Pressure<T> : IQuantity<PressureUnit>, IEquatable<Pressure<T>>, IComparable, IComparable<Pressure<T>>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureUnit? _unit;

        static Pressure()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -2, 0, 0, 0, 0);

            Info = new QuantityInfo<PressureUnit>(QuantityType.Pressure,
                new UnitInfo<PressureUnit>[] {
                    new UnitInfo<PressureUnit>(PressureUnit.Atmosphere, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Bar, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Centibar, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Decapascal, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Decibar, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.DynePerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.FootOfHead, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Gigapascal, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Hectopascal, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.InchOfMercury, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.InchOfWaterColumn, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Kilobar, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilogramForcePerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilogramForcePerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilogramForcePerSquareMillimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilonewtonPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilonewtonPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilonewtonPerSquareMillimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Kilopascal, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilopoundForcePerSquareFoot, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilopoundForcePerSquareInch, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Megabar, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MeganewtonPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Megapascal, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MeterOfHead, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Microbar, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Micropascal, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Millibar, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MillimeterOfMercury, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Millipascal, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.NewtonPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.NewtonPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.NewtonPerSquareMillimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Pascal, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<PressureUnit>(PressureUnit.PoundForcePerSquareFoot, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.PoundForcePerSquareInch, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.PoundPerInchSecondSquared, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TechnicalAtmosphere, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TonneForcePerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TonneForcePerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TonneForcePerSquareMillimeter, BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Torr, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Pressure(double value, PressureUnit unit)
        {
            if(unit == PressureUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Pressure(double value, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<PressureUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of <see cref="Pressure{T}" />, which is Pascal. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit { get; } = PressureUnit.Pascal;

        /// <summary>
        /// Represents the largest possible value of <see cref="Pressure{T}" />
        /// </summary>
        public static Pressure<T> MaxValue { get; } = new Pressure<T>(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of <see cref="Pressure{T}" />
        /// </summary>
        public static Pressure<T> MinValue { get; } = new Pressure<T>(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Pressure;

        /// <summary>
        ///     All units of measurement for the <see cref="Pressure{T}" /> quantity.
        /// </summary>
        public static PressureUnit[] Units { get; } = Enum.GetValues(typeof(PressureUnit)).Cast<PressureUnit>().Except(new PressureUnit[]{ PressureUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Pascal.
        /// </summary>
        public static Pressure<T> Zero { get; } = new Pressure<T>(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public PressureUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<PressureUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Pressure<T>.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Pressure<T>.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Atmospheres.
        /// </summary>
        public double Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Bars.
        /// </summary>
        public double Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Centibars.
        /// </summary>
        public double Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Decapascals.
        /// </summary>
        public double Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Decibars.
        /// </summary>
        public double Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in DynesPerSquareCentimeter.
        /// </summary>
        public double DynesPerSquareCentimeter => As(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in FeetOfHead.
        /// </summary>
        public double FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Gigapascals.
        /// </summary>
        public double Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Hectopascals.
        /// </summary>
        public double Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in InchesOfMercury.
        /// </summary>
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in InchesOfWaterColumn.
        /// </summary>
        public double InchesOfWaterColumn => As(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Kilobars.
        /// </summary>
        public double Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilogramsForcePerSquareCentimeter.
        /// </summary>
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilogramsForcePerSquareMeter.
        /// </summary>
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilogramsForcePerSquareMillimeter.
        /// </summary>
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilonewtonsPerSquareCentimeter.
        /// </summary>
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilonewtonsPerSquareMeter.
        /// </summary>
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilonewtonsPerSquareMillimeter.
        /// </summary>
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Kilopascals.
        /// </summary>
        public double Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilopoundsForcePerSquareFoot.
        /// </summary>
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in KilopoundsForcePerSquareInch.
        /// </summary>
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Megabars.
        /// </summary>
        public double Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in MeganewtonsPerSquareMeter.
        /// </summary>
        public double MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Megapascals.
        /// </summary>
        public double Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in MetersOfHead.
        /// </summary>
        public double MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Microbars.
        /// </summary>
        public double Microbars => As(PressureUnit.Microbar);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Micropascals.
        /// </summary>
        public double Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Millibars.
        /// </summary>
        public double Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in MillimetersOfMercury.
        /// </summary>
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Millipascals.
        /// </summary>
        public double Millipascals => As(PressureUnit.Millipascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in NewtonsPerSquareCentimeter.
        /// </summary>
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in NewtonsPerSquareMeter.
        /// </summary>
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in NewtonsPerSquareMillimeter.
        /// </summary>
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Pascals.
        /// </summary>
        public double Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in PoundsForcePerSquareFoot.
        /// </summary>
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in PoundsForcePerSquareInch.
        /// </summary>
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in PoundsPerInchSecondSquared.
        /// </summary>
        public double PoundsPerInchSecondSquared => As(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in TechnicalAtmospheres.
        /// </summary>
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in TonnesForcePerSquareCentimeter.
        /// </summary>
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in TonnesForcePerSquareMeter.
        /// </summary>
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in TonnesForcePerSquareMillimeter.
        /// </summary>
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> in Torrs.
        /// </summary>
        public double Torrs => As(PressureUnit.Torr);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PressureUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(PressureUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Atmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromAtmospheres(QuantityValue atmospheres)
        {
            double value = (double) atmospheres;
            return new Pressure<T>(value, PressureUnit.Atmosphere);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Bars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromBars(QuantityValue bars)
        {
            double value = (double) bars;
            return new Pressure<T>(value, PressureUnit.Bar);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Centibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromCentibars(QuantityValue centibars)
        {
            double value = (double) centibars;
            return new Pressure<T>(value, PressureUnit.Centibar);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Decapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromDecapascals(QuantityValue decapascals)
        {
            double value = (double) decapascals;
            return new Pressure<T>(value, PressureUnit.Decapascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Decibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromDecibars(QuantityValue decibars)
        {
            double value = (double) decibars;
            return new Pressure<T>(value, PressureUnit.Decibar);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from DynesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromDynesPerSquareCentimeter(QuantityValue dynespersquarecentimeter)
        {
            double value = (double) dynespersquarecentimeter;
            return new Pressure<T>(value, PressureUnit.DynePerSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from FeetOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromFeetOfHead(QuantityValue feetofhead)
        {
            double value = (double) feetofhead;
            return new Pressure<T>(value, PressureUnit.FootOfHead);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Gigapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromGigapascals(QuantityValue gigapascals)
        {
            double value = (double) gigapascals;
            return new Pressure<T>(value, PressureUnit.Gigapascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Hectopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromHectopascals(QuantityValue hectopascals)
        {
            double value = (double) hectopascals;
            return new Pressure<T>(value, PressureUnit.Hectopascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from InchesOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromInchesOfMercury(QuantityValue inchesofmercury)
        {
            double value = (double) inchesofmercury;
            return new Pressure<T>(value, PressureUnit.InchOfMercury);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from InchesOfWaterColumn.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromInchesOfWaterColumn(QuantityValue inchesofwatercolumn)
        {
            double value = (double) inchesofwatercolumn;
            return new Pressure<T>(value, PressureUnit.InchOfWaterColumn);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Kilobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilobars(QuantityValue kilobars)
        {
            double value = (double) kilobars;
            return new Pressure<T>(value, PressureUnit.Kilobar);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilogramsForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilogramsForcePerSquareCentimeter(QuantityValue kilogramsforcepersquarecentimeter)
        {
            double value = (double) kilogramsforcepersquarecentimeter;
            return new Pressure<T>(value, PressureUnit.KilogramForcePerSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilogramsForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilogramsForcePerSquareMeter(QuantityValue kilogramsforcepersquaremeter)
        {
            double value = (double) kilogramsforcepersquaremeter;
            return new Pressure<T>(value, PressureUnit.KilogramForcePerSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilogramsForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilogramsForcePerSquareMillimeter(QuantityValue kilogramsforcepersquaremillimeter)
        {
            double value = (double) kilogramsforcepersquaremillimeter;
            return new Pressure<T>(value, PressureUnit.KilogramForcePerSquareMillimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilonewtonsPerSquareCentimeter(QuantityValue kilonewtonspersquarecentimeter)
        {
            double value = (double) kilonewtonspersquarecentimeter;
            return new Pressure<T>(value, PressureUnit.KilonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilonewtonsPerSquareMeter(QuantityValue kilonewtonspersquaremeter)
        {
            double value = (double) kilonewtonspersquaremeter;
            return new Pressure<T>(value, PressureUnit.KilonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilonewtonsPerSquareMillimeter(QuantityValue kilonewtonspersquaremillimeter)
        {
            double value = (double) kilonewtonspersquaremillimeter;
            return new Pressure<T>(value, PressureUnit.KilonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Kilopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilopascals(QuantityValue kilopascals)
        {
            double value = (double) kilopascals;
            return new Pressure<T>(value, PressureUnit.Kilopascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilopoundsForcePerSquareFoot(QuantityValue kilopoundsforcepersquarefoot)
        {
            double value = (double) kilopoundsforcepersquarefoot;
            return new Pressure<T>(value, PressureUnit.KilopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from KilopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromKilopoundsForcePerSquareInch(QuantityValue kilopoundsforcepersquareinch)
        {
            double value = (double) kilopoundsforcepersquareinch;
            return new Pressure<T>(value, PressureUnit.KilopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Megabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMegabars(QuantityValue megabars)
        {
            double value = (double) megabars;
            return new Pressure<T>(value, PressureUnit.Megabar);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from MeganewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMeganewtonsPerSquareMeter(QuantityValue meganewtonspersquaremeter)
        {
            double value = (double) meganewtonspersquaremeter;
            return new Pressure<T>(value, PressureUnit.MeganewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Megapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMegapascals(QuantityValue megapascals)
        {
            double value = (double) megapascals;
            return new Pressure<T>(value, PressureUnit.Megapascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from MetersOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMetersOfHead(QuantityValue metersofhead)
        {
            double value = (double) metersofhead;
            return new Pressure<T>(value, PressureUnit.MeterOfHead);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Microbars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMicrobars(QuantityValue microbars)
        {
            double value = (double) microbars;
            return new Pressure<T>(value, PressureUnit.Microbar);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Micropascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMicropascals(QuantityValue micropascals)
        {
            double value = (double) micropascals;
            return new Pressure<T>(value, PressureUnit.Micropascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Millibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMillibars(QuantityValue millibars)
        {
            double value = (double) millibars;
            return new Pressure<T>(value, PressureUnit.Millibar);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from MillimetersOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMillimetersOfMercury(QuantityValue millimetersofmercury)
        {
            double value = (double) millimetersofmercury;
            return new Pressure<T>(value, PressureUnit.MillimeterOfMercury);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Millipascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromMillipascals(QuantityValue millipascals)
        {
            double value = (double) millipascals;
            return new Pressure<T>(value, PressureUnit.Millipascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from NewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromNewtonsPerSquareCentimeter(QuantityValue newtonspersquarecentimeter)
        {
            double value = (double) newtonspersquarecentimeter;
            return new Pressure<T>(value, PressureUnit.NewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from NewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromNewtonsPerSquareMeter(QuantityValue newtonspersquaremeter)
        {
            double value = (double) newtonspersquaremeter;
            return new Pressure<T>(value, PressureUnit.NewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from NewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromNewtonsPerSquareMillimeter(QuantityValue newtonspersquaremillimeter)
        {
            double value = (double) newtonspersquaremillimeter;
            return new Pressure<T>(value, PressureUnit.NewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Pascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromPascals(QuantityValue pascals)
        {
            double value = (double) pascals;
            return new Pressure<T>(value, PressureUnit.Pascal);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from PoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromPoundsForcePerSquareFoot(QuantityValue poundsforcepersquarefoot)
        {
            double value = (double) poundsforcepersquarefoot;
            return new Pressure<T>(value, PressureUnit.PoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from PoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromPoundsForcePerSquareInch(QuantityValue poundsforcepersquareinch)
        {
            double value = (double) poundsforcepersquareinch;
            return new Pressure<T>(value, PressureUnit.PoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from PoundsPerInchSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromPoundsPerInchSecondSquared(QuantityValue poundsperinchsecondsquared)
        {
            double value = (double) poundsperinchsecondsquared;
            return new Pressure<T>(value, PressureUnit.PoundPerInchSecondSquared);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from TechnicalAtmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromTechnicalAtmospheres(QuantityValue technicalatmospheres)
        {
            double value = (double) technicalatmospheres;
            return new Pressure<T>(value, PressureUnit.TechnicalAtmosphere);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from TonnesForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromTonnesForcePerSquareCentimeter(QuantityValue tonnesforcepersquarecentimeter)
        {
            double value = (double) tonnesforcepersquarecentimeter;
            return new Pressure<T>(value, PressureUnit.TonneForcePerSquareCentimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from TonnesForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromTonnesForcePerSquareMeter(QuantityValue tonnesforcepersquaremeter)
        {
            double value = (double) tonnesforcepersquaremeter;
            return new Pressure<T>(value, PressureUnit.TonneForcePerSquareMeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from TonnesForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromTonnesForcePerSquareMillimeter(QuantityValue tonnesforcepersquaremillimeter)
        {
            double value = (double) tonnesforcepersquaremillimeter;
            return new Pressure<T>(value, PressureUnit.TonneForcePerSquareMillimeter);
        }
        /// <summary>
        ///     Get <see cref="Pressure{T}" /> from Torrs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure<T> FromTorrs(QuantityValue torrs)
        {
            double value = (double) torrs;
            return new Pressure<T>(value, PressureUnit.Torr);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure{T}" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns><see cref="Pressure{T}" /> unit value.</returns>
        public static Pressure<T> From(QuantityValue value, PressureUnit fromUnit)
        {
            return new Pressure<T>((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Pressure<T> Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Pressure<T> Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Pressure<T>, PressureUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Pressure<T> result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Pressure<T> result)
        {
            return QuantityParser.Default.TryParse<Pressure<T>, PressureUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str, [CanBeNull] IFormatProvider provider)
        {
            return UnitParser.Default.Parse<PressureUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.PressureUnit)"/>
        public static bool TryParseUnit(string str, out PressureUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out PressureUnit unit)
        {
            return UnitParser.Default.TryParse<PressureUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Pressure<T> operator -(Pressure<T> right)
        {
            return new Pressure<T>(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Pressure{T}"/> from adding two <see cref="Pressure{T}"/>.</summary>
        public static Pressure<T> operator +(Pressure<T> left, Pressure<T> right)
        {
            return new Pressure<T>(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Pressure{T}"/> from subtracting two <see cref="Pressure{T}"/>.</summary>
        public static Pressure<T> operator -(Pressure<T> left, Pressure<T> right)
        {
            return new Pressure<T>(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Pressure{T}"/> from multiplying value and <see cref="Pressure{T}"/>.</summary>
        public static Pressure<T> operator *(double left, Pressure<T> right)
        {
            return new Pressure<T>(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Pressure{T}"/> from multiplying value and <see cref="Pressure{T}"/>.</summary>
        public static Pressure<T> operator *(Pressure<T> left, double right)
        {
            return new Pressure<T>(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Pressure{T}"/> from dividing <see cref="Pressure{T}"/> by value.</summary>
        public static Pressure<T> operator /(Pressure<T> left, double right)
        {
            return new Pressure<T>(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Pressure{T}"/> by <see cref="Pressure{T}"/>.</summary>
        public static double operator /(Pressure<T> left, Pressure<T> right)
        {
            return left.Pascals / right.Pascals;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Pressure<T> left, Pressure<T> right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Pressure<T> left, Pressure<T> right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Pressure<T> left, Pressure<T> right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Pressure<T> left, Pressure<T> right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Pressure{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Pressure<T> left, Pressure<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Pressure{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Pressure<T> left, Pressure<T> right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Pressure<T> objPressure)) throw new ArgumentException("Expected type Pressure.", nameof(obj));

            return CompareTo(objPressure);
        }

        /// <inheritdoc />
        public int CompareTo(Pressure<T> other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Pressure{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Pressure<T> objPressure))
                return false;

            return Equals(objPressure);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Pressure{T}, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Pressure<T> other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another <see cref="Pressure{T}" /> within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Pressure<T> other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="Pressure{T}" />.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is PressureUnit unitAsPressureUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PressureUnit)} is supported.", nameof(unit));

            return As(unitAsPressureUnit);
        }

        /// <summary>
        ///     Converts this <see cref="Pressure{T}" /> to another <see cref="Pressure{T}" /> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A <see cref="Pressure{T}" /> with the specified unit.</returns>
        public Pressure<T> ToUnit(PressureUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Pressure<T>(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is PressureUnit unitAsPressureUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PressureUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsPressureUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Pressure<T> ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<PressureUnit> IQuantity<PressureUnit>.ToUnit(PressureUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<PressureUnit> IQuantity<PressureUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case PressureUnit.Atmosphere: return _value*1.01325*1e5;
                case PressureUnit.Bar: return _value*1e5;
                case PressureUnit.Centibar: return (_value*1e5) * 1e-2d;
                case PressureUnit.Decapascal: return (_value) * 1e1d;
                case PressureUnit.Decibar: return (_value*1e5) * 1e-1d;
                case PressureUnit.DynePerSquareCentimeter: return _value*1.0e-1;
                case PressureUnit.FootOfHead: return _value*2989.0669;
                case PressureUnit.Gigapascal: return (_value) * 1e9d;
                case PressureUnit.Hectopascal: return (_value) * 1e2d;
                case PressureUnit.InchOfMercury: return _value/2.95299830714159e-4;
                case PressureUnit.InchOfWaterColumn: return _value*249.08890833333;
                case PressureUnit.Kilobar: return (_value*1e5) * 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return _value*9.80665e4;
                case PressureUnit.KilogramForcePerSquareMeter: return _value*9.80665019960652;
                case PressureUnit.KilogramForcePerSquareMillimeter: return _value*9.80665e6;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (_value*1e4) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (_value) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (_value*1e6) * 1e3d;
                case PressureUnit.Kilopascal: return (_value) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e3d;
                case PressureUnit.Megabar: return (_value*1e5) * 1e6d;
                case PressureUnit.MeganewtonPerSquareMeter: return (_value) * 1e6d;
                case PressureUnit.Megapascal: return (_value) * 1e6d;
                case PressureUnit.MeterOfHead: return _value*9804.139432;
                case PressureUnit.Microbar: return (_value*1e5) * 1e-6d;
                case PressureUnit.Micropascal: return (_value) * 1e-6d;
                case PressureUnit.Millibar: return (_value*1e5) * 1e-3d;
                case PressureUnit.MillimeterOfMercury: return _value/7.50061561302643e-3;
                case PressureUnit.Millipascal: return (_value) * 1e-3d;
                case PressureUnit.NewtonPerSquareCentimeter: return _value*1e4;
                case PressureUnit.NewtonPerSquareMeter: return _value;
                case PressureUnit.NewtonPerSquareMillimeter: return _value*1e6;
                case PressureUnit.Pascal: return _value;
                case PressureUnit.PoundForcePerSquareFoot: return _value*4.788025898033584e1;
                case PressureUnit.PoundForcePerSquareInch: return _value*6.894757293168361e3;
                case PressureUnit.PoundPerInchSecondSquared: return _value*1.785796732283465e1;
                case PressureUnit.TechnicalAtmosphere: return _value*9.80680592331*1e4;
                case PressureUnit.TonneForcePerSquareCentimeter: return _value*9.80665e7;
                case PressureUnit.TonneForcePerSquareMeter: return _value*9.80665e3;
                case PressureUnit.TonneForcePerSquareMillimeter: return _value*9.80665e9;
                case PressureUnit.Torr: return _value*1.3332266752*1e2;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal Pressure<T> ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new Pressure<T>(baseUnitValue, BaseUnit);
        }

        private double GetValueAs(PressureUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case PressureUnit.Atmosphere: return baseUnitValue/(1.01325*1e5);
                case PressureUnit.Bar: return baseUnitValue/1e5;
                case PressureUnit.Centibar: return (baseUnitValue/1e5) / 1e-2d;
                case PressureUnit.Decapascal: return (baseUnitValue) / 1e1d;
                case PressureUnit.Decibar: return (baseUnitValue/1e5) / 1e-1d;
                case PressureUnit.DynePerSquareCentimeter: return baseUnitValue/1.0e-1;
                case PressureUnit.FootOfHead: return baseUnitValue*0.000334552565551;
                case PressureUnit.Gigapascal: return (baseUnitValue) / 1e9d;
                case PressureUnit.Hectopascal: return (baseUnitValue) / 1e2d;
                case PressureUnit.InchOfMercury: return baseUnitValue*2.95299830714159e-4;
                case PressureUnit.InchOfWaterColumn: return baseUnitValue/249.08890833333;
                case PressureUnit.Kilobar: return (baseUnitValue/1e5) / 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return baseUnitValue/9.80665e4;
                case PressureUnit.KilogramForcePerSquareMeter: return baseUnitValue*0.101971619222242;
                case PressureUnit.KilogramForcePerSquareMillimeter: return baseUnitValue/9.80665e6;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e3d;
                case PressureUnit.Kilopascal: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e3d;
                case PressureUnit.Megabar: return (baseUnitValue/1e5) / 1e6d;
                case PressureUnit.MeganewtonPerSquareMeter: return (baseUnitValue) / 1e6d;
                case PressureUnit.Megapascal: return (baseUnitValue) / 1e6d;
                case PressureUnit.MeterOfHead: return baseUnitValue*0.0001019977334;
                case PressureUnit.Microbar: return (baseUnitValue/1e5) / 1e-6d;
                case PressureUnit.Micropascal: return (baseUnitValue) / 1e-6d;
                case PressureUnit.Millibar: return (baseUnitValue/1e5) / 1e-3d;
                case PressureUnit.MillimeterOfMercury: return baseUnitValue*7.50061561302643e-3;
                case PressureUnit.Millipascal: return (baseUnitValue) / 1e-3d;
                case PressureUnit.NewtonPerSquareCentimeter: return baseUnitValue/1e4;
                case PressureUnit.NewtonPerSquareMeter: return baseUnitValue;
                case PressureUnit.NewtonPerSquareMillimeter: return baseUnitValue/1e6;
                case PressureUnit.Pascal: return baseUnitValue;
                case PressureUnit.PoundForcePerSquareFoot: return baseUnitValue/4.788025898033584e1;
                case PressureUnit.PoundForcePerSquareInch: return baseUnitValue/6.894757293168361e3;
                case PressureUnit.PoundPerInchSecondSquared: return baseUnitValue/1.785796732283465e1;
                case PressureUnit.TechnicalAtmosphere: return baseUnitValue/(9.80680592331*1e4);
                case PressureUnit.TonneForcePerSquareCentimeter: return baseUnitValue/9.80665e7;
                case PressureUnit.TonneForcePerSquareMeter: return baseUnitValue/9.80665e3;
                case PressureUnit.TonneForcePerSquareMillimeter: return baseUnitValue/9.80665e9;
                case PressureUnit.Torr: return baseUnitValue/(1.3332266752*1e2);
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<PressureUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Pressure<T>)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Pressure<T>)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Pressure<T>)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Pressure<T>))
                return this;
            else if(conversionType == typeof(PressureUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Pressure<T>.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Pressure<T>.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Pressure<T>)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
