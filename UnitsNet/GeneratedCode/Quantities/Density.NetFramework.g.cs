//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct Density : IComparable, IComparable<Density>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerDeciLiter.
        /// </summary>
        public static Density? FromCentigramsPerDeciLiter(QuantityValue? centigramsperdeciliter)
        {
            return centigramsperdeciliter.HasValue ? FromCentigramsPerDeciLiter(centigramsperdeciliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerLiter.
        /// </summary>
        public static Density? FromCentigramsPerLiter(QuantityValue? centigramsperliter)
        {
            return centigramsperliter.HasValue ? FromCentigramsPerLiter(centigramsperliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerMilliliter.
        /// </summary>
        public static Density? FromCentigramsPerMilliliter(QuantityValue? centigramspermilliliter)
        {
            return centigramspermilliliter.HasValue ? FromCentigramsPerMilliliter(centigramspermilliliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerDeciLiter.
        /// </summary>
        public static Density? FromDecigramsPerDeciLiter(QuantityValue? decigramsperdeciliter)
        {
            return decigramsperdeciliter.HasValue ? FromDecigramsPerDeciLiter(decigramsperdeciliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerLiter.
        /// </summary>
        public static Density? FromDecigramsPerLiter(QuantityValue? decigramsperliter)
        {
            return decigramsperliter.HasValue ? FromDecigramsPerLiter(decigramsperliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerMilliliter.
        /// </summary>
        public static Density? FromDecigramsPerMilliliter(QuantityValue? decigramspermilliliter)
        {
            return decigramspermilliliter.HasValue ? FromDecigramsPerMilliliter(decigramspermilliliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicCentimeter.
        /// </summary>
        public static Density? FromGramsPerCubicCentimeter(QuantityValue? gramspercubiccentimeter)
        {
            return gramspercubiccentimeter.HasValue ? FromGramsPerCubicCentimeter(gramspercubiccentimeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicMeter.
        /// </summary>
        public static Density? FromGramsPerCubicMeter(QuantityValue? gramspercubicmeter)
        {
            return gramspercubicmeter.HasValue ? FromGramsPerCubicMeter(gramspercubicmeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicMillimeter.
        /// </summary>
        public static Density? FromGramsPerCubicMillimeter(QuantityValue? gramspercubicmillimeter)
        {
            return gramspercubicmillimeter.HasValue ? FromGramsPerCubicMillimeter(gramspercubicmillimeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerDeciLiter.
        /// </summary>
        public static Density? FromGramsPerDeciLiter(QuantityValue? gramsperdeciliter)
        {
            return gramsperdeciliter.HasValue ? FromGramsPerDeciLiter(gramsperdeciliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerLiter.
        /// </summary>
        public static Density? FromGramsPerLiter(QuantityValue? gramsperliter)
        {
            return gramsperliter.HasValue ? FromGramsPerLiter(gramsperliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerMilliliter.
        /// </summary>
        public static Density? FromGramsPerMilliliter(QuantityValue? gramspermilliliter)
        {
            return gramspermilliliter.HasValue ? FromGramsPerMilliliter(gramspermilliliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicCentimeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicCentimeter(QuantityValue? kilogramspercubiccentimeter)
        {
            return kilogramspercubiccentimeter.HasValue ? FromKilogramsPerCubicCentimeter(kilogramspercubiccentimeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicMeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicMeter(QuantityValue? kilogramspercubicmeter)
        {
            return kilogramspercubicmeter.HasValue ? FromKilogramsPerCubicMeter(kilogramspercubicmeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicMillimeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicMillimeter(QuantityValue? kilogramspercubicmillimeter)
        {
            return kilogramspercubicmillimeter.HasValue ? FromKilogramsPerCubicMillimeter(kilogramspercubicmillimeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable KilopoundsPerCubicFoot.
        /// </summary>
        public static Density? FromKilopoundsPerCubicFoot(QuantityValue? kilopoundspercubicfoot)
        {
            return kilopoundspercubicfoot.HasValue ? FromKilopoundsPerCubicFoot(kilopoundspercubicfoot.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable KilopoundsPerCubicInch.
        /// </summary>
        public static Density? FromKilopoundsPerCubicInch(QuantityValue? kilopoundspercubicinch)
        {
            return kilopoundspercubicinch.HasValue ? FromKilopoundsPerCubicInch(kilopoundspercubicinch.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerDeciLiter.
        /// </summary>
        public static Density? FromMicrogramsPerDeciLiter(QuantityValue? microgramsperdeciliter)
        {
            return microgramsperdeciliter.HasValue ? FromMicrogramsPerDeciLiter(microgramsperdeciliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerLiter.
        /// </summary>
        public static Density? FromMicrogramsPerLiter(QuantityValue? microgramsperliter)
        {
            return microgramsperliter.HasValue ? FromMicrogramsPerLiter(microgramsperliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerMilliliter.
        /// </summary>
        public static Density? FromMicrogramsPerMilliliter(QuantityValue? microgramspermilliliter)
        {
            return microgramspermilliliter.HasValue ? FromMicrogramsPerMilliliter(microgramspermilliliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerCubicMeter.
        /// </summary>
        public static Density? FromMilligramsPerCubicMeter(QuantityValue? milligramspercubicmeter)
        {
            return milligramspercubicmeter.HasValue ? FromMilligramsPerCubicMeter(milligramspercubicmeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerDeciLiter.
        /// </summary>
        public static Density? FromMilligramsPerDeciLiter(QuantityValue? milligramsperdeciliter)
        {
            return milligramsperdeciliter.HasValue ? FromMilligramsPerDeciLiter(milligramsperdeciliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerLiter.
        /// </summary>
        public static Density? FromMilligramsPerLiter(QuantityValue? milligramsperliter)
        {
            return milligramsperliter.HasValue ? FromMilligramsPerLiter(milligramsperliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerMilliliter.
        /// </summary>
        public static Density? FromMilligramsPerMilliliter(QuantityValue? milligramspermilliliter)
        {
            return milligramspermilliliter.HasValue ? FromMilligramsPerMilliliter(milligramspermilliliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerDeciLiter.
        /// </summary>
        public static Density? FromNanogramsPerDeciLiter(QuantityValue? nanogramsperdeciliter)
        {
            return nanogramsperdeciliter.HasValue ? FromNanogramsPerDeciLiter(nanogramsperdeciliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerLiter.
        /// </summary>
        public static Density? FromNanogramsPerLiter(QuantityValue? nanogramsperliter)
        {
            return nanogramsperliter.HasValue ? FromNanogramsPerLiter(nanogramsperliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerMilliliter.
        /// </summary>
        public static Density? FromNanogramsPerMilliliter(QuantityValue? nanogramspermilliliter)
        {
            return nanogramspermilliliter.HasValue ? FromNanogramsPerMilliliter(nanogramspermilliliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerDeciLiter.
        /// </summary>
        public static Density? FromPicogramsPerDeciLiter(QuantityValue? picogramsperdeciliter)
        {
            return picogramsperdeciliter.HasValue ? FromPicogramsPerDeciLiter(picogramsperdeciliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerLiter.
        /// </summary>
        public static Density? FromPicogramsPerLiter(QuantityValue? picogramsperliter)
        {
            return picogramsperliter.HasValue ? FromPicogramsPerLiter(picogramsperliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerMilliliter.
        /// </summary>
        public static Density? FromPicogramsPerMilliliter(QuantityValue? picogramspermilliliter)
        {
            return picogramspermilliliter.HasValue ? FromPicogramsPerMilliliter(picogramspermilliliter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerCubicFoot.
        /// </summary>
        public static Density? FromPoundsPerCubicFoot(QuantityValue? poundspercubicfoot)
        {
            return poundspercubicfoot.HasValue ? FromPoundsPerCubicFoot(poundspercubicfoot.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerCubicInch.
        /// </summary>
        public static Density? FromPoundsPerCubicInch(QuantityValue? poundspercubicinch)
        {
            return poundspercubicinch.HasValue ? FromPoundsPerCubicInch(poundspercubicinch.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerImperialGallon.
        /// </summary>
        public static Density? FromPoundsPerImperialGallon(QuantityValue? poundsperimperialgallon)
        {
            return poundsperimperialgallon.HasValue ? FromPoundsPerImperialGallon(poundsperimperialgallon.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerUSGallon.
        /// </summary>
        public static Density? FromPoundsPerUSGallon(QuantityValue? poundsperusgallon)
        {
            return poundsperusgallon.HasValue ? FromPoundsPerUSGallon(poundsperusgallon.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable SlugsPerCubicFoot.
        /// </summary>
        public static Density? FromSlugsPerCubicFoot(QuantityValue? slugspercubicfoot)
        {
            return slugspercubicfoot.HasValue ? FromSlugsPerCubicFoot(slugspercubicfoot.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicCentimeter.
        /// </summary>
        public static Density? FromTonnesPerCubicCentimeter(QuantityValue? tonnespercubiccentimeter)
        {
            return tonnespercubiccentimeter.HasValue ? FromTonnesPerCubicCentimeter(tonnespercubiccentimeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicMeter.
        /// </summary>
        public static Density? FromTonnesPerCubicMeter(QuantityValue? tonnespercubicmeter)
        {
            return tonnespercubicmeter.HasValue ? FromTonnesPerCubicMeter(tonnespercubicmeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicMillimeter.
        /// </summary>
        public static Density? FromTonnesPerCubicMillimeter(QuantityValue? tonnespercubicmillimeter)
        {
            return tonnespercubicmillimeter.HasValue ? FromTonnesPerCubicMillimeter(tonnespercubicmillimeter.Value) : default(Density?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        public static Density? From(QuantityValue? value, DensityUnit fromUnit)
        {
            return value.HasValue ? new Density((double)value.Value, fromUnit) : default(Density?);
        }

        #endregion

        #region Arithmetic Operators

        public static Density operator -(Density right)
        {
            return new Density(-right.Value, right.Unit);
        }

        public static Density operator +(Density left, Density right)
        {
            return new Density(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Density operator -(Density left, Density right)
        {
            return new Density(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Density operator *(double left, Density right)
        {
            return new Density(left * right.Value, right.Unit);
        }

        public static Density operator *(Density left, double right)
        {
            return new Density(left.Value * right, left.Unit);
        }

        public static Density operator /(Density left, double right)
        {
            return new Density(left.Value / right, left.Unit);
        }

        public static double operator /(Density left, Density right)
        {
            return left.KilogramsPerCubicMeter / right.KilogramsPerCubicMeter;
        }

        #endregion

        public static bool operator <=(Density left, Density right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Density left, Density right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Density left, Density right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Density left, Density right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Density left, Density right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Density left, Density right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.Parse<Density, DensityUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    DensityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromKilogramsPerCubicMeter(x.KilogramsPerCubicMeter + y.KilogramsPerCubicMeter));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Density result)
        {
            provider = provider ?? UnitSystem.DefaultCulture;

            try
            {
                result = Parse(str, provider);
                return true;
            }
            catch
            {
                result = default(Density);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<DensityUnit>(str.Trim());

            if (unit == DensityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized DensityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <returns>String representation.</returns>
        public string ToString(DensityUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return ToString(unit, provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(DensityUnit unit, [CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(DensityUnit unit, [CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? UnitSystem.DefaultCulture;

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion
    }
}
