//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     An electric current is a flow of electric charge. In electric circuits this charge is often carried by moving electrons in a wire. It can also be carried by ions in an electrolyte, or by both ions and electrons such as in a plasma.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct ElectricCurrent : IComparable, IComparable<ElectricCurrent>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable ElectricCurrent from nullable Amperes.
        /// </summary>
        public static ElectricCurrent? FromAmperes(QuantityValue? amperes)
        {
            return amperes.HasValue ? FromAmperes(amperes.Value) : default(ElectricCurrent?);
        }

        /// <summary>
        ///     Get nullable ElectricCurrent from nullable Kiloamperes.
        /// </summary>
        public static ElectricCurrent? FromKiloamperes(QuantityValue? kiloamperes)
        {
            return kiloamperes.HasValue ? FromKiloamperes(kiloamperes.Value) : default(ElectricCurrent?);
        }

        /// <summary>
        ///     Get nullable ElectricCurrent from nullable Megaamperes.
        /// </summary>
        public static ElectricCurrent? FromMegaamperes(QuantityValue? megaamperes)
        {
            return megaamperes.HasValue ? FromMegaamperes(megaamperes.Value) : default(ElectricCurrent?);
        }

        /// <summary>
        ///     Get nullable ElectricCurrent from nullable Microamperes.
        /// </summary>
        public static ElectricCurrent? FromMicroamperes(QuantityValue? microamperes)
        {
            return microamperes.HasValue ? FromMicroamperes(microamperes.Value) : default(ElectricCurrent?);
        }

        /// <summary>
        ///     Get nullable ElectricCurrent from nullable Milliamperes.
        /// </summary>
        public static ElectricCurrent? FromMilliamperes(QuantityValue? milliamperes)
        {
            return milliamperes.HasValue ? FromMilliamperes(milliamperes.Value) : default(ElectricCurrent?);
        }

        /// <summary>
        ///     Get nullable ElectricCurrent from nullable Nanoamperes.
        /// </summary>
        public static ElectricCurrent? FromNanoamperes(QuantityValue? nanoamperes)
        {
            return nanoamperes.HasValue ? FromNanoamperes(nanoamperes.Value) : default(ElectricCurrent?);
        }

        /// <summary>
        ///     Get nullable ElectricCurrent from nullable Picoamperes.
        /// </summary>
        public static ElectricCurrent? FromPicoamperes(QuantityValue? picoamperes)
        {
            return picoamperes.HasValue ? FromPicoamperes(picoamperes.Value) : default(ElectricCurrent?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricCurrentUnit" /> to <see cref="ElectricCurrent" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricCurrent unit value.</returns>
        public static ElectricCurrent? From(QuantityValue? value, ElectricCurrentUnit fromUnit)
        {
            return value.HasValue ? new ElectricCurrent((double)value.Value, fromUnit) : default(ElectricCurrent?);
        }

        #endregion

        #region Arithmetic Operators

        public static ElectricCurrent operator -(ElectricCurrent right)
        {
            return new ElectricCurrent(-right.Value, right.Unit);
        }

        public static ElectricCurrent operator +(ElectricCurrent left, ElectricCurrent right)
        {
            return new ElectricCurrent(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static ElectricCurrent operator -(ElectricCurrent left, ElectricCurrent right)
        {
            return new ElectricCurrent(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static ElectricCurrent operator *(double left, ElectricCurrent right)
        {
            return new ElectricCurrent(left * right.Value, right.Unit);
        }

        public static ElectricCurrent operator *(ElectricCurrent left, double right)
        {
            return new ElectricCurrent(left.Value * right, left.Unit);
        }

        public static ElectricCurrent operator /(ElectricCurrent left, double right)
        {
            return new ElectricCurrent(left.Value / right, left.Unit);
        }

        public static double operator /(ElectricCurrent left, ElectricCurrent right)
        {
            return left.Amperes / right.Amperes;
        }

        #endregion

        public static bool operator <=(ElectricCurrent left, ElectricCurrent right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(ElectricCurrent left, ElectricCurrent right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(ElectricCurrent left, ElectricCurrent right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(ElectricCurrent left, ElectricCurrent right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(ElectricCurrent left, ElectricCurrent right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(ElectricCurrent left, ElectricCurrent right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
    }
}
