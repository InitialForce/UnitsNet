//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Torque
#else
    public partial struct Torque : IComparable, IComparable<Torque>
#endif
    {
        /// <summary>
        ///     Base unit of Torque.
        /// </summary>
        private readonly double _newtonMeters;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Torque() : this(0)
        {
        }
#endif

        public Torque(double newtonmeters)
        {
            _newtonMeters = Convert.ToDouble(newtonmeters);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        Torque(long newtonmeters)
        {
            _newtonMeters = Convert.ToDouble(newtonmeters);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        Torque(decimal newtonmeters)
        {
            _newtonMeters = Convert.ToDouble(newtonmeters);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Torque;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static TorqueUnit BaseUnit
        {
            get { return TorqueUnit.NewtonMeter; }
        }

        /// <summary>
        ///     All units of measurement for the Torque quantity.
        /// </summary>
        public static TorqueUnit[] Units { get; } = Enum.GetValues(typeof(TorqueUnit)).Cast<TorqueUnit>().ToArray();

        /// <summary>
        ///     Get Torque in KilogramForceCentimeters.
        /// </summary>
        public double KilogramForceCentimeters
        {
            get { return _newtonMeters*10.1971619222242; }
        }

        /// <summary>
        ///     Get Torque in KilogramForceMeters.
        /// </summary>
        public double KilogramForceMeters
        {
            get { return _newtonMeters*0.101971619222242; }
        }

        /// <summary>
        ///     Get Torque in KilogramForceMillimeters.
        /// </summary>
        public double KilogramForceMillimeters
        {
            get { return _newtonMeters*101.971619222242; }
        }

        /// <summary>
        ///     Get Torque in KilonewtonCentimeters.
        /// </summary>
        public double KilonewtonCentimeters
        {
            get { return (_newtonMeters*100) / 1e3d; }
        }

        /// <summary>
        ///     Get Torque in KilonewtonMeters.
        /// </summary>
        public double KilonewtonMeters
        {
            get { return (_newtonMeters) / 1e3d; }
        }

        /// <summary>
        ///     Get Torque in KilonewtonMillimeters.
        /// </summary>
        public double KilonewtonMillimeters
        {
            get { return (_newtonMeters*1000) / 1e3d; }
        }

        /// <summary>
        ///     Get Torque in KilopoundForceFeet.
        /// </summary>
        public double KilopoundForceFeet
        {
            get { return (_newtonMeters*0.737562085483396) / 1e3d; }
        }

        /// <summary>
        ///     Get Torque in KilopoundForceInches.
        /// </summary>
        public double KilopoundForceInches
        {
            get { return (_newtonMeters*8.85074502580075) / 1e3d; }
        }

        /// <summary>
        ///     Get Torque in NewtonCentimeters.
        /// </summary>
        public double NewtonCentimeters
        {
            get { return _newtonMeters*100; }
        }

        /// <summary>
        ///     Get Torque in NewtonMeters.
        /// </summary>
        public double NewtonMeters
        {
            get { return _newtonMeters; }
        }

        /// <summary>
        ///     Get Torque in NewtonMillimeters.
        /// </summary>
        public double NewtonMillimeters
        {
            get { return _newtonMeters*1000; }
        }

        /// <summary>
        ///     Get Torque in PoundForceFeet.
        /// </summary>
        public double PoundForceFeet
        {
            get { return _newtonMeters*0.737562085483396; }
        }

        /// <summary>
        ///     Get Torque in PoundForceInches.
        /// </summary>
        public double PoundForceInches
        {
            get { return _newtonMeters*8.85074502580075; }
        }

        /// <summary>
        ///     Get Torque in TonneForceCentimeters.
        /// </summary>
        public double TonneForceCentimeters
        {
            get { return _newtonMeters*0.0101971619222242; }
        }

        /// <summary>
        ///     Get Torque in TonneForceMeters.
        /// </summary>
        public double TonneForceMeters
        {
            get { return _newtonMeters*0.000101971619222242; }
        }

        /// <summary>
        ///     Get Torque in TonneForceMillimeters.
        /// </summary>
        public double TonneForceMillimeters
        {
            get { return _newtonMeters*0.101971619222242; }
        }

        #endregion

        #region Static

        public static Torque Zero
        {
            get { return new Torque(); }
        }

        /// <summary>
        ///     Get Torque from KilogramForceCentimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilogramForceCentimeters(double kilogramforcecentimeters)
        {
            return new Torque(kilogramforcecentimeters*0.0980665019960652);
        }

        /// <summary>
        ///     Get Torque from KilogramForceCentimeters.
        /// </summary>
        public static Torque FromKilogramForceCentimeters(int kilogramforcecentimeters)
        {
            return new Torque(kilogramforcecentimeters*0.0980665019960652);
        }

        /// <summary>
        ///     Get Torque from KilogramForceCentimeters.
        /// </summary>
        public static Torque FromKilogramForceCentimeters(long kilogramforcecentimeters)
        {
            return new Torque(kilogramforcecentimeters*0.0980665019960652);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilogramForceCentimeters of type decimal.
        /// </summary>
        public static Torque FromKilogramForceCentimeters(decimal kilogramforcecentimeters)
        {
            return new Torque(Convert.ToDouble(kilogramforcecentimeters)*0.0980665019960652);
        }
#endif

        /// <summary>
        ///     Get Torque from KilogramForceMeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilogramForceMeters(double kilogramforcemeters)
        {
            return new Torque(kilogramforcemeters*9.80665019960652);
        }

        /// <summary>
        ///     Get Torque from KilogramForceMeters.
        /// </summary>
        public static Torque FromKilogramForceMeters(int kilogramforcemeters)
        {
            return new Torque(kilogramforcemeters*9.80665019960652);
        }

        /// <summary>
        ///     Get Torque from KilogramForceMeters.
        /// </summary>
        public static Torque FromKilogramForceMeters(long kilogramforcemeters)
        {
            return new Torque(kilogramforcemeters*9.80665019960652);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilogramForceMeters of type decimal.
        /// </summary>
        public static Torque FromKilogramForceMeters(decimal kilogramforcemeters)
        {
            return new Torque(Convert.ToDouble(kilogramforcemeters)*9.80665019960652);
        }
#endif

        /// <summary>
        ///     Get Torque from KilogramForceMillimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilogramForceMillimeters(double kilogramforcemillimeters)
        {
            return new Torque(kilogramforcemillimeters*0.00980665019960652);
        }

        /// <summary>
        ///     Get Torque from KilogramForceMillimeters.
        /// </summary>
        public static Torque FromKilogramForceMillimeters(int kilogramforcemillimeters)
        {
            return new Torque(kilogramforcemillimeters*0.00980665019960652);
        }

        /// <summary>
        ///     Get Torque from KilogramForceMillimeters.
        /// </summary>
        public static Torque FromKilogramForceMillimeters(long kilogramforcemillimeters)
        {
            return new Torque(kilogramforcemillimeters*0.00980665019960652);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilogramForceMillimeters of type decimal.
        /// </summary>
        public static Torque FromKilogramForceMillimeters(decimal kilogramforcemillimeters)
        {
            return new Torque(Convert.ToDouble(kilogramforcemillimeters)*0.00980665019960652);
        }
#endif

        /// <summary>
        ///     Get Torque from KilonewtonCentimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilonewtonCentimeters(double kilonewtoncentimeters)
        {
            return new Torque((kilonewtoncentimeters*0.01) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilonewtonCentimeters.
        /// </summary>
        public static Torque FromKilonewtonCentimeters(int kilonewtoncentimeters)
        {
            return new Torque((kilonewtoncentimeters*0.01) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilonewtonCentimeters.
        /// </summary>
        public static Torque FromKilonewtonCentimeters(long kilonewtoncentimeters)
        {
            return new Torque((kilonewtoncentimeters*0.01) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilonewtonCentimeters of type decimal.
        /// </summary>
        public static Torque FromKilonewtonCentimeters(decimal kilonewtoncentimeters)
        {
            return new Torque((Convert.ToDouble(kilonewtoncentimeters)*0.01) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Torque from KilonewtonMeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilonewtonMeters(double kilonewtonmeters)
        {
            return new Torque((kilonewtonmeters) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilonewtonMeters.
        /// </summary>
        public static Torque FromKilonewtonMeters(int kilonewtonmeters)
        {
            return new Torque((kilonewtonmeters) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilonewtonMeters.
        /// </summary>
        public static Torque FromKilonewtonMeters(long kilonewtonmeters)
        {
            return new Torque((kilonewtonmeters) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilonewtonMeters of type decimal.
        /// </summary>
        public static Torque FromKilonewtonMeters(decimal kilonewtonmeters)
        {
            return new Torque((Convert.ToDouble(kilonewtonmeters)) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Torque from KilonewtonMillimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilonewtonMillimeters(double kilonewtonmillimeters)
        {
            return new Torque((kilonewtonmillimeters*0.001) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilonewtonMillimeters.
        /// </summary>
        public static Torque FromKilonewtonMillimeters(int kilonewtonmillimeters)
        {
            return new Torque((kilonewtonmillimeters*0.001) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilonewtonMillimeters.
        /// </summary>
        public static Torque FromKilonewtonMillimeters(long kilonewtonmillimeters)
        {
            return new Torque((kilonewtonmillimeters*0.001) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilonewtonMillimeters of type decimal.
        /// </summary>
        public static Torque FromKilonewtonMillimeters(decimal kilonewtonmillimeters)
        {
            return new Torque((Convert.ToDouble(kilonewtonmillimeters)*0.001) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Torque from KilopoundForceFeet.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilopoundForceFeet(double kilopoundforcefeet)
        {
            return new Torque((kilopoundforcefeet*1.3558180656) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilopoundForceFeet.
        /// </summary>
        public static Torque FromKilopoundForceFeet(int kilopoundforcefeet)
        {
            return new Torque((kilopoundforcefeet*1.3558180656) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilopoundForceFeet.
        /// </summary>
        public static Torque FromKilopoundForceFeet(long kilopoundforcefeet)
        {
            return new Torque((kilopoundforcefeet*1.3558180656) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilopoundForceFeet of type decimal.
        /// </summary>
        public static Torque FromKilopoundForceFeet(decimal kilopoundforcefeet)
        {
            return new Torque((Convert.ToDouble(kilopoundforcefeet)*1.3558180656) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Torque from KilopoundForceInches.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromKilopoundForceInches(double kilopoundforceinches)
        {
            return new Torque((kilopoundforceinches*0.1129848388) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilopoundForceInches.
        /// </summary>
        public static Torque FromKilopoundForceInches(int kilopoundforceinches)
        {
            return new Torque((kilopoundforceinches*0.1129848388) * 1e3d);
        }

        /// <summary>
        ///     Get Torque from KilopoundForceInches.
        /// </summary>
        public static Torque FromKilopoundForceInches(long kilopoundforceinches)
        {
            return new Torque((kilopoundforceinches*0.1129848388) * 1e3d);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from KilopoundForceInches of type decimal.
        /// </summary>
        public static Torque FromKilopoundForceInches(decimal kilopoundforceinches)
        {
            return new Torque((Convert.ToDouble(kilopoundforceinches)*0.1129848388) * 1e3d);
        }
#endif

        /// <summary>
        ///     Get Torque from NewtonCentimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromNewtonCentimeters(double newtoncentimeters)
        {
            return new Torque(newtoncentimeters*0.01);
        }

        /// <summary>
        ///     Get Torque from NewtonCentimeters.
        /// </summary>
        public static Torque FromNewtonCentimeters(int newtoncentimeters)
        {
            return new Torque(newtoncentimeters*0.01);
        }

        /// <summary>
        ///     Get Torque from NewtonCentimeters.
        /// </summary>
        public static Torque FromNewtonCentimeters(long newtoncentimeters)
        {
            return new Torque(newtoncentimeters*0.01);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from NewtonCentimeters of type decimal.
        /// </summary>
        public static Torque FromNewtonCentimeters(decimal newtoncentimeters)
        {
            return new Torque(Convert.ToDouble(newtoncentimeters)*0.01);
        }
#endif

        /// <summary>
        ///     Get Torque from NewtonMeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromNewtonMeters(double newtonmeters)
        {
            return new Torque(newtonmeters);
        }

        /// <summary>
        ///     Get Torque from NewtonMeters.
        /// </summary>
        public static Torque FromNewtonMeters(int newtonmeters)
        {
            return new Torque(newtonmeters);
        }

        /// <summary>
        ///     Get Torque from NewtonMeters.
        /// </summary>
        public static Torque FromNewtonMeters(long newtonmeters)
        {
            return new Torque(newtonmeters);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from NewtonMeters of type decimal.
        /// </summary>
        public static Torque FromNewtonMeters(decimal newtonmeters)
        {
            return new Torque(Convert.ToDouble(newtonmeters));
        }
#endif

        /// <summary>
        ///     Get Torque from NewtonMillimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromNewtonMillimeters(double newtonmillimeters)
        {
            return new Torque(newtonmillimeters*0.001);
        }

        /// <summary>
        ///     Get Torque from NewtonMillimeters.
        /// </summary>
        public static Torque FromNewtonMillimeters(int newtonmillimeters)
        {
            return new Torque(newtonmillimeters*0.001);
        }

        /// <summary>
        ///     Get Torque from NewtonMillimeters.
        /// </summary>
        public static Torque FromNewtonMillimeters(long newtonmillimeters)
        {
            return new Torque(newtonmillimeters*0.001);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from NewtonMillimeters of type decimal.
        /// </summary>
        public static Torque FromNewtonMillimeters(decimal newtonmillimeters)
        {
            return new Torque(Convert.ToDouble(newtonmillimeters)*0.001);
        }
#endif

        /// <summary>
        ///     Get Torque from PoundForceFeet.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromPoundForceFeet(double poundforcefeet)
        {
            return new Torque(poundforcefeet*1.3558180656);
        }

        /// <summary>
        ///     Get Torque from PoundForceFeet.
        /// </summary>
        public static Torque FromPoundForceFeet(int poundforcefeet)
        {
            return new Torque(poundforcefeet*1.3558180656);
        }

        /// <summary>
        ///     Get Torque from PoundForceFeet.
        /// </summary>
        public static Torque FromPoundForceFeet(long poundforcefeet)
        {
            return new Torque(poundforcefeet*1.3558180656);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from PoundForceFeet of type decimal.
        /// </summary>
        public static Torque FromPoundForceFeet(decimal poundforcefeet)
        {
            return new Torque(Convert.ToDouble(poundforcefeet)*1.3558180656);
        }
#endif

        /// <summary>
        ///     Get Torque from PoundForceInches.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromPoundForceInches(double poundforceinches)
        {
            return new Torque(poundforceinches*0.1129848388);
        }

        /// <summary>
        ///     Get Torque from PoundForceInches.
        /// </summary>
        public static Torque FromPoundForceInches(int poundforceinches)
        {
            return new Torque(poundforceinches*0.1129848388);
        }

        /// <summary>
        ///     Get Torque from PoundForceInches.
        /// </summary>
        public static Torque FromPoundForceInches(long poundforceinches)
        {
            return new Torque(poundforceinches*0.1129848388);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from PoundForceInches of type decimal.
        /// </summary>
        public static Torque FromPoundForceInches(decimal poundforceinches)
        {
            return new Torque(Convert.ToDouble(poundforceinches)*0.1129848388);
        }
#endif

        /// <summary>
        ///     Get Torque from TonneForceCentimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromTonneForceCentimeters(double tonneforcecentimeters)
        {
            return new Torque(tonneforcecentimeters*98.0665019960652);
        }

        /// <summary>
        ///     Get Torque from TonneForceCentimeters.
        /// </summary>
        public static Torque FromTonneForceCentimeters(int tonneforcecentimeters)
        {
            return new Torque(tonneforcecentimeters*98.0665019960652);
        }

        /// <summary>
        ///     Get Torque from TonneForceCentimeters.
        /// </summary>
        public static Torque FromTonneForceCentimeters(long tonneforcecentimeters)
        {
            return new Torque(tonneforcecentimeters*98.0665019960652);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from TonneForceCentimeters of type decimal.
        /// </summary>
        public static Torque FromTonneForceCentimeters(decimal tonneforcecentimeters)
        {
            return new Torque(Convert.ToDouble(tonneforcecentimeters)*98.0665019960652);
        }
#endif

        /// <summary>
        ///     Get Torque from TonneForceMeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromTonneForceMeters(double tonneforcemeters)
        {
            return new Torque(tonneforcemeters*9806.65019960653);
        }

        /// <summary>
        ///     Get Torque from TonneForceMeters.
        /// </summary>
        public static Torque FromTonneForceMeters(int tonneforcemeters)
        {
            return new Torque(tonneforcemeters*9806.65019960653);
        }

        /// <summary>
        ///     Get Torque from TonneForceMeters.
        /// </summary>
        public static Torque FromTonneForceMeters(long tonneforcemeters)
        {
            return new Torque(tonneforcemeters*9806.65019960653);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from TonneForceMeters of type decimal.
        /// </summary>
        public static Torque FromTonneForceMeters(decimal tonneforcemeters)
        {
            return new Torque(Convert.ToDouble(tonneforcemeters)*9806.65019960653);
        }
#endif

        /// <summary>
        ///     Get Torque from TonneForceMillimeters.
        /// </summary>
#if NETFX_CORE
        [Windows.Foundation.Metadata.DefaultOverload]
#endif
        public static Torque FromTonneForceMillimeters(double tonneforcemillimeters)
        {
            return new Torque(tonneforcemillimeters*9.80665019960652);
        }

        /// <summary>
        ///     Get Torque from TonneForceMillimeters.
        /// </summary>
        public static Torque FromTonneForceMillimeters(int tonneforcemillimeters)
        {
            return new Torque(tonneforcemillimeters*9.80665019960652);
        }

        /// <summary>
        ///     Get Torque from TonneForceMillimeters.
        /// </summary>
        public static Torque FromTonneForceMillimeters(long tonneforcemillimeters)
        {
            return new Torque(tonneforcemillimeters*9.80665019960652);
        }

        // Windows Runtime Component does not support decimal type
#if !WINDOWS_UWP
        /// <summary>
        ///     Get Torque from TonneForceMillimeters of type decimal.
        /// </summary>
        public static Torque FromTonneForceMillimeters(decimal tonneforcemillimeters)
        {
            return new Torque(Convert.ToDouble(tonneforcemillimeters)*9.80665019960652);
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceCentimeters.
        /// </summary>
        public static Torque? FromKilogramForceCentimeters(double? kilogramforcecentimeters)
        {
            if (kilogramforcecentimeters.HasValue)
            {
                return FromKilogramForceCentimeters(kilogramforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceCentimeters.
        /// </summary>
        public static Torque? FromKilogramForceCentimeters(int? kilogramforcecentimeters)
        {
            if (kilogramforcecentimeters.HasValue)
            {
                return FromKilogramForceCentimeters(kilogramforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceCentimeters.
        /// </summary>
        public static Torque? FromKilogramForceCentimeters(long? kilogramforcecentimeters)
        {
            if (kilogramforcecentimeters.HasValue)
            {
                return FromKilogramForceCentimeters(kilogramforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilogramForceCentimeters of type decimal.
        /// </summary>
        public static Torque? FromKilogramForceCentimeters(decimal? kilogramforcecentimeters)
        {
            if (kilogramforcecentimeters.HasValue)
            {
                return FromKilogramForceCentimeters(kilogramforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMeters.
        /// </summary>
        public static Torque? FromKilogramForceMeters(double? kilogramforcemeters)
        {
            if (kilogramforcemeters.HasValue)
            {
                return FromKilogramForceMeters(kilogramforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMeters.
        /// </summary>
        public static Torque? FromKilogramForceMeters(int? kilogramforcemeters)
        {
            if (kilogramforcemeters.HasValue)
            {
                return FromKilogramForceMeters(kilogramforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMeters.
        /// </summary>
        public static Torque? FromKilogramForceMeters(long? kilogramforcemeters)
        {
            if (kilogramforcemeters.HasValue)
            {
                return FromKilogramForceMeters(kilogramforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilogramForceMeters of type decimal.
        /// </summary>
        public static Torque? FromKilogramForceMeters(decimal? kilogramforcemeters)
        {
            if (kilogramforcemeters.HasValue)
            {
                return FromKilogramForceMeters(kilogramforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMillimeters.
        /// </summary>
        public static Torque? FromKilogramForceMillimeters(double? kilogramforcemillimeters)
        {
            if (kilogramforcemillimeters.HasValue)
            {
                return FromKilogramForceMillimeters(kilogramforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMillimeters.
        /// </summary>
        public static Torque? FromKilogramForceMillimeters(int? kilogramforcemillimeters)
        {
            if (kilogramforcemillimeters.HasValue)
            {
                return FromKilogramForceMillimeters(kilogramforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMillimeters.
        /// </summary>
        public static Torque? FromKilogramForceMillimeters(long? kilogramforcemillimeters)
        {
            if (kilogramforcemillimeters.HasValue)
            {
                return FromKilogramForceMillimeters(kilogramforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilogramForceMillimeters of type decimal.
        /// </summary>
        public static Torque? FromKilogramForceMillimeters(decimal? kilogramforcemillimeters)
        {
            if (kilogramforcemillimeters.HasValue)
            {
                return FromKilogramForceMillimeters(kilogramforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonCentimeters.
        /// </summary>
        public static Torque? FromKilonewtonCentimeters(double? kilonewtoncentimeters)
        {
            if (kilonewtoncentimeters.HasValue)
            {
                return FromKilonewtonCentimeters(kilonewtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonCentimeters.
        /// </summary>
        public static Torque? FromKilonewtonCentimeters(int? kilonewtoncentimeters)
        {
            if (kilonewtoncentimeters.HasValue)
            {
                return FromKilonewtonCentimeters(kilonewtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonCentimeters.
        /// </summary>
        public static Torque? FromKilonewtonCentimeters(long? kilonewtoncentimeters)
        {
            if (kilonewtoncentimeters.HasValue)
            {
                return FromKilonewtonCentimeters(kilonewtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilonewtonCentimeters of type decimal.
        /// </summary>
        public static Torque? FromKilonewtonCentimeters(decimal? kilonewtoncentimeters)
        {
            if (kilonewtoncentimeters.HasValue)
            {
                return FromKilonewtonCentimeters(kilonewtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMeters.
        /// </summary>
        public static Torque? FromKilonewtonMeters(double? kilonewtonmeters)
        {
            if (kilonewtonmeters.HasValue)
            {
                return FromKilonewtonMeters(kilonewtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMeters.
        /// </summary>
        public static Torque? FromKilonewtonMeters(int? kilonewtonmeters)
        {
            if (kilonewtonmeters.HasValue)
            {
                return FromKilonewtonMeters(kilonewtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMeters.
        /// </summary>
        public static Torque? FromKilonewtonMeters(long? kilonewtonmeters)
        {
            if (kilonewtonmeters.HasValue)
            {
                return FromKilonewtonMeters(kilonewtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilonewtonMeters of type decimal.
        /// </summary>
        public static Torque? FromKilonewtonMeters(decimal? kilonewtonmeters)
        {
            if (kilonewtonmeters.HasValue)
            {
                return FromKilonewtonMeters(kilonewtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMillimeters.
        /// </summary>
        public static Torque? FromKilonewtonMillimeters(double? kilonewtonmillimeters)
        {
            if (kilonewtonmillimeters.HasValue)
            {
                return FromKilonewtonMillimeters(kilonewtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMillimeters.
        /// </summary>
        public static Torque? FromKilonewtonMillimeters(int? kilonewtonmillimeters)
        {
            if (kilonewtonmillimeters.HasValue)
            {
                return FromKilonewtonMillimeters(kilonewtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMillimeters.
        /// </summary>
        public static Torque? FromKilonewtonMillimeters(long? kilonewtonmillimeters)
        {
            if (kilonewtonmillimeters.HasValue)
            {
                return FromKilonewtonMillimeters(kilonewtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilonewtonMillimeters of type decimal.
        /// </summary>
        public static Torque? FromKilonewtonMillimeters(decimal? kilonewtonmillimeters)
        {
            if (kilonewtonmillimeters.HasValue)
            {
                return FromKilonewtonMillimeters(kilonewtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceFeet.
        /// </summary>
        public static Torque? FromKilopoundForceFeet(double? kilopoundforcefeet)
        {
            if (kilopoundforcefeet.HasValue)
            {
                return FromKilopoundForceFeet(kilopoundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceFeet.
        /// </summary>
        public static Torque? FromKilopoundForceFeet(int? kilopoundforcefeet)
        {
            if (kilopoundforcefeet.HasValue)
            {
                return FromKilopoundForceFeet(kilopoundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceFeet.
        /// </summary>
        public static Torque? FromKilopoundForceFeet(long? kilopoundforcefeet)
        {
            if (kilopoundforcefeet.HasValue)
            {
                return FromKilopoundForceFeet(kilopoundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilopoundForceFeet of type decimal.
        /// </summary>
        public static Torque? FromKilopoundForceFeet(decimal? kilopoundforcefeet)
        {
            if (kilopoundforcefeet.HasValue)
            {
                return FromKilopoundForceFeet(kilopoundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceInches.
        /// </summary>
        public static Torque? FromKilopoundForceInches(double? kilopoundforceinches)
        {
            if (kilopoundforceinches.HasValue)
            {
                return FromKilopoundForceInches(kilopoundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceInches.
        /// </summary>
        public static Torque? FromKilopoundForceInches(int? kilopoundforceinches)
        {
            if (kilopoundforceinches.HasValue)
            {
                return FromKilopoundForceInches(kilopoundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceInches.
        /// </summary>
        public static Torque? FromKilopoundForceInches(long? kilopoundforceinches)
        {
            if (kilopoundforceinches.HasValue)
            {
                return FromKilopoundForceInches(kilopoundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from KilopoundForceInches of type decimal.
        /// </summary>
        public static Torque? FromKilopoundForceInches(decimal? kilopoundforceinches)
        {
            if (kilopoundforceinches.HasValue)
            {
                return FromKilopoundForceInches(kilopoundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonCentimeters.
        /// </summary>
        public static Torque? FromNewtonCentimeters(double? newtoncentimeters)
        {
            if (newtoncentimeters.HasValue)
            {
                return FromNewtonCentimeters(newtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonCentimeters.
        /// </summary>
        public static Torque? FromNewtonCentimeters(int? newtoncentimeters)
        {
            if (newtoncentimeters.HasValue)
            {
                return FromNewtonCentimeters(newtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonCentimeters.
        /// </summary>
        public static Torque? FromNewtonCentimeters(long? newtoncentimeters)
        {
            if (newtoncentimeters.HasValue)
            {
                return FromNewtonCentimeters(newtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from NewtonCentimeters of type decimal.
        /// </summary>
        public static Torque? FromNewtonCentimeters(decimal? newtoncentimeters)
        {
            if (newtoncentimeters.HasValue)
            {
                return FromNewtonCentimeters(newtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMeters.
        /// </summary>
        public static Torque? FromNewtonMeters(double? newtonmeters)
        {
            if (newtonmeters.HasValue)
            {
                return FromNewtonMeters(newtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMeters.
        /// </summary>
        public static Torque? FromNewtonMeters(int? newtonmeters)
        {
            if (newtonmeters.HasValue)
            {
                return FromNewtonMeters(newtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMeters.
        /// </summary>
        public static Torque? FromNewtonMeters(long? newtonmeters)
        {
            if (newtonmeters.HasValue)
            {
                return FromNewtonMeters(newtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from NewtonMeters of type decimal.
        /// </summary>
        public static Torque? FromNewtonMeters(decimal? newtonmeters)
        {
            if (newtonmeters.HasValue)
            {
                return FromNewtonMeters(newtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMillimeters.
        /// </summary>
        public static Torque? FromNewtonMillimeters(double? newtonmillimeters)
        {
            if (newtonmillimeters.HasValue)
            {
                return FromNewtonMillimeters(newtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMillimeters.
        /// </summary>
        public static Torque? FromNewtonMillimeters(int? newtonmillimeters)
        {
            if (newtonmillimeters.HasValue)
            {
                return FromNewtonMillimeters(newtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMillimeters.
        /// </summary>
        public static Torque? FromNewtonMillimeters(long? newtonmillimeters)
        {
            if (newtonmillimeters.HasValue)
            {
                return FromNewtonMillimeters(newtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from NewtonMillimeters of type decimal.
        /// </summary>
        public static Torque? FromNewtonMillimeters(decimal? newtonmillimeters)
        {
            if (newtonmillimeters.HasValue)
            {
                return FromNewtonMillimeters(newtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceFeet.
        /// </summary>
        public static Torque? FromPoundForceFeet(double? poundforcefeet)
        {
            if (poundforcefeet.HasValue)
            {
                return FromPoundForceFeet(poundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceFeet.
        /// </summary>
        public static Torque? FromPoundForceFeet(int? poundforcefeet)
        {
            if (poundforcefeet.HasValue)
            {
                return FromPoundForceFeet(poundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceFeet.
        /// </summary>
        public static Torque? FromPoundForceFeet(long? poundforcefeet)
        {
            if (poundforcefeet.HasValue)
            {
                return FromPoundForceFeet(poundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from PoundForceFeet of type decimal.
        /// </summary>
        public static Torque? FromPoundForceFeet(decimal? poundforcefeet)
        {
            if (poundforcefeet.HasValue)
            {
                return FromPoundForceFeet(poundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceInches.
        /// </summary>
        public static Torque? FromPoundForceInches(double? poundforceinches)
        {
            if (poundforceinches.HasValue)
            {
                return FromPoundForceInches(poundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceInches.
        /// </summary>
        public static Torque? FromPoundForceInches(int? poundforceinches)
        {
            if (poundforceinches.HasValue)
            {
                return FromPoundForceInches(poundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceInches.
        /// </summary>
        public static Torque? FromPoundForceInches(long? poundforceinches)
        {
            if (poundforceinches.HasValue)
            {
                return FromPoundForceInches(poundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from PoundForceInches of type decimal.
        /// </summary>
        public static Torque? FromPoundForceInches(decimal? poundforceinches)
        {
            if (poundforceinches.HasValue)
            {
                return FromPoundForceInches(poundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceCentimeters.
        /// </summary>
        public static Torque? FromTonneForceCentimeters(double? tonneforcecentimeters)
        {
            if (tonneforcecentimeters.HasValue)
            {
                return FromTonneForceCentimeters(tonneforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceCentimeters.
        /// </summary>
        public static Torque? FromTonneForceCentimeters(int? tonneforcecentimeters)
        {
            if (tonneforcecentimeters.HasValue)
            {
                return FromTonneForceCentimeters(tonneforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceCentimeters.
        /// </summary>
        public static Torque? FromTonneForceCentimeters(long? tonneforcecentimeters)
        {
            if (tonneforcecentimeters.HasValue)
            {
                return FromTonneForceCentimeters(tonneforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from TonneForceCentimeters of type decimal.
        /// </summary>
        public static Torque? FromTonneForceCentimeters(decimal? tonneforcecentimeters)
        {
            if (tonneforcecentimeters.HasValue)
            {
                return FromTonneForceCentimeters(tonneforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMeters.
        /// </summary>
        public static Torque? FromTonneForceMeters(double? tonneforcemeters)
        {
            if (tonneforcemeters.HasValue)
            {
                return FromTonneForceMeters(tonneforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMeters.
        /// </summary>
        public static Torque? FromTonneForceMeters(int? tonneforcemeters)
        {
            if (tonneforcemeters.HasValue)
            {
                return FromTonneForceMeters(tonneforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMeters.
        /// </summary>
        public static Torque? FromTonneForceMeters(long? tonneforcemeters)
        {
            if (tonneforcemeters.HasValue)
            {
                return FromTonneForceMeters(tonneforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from TonneForceMeters of type decimal.
        /// </summary>
        public static Torque? FromTonneForceMeters(decimal? tonneforcemeters)
        {
            if (tonneforcemeters.HasValue)
            {
                return FromTonneForceMeters(tonneforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMillimeters.
        /// </summary>
        public static Torque? FromTonneForceMillimeters(double? tonneforcemillimeters)
        {
            if (tonneforcemillimeters.HasValue)
            {
                return FromTonneForceMillimeters(tonneforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMillimeters.
        /// </summary>
        public static Torque? FromTonneForceMillimeters(int? tonneforcemillimeters)
        {
            if (tonneforcemillimeters.HasValue)
            {
                return FromTonneForceMillimeters(tonneforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMillimeters.
        /// </summary>
        public static Torque? FromTonneForceMillimeters(long? tonneforcemillimeters)
        {
            if (tonneforcemillimeters.HasValue)
            {
                return FromTonneForceMillimeters(tonneforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from TonneForceMillimeters of type decimal.
        /// </summary>
        public static Torque? FromTonneForceMillimeters(decimal? tonneforcemillimeters)
        {
            if (tonneforcemillimeters.HasValue)
            {
                return FromTonneForceMillimeters(tonneforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
        public static Torque From(double val, TorqueUnit fromUnit)
        {
            switch (fromUnit)
            {
                case TorqueUnit.KilogramForceCentimeter:
                    return FromKilogramForceCentimeters(val);
                case TorqueUnit.KilogramForceMeter:
                    return FromKilogramForceMeters(val);
                case TorqueUnit.KilogramForceMillimeter:
                    return FromKilogramForceMillimeters(val);
                case TorqueUnit.KilonewtonCentimeter:
                    return FromKilonewtonCentimeters(val);
                case TorqueUnit.KilonewtonMeter:
                    return FromKilonewtonMeters(val);
                case TorqueUnit.KilonewtonMillimeter:
                    return FromKilonewtonMillimeters(val);
                case TorqueUnit.KilopoundForceFoot:
                    return FromKilopoundForceFeet(val);
                case TorqueUnit.KilopoundForceInch:
                    return FromKilopoundForceInches(val);
                case TorqueUnit.NewtonCentimeter:
                    return FromNewtonCentimeters(val);
                case TorqueUnit.NewtonMeter:
                    return FromNewtonMeters(val);
                case TorqueUnit.NewtonMillimeter:
                    return FromNewtonMillimeters(val);
                case TorqueUnit.PoundForceFoot:
                    return FromPoundForceFeet(val);
                case TorqueUnit.PoundForceInch:
                    return FromPoundForceInches(val);
                case TorqueUnit.TonneForceCentimeter:
                    return FromTonneForceCentimeters(val);
                case TorqueUnit.TonneForceMeter:
                    return FromTonneForceMeters(val);
                case TorqueUnit.TonneForceMillimeter:
                    return FromTonneForceMillimeters(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
        public static Torque? From(double? value, TorqueUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case TorqueUnit.KilogramForceCentimeter:
                    return FromKilogramForceCentimeters(value.Value);
                case TorqueUnit.KilogramForceMeter:
                    return FromKilogramForceMeters(value.Value);
                case TorqueUnit.KilogramForceMillimeter:
                    return FromKilogramForceMillimeters(value.Value);
                case TorqueUnit.KilonewtonCentimeter:
                    return FromKilonewtonCentimeters(value.Value);
                case TorqueUnit.KilonewtonMeter:
                    return FromKilonewtonMeters(value.Value);
                case TorqueUnit.KilonewtonMillimeter:
                    return FromKilonewtonMillimeters(value.Value);
                case TorqueUnit.KilopoundForceFoot:
                    return FromKilopoundForceFeet(value.Value);
                case TorqueUnit.KilopoundForceInch:
                    return FromKilopoundForceInches(value.Value);
                case TorqueUnit.NewtonCentimeter:
                    return FromNewtonCentimeters(value.Value);
                case TorqueUnit.NewtonMeter:
                    return FromNewtonMeters(value.Value);
                case TorqueUnit.NewtonMillimeter:
                    return FromNewtonMillimeters(value.Value);
                case TorqueUnit.PoundForceFoot:
                    return FromPoundForceFeet(value.Value);
                case TorqueUnit.PoundForceInch:
                    return FromPoundForceInches(value.Value);
                case TorqueUnit.TonneForceCentimeter:
                    return FromTonneForceCentimeters(value.Value);
                case TorqueUnit.TonneForceMeter:
                    return FromTonneForceMeters(value.Value);
                case TorqueUnit.TonneForceMillimeter:
                    return FromTonneForceMillimeters(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(TorqueUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(TorqueUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Torque operator -(Torque right)
        {
            return new Torque(-right._newtonMeters);
        }

        public static Torque operator +(Torque left, Torque right)
        {
            return new Torque(left._newtonMeters + right._newtonMeters);
        }

        public static Torque operator -(Torque left, Torque right)
        {
            return new Torque(left._newtonMeters - right._newtonMeters);
        }

        public static Torque operator *(double left, Torque right)
        {
            return new Torque(left*right._newtonMeters);
        }

        public static Torque operator *(Torque left, double right)
        {
            return new Torque(left._newtonMeters*(double)right);
        }

        public static Torque operator /(Torque left, double right)
        {
            return new Torque(left._newtonMeters/(double)right);
        }

        public static double operator /(Torque left, Torque right)
        {
            return Convert.ToDouble(left._newtonMeters/right._newtonMeters);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Torque)) throw new ArgumentException("Expected type Torque.", "obj");
            return CompareTo((Torque) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Torque other)
        {
            return _newtonMeters.CompareTo(other._newtonMeters);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Torque left, Torque right)
        {
            return left._newtonMeters <= right._newtonMeters;
        }

        public static bool operator >=(Torque left, Torque right)
        {
            return left._newtonMeters >= right._newtonMeters;
        }

        public static bool operator <(Torque left, Torque right)
        {
            return left._newtonMeters < right._newtonMeters;
        }

        public static bool operator >(Torque left, Torque right)
        {
            return left._newtonMeters > right._newtonMeters;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Torque left, Torque right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._newtonMeters == right._newtonMeters;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Torque left, Torque right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._newtonMeters != right._newtonMeters;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _newtonMeters.Equals(((Torque) obj)._newtonMeters);
        }

        /// <summary>
        ///     Compare equality to another Torque by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Torque other, Torque maxError)
        {
            return Math.Abs(_newtonMeters - other._newtonMeters) <= maxError._newtonMeters;
        }

        public override int GetHashCode()
        {
            return _newtonMeters.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(TorqueUnit unit)
        {
            switch (unit)
            {
                case TorqueUnit.KilogramForceCentimeter:
                    return KilogramForceCentimeters;
                case TorqueUnit.KilogramForceMeter:
                    return KilogramForceMeters;
                case TorqueUnit.KilogramForceMillimeter:
                    return KilogramForceMillimeters;
                case TorqueUnit.KilonewtonCentimeter:
                    return KilonewtonCentimeters;
                case TorqueUnit.KilonewtonMeter:
                    return KilonewtonMeters;
                case TorqueUnit.KilonewtonMillimeter:
                    return KilonewtonMillimeters;
                case TorqueUnit.KilopoundForceFoot:
                    return KilopoundForceFeet;
                case TorqueUnit.KilopoundForceInch:
                    return KilopoundForceInches;
                case TorqueUnit.NewtonCentimeter:
                    return NewtonCentimeters;
                case TorqueUnit.NewtonMeter:
                    return NewtonMeters;
                case TorqueUnit.NewtonMillimeter:
                    return NewtonMillimeters;
                case TorqueUnit.PoundForceFoot:
                    return PoundForceFeet;
                case TorqueUnit.PoundForceInch:
                    return PoundForceInches;
                case TorqueUnit.TonneForceCentimeter:
                    return TonneForceCentimeters;
                case TorqueUnit.TonneForceMeter:
                    return TonneForceMeters;
                case TorqueUnit.TonneForceMillimeter:
                    return TonneForceMillimeters;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Torque Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Torque Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<Torque, TorqueUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    TorqueUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromNewtonMeters(x.NewtonMeters + y.NewtonMeters));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Torque result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Torque result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Torque);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorqueUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorqueUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static TorqueUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<TorqueUnit>(str.Trim());

            if (unit == TorqueUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized TorqueUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is NewtonMeter
        /// </summary>
        public static TorqueUnit ToStringDefaultUnit { get; set; } = TorqueUnit.NewtonMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(TorqueUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(TorqueUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(TorqueUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(TorqueUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Torque
        /// </summary>
        public static Torque MaxValue
        {
            get
            {
                return new Torque(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Torque
        /// </summary>
        public static Torque MinValue
        {
            get
            {
                return new Torque(double.MinValue);
            }
        }
    }
}
