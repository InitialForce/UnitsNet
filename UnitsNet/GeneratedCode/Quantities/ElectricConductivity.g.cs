//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Electrical conductivity is the measure of a material's ability to allow the transport of an electric charge.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class ElectricConductivity
#else
    public partial struct ElectricConductivity : IComparable, IComparable<ElectricConductivity>
#endif
    {
        /// <summary>
        ///     Base unit of ElectricConductivity.
        /// </summary>
        private readonly double _ohmsPerMeter;

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public ElectricConductivity() : this(0)
        {
        }
#endif

        public ElectricConductivity(double ohmspermeter)
        {
            _ohmsPerMeter = Convert.ToDouble(ohmspermeter);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        ElectricConductivity(long ohmspermeter)
        {
            _ohmsPerMeter = Convert.ToDouble(ohmspermeter);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        ElectricConductivity(decimal ohmspermeter)
        {
            _ohmsPerMeter = Convert.ToDouble(ohmspermeter);
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.ElectricConductivity;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static ElectricConductivityUnit BaseUnit
        {
            get { return ElectricConductivityUnit.OhmPerMeter; }
        }

        /// <summary>
        ///     All units of measurement for the ElectricConductivity quantity.
        /// </summary>
        public static ElectricConductivityUnit[] Units { get; } = Enum.GetValues(typeof(ElectricConductivityUnit)).Cast<ElectricConductivityUnit>().ToArray();

        /// <summary>
        ///     Get ElectricConductivity in KiloohmsPerCentimeter.
        /// </summary>
        public double KiloohmsPerCentimeter
        {
            get { return (_ohmsPerMeter/100) / 1e3d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in KiloohmsPerMeter.
        /// </summary>
        public double KiloohmsPerMeter
        {
            get { return (_ohmsPerMeter) / 1e3d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in MegaohmsPerCentimeter.
        /// </summary>
        public double MegaohmsPerCentimeter
        {
            get { return (_ohmsPerMeter/100) / 1e6d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in MegaohmsPerMeter.
        /// </summary>
        public double MegaohmsPerMeter
        {
            get { return (_ohmsPerMeter) / 1e6d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in MicroohmsPerCentimeter.
        /// </summary>
        public double MicroohmsPerCentimeter
        {
            get { return (_ohmsPerMeter/100) / 1e-6d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in MicroohmsPerMeter.
        /// </summary>
        public double MicroohmsPerMeter
        {
            get { return (_ohmsPerMeter) / 1e-6d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in MilliohmsPerCentimeter.
        /// </summary>
        public double MilliohmsPerCentimeter
        {
            get { return (_ohmsPerMeter/100) / 1e-3d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in MilliohmsPerMeter.
        /// </summary>
        public double MilliohmsPerMeter
        {
            get { return (_ohmsPerMeter) / 1e-3d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in NanoohmsPerCentimeter.
        /// </summary>
        public double NanoohmsPerCentimeter
        {
            get { return (_ohmsPerMeter/100) / 1e-9d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in NanoohmsPerMeter.
        /// </summary>
        public double NanoohmsPerMeter
        {
            get { return (_ohmsPerMeter) / 1e-9d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in OhmsPerCentimeter.
        /// </summary>
        public double OhmsPerCentimeter
        {
            get { return _ohmsPerMeter/100; }
        }

        /// <summary>
        ///     Get ElectricConductivity in OhmsPerMeter.
        /// </summary>
        public double OhmsPerMeter
        {
            get { return _ohmsPerMeter; }
        }

        /// <summary>
        ///     Get ElectricConductivity in PicoohmsPerCentimeter.
        /// </summary>
        public double PicoohmsPerCentimeter
        {
            get { return (_ohmsPerMeter/100) / 1e-12d; }
        }

        /// <summary>
        ///     Get ElectricConductivity in PicoohmsPerMeter.
        /// </summary>
        public double PicoohmsPerMeter
        {
            get { return (_ohmsPerMeter) / 1e-12d; }
        }

        #endregion

        #region Static

        public static ElectricConductivity Zero
        {
            get { return new ElectricConductivity(); }
        }

        /// <summary>
        ///     Get ElectricConductivity from KiloohmsPerCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKiloohmsPerCentimeter(double kiloohmspercentimeter)
        {
            double value = (double) kiloohmspercentimeter;
            return new ElectricConductivity((value*100) * 1e3d);
        }
#else
        public static ElectricConductivity FromKiloohmsPerCentimeter(QuantityValue kiloohmspercentimeter)
        {
            double value = (double) kiloohmspercentimeter;
            return new ElectricConductivity(((value*100) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from KiloohmsPerMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromKiloohmsPerMeter(double kiloohmspermeter)
        {
            double value = (double) kiloohmspermeter;
            return new ElectricConductivity((value) * 1e3d);
        }
#else
        public static ElectricConductivity FromKiloohmsPerMeter(QuantityValue kiloohmspermeter)
        {
            double value = (double) kiloohmspermeter;
            return new ElectricConductivity(((value) * 1e3d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from MegaohmsPerCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegaohmsPerCentimeter(double megaohmspercentimeter)
        {
            double value = (double) megaohmspercentimeter;
            return new ElectricConductivity((value*100) * 1e6d);
        }
#else
        public static ElectricConductivity FromMegaohmsPerCentimeter(QuantityValue megaohmspercentimeter)
        {
            double value = (double) megaohmspercentimeter;
            return new ElectricConductivity(((value*100) * 1e6d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from MegaohmsPerMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMegaohmsPerMeter(double megaohmspermeter)
        {
            double value = (double) megaohmspermeter;
            return new ElectricConductivity((value) * 1e6d);
        }
#else
        public static ElectricConductivity FromMegaohmsPerMeter(QuantityValue megaohmspermeter)
        {
            double value = (double) megaohmspermeter;
            return new ElectricConductivity(((value) * 1e6d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from MicroohmsPerCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicroohmsPerCentimeter(double microohmspercentimeter)
        {
            double value = (double) microohmspercentimeter;
            return new ElectricConductivity((value*100) * 1e-6d);
        }
#else
        public static ElectricConductivity FromMicroohmsPerCentimeter(QuantityValue microohmspercentimeter)
        {
            double value = (double) microohmspercentimeter;
            return new ElectricConductivity(((value*100) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from MicroohmsPerMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMicroohmsPerMeter(double microohmspermeter)
        {
            double value = (double) microohmspermeter;
            return new ElectricConductivity((value) * 1e-6d);
        }
#else
        public static ElectricConductivity FromMicroohmsPerMeter(QuantityValue microohmspermeter)
        {
            double value = (double) microohmspermeter;
            return new ElectricConductivity(((value) * 1e-6d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from MilliohmsPerCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMilliohmsPerCentimeter(double milliohmspercentimeter)
        {
            double value = (double) milliohmspercentimeter;
            return new ElectricConductivity((value*100) * 1e-3d);
        }
#else
        public static ElectricConductivity FromMilliohmsPerCentimeter(QuantityValue milliohmspercentimeter)
        {
            double value = (double) milliohmspercentimeter;
            return new ElectricConductivity(((value*100) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from MilliohmsPerMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromMilliohmsPerMeter(double milliohmspermeter)
        {
            double value = (double) milliohmspermeter;
            return new ElectricConductivity((value) * 1e-3d);
        }
#else
        public static ElectricConductivity FromMilliohmsPerMeter(QuantityValue milliohmspermeter)
        {
            double value = (double) milliohmspermeter;
            return new ElectricConductivity(((value) * 1e-3d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from NanoohmsPerCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanoohmsPerCentimeter(double nanoohmspercentimeter)
        {
            double value = (double) nanoohmspercentimeter;
            return new ElectricConductivity((value*100) * 1e-9d);
        }
#else
        public static ElectricConductivity FromNanoohmsPerCentimeter(QuantityValue nanoohmspercentimeter)
        {
            double value = (double) nanoohmspercentimeter;
            return new ElectricConductivity(((value*100) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from NanoohmsPerMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromNanoohmsPerMeter(double nanoohmspermeter)
        {
            double value = (double) nanoohmspermeter;
            return new ElectricConductivity((value) * 1e-9d);
        }
#else
        public static ElectricConductivity FromNanoohmsPerMeter(QuantityValue nanoohmspermeter)
        {
            double value = (double) nanoohmspermeter;
            return new ElectricConductivity(((value) * 1e-9d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from OhmsPerCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromOhmsPerCentimeter(double ohmspercentimeter)
        {
            double value = (double) ohmspercentimeter;
            return new ElectricConductivity(value*100);
        }
#else
        public static ElectricConductivity FromOhmsPerCentimeter(QuantityValue ohmspercentimeter)
        {
            double value = (double) ohmspercentimeter;
            return new ElectricConductivity((value*100));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from OhmsPerMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromOhmsPerMeter(double ohmspermeter)
        {
            double value = (double) ohmspermeter;
            return new ElectricConductivity(value);
        }
#else
        public static ElectricConductivity FromOhmsPerMeter(QuantityValue ohmspermeter)
        {
            double value = (double) ohmspermeter;
            return new ElectricConductivity((value));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from PicoohmsPerCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicoohmsPerCentimeter(double picoohmspercentimeter)
        {
            double value = (double) picoohmspercentimeter;
            return new ElectricConductivity((value*100) * 1e-12d);
        }
#else
        public static ElectricConductivity FromPicoohmsPerCentimeter(QuantityValue picoohmspercentimeter)
        {
            double value = (double) picoohmspercentimeter;
            return new ElectricConductivity(((value*100) * 1e-12d));
        }
#endif

        /// <summary>
        ///     Get ElectricConductivity from PicoohmsPerMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ElectricConductivity FromPicoohmsPerMeter(double picoohmspermeter)
        {
            double value = (double) picoohmspermeter;
            return new ElectricConductivity((value) * 1e-12d);
        }
#else
        public static ElectricConductivity FromPicoohmsPerMeter(QuantityValue picoohmspermeter)
        {
            double value = (double) picoohmspermeter;
            return new ElectricConductivity(((value) * 1e-12d));
        }
#endif

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable ElectricConductivity from nullable KiloohmsPerCentimeter.
        /// </summary>
        public static ElectricConductivity? FromKiloohmsPerCentimeter(QuantityValue? kiloohmspercentimeter)
        {
            if (kiloohmspercentimeter.HasValue)
            {
                return FromKiloohmsPerCentimeter(kiloohmspercentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable KiloohmsPerMeter.
        /// </summary>
        public static ElectricConductivity? FromKiloohmsPerMeter(QuantityValue? kiloohmspermeter)
        {
            if (kiloohmspermeter.HasValue)
            {
                return FromKiloohmsPerMeter(kiloohmspermeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable MegaohmsPerCentimeter.
        /// </summary>
        public static ElectricConductivity? FromMegaohmsPerCentimeter(QuantityValue? megaohmspercentimeter)
        {
            if (megaohmspercentimeter.HasValue)
            {
                return FromMegaohmsPerCentimeter(megaohmspercentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable MegaohmsPerMeter.
        /// </summary>
        public static ElectricConductivity? FromMegaohmsPerMeter(QuantityValue? megaohmspermeter)
        {
            if (megaohmspermeter.HasValue)
            {
                return FromMegaohmsPerMeter(megaohmspermeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable MicroohmsPerCentimeter.
        /// </summary>
        public static ElectricConductivity? FromMicroohmsPerCentimeter(QuantityValue? microohmspercentimeter)
        {
            if (microohmspercentimeter.HasValue)
            {
                return FromMicroohmsPerCentimeter(microohmspercentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable MicroohmsPerMeter.
        /// </summary>
        public static ElectricConductivity? FromMicroohmsPerMeter(QuantityValue? microohmspermeter)
        {
            if (microohmspermeter.HasValue)
            {
                return FromMicroohmsPerMeter(microohmspermeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable MilliohmsPerCentimeter.
        /// </summary>
        public static ElectricConductivity? FromMilliohmsPerCentimeter(QuantityValue? milliohmspercentimeter)
        {
            if (milliohmspercentimeter.HasValue)
            {
                return FromMilliohmsPerCentimeter(milliohmspercentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable MilliohmsPerMeter.
        /// </summary>
        public static ElectricConductivity? FromMilliohmsPerMeter(QuantityValue? milliohmspermeter)
        {
            if (milliohmspermeter.HasValue)
            {
                return FromMilliohmsPerMeter(milliohmspermeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable NanoohmsPerCentimeter.
        /// </summary>
        public static ElectricConductivity? FromNanoohmsPerCentimeter(QuantityValue? nanoohmspercentimeter)
        {
            if (nanoohmspercentimeter.HasValue)
            {
                return FromNanoohmsPerCentimeter(nanoohmspercentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable NanoohmsPerMeter.
        /// </summary>
        public static ElectricConductivity? FromNanoohmsPerMeter(QuantityValue? nanoohmspermeter)
        {
            if (nanoohmspermeter.HasValue)
            {
                return FromNanoohmsPerMeter(nanoohmspermeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable OhmsPerCentimeter.
        /// </summary>
        public static ElectricConductivity? FromOhmsPerCentimeter(QuantityValue? ohmspercentimeter)
        {
            if (ohmspercentimeter.HasValue)
            {
                return FromOhmsPerCentimeter(ohmspercentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable OhmsPerMeter.
        /// </summary>
        public static ElectricConductivity? FromOhmsPerMeter(QuantityValue? ohmspermeter)
        {
            if (ohmspermeter.HasValue)
            {
                return FromOhmsPerMeter(ohmspermeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable PicoohmsPerCentimeter.
        /// </summary>
        public static ElectricConductivity? FromPicoohmsPerCentimeter(QuantityValue? picoohmspercentimeter)
        {
            if (picoohmspercentimeter.HasValue)
            {
                return FromPicoohmsPerCentimeter(picoohmspercentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable ElectricConductivity from nullable PicoohmsPerMeter.
        /// </summary>
        public static ElectricConductivity? FromPicoohmsPerMeter(QuantityValue? picoohmspermeter)
        {
            if (picoohmspermeter.HasValue)
            {
                return FromPicoohmsPerMeter(picoohmspermeter.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricConductivityUnit" /> to <see cref="ElectricConductivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricConductivity unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static ElectricConductivity From(double value, ElectricConductivityUnit fromUnit)
#else
        public static ElectricConductivity From(QuantityValue value, ElectricConductivityUnit fromUnit)
#endif
        {
            switch (fromUnit)
            {
                case ElectricConductivityUnit.KiloohmPerCentimeter:
                    return FromKiloohmsPerCentimeter(value);
                case ElectricConductivityUnit.KiloohmPerMeter:
                    return FromKiloohmsPerMeter(value);
                case ElectricConductivityUnit.MegaohmPerCentimeter:
                    return FromMegaohmsPerCentimeter(value);
                case ElectricConductivityUnit.MegaohmPerMeter:
                    return FromMegaohmsPerMeter(value);
                case ElectricConductivityUnit.MicroohmPerCentimeter:
                    return FromMicroohmsPerCentimeter(value);
                case ElectricConductivityUnit.MicroohmPerMeter:
                    return FromMicroohmsPerMeter(value);
                case ElectricConductivityUnit.MilliohmPerCentimeter:
                    return FromMilliohmsPerCentimeter(value);
                case ElectricConductivityUnit.MilliohmPerMeter:
                    return FromMilliohmsPerMeter(value);
                case ElectricConductivityUnit.NanoohmPerCentimeter:
                    return FromNanoohmsPerCentimeter(value);
                case ElectricConductivityUnit.NanoohmPerMeter:
                    return FromNanoohmsPerMeter(value);
                case ElectricConductivityUnit.OhmPerCentimeter:
                    return FromOhmsPerCentimeter(value);
                case ElectricConductivityUnit.OhmPerMeter:
                    return FromOhmsPerMeter(value);
                case ElectricConductivityUnit.PicoohmPerCentimeter:
                    return FromPicoohmsPerCentimeter(value);
                case ElectricConductivityUnit.PicoohmPerMeter:
                    return FromPicoohmsPerMeter(value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricConductivityUnit" /> to <see cref="ElectricConductivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricConductivity unit value.</returns>
        public static ElectricConductivity? From(QuantityValue? value, ElectricConductivityUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case ElectricConductivityUnit.KiloohmPerCentimeter:
                    return FromKiloohmsPerCentimeter(value.Value);
                case ElectricConductivityUnit.KiloohmPerMeter:
                    return FromKiloohmsPerMeter(value.Value);
                case ElectricConductivityUnit.MegaohmPerCentimeter:
                    return FromMegaohmsPerCentimeter(value.Value);
                case ElectricConductivityUnit.MegaohmPerMeter:
                    return FromMegaohmsPerMeter(value.Value);
                case ElectricConductivityUnit.MicroohmPerCentimeter:
                    return FromMicroohmsPerCentimeter(value.Value);
                case ElectricConductivityUnit.MicroohmPerMeter:
                    return FromMicroohmsPerMeter(value.Value);
                case ElectricConductivityUnit.MilliohmPerCentimeter:
                    return FromMilliohmsPerCentimeter(value.Value);
                case ElectricConductivityUnit.MilliohmPerMeter:
                    return FromMilliohmsPerMeter(value.Value);
                case ElectricConductivityUnit.NanoohmPerCentimeter:
                    return FromNanoohmsPerCentimeter(value.Value);
                case ElectricConductivityUnit.NanoohmPerMeter:
                    return FromNanoohmsPerMeter(value.Value);
                case ElectricConductivityUnit.OhmPerCentimeter:
                    return FromOhmsPerCentimeter(value.Value);
                case ElectricConductivityUnit.OhmPerMeter:
                    return FromOhmsPerMeter(value.Value);
                case ElectricConductivityUnit.PicoohmPerCentimeter:
                    return FromPicoohmsPerCentimeter(value.Value);
                case ElectricConductivityUnit.PicoohmPerMeter:
                    return FromPicoohmsPerMeter(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElectricConductivityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElectricConductivityUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static ElectricConductivity operator -(ElectricConductivity right)
        {
            return new ElectricConductivity(-right._ohmsPerMeter);
        }

        public static ElectricConductivity operator +(ElectricConductivity left, ElectricConductivity right)
        {
            return new ElectricConductivity(left._ohmsPerMeter + right._ohmsPerMeter);
        }

        public static ElectricConductivity operator -(ElectricConductivity left, ElectricConductivity right)
        {
            return new ElectricConductivity(left._ohmsPerMeter - right._ohmsPerMeter);
        }

        public static ElectricConductivity operator *(double left, ElectricConductivity right)
        {
            return new ElectricConductivity(left*right._ohmsPerMeter);
        }

        public static ElectricConductivity operator *(ElectricConductivity left, double right)
        {
            return new ElectricConductivity(left._ohmsPerMeter*(double)right);
        }

        public static ElectricConductivity operator /(ElectricConductivity left, double right)
        {
            return new ElectricConductivity(left._ohmsPerMeter/(double)right);
        }

        public static double operator /(ElectricConductivity left, ElectricConductivity right)
        {
            return Convert.ToDouble(left._ohmsPerMeter/right._ohmsPerMeter);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is ElectricConductivity)) throw new ArgumentException("Expected type ElectricConductivity.", "obj");
            return CompareTo((ElectricConductivity) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(ElectricConductivity other)
        {
            return _ohmsPerMeter.CompareTo(other._ohmsPerMeter);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(ElectricConductivity left, ElectricConductivity right)
        {
            return left._ohmsPerMeter <= right._ohmsPerMeter;
        }

        public static bool operator >=(ElectricConductivity left, ElectricConductivity right)
        {
            return left._ohmsPerMeter >= right._ohmsPerMeter;
        }

        public static bool operator <(ElectricConductivity left, ElectricConductivity right)
        {
            return left._ohmsPerMeter < right._ohmsPerMeter;
        }

        public static bool operator >(ElectricConductivity left, ElectricConductivity right)
        {
            return left._ohmsPerMeter > right._ohmsPerMeter;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(ElectricConductivity left, ElectricConductivity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._ohmsPerMeter == right._ohmsPerMeter;
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(ElectricConductivity left, ElectricConductivity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._ohmsPerMeter != right._ohmsPerMeter;
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _ohmsPerMeter.Equals(((ElectricConductivity) obj)._ohmsPerMeter);
        }

        /// <summary>
        ///     Compare equality to another ElectricConductivity by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(ElectricConductivity other, ElectricConductivity maxError)
        {
            return Math.Abs(_ohmsPerMeter - other._ohmsPerMeter) <= maxError._ohmsPerMeter;
        }

        public override int GetHashCode()
        {
            return _ohmsPerMeter.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(ElectricConductivityUnit unit)
        {
            switch (unit)
            {
                case ElectricConductivityUnit.KiloohmPerCentimeter:
                    return KiloohmsPerCentimeter;
                case ElectricConductivityUnit.KiloohmPerMeter:
                    return KiloohmsPerMeter;
                case ElectricConductivityUnit.MegaohmPerCentimeter:
                    return MegaohmsPerCentimeter;
                case ElectricConductivityUnit.MegaohmPerMeter:
                    return MegaohmsPerMeter;
                case ElectricConductivityUnit.MicroohmPerCentimeter:
                    return MicroohmsPerCentimeter;
                case ElectricConductivityUnit.MicroohmPerMeter:
                    return MicroohmsPerMeter;
                case ElectricConductivityUnit.MilliohmPerCentimeter:
                    return MilliohmsPerCentimeter;
                case ElectricConductivityUnit.MilliohmPerMeter:
                    return MilliohmsPerMeter;
                case ElectricConductivityUnit.NanoohmPerCentimeter:
                    return NanoohmsPerCentimeter;
                case ElectricConductivityUnit.NanoohmPerMeter:
                    return NanoohmsPerMeter;
                case ElectricConductivityUnit.OhmPerCentimeter:
                    return OhmsPerCentimeter;
                case ElectricConductivityUnit.OhmPerMeter:
                    return OhmsPerMeter;
                case ElectricConductivityUnit.PicoohmPerCentimeter:
                    return PicoohmsPerCentimeter;
                case ElectricConductivityUnit.PicoohmPerMeter:
                    return PicoohmsPerMeter;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricConductivity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ElectricConductivity Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<ElectricConductivity, ElectricConductivityUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    ElectricConductivityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromOhmsPerMeter(x.OhmsPerMeter + y.OhmsPerMeter));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ElectricConductivity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out ElectricConductivity result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(ElectricConductivity);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricConductivityUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElectricConductivityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static ElectricConductivityUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<ElectricConductivityUnit>(str.Trim());

            if (unit == ElectricConductivityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized ElectricConductivityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is OhmPerMeter
        /// </summary>
        public static ElectricConductivityUnit ToStringDefaultUnit { get; set; } = ElectricConductivityUnit.OhmPerMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElectricConductivityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElectricConductivityUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElectricConductivityUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElectricConductivityUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of ElectricConductivity
        /// </summary>
        public static ElectricConductivity MaxValue
        {
            get
            {
                return new ElectricConductivity(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of ElectricConductivity
        /// </summary>
        public static ElectricConductivity MinValue
        {
            get
            {
                return new ElectricConductivity(double.MinValue);
            }
        }
    }
}
