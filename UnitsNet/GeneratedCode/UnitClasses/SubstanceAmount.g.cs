//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Mole is the amount of substance containing Avagadro's Number (6.02 x 10 ^ 23) of real particles such as molecules,atoms, ions or radicals. 
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class SubstanceAmount
#else
    public partial struct SubstanceAmount : IComparable, IComparable<SubstanceAmount>
#endif
    {
        /// <summary>
        ///     Base unit of SubstanceAmount.
        /// </summary>
        private readonly double _moles;

		// Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public SubstanceAmount() : this(0)
        {
        }
#endif

        public SubstanceAmount(double moles)
        {
            _moles = Convert.ToDouble(moles);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        SubstanceAmount(long moles)
        {
            _moles = Convert.ToDouble(moles);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        SubstanceAmount(decimal moles)
        {
            _moles = Convert.ToDouble(moles);
        }

        #region Properties

		/// <summary>
		///     The <see cref="QuantityType" /> of this quantity.
		/// </summary>
        public static QuantityType QuantityType => QuantityType.AmountOfSubstance;

		/// <summary>
		///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
		/// </summary>
        public static SubstanceAmountUnit BaseUnit
        {
            get { return SubstanceAmountUnit.Mole; }
        }

        /// <summary>
        ///     All units of measurement for the SubstanceAmount quantity.
        /// </summary>
        public static SubstanceAmountUnit[] Units { get; } = Enum.GetValues(typeof(SubstanceAmountUnit)).Cast<SubstanceAmountUnit>().ToArray();

        /// <summary>
        ///     Get SubstanceAmount in Centimoles.
        /// </summary>
        public double Centimoles
        {
            get { return (_moles) / 1e-2d; }
        }

        /// <summary>
        ///     Get SubstanceAmount in Decimoles.
        /// </summary>
        public double Decimoles
        {
            get { return (_moles) / 1e-1d; }
        }

        /// <summary>
        ///     Get SubstanceAmount in Kilomoles.
        /// </summary>
        public double Kilomoles
        {
            get { return (_moles) / 1e3d; }
        }

        /// <summary>
        ///     Get SubstanceAmount in Micromoles.
        /// </summary>
        public double Micromoles
        {
            get { return (_moles) / 1e-6d; }
        }

        /// <summary>
        ///     Get SubstanceAmount in Millimoles.
        /// </summary>
        public double Millimoles
        {
            get { return (_moles) / 1e-3d; }
        }

        /// <summary>
        ///     Get SubstanceAmount in Moles.
        /// </summary>
        public double Moles
        {
            get { return _moles; }
        }

        /// <summary>
        ///     Get SubstanceAmount in Nanomoles.
        /// </summary>
        public double Nanomoles
        {
            get { return (_moles) / 1e-9d; }
        }

        #endregion

        #region Static

        public static SubstanceAmount Zero
        {
            get { return new SubstanceAmount(); }
        }

        /// <summary>
        ///     Get SubstanceAmount from Centimoles.
        /// </summary>
        public static SubstanceAmount FromCentimoles(double centimoles)
        {
            return new SubstanceAmount((centimoles) * 1e-2d);
        }

        /// <summary>
        ///     Get SubstanceAmount from Decimoles.
        /// </summary>
        public static SubstanceAmount FromDecimoles(double decimoles)
        {
            return new SubstanceAmount((decimoles) * 1e-1d);
        }

        /// <summary>
        ///     Get SubstanceAmount from Kilomoles.
        /// </summary>
        public static SubstanceAmount FromKilomoles(double kilomoles)
        {
            return new SubstanceAmount((kilomoles) * 1e3d);
        }

        /// <summary>
        ///     Get SubstanceAmount from Micromoles.
        /// </summary>
        public static SubstanceAmount FromMicromoles(double micromoles)
        {
            return new SubstanceAmount((micromoles) * 1e-6d);
        }

        /// <summary>
        ///     Get SubstanceAmount from Millimoles.
        /// </summary>
        public static SubstanceAmount FromMillimoles(double millimoles)
        {
            return new SubstanceAmount((millimoles) * 1e-3d);
        }

        /// <summary>
        ///     Get SubstanceAmount from Moles.
        /// </summary>
        public static SubstanceAmount FromMoles(double moles)
        {
            return new SubstanceAmount(moles);
        }

        /// <summary>
        ///     Get SubstanceAmount from Nanomoles.
        /// </summary>
        public static SubstanceAmount FromNanomoles(double nanomoles)
        {
            return new SubstanceAmount((nanomoles) * 1e-9d);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable SubstanceAmount from nullable Centimoles.
        /// </summary>
        public static SubstanceAmount? FromCentimoles(double? centimoles)
        {
            if (centimoles.HasValue)
            {
                return FromCentimoles(centimoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable SubstanceAmount from nullable Decimoles.
        /// </summary>
        public static SubstanceAmount? FromDecimoles(double? decimoles)
        {
            if (decimoles.HasValue)
            {
                return FromDecimoles(decimoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable SubstanceAmount from nullable Kilomoles.
        /// </summary>
        public static SubstanceAmount? FromKilomoles(double? kilomoles)
        {
            if (kilomoles.HasValue)
            {
                return FromKilomoles(kilomoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable SubstanceAmount from nullable Micromoles.
        /// </summary>
        public static SubstanceAmount? FromMicromoles(double? micromoles)
        {
            if (micromoles.HasValue)
            {
                return FromMicromoles(micromoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable SubstanceAmount from nullable Millimoles.
        /// </summary>
        public static SubstanceAmount? FromMillimoles(double? millimoles)
        {
            if (millimoles.HasValue)
            {
                return FromMillimoles(millimoles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable SubstanceAmount from nullable Moles.
        /// </summary>
        public static SubstanceAmount? FromMoles(double? moles)
        {
            if (moles.HasValue)
            {
                return FromMoles(moles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable SubstanceAmount from nullable Nanomoles.
        /// </summary>
        public static SubstanceAmount? FromNanomoles(double? nanomoles)
        {
            if (nanomoles.HasValue)
            {
                return FromNanomoles(nanomoles.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SubstanceAmountUnit" /> to <see cref="SubstanceAmount" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SubstanceAmount unit value.</returns>
        public static SubstanceAmount From(double val, SubstanceAmountUnit fromUnit)
        {
            switch (fromUnit)
            {
                case SubstanceAmountUnit.Centimole:
                    return FromCentimoles(val);
                case SubstanceAmountUnit.Decimole:
                    return FromDecimoles(val);
                case SubstanceAmountUnit.Kilomole:
                    return FromKilomoles(val);
                case SubstanceAmountUnit.Micromole:
                    return FromMicromoles(val);
                case SubstanceAmountUnit.Millimole:
                    return FromMillimoles(val);
                case SubstanceAmountUnit.Mole:
                    return FromMoles(val);
                case SubstanceAmountUnit.Nanomole:
                    return FromNanomoles(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SubstanceAmountUnit" /> to <see cref="SubstanceAmount" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SubstanceAmount unit value.</returns>
        public static SubstanceAmount? From(double? value, SubstanceAmountUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case SubstanceAmountUnit.Centimole:
                    return FromCentimoles(value.Value);
                case SubstanceAmountUnit.Decimole:
                    return FromDecimoles(value.Value);
                case SubstanceAmountUnit.Kilomole:
                    return FromKilomoles(value.Value);
                case SubstanceAmountUnit.Micromole:
                    return FromMicromoles(value.Value);
                case SubstanceAmountUnit.Millimole:
                    return FromMillimoles(value.Value);
                case SubstanceAmountUnit.Mole:
                    return FromMoles(value.Value);
                case SubstanceAmountUnit.Nanomole:
                    return FromNanomoles(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(SubstanceAmountUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(SubstanceAmountUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static SubstanceAmount operator -(SubstanceAmount right)
        {
            return new SubstanceAmount(-right._moles);
        }

        public static SubstanceAmount operator +(SubstanceAmount left, SubstanceAmount right)
        {
            return new SubstanceAmount(left._moles + right._moles);
        }

        public static SubstanceAmount operator -(SubstanceAmount left, SubstanceAmount right)
        {
            return new SubstanceAmount(left._moles - right._moles);
        }

        public static SubstanceAmount operator *(double left, SubstanceAmount right)
        {
            return new SubstanceAmount(left*right._moles);
        }

        public static SubstanceAmount operator *(SubstanceAmount left, double right)
        {
            return new SubstanceAmount(left._moles*(double)right);
        }

        public static SubstanceAmount operator /(SubstanceAmount left, double right)
        {
            return new SubstanceAmount(left._moles/(double)right);
        }

        public static double operator /(SubstanceAmount left, SubstanceAmount right)
        {
            return Convert.ToDouble(left._moles/right._moles);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is SubstanceAmount)) throw new ArgumentException("Expected type SubstanceAmount.", "obj");
            return CompareTo((SubstanceAmount) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(SubstanceAmount other)
        {
            return _moles.CompareTo(other._moles);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(SubstanceAmount left, SubstanceAmount right)
        {
            return left._moles <= right._moles;
        }

        public static bool operator >=(SubstanceAmount left, SubstanceAmount right)
        {
            return left._moles >= right._moles;
        }

        public static bool operator <(SubstanceAmount left, SubstanceAmount right)
        {
            return left._moles < right._moles;
        }

        public static bool operator >(SubstanceAmount left, SubstanceAmount right)
        {
            return left._moles > right._moles;
        }

        public static bool operator ==(SubstanceAmount left, SubstanceAmount right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._moles == right._moles;
        }

        public static bool operator !=(SubstanceAmount left, SubstanceAmount right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._moles != right._moles;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _moles.Equals(((SubstanceAmount) obj)._moles);
        }

        public override int GetHashCode()
        {
            return _moles.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(SubstanceAmountUnit unit)
        {
            switch (unit)
            {
                case SubstanceAmountUnit.Centimole:
                    return Centimoles;
                case SubstanceAmountUnit.Decimole:
                    return Decimoles;
                case SubstanceAmountUnit.Kilomole:
                    return Kilomoles;
                case SubstanceAmountUnit.Micromole:
                    return Micromoles;
                case SubstanceAmountUnit.Millimole:
                    return Millimoles;
                case SubstanceAmountUnit.Mole:
                    return Moles;
                case SubstanceAmountUnit.Nanomole:
                    return Nanomoles;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SubstanceAmount Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SubstanceAmount Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<SubstanceAmount, SubstanceAmountUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    SubstanceAmountUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromMoles(x.Moles + y.Moles));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SubstanceAmount result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out SubstanceAmount result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(SubstanceAmount);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SubstanceAmountUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SubstanceAmountUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static SubstanceAmountUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<SubstanceAmountUnit>(str.Trim());

            if (unit == SubstanceAmountUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized SubstanceAmountUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is Mole
        /// </summary>
        public static SubstanceAmountUnit ToStringDefaultUnit { get; set; } = SubstanceAmountUnit.Mole;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(SubstanceAmountUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(SubstanceAmountUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(SubstanceAmountUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(SubstanceAmountUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of SubstanceAmount
        /// </summary>
        public static SubstanceAmount MaxValue
        {
            get
            {
                return new SubstanceAmount(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of SubstanceAmount
        /// </summary>
        public static SubstanceAmount MinValue
        {
            get
            {
                return new SubstanceAmount(double.MinValue);
            }
        }
    }
}
