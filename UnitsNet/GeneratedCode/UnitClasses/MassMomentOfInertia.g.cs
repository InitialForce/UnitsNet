//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     A property of body reflects how its mass is distributed with regard to an axis.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class MassMomentOfInertia
#else
    public partial struct MassMomentOfInertia : IComparable, IComparable<MassMomentOfInertia>
#endif
    {
        /// <summary>
        ///     Base unit of MassMomentOfInertia.
        /// </summary>
        private readonly double _kilogramSquareMeters;

		// Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public MassMomentOfInertia() : this(0)
        {
        }
#endif

        public MassMomentOfInertia(double kilogramsquaremeters)
        {
            _kilogramSquareMeters = Convert.ToDouble(kilogramsquaremeters);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        public
#endif
        MassMomentOfInertia(long kilogramsquaremeters)
        {
            _kilogramSquareMeters = Convert.ToDouble(kilogramsquaremeters);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        public
#endif
        MassMomentOfInertia(decimal kilogramsquaremeters)
        {
            _kilogramSquareMeters = Convert.ToDouble(kilogramsquaremeters);
        }

        #region Properties

		/// <summary>
		///     The <see cref="QuantityType" /> of this quantity.
		/// </summary>
        public static QuantityType QuantityType => QuantityType.MassMomentOfInertia;

		/// <summary>
		///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
		/// </summary>
        public static MassMomentOfInertiaUnit BaseUnit
        {
            get { return MassMomentOfInertiaUnit.KilogramSquareMeter; }
        }

        /// <summary>
        ///     All units of measurement for the MassMomentOfInertia quantity.
        /// </summary>
        public static MassMomentOfInertiaUnit[] Units { get; } = Enum.GetValues(typeof(MassMomentOfInertiaUnit)).Cast<MassMomentOfInertiaUnit>().ToArray();

        /// <summary>
        ///     Get MassMomentOfInertia in GramSquareCentimeters.
        /// </summary>
        public double GramSquareCentimeters
        {
            get { return _kilogramSquareMeters*1e7; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in GramSquareDecimeters.
        /// </summary>
        public double GramSquareDecimeters
        {
            get { return _kilogramSquareMeters*1e5; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in GramSquareMeters.
        /// </summary>
        public double GramSquareMeters
        {
            get { return _kilogramSquareMeters*1e3; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in GramSquareMillimeters.
        /// </summary>
        public double GramSquareMillimeters
        {
            get { return _kilogramSquareMeters*1e9; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilogramSquareCentimeters.
        /// </summary>
        public double KilogramSquareCentimeters
        {
            get { return (_kilogramSquareMeters*1e7) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilogramSquareDecimeters.
        /// </summary>
        public double KilogramSquareDecimeters
        {
            get { return (_kilogramSquareMeters*1e5) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilogramSquareMeters.
        /// </summary>
        public double KilogramSquareMeters
        {
            get { return (_kilogramSquareMeters*1e3) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilogramSquareMillimeters.
        /// </summary>
        public double KilogramSquareMillimeters
        {
            get { return (_kilogramSquareMeters*1e9) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilotonneSquareCentimeters.
        /// </summary>
        public double KilotonneSquareCentimeters
        {
            get { return (_kilogramSquareMeters*1e1) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilotonneSquareDecimeters.
        /// </summary>
        public double KilotonneSquareDecimeters
        {
            get { return (_kilogramSquareMeters*1e-1) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilotonneSquareMeters.
        /// </summary>
        public double KilotonneSquareMeters
        {
            get { return (_kilogramSquareMeters*1e-3) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in KilotonneSquareMilimeters.
        /// </summary>
        public double KilotonneSquareMilimeters
        {
            get { return (_kilogramSquareMeters*1e3) / 1e3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MegatonneSquareCentimeters.
        /// </summary>
        public double MegatonneSquareCentimeters
        {
            get { return (_kilogramSquareMeters*1e1) / 1e6d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MegatonneSquareDecimeters.
        /// </summary>
        public double MegatonneSquareDecimeters
        {
            get { return (_kilogramSquareMeters*1e-1) / 1e6d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MegatonneSquareMeters.
        /// </summary>
        public double MegatonneSquareMeters
        {
            get { return (_kilogramSquareMeters*1e-3) / 1e6d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MegatonneSquareMilimeters.
        /// </summary>
        public double MegatonneSquareMilimeters
        {
            get { return (_kilogramSquareMeters*1e3) / 1e6d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MilligramSquareCentimeters.
        /// </summary>
        public double MilligramSquareCentimeters
        {
            get { return (_kilogramSquareMeters*1e7) / 1e-3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MilligramSquareDecimeters.
        /// </summary>
        public double MilligramSquareDecimeters
        {
            get { return (_kilogramSquareMeters*1e5) / 1e-3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MilligramSquareMeters.
        /// </summary>
        public double MilligramSquareMeters
        {
            get { return (_kilogramSquareMeters*1e3) / 1e-3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in MilligramSquareMillimeters.
        /// </summary>
        public double MilligramSquareMillimeters
        {
            get { return (_kilogramSquareMeters*1e9) / 1e-3d; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in PoundSquareFeet.
        /// </summary>
        public double PoundSquareFeet
        {
            get { return _kilogramSquareMeters/4.21401101e-2; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in PoundSquareInches.
        /// </summary>
        public double PoundSquareInches
        {
            get { return _kilogramSquareMeters/2.9263965e-4; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in TonneSquareCentimeters.
        /// </summary>
        public double TonneSquareCentimeters
        {
            get { return _kilogramSquareMeters*1e1; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in TonneSquareDecimeters.
        /// </summary>
        public double TonneSquareDecimeters
        {
            get { return _kilogramSquareMeters*1e-1; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in TonneSquareMeters.
        /// </summary>
        public double TonneSquareMeters
        {
            get { return _kilogramSquareMeters*1e-3; }
        }

        /// <summary>
        ///     Get MassMomentOfInertia in TonneSquareMilimeters.
        /// </summary>
        public double TonneSquareMilimeters
        {
            get { return _kilogramSquareMeters*1e3; }
        }

        #endregion

        #region Static

        public static MassMomentOfInertia Zero
        {
            get { return new MassMomentOfInertia(); }
        }

        /// <summary>
        ///     Get MassMomentOfInertia from GramSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia FromGramSquareCentimeters(double gramsquarecentimeters)
        {
            return new MassMomentOfInertia(gramsquarecentimeters/1e7);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from GramSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia FromGramSquareDecimeters(double gramsquaredecimeters)
        {
            return new MassMomentOfInertia(gramsquaredecimeters/1e5);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from GramSquareMeters.
        /// </summary>
        public static MassMomentOfInertia FromGramSquareMeters(double gramsquaremeters)
        {
            return new MassMomentOfInertia(gramsquaremeters/1e3);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from GramSquareMillimeters.
        /// </summary>
        public static MassMomentOfInertia FromGramSquareMillimeters(double gramsquaremillimeters)
        {
            return new MassMomentOfInertia(gramsquaremillimeters/1e9);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilogramSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia FromKilogramSquareCentimeters(double kilogramsquarecentimeters)
        {
            return new MassMomentOfInertia((kilogramsquarecentimeters/1e7) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilogramSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia FromKilogramSquareDecimeters(double kilogramsquaredecimeters)
        {
            return new MassMomentOfInertia((kilogramsquaredecimeters/1e5) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilogramSquareMeters.
        /// </summary>
        public static MassMomentOfInertia FromKilogramSquareMeters(double kilogramsquaremeters)
        {
            return new MassMomentOfInertia((kilogramsquaremeters/1e3) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilogramSquareMillimeters.
        /// </summary>
        public static MassMomentOfInertia FromKilogramSquareMillimeters(double kilogramsquaremillimeters)
        {
            return new MassMomentOfInertia((kilogramsquaremillimeters/1e9) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilotonneSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia FromKilotonneSquareCentimeters(double kilotonnesquarecentimeters)
        {
            return new MassMomentOfInertia((kilotonnesquarecentimeters/1e1) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilotonneSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia FromKilotonneSquareDecimeters(double kilotonnesquaredecimeters)
        {
            return new MassMomentOfInertia((kilotonnesquaredecimeters/1e-1) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilotonneSquareMeters.
        /// </summary>
        public static MassMomentOfInertia FromKilotonneSquareMeters(double kilotonnesquaremeters)
        {
            return new MassMomentOfInertia((kilotonnesquaremeters/1e-3) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from KilotonneSquareMilimeters.
        /// </summary>
        public static MassMomentOfInertia FromKilotonneSquareMilimeters(double kilotonnesquaremilimeters)
        {
            return new MassMomentOfInertia((kilotonnesquaremilimeters/1e3) * 1e3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MegatonneSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia FromMegatonneSquareCentimeters(double megatonnesquarecentimeters)
        {
            return new MassMomentOfInertia((megatonnesquarecentimeters/1e1) * 1e6d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MegatonneSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia FromMegatonneSquareDecimeters(double megatonnesquaredecimeters)
        {
            return new MassMomentOfInertia((megatonnesquaredecimeters/1e-1) * 1e6d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MegatonneSquareMeters.
        /// </summary>
        public static MassMomentOfInertia FromMegatonneSquareMeters(double megatonnesquaremeters)
        {
            return new MassMomentOfInertia((megatonnesquaremeters/1e-3) * 1e6d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MegatonneSquareMilimeters.
        /// </summary>
        public static MassMomentOfInertia FromMegatonneSquareMilimeters(double megatonnesquaremilimeters)
        {
            return new MassMomentOfInertia((megatonnesquaremilimeters/1e3) * 1e6d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MilligramSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia FromMilligramSquareCentimeters(double milligramsquarecentimeters)
        {
            return new MassMomentOfInertia((milligramsquarecentimeters/1e7) * 1e-3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MilligramSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia FromMilligramSquareDecimeters(double milligramsquaredecimeters)
        {
            return new MassMomentOfInertia((milligramsquaredecimeters/1e5) * 1e-3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MilligramSquareMeters.
        /// </summary>
        public static MassMomentOfInertia FromMilligramSquareMeters(double milligramsquaremeters)
        {
            return new MassMomentOfInertia((milligramsquaremeters/1e3) * 1e-3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from MilligramSquareMillimeters.
        /// </summary>
        public static MassMomentOfInertia FromMilligramSquareMillimeters(double milligramsquaremillimeters)
        {
            return new MassMomentOfInertia((milligramsquaremillimeters/1e9) * 1e-3d);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from PoundSquareFeet.
        /// </summary>
        public static MassMomentOfInertia FromPoundSquareFeet(double poundsquarefeet)
        {
            return new MassMomentOfInertia(poundsquarefeet*4.21401101e-2);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from PoundSquareInches.
        /// </summary>
        public static MassMomentOfInertia FromPoundSquareInches(double poundsquareinches)
        {
            return new MassMomentOfInertia(poundsquareinches*2.9263965e-4);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from TonneSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia FromTonneSquareCentimeters(double tonnesquarecentimeters)
        {
            return new MassMomentOfInertia(tonnesquarecentimeters/1e1);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from TonneSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia FromTonneSquareDecimeters(double tonnesquaredecimeters)
        {
            return new MassMomentOfInertia(tonnesquaredecimeters/1e-1);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from TonneSquareMeters.
        /// </summary>
        public static MassMomentOfInertia FromTonneSquareMeters(double tonnesquaremeters)
        {
            return new MassMomentOfInertia(tonnesquaremeters/1e-3);
        }

        /// <summary>
        ///     Get MassMomentOfInertia from TonneSquareMilimeters.
        /// </summary>
        public static MassMomentOfInertia FromTonneSquareMilimeters(double tonnesquaremilimeters)
        {
            return new MassMomentOfInertia(tonnesquaremilimeters/1e3);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable GramSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia? FromGramSquareCentimeters(double? gramsquarecentimeters)
        {
            if (gramsquarecentimeters.HasValue)
            {
                return FromGramSquareCentimeters(gramsquarecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable GramSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia? FromGramSquareDecimeters(double? gramsquaredecimeters)
        {
            if (gramsquaredecimeters.HasValue)
            {
                return FromGramSquareDecimeters(gramsquaredecimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable GramSquareMeters.
        /// </summary>
        public static MassMomentOfInertia? FromGramSquareMeters(double? gramsquaremeters)
        {
            if (gramsquaremeters.HasValue)
            {
                return FromGramSquareMeters(gramsquaremeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable GramSquareMillimeters.
        /// </summary>
        public static MassMomentOfInertia? FromGramSquareMillimeters(double? gramsquaremillimeters)
        {
            if (gramsquaremillimeters.HasValue)
            {
                return FromGramSquareMillimeters(gramsquaremillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilogramSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilogramSquareCentimeters(double? kilogramsquarecentimeters)
        {
            if (kilogramsquarecentimeters.HasValue)
            {
                return FromKilogramSquareCentimeters(kilogramsquarecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilogramSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilogramSquareDecimeters(double? kilogramsquaredecimeters)
        {
            if (kilogramsquaredecimeters.HasValue)
            {
                return FromKilogramSquareDecimeters(kilogramsquaredecimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilogramSquareMeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilogramSquareMeters(double? kilogramsquaremeters)
        {
            if (kilogramsquaremeters.HasValue)
            {
                return FromKilogramSquareMeters(kilogramsquaremeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilogramSquareMillimeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilogramSquareMillimeters(double? kilogramsquaremillimeters)
        {
            if (kilogramsquaremillimeters.HasValue)
            {
                return FromKilogramSquareMillimeters(kilogramsquaremillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilotonneSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilotonneSquareCentimeters(double? kilotonnesquarecentimeters)
        {
            if (kilotonnesquarecentimeters.HasValue)
            {
                return FromKilotonneSquareCentimeters(kilotonnesquarecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilotonneSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilotonneSquareDecimeters(double? kilotonnesquaredecimeters)
        {
            if (kilotonnesquaredecimeters.HasValue)
            {
                return FromKilotonneSquareDecimeters(kilotonnesquaredecimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilotonneSquareMeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilotonneSquareMeters(double? kilotonnesquaremeters)
        {
            if (kilotonnesquaremeters.HasValue)
            {
                return FromKilotonneSquareMeters(kilotonnesquaremeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable KilotonneSquareMilimeters.
        /// </summary>
        public static MassMomentOfInertia? FromKilotonneSquareMilimeters(double? kilotonnesquaremilimeters)
        {
            if (kilotonnesquaremilimeters.HasValue)
            {
                return FromKilotonneSquareMilimeters(kilotonnesquaremilimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MegatonneSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia? FromMegatonneSquareCentimeters(double? megatonnesquarecentimeters)
        {
            if (megatonnesquarecentimeters.HasValue)
            {
                return FromMegatonneSquareCentimeters(megatonnesquarecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MegatonneSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia? FromMegatonneSquareDecimeters(double? megatonnesquaredecimeters)
        {
            if (megatonnesquaredecimeters.HasValue)
            {
                return FromMegatonneSquareDecimeters(megatonnesquaredecimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MegatonneSquareMeters.
        /// </summary>
        public static MassMomentOfInertia? FromMegatonneSquareMeters(double? megatonnesquaremeters)
        {
            if (megatonnesquaremeters.HasValue)
            {
                return FromMegatonneSquareMeters(megatonnesquaremeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MegatonneSquareMilimeters.
        /// </summary>
        public static MassMomentOfInertia? FromMegatonneSquareMilimeters(double? megatonnesquaremilimeters)
        {
            if (megatonnesquaremilimeters.HasValue)
            {
                return FromMegatonneSquareMilimeters(megatonnesquaremilimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MilligramSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia? FromMilligramSquareCentimeters(double? milligramsquarecentimeters)
        {
            if (milligramsquarecentimeters.HasValue)
            {
                return FromMilligramSquareCentimeters(milligramsquarecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MilligramSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia? FromMilligramSquareDecimeters(double? milligramsquaredecimeters)
        {
            if (milligramsquaredecimeters.HasValue)
            {
                return FromMilligramSquareDecimeters(milligramsquaredecimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MilligramSquareMeters.
        /// </summary>
        public static MassMomentOfInertia? FromMilligramSquareMeters(double? milligramsquaremeters)
        {
            if (milligramsquaremeters.HasValue)
            {
                return FromMilligramSquareMeters(milligramsquaremeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable MilligramSquareMillimeters.
        /// </summary>
        public static MassMomentOfInertia? FromMilligramSquareMillimeters(double? milligramsquaremillimeters)
        {
            if (milligramsquaremillimeters.HasValue)
            {
                return FromMilligramSquareMillimeters(milligramsquaremillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable PoundSquareFeet.
        /// </summary>
        public static MassMomentOfInertia? FromPoundSquareFeet(double? poundsquarefeet)
        {
            if (poundsquarefeet.HasValue)
            {
                return FromPoundSquareFeet(poundsquarefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable PoundSquareInches.
        /// </summary>
        public static MassMomentOfInertia? FromPoundSquareInches(double? poundsquareinches)
        {
            if (poundsquareinches.HasValue)
            {
                return FromPoundSquareInches(poundsquareinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable TonneSquareCentimeters.
        /// </summary>
        public static MassMomentOfInertia? FromTonneSquareCentimeters(double? tonnesquarecentimeters)
        {
            if (tonnesquarecentimeters.HasValue)
            {
                return FromTonneSquareCentimeters(tonnesquarecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable TonneSquareDecimeters.
        /// </summary>
        public static MassMomentOfInertia? FromTonneSquareDecimeters(double? tonnesquaredecimeters)
        {
            if (tonnesquaredecimeters.HasValue)
            {
                return FromTonneSquareDecimeters(tonnesquaredecimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable TonneSquareMeters.
        /// </summary>
        public static MassMomentOfInertia? FromTonneSquareMeters(double? tonnesquaremeters)
        {
            if (tonnesquaremeters.HasValue)
            {
                return FromTonneSquareMeters(tonnesquaremeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable MassMomentOfInertia from nullable TonneSquareMilimeters.
        /// </summary>
        public static MassMomentOfInertia? FromTonneSquareMilimeters(double? tonnesquaremilimeters)
        {
            if (tonnesquaremilimeters.HasValue)
            {
                return FromTonneSquareMilimeters(tonnesquaremilimeters.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassMomentOfInertiaUnit" /> to <see cref="MassMomentOfInertia" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassMomentOfInertia unit value.</returns>
        public static MassMomentOfInertia From(double val, MassMomentOfInertiaUnit fromUnit)
        {
            switch (fromUnit)
            {
                case MassMomentOfInertiaUnit.GramSquareCentimeter:
                    return FromGramSquareCentimeters(val);
                case MassMomentOfInertiaUnit.GramSquareDecimeter:
                    return FromGramSquareDecimeters(val);
                case MassMomentOfInertiaUnit.GramSquareMeter:
                    return FromGramSquareMeters(val);
                case MassMomentOfInertiaUnit.GramSquareMillimeter:
                    return FromGramSquareMillimeters(val);
                case MassMomentOfInertiaUnit.KilogramSquareCentimeter:
                    return FromKilogramSquareCentimeters(val);
                case MassMomentOfInertiaUnit.KilogramSquareDecimeter:
                    return FromKilogramSquareDecimeters(val);
                case MassMomentOfInertiaUnit.KilogramSquareMeter:
                    return FromKilogramSquareMeters(val);
                case MassMomentOfInertiaUnit.KilogramSquareMillimeter:
                    return FromKilogramSquareMillimeters(val);
                case MassMomentOfInertiaUnit.KilotonneSquareCentimeter:
                    return FromKilotonneSquareCentimeters(val);
                case MassMomentOfInertiaUnit.KilotonneSquareDecimeter:
                    return FromKilotonneSquareDecimeters(val);
                case MassMomentOfInertiaUnit.KilotonneSquareMeter:
                    return FromKilotonneSquareMeters(val);
                case MassMomentOfInertiaUnit.KilotonneSquareMilimeter:
                    return FromKilotonneSquareMilimeters(val);
                case MassMomentOfInertiaUnit.MegatonneSquareCentimeter:
                    return FromMegatonneSquareCentimeters(val);
                case MassMomentOfInertiaUnit.MegatonneSquareDecimeter:
                    return FromMegatonneSquareDecimeters(val);
                case MassMomentOfInertiaUnit.MegatonneSquareMeter:
                    return FromMegatonneSquareMeters(val);
                case MassMomentOfInertiaUnit.MegatonneSquareMilimeter:
                    return FromMegatonneSquareMilimeters(val);
                case MassMomentOfInertiaUnit.MilligramSquareCentimeter:
                    return FromMilligramSquareCentimeters(val);
                case MassMomentOfInertiaUnit.MilligramSquareDecimeter:
                    return FromMilligramSquareDecimeters(val);
                case MassMomentOfInertiaUnit.MilligramSquareMeter:
                    return FromMilligramSquareMeters(val);
                case MassMomentOfInertiaUnit.MilligramSquareMillimeter:
                    return FromMilligramSquareMillimeters(val);
                case MassMomentOfInertiaUnit.PoundSquareFoot:
                    return FromPoundSquareFeet(val);
                case MassMomentOfInertiaUnit.PoundSquareInch:
                    return FromPoundSquareInches(val);
                case MassMomentOfInertiaUnit.TonneSquareCentimeter:
                    return FromTonneSquareCentimeters(val);
                case MassMomentOfInertiaUnit.TonneSquareDecimeter:
                    return FromTonneSquareDecimeters(val);
                case MassMomentOfInertiaUnit.TonneSquareMeter:
                    return FromTonneSquareMeters(val);
                case MassMomentOfInertiaUnit.TonneSquareMilimeter:
                    return FromTonneSquareMilimeters(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassMomentOfInertiaUnit" /> to <see cref="MassMomentOfInertia" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassMomentOfInertia unit value.</returns>
        public static MassMomentOfInertia? From(double? value, MassMomentOfInertiaUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case MassMomentOfInertiaUnit.GramSquareCentimeter:
                    return FromGramSquareCentimeters(value.Value);
                case MassMomentOfInertiaUnit.GramSquareDecimeter:
                    return FromGramSquareDecimeters(value.Value);
                case MassMomentOfInertiaUnit.GramSquareMeter:
                    return FromGramSquareMeters(value.Value);
                case MassMomentOfInertiaUnit.GramSquareMillimeter:
                    return FromGramSquareMillimeters(value.Value);
                case MassMomentOfInertiaUnit.KilogramSquareCentimeter:
                    return FromKilogramSquareCentimeters(value.Value);
                case MassMomentOfInertiaUnit.KilogramSquareDecimeter:
                    return FromKilogramSquareDecimeters(value.Value);
                case MassMomentOfInertiaUnit.KilogramSquareMeter:
                    return FromKilogramSquareMeters(value.Value);
                case MassMomentOfInertiaUnit.KilogramSquareMillimeter:
                    return FromKilogramSquareMillimeters(value.Value);
                case MassMomentOfInertiaUnit.KilotonneSquareCentimeter:
                    return FromKilotonneSquareCentimeters(value.Value);
                case MassMomentOfInertiaUnit.KilotonneSquareDecimeter:
                    return FromKilotonneSquareDecimeters(value.Value);
                case MassMomentOfInertiaUnit.KilotonneSquareMeter:
                    return FromKilotonneSquareMeters(value.Value);
                case MassMomentOfInertiaUnit.KilotonneSquareMilimeter:
                    return FromKilotonneSquareMilimeters(value.Value);
                case MassMomentOfInertiaUnit.MegatonneSquareCentimeter:
                    return FromMegatonneSquareCentimeters(value.Value);
                case MassMomentOfInertiaUnit.MegatonneSquareDecimeter:
                    return FromMegatonneSquareDecimeters(value.Value);
                case MassMomentOfInertiaUnit.MegatonneSquareMeter:
                    return FromMegatonneSquareMeters(value.Value);
                case MassMomentOfInertiaUnit.MegatonneSquareMilimeter:
                    return FromMegatonneSquareMilimeters(value.Value);
                case MassMomentOfInertiaUnit.MilligramSquareCentimeter:
                    return FromMilligramSquareCentimeters(value.Value);
                case MassMomentOfInertiaUnit.MilligramSquareDecimeter:
                    return FromMilligramSquareDecimeters(value.Value);
                case MassMomentOfInertiaUnit.MilligramSquareMeter:
                    return FromMilligramSquareMeters(value.Value);
                case MassMomentOfInertiaUnit.MilligramSquareMillimeter:
                    return FromMilligramSquareMillimeters(value.Value);
                case MassMomentOfInertiaUnit.PoundSquareFoot:
                    return FromPoundSquareFeet(value.Value);
                case MassMomentOfInertiaUnit.PoundSquareInch:
                    return FromPoundSquareInches(value.Value);
                case MassMomentOfInertiaUnit.TonneSquareCentimeter:
                    return FromTonneSquareCentimeters(value.Value);
                case MassMomentOfInertiaUnit.TonneSquareDecimeter:
                    return FromTonneSquareDecimeters(value.Value);
                case MassMomentOfInertiaUnit.TonneSquareMeter:
                    return FromTonneSquareMeters(value.Value);
                case MassMomentOfInertiaUnit.TonneSquareMilimeter:
                    return FromTonneSquareMilimeters(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(MassMomentOfInertiaUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static MassMomentOfInertia operator -(MassMomentOfInertia right)
        {
            return new MassMomentOfInertia(-right._kilogramSquareMeters);
        }

        public static MassMomentOfInertia operator +(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            return new MassMomentOfInertia(left._kilogramSquareMeters + right._kilogramSquareMeters);
        }

        public static MassMomentOfInertia operator -(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            return new MassMomentOfInertia(left._kilogramSquareMeters - right._kilogramSquareMeters);
        }

        public static MassMomentOfInertia operator *(double left, MassMomentOfInertia right)
        {
            return new MassMomentOfInertia(left*right._kilogramSquareMeters);
        }

        public static MassMomentOfInertia operator *(MassMomentOfInertia left, double right)
        {
            return new MassMomentOfInertia(left._kilogramSquareMeters*(double)right);
        }

        public static MassMomentOfInertia operator /(MassMomentOfInertia left, double right)
        {
            return new MassMomentOfInertia(left._kilogramSquareMeters/(double)right);
        }

        public static double operator /(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            return Convert.ToDouble(left._kilogramSquareMeters/right._kilogramSquareMeters);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is MassMomentOfInertia)) throw new ArgumentException("Expected type MassMomentOfInertia.", "obj");
            return CompareTo((MassMomentOfInertia) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(MassMomentOfInertia other)
        {
            return _kilogramSquareMeters.CompareTo(other._kilogramSquareMeters);
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            return left._kilogramSquareMeters <= right._kilogramSquareMeters;
        }

        public static bool operator >=(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            return left._kilogramSquareMeters >= right._kilogramSquareMeters;
        }

        public static bool operator <(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            return left._kilogramSquareMeters < right._kilogramSquareMeters;
        }

        public static bool operator >(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            return left._kilogramSquareMeters > right._kilogramSquareMeters;
        }

        public static bool operator ==(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._kilogramSquareMeters == right._kilogramSquareMeters;
        }

        public static bool operator !=(MassMomentOfInertia left, MassMomentOfInertia right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._kilogramSquareMeters != right._kilogramSquareMeters;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _kilogramSquareMeters.Equals(((MassMomentOfInertia) obj)._kilogramSquareMeters);
        }

        public override int GetHashCode()
        {
            return _kilogramSquareMeters.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(MassMomentOfInertiaUnit unit)
        {
            switch (unit)
            {
                case MassMomentOfInertiaUnit.GramSquareCentimeter:
                    return GramSquareCentimeters;
                case MassMomentOfInertiaUnit.GramSquareDecimeter:
                    return GramSquareDecimeters;
                case MassMomentOfInertiaUnit.GramSquareMeter:
                    return GramSquareMeters;
                case MassMomentOfInertiaUnit.GramSquareMillimeter:
                    return GramSquareMillimeters;
                case MassMomentOfInertiaUnit.KilogramSquareCentimeter:
                    return KilogramSquareCentimeters;
                case MassMomentOfInertiaUnit.KilogramSquareDecimeter:
                    return KilogramSquareDecimeters;
                case MassMomentOfInertiaUnit.KilogramSquareMeter:
                    return KilogramSquareMeters;
                case MassMomentOfInertiaUnit.KilogramSquareMillimeter:
                    return KilogramSquareMillimeters;
                case MassMomentOfInertiaUnit.KilotonneSquareCentimeter:
                    return KilotonneSquareCentimeters;
                case MassMomentOfInertiaUnit.KilotonneSquareDecimeter:
                    return KilotonneSquareDecimeters;
                case MassMomentOfInertiaUnit.KilotonneSquareMeter:
                    return KilotonneSquareMeters;
                case MassMomentOfInertiaUnit.KilotonneSquareMilimeter:
                    return KilotonneSquareMilimeters;
                case MassMomentOfInertiaUnit.MegatonneSquareCentimeter:
                    return MegatonneSquareCentimeters;
                case MassMomentOfInertiaUnit.MegatonneSquareDecimeter:
                    return MegatonneSquareDecimeters;
                case MassMomentOfInertiaUnit.MegatonneSquareMeter:
                    return MegatonneSquareMeters;
                case MassMomentOfInertiaUnit.MegatonneSquareMilimeter:
                    return MegatonneSquareMilimeters;
                case MassMomentOfInertiaUnit.MilligramSquareCentimeter:
                    return MilligramSquareCentimeters;
                case MassMomentOfInertiaUnit.MilligramSquareDecimeter:
                    return MilligramSquareDecimeters;
                case MassMomentOfInertiaUnit.MilligramSquareMeter:
                    return MilligramSquareMeters;
                case MassMomentOfInertiaUnit.MilligramSquareMillimeter:
                    return MilligramSquareMillimeters;
                case MassMomentOfInertiaUnit.PoundSquareFoot:
                    return PoundSquareFeet;
                case MassMomentOfInertiaUnit.PoundSquareInch:
                    return PoundSquareInches;
                case MassMomentOfInertiaUnit.TonneSquareCentimeter:
                    return TonneSquareCentimeters;
                case MassMomentOfInertiaUnit.TonneSquareDecimeter:
                    return TonneSquareDecimeters;
                case MassMomentOfInertiaUnit.TonneSquareMeter:
                    return TonneSquareMeters;
                case MassMomentOfInertiaUnit.TonneSquareMilimeter:
                    return TonneSquareMilimeters;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MassMomentOfInertia Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MassMomentOfInertia Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return QuantityParser.Parse<MassMomentOfInertia, MassMomentOfInertiaUnit>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    MassMomentOfInertiaUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromKilogramSquareMeters(x.KilogramSquareMeters + y.KilogramSquareMeters));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MassMomentOfInertia result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out MassMomentOfInertia result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(MassMomentOfInertia);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassMomentOfInertiaUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassMomentOfInertiaUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static MassMomentOfInertiaUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<MassMomentOfInertiaUnit>(str.Trim());

            if (unit == MassMomentOfInertiaUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized MassMomentOfInertiaUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is KilogramSquareMeter
        /// </summary>
        public static MassMomentOfInertiaUnit ToStringDefaultUnit { get; set; } = MassMomentOfInertiaUnit.KilogramSquareMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(MassMomentOfInertiaUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

        // Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of MassMomentOfInertia
        /// </summary>
        public static MassMomentOfInertia MaxValue
        {
            get
            {
                return new MassMomentOfInertia(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of MassMomentOfInertia
        /// </summary>
        public static MassMomentOfInertia MinValue
        {
            get
            {
                return new MassMomentOfInertia(double.MinValue);
            }
        }
    }
}
