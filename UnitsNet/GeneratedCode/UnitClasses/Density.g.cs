//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart
#if WINDOWS_UWP
    public sealed partial class Density
#else
    public partial struct Density : IComparable, IComparable<Density>
#endif
    {
        /// <summary>
        ///     Base unit of Density.
        /// </summary>
        private readonly double _kilogramsPerCubicMeter;

#if WINDOWS_UWP
        public Density() : this(0)
        {
        }
#endif

        public Density(double kilogramspercubicmeter)
        {
            _kilogramsPerCubicMeter = Convert.ToDouble(kilogramspercubicmeter);
        }

        // Method overloads and with same number of parameters not supported in Universal Windows Platform (WinRT Components).
#if WINDOWS_UWP
        private
#else
        public
#endif
        Density(long kilogramspercubicmeter)
        {
            _kilogramsPerCubicMeter = Convert.ToDouble(kilogramspercubicmeter);
        }

        // Method overloads and with same number of parameters not supported in Universal Windows Platform (WinRT Components).
        // Decimal type not supported in Universal Windows Platform (WinRT Components).
#if WINDOWS_UWP
        private
#else
        public
#endif
        Density(decimal kilogramspercubicmeter)
        {
            _kilogramsPerCubicMeter = Convert.ToDouble(kilogramspercubicmeter);
        }

        #region Properties

        public static DensityUnit BaseUnit
        {
            get { return DensityUnit.KilogramPerCubicMeter; }
        }

        /// <summary>
        ///     Get Density in CentigramsPerDeciLiter.
        /// </summary>
        public double CentigramsPerDeciLiter
        {
            get { return (_kilogramsPerCubicMeter*1e-1) / 1e-2d; }
        }

        /// <summary>
        ///     Get Density in CentigramsPerLiter.
        /// </summary>
        public double CentigramsPerLiter
        {
            get { return (_kilogramsPerCubicMeter*1) / 1e-2d; }
        }

        /// <summary>
        ///     Get Density in CentigramsPerMilliliter.
        /// </summary>
        public double CentigramsPerMilliliter
        {
            get { return (_kilogramsPerCubicMeter*1e-3) / 1e-2d; }
        }

        /// <summary>
        ///     Get Density in DecigramsPerDeciLiter.
        /// </summary>
        public double DecigramsPerDeciLiter
        {
            get { return (_kilogramsPerCubicMeter*1e-1) / 1e-1d; }
        }

        /// <summary>
        ///     Get Density in DecigramsPerLiter.
        /// </summary>
        public double DecigramsPerLiter
        {
            get { return (_kilogramsPerCubicMeter*1) / 1e-1d; }
        }

        /// <summary>
        ///     Get Density in DecigramsPerMilliliter.
        /// </summary>
        public double DecigramsPerMilliliter
        {
            get { return (_kilogramsPerCubicMeter*1e-3) / 1e-1d; }
        }

        /// <summary>
        ///     Get Density in GramsPerCubicCentimeter.
        /// </summary>
        public double GramsPerCubicCentimeter
        {
            get { return _kilogramsPerCubicMeter*1e-3; }
        }

        /// <summary>
        ///     Get Density in GramsPerCubicMeter.
        /// </summary>
        public double GramsPerCubicMeter
        {
            get { return _kilogramsPerCubicMeter*1e3; }
        }

        /// <summary>
        ///     Get Density in GramsPerCubicMillimeter.
        /// </summary>
        public double GramsPerCubicMillimeter
        {
            get { return _kilogramsPerCubicMeter*1e-6; }
        }

        /// <summary>
        ///     Get Density in GramsPerDeciLiter.
        /// </summary>
        public double GramsPerDeciLiter
        {
            get { return _kilogramsPerCubicMeter*1e-1; }
        }

        /// <summary>
        ///     Get Density in GramsPerLiter.
        /// </summary>
        public double GramsPerLiter
        {
            get { return _kilogramsPerCubicMeter*1; }
        }

        /// <summary>
        ///     Get Density in GramsPerMilliliter.
        /// </summary>
        public double GramsPerMilliliter
        {
            get { return _kilogramsPerCubicMeter*1e-3; }
        }

        /// <summary>
        ///     Get Density in KilogramsPerCubicCentimeter.
        /// </summary>
        public double KilogramsPerCubicCentimeter
        {
            get { return (_kilogramsPerCubicMeter*1e-3) / 1e3d; }
        }

        /// <summary>
        ///     Get Density in KilogramsPerCubicMeter.
        /// </summary>
        public double KilogramsPerCubicMeter
        {
            get { return (_kilogramsPerCubicMeter*1e3) / 1e3d; }
        }

        /// <summary>
        ///     Get Density in KilogramsPerCubicMillimeter.
        /// </summary>
        public double KilogramsPerCubicMillimeter
        {
            get { return (_kilogramsPerCubicMeter*1e-6) / 1e3d; }
        }

        /// <summary>
        ///     Get Density in KilopoundsPerCubicFoot.
        /// </summary>
        public double KilopoundsPerCubicFoot
        {
            get { return (_kilogramsPerCubicMeter*0.062427961) / 1e3d; }
        }

        /// <summary>
        ///     Get Density in KilopoundsPerCubicInch.
        /// </summary>
        public double KilopoundsPerCubicInch
        {
            get { return (_kilogramsPerCubicMeter*3.6127298147753e-5) / 1e3d; }
        }

        /// <summary>
        ///     Get Density in MicrogramsPerDeciLiter.
        /// </summary>
        public double MicrogramsPerDeciLiter
        {
            get { return (_kilogramsPerCubicMeter*1e-1) / 1e-6d; }
        }

        /// <summary>
        ///     Get Density in MicrogramsPerLiter.
        /// </summary>
        public double MicrogramsPerLiter
        {
            get { return (_kilogramsPerCubicMeter*1) / 1e-6d; }
        }

        /// <summary>
        ///     Get Density in MicrogramsPerMilliliter.
        /// </summary>
        public double MicrogramsPerMilliliter
        {
            get { return (_kilogramsPerCubicMeter*1e-3) / 1e-6d; }
        }

        /// <summary>
        ///     Get Density in MilligramsPerDeciLiter.
        /// </summary>
        public double MilligramsPerDeciLiter
        {
            get { return (_kilogramsPerCubicMeter*1e-1) / 1e-3d; }
        }

        /// <summary>
        ///     Get Density in MilligramsPerLiter.
        /// </summary>
        public double MilligramsPerLiter
        {
            get { return (_kilogramsPerCubicMeter*1) / 1e-3d; }
        }

        /// <summary>
        ///     Get Density in MilligramsPerMilliliter.
        /// </summary>
        public double MilligramsPerMilliliter
        {
            get { return (_kilogramsPerCubicMeter*1e-3) / 1e-3d; }
        }

        /// <summary>
        ///     Get Density in NanogramsPerDeciLiter.
        /// </summary>
        public double NanogramsPerDeciLiter
        {
            get { return (_kilogramsPerCubicMeter*1e-1) / 1e-9d; }
        }

        /// <summary>
        ///     Get Density in NanogramsPerLiter.
        /// </summary>
        public double NanogramsPerLiter
        {
            get { return (_kilogramsPerCubicMeter*1) / 1e-9d; }
        }

        /// <summary>
        ///     Get Density in NanogramsPerMilliliter.
        /// </summary>
        public double NanogramsPerMilliliter
        {
            get { return (_kilogramsPerCubicMeter*1e-3) / 1e-9d; }
        }

        /// <summary>
        ///     Get Density in PicogramsPerDeciLiter.
        /// </summary>
        public double PicogramsPerDeciLiter
        {
            get { return (_kilogramsPerCubicMeter*1e-1) / 1e-12d; }
        }

        /// <summary>
        ///     Get Density in PicogramsPerLiter.
        /// </summary>
        public double PicogramsPerLiter
        {
            get { return (_kilogramsPerCubicMeter*1) / 1e-12d; }
        }

        /// <summary>
        ///     Get Density in PicogramsPerMilliliter.
        /// </summary>
        public double PicogramsPerMilliliter
        {
            get { return (_kilogramsPerCubicMeter*1e-3) / 1e-12d; }
        }

        /// <summary>
        ///     Get Density in PoundsPerCubicFoot.
        /// </summary>
        public double PoundsPerCubicFoot
        {
            get { return _kilogramsPerCubicMeter*0.062427961; }
        }

        /// <summary>
        ///     Get Density in PoundsPerCubicInch.
        /// </summary>
        public double PoundsPerCubicInch
        {
            get { return _kilogramsPerCubicMeter*3.6127298147753e-5; }
        }

        /// <summary>
        ///     Get Density in SlugsPerCubicFoot.
        /// </summary>
        public double SlugsPerCubicFoot
        {
            get { return _kilogramsPerCubicMeter*0.00194032033; }
        }

        /// <summary>
        ///     Get Density in TonnesPerCubicCentimeter.
        /// </summary>
        public double TonnesPerCubicCentimeter
        {
            get { return _kilogramsPerCubicMeter*1e-9; }
        }

        /// <summary>
        ///     Get Density in TonnesPerCubicMeter.
        /// </summary>
        public double TonnesPerCubicMeter
        {
            get { return _kilogramsPerCubicMeter*0.001; }
        }

        /// <summary>
        ///     Get Density in TonnesPerCubicMillimeter.
        /// </summary>
        public double TonnesPerCubicMillimeter
        {
            get { return _kilogramsPerCubicMeter*1e-12; }
        }

        #endregion

        #region Static

        public static Density Zero
        {
            get { return new Density(); }
        }

        /// <summary>
        ///     Get Density from CentigramsPerDeciLiter.
        /// </summary>
        public static Density FromCentigramsPerDeciLiter(double centigramsperdeciliter)
        {
            return new Density((centigramsperdeciliter/1e-1) * 1e-2d);
        }

        /// <summary>
        ///     Get Density from CentigramsPerLiter.
        /// </summary>
        public static Density FromCentigramsPerLiter(double centigramsperliter)
        {
            return new Density((centigramsperliter/1) * 1e-2d);
        }

        /// <summary>
        ///     Get Density from CentigramsPerMilliliter.
        /// </summary>
        public static Density FromCentigramsPerMilliliter(double centigramspermilliliter)
        {
            return new Density((centigramspermilliliter/1e-3) * 1e-2d);
        }

        /// <summary>
        ///     Get Density from DecigramsPerDeciLiter.
        /// </summary>
        public static Density FromDecigramsPerDeciLiter(double decigramsperdeciliter)
        {
            return new Density((decigramsperdeciliter/1e-1) * 1e-1d);
        }

        /// <summary>
        ///     Get Density from DecigramsPerLiter.
        /// </summary>
        public static Density FromDecigramsPerLiter(double decigramsperliter)
        {
            return new Density((decigramsperliter/1) * 1e-1d);
        }

        /// <summary>
        ///     Get Density from DecigramsPerMilliliter.
        /// </summary>
        public static Density FromDecigramsPerMilliliter(double decigramspermilliliter)
        {
            return new Density((decigramspermilliliter/1e-3) * 1e-1d);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicCentimeter.
        /// </summary>
        public static Density FromGramsPerCubicCentimeter(double gramspercubiccentimeter)
        {
            return new Density(gramspercubiccentimeter/1e-3);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicMeter.
        /// </summary>
        public static Density FromGramsPerCubicMeter(double gramspercubicmeter)
        {
            return new Density(gramspercubicmeter/1e3);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicMillimeter.
        /// </summary>
        public static Density FromGramsPerCubicMillimeter(double gramspercubicmillimeter)
        {
            return new Density(gramspercubicmillimeter/1e-6);
        }

        /// <summary>
        ///     Get Density from GramsPerDeciLiter.
        /// </summary>
        public static Density FromGramsPerDeciLiter(double gramsperdeciliter)
        {
            return new Density(gramsperdeciliter/1e-1);
        }

        /// <summary>
        ///     Get Density from GramsPerLiter.
        /// </summary>
        public static Density FromGramsPerLiter(double gramsperliter)
        {
            return new Density(gramsperliter/1);
        }

        /// <summary>
        ///     Get Density from GramsPerMilliliter.
        /// </summary>
        public static Density FromGramsPerMilliliter(double gramspermilliliter)
        {
            return new Density(gramspermilliliter/1e-3);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicCentimeter.
        /// </summary>
        public static Density FromKilogramsPerCubicCentimeter(double kilogramspercubiccentimeter)
        {
            return new Density((kilogramspercubiccentimeter/1e-3) * 1e3d);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicMeter.
        /// </summary>
        public static Density FromKilogramsPerCubicMeter(double kilogramspercubicmeter)
        {
            return new Density((kilogramspercubicmeter/1e3) * 1e3d);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicMillimeter.
        /// </summary>
        public static Density FromKilogramsPerCubicMillimeter(double kilogramspercubicmillimeter)
        {
            return new Density((kilogramspercubicmillimeter/1e-6) * 1e3d);
        }

        /// <summary>
        ///     Get Density from KilopoundsPerCubicFoot.
        /// </summary>
        public static Density FromKilopoundsPerCubicFoot(double kilopoundspercubicfoot)
        {
            return new Density((kilopoundspercubicfoot/0.062427961) * 1e3d);
        }

        /// <summary>
        ///     Get Density from KilopoundsPerCubicInch.
        /// </summary>
        public static Density FromKilopoundsPerCubicInch(double kilopoundspercubicinch)
        {
            return new Density((kilopoundspercubicinch/3.6127298147753e-5) * 1e3d);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerDeciLiter.
        /// </summary>
        public static Density FromMicrogramsPerDeciLiter(double microgramsperdeciliter)
        {
            return new Density((microgramsperdeciliter/1e-1) * 1e-6d);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerLiter.
        /// </summary>
        public static Density FromMicrogramsPerLiter(double microgramsperliter)
        {
            return new Density((microgramsperliter/1) * 1e-6d);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerMilliliter.
        /// </summary>
        public static Density FromMicrogramsPerMilliliter(double microgramspermilliliter)
        {
            return new Density((microgramspermilliliter/1e-3) * 1e-6d);
        }

        /// <summary>
        ///     Get Density from MilligramsPerDeciLiter.
        /// </summary>
        public static Density FromMilligramsPerDeciLiter(double milligramsperdeciliter)
        {
            return new Density((milligramsperdeciliter/1e-1) * 1e-3d);
        }

        /// <summary>
        ///     Get Density from MilligramsPerLiter.
        /// </summary>
        public static Density FromMilligramsPerLiter(double milligramsperliter)
        {
            return new Density((milligramsperliter/1) * 1e-3d);
        }

        /// <summary>
        ///     Get Density from MilligramsPerMilliliter.
        /// </summary>
        public static Density FromMilligramsPerMilliliter(double milligramspermilliliter)
        {
            return new Density((milligramspermilliliter/1e-3) * 1e-3d);
        }

        /// <summary>
        ///     Get Density from NanogramsPerDeciLiter.
        /// </summary>
        public static Density FromNanogramsPerDeciLiter(double nanogramsperdeciliter)
        {
            return new Density((nanogramsperdeciliter/1e-1) * 1e-9d);
        }

        /// <summary>
        ///     Get Density from NanogramsPerLiter.
        /// </summary>
        public static Density FromNanogramsPerLiter(double nanogramsperliter)
        {
            return new Density((nanogramsperliter/1) * 1e-9d);
        }

        /// <summary>
        ///     Get Density from NanogramsPerMilliliter.
        /// </summary>
        public static Density FromNanogramsPerMilliliter(double nanogramspermilliliter)
        {
            return new Density((nanogramspermilliliter/1e-3) * 1e-9d);
        }

        /// <summary>
        ///     Get Density from PicogramsPerDeciLiter.
        /// </summary>
        public static Density FromPicogramsPerDeciLiter(double picogramsperdeciliter)
        {
            return new Density((picogramsperdeciliter/1e-1) * 1e-12d);
        }

        /// <summary>
        ///     Get Density from PicogramsPerLiter.
        /// </summary>
        public static Density FromPicogramsPerLiter(double picogramsperliter)
        {
            return new Density((picogramsperliter/1) * 1e-12d);
        }

        /// <summary>
        ///     Get Density from PicogramsPerMilliliter.
        /// </summary>
        public static Density FromPicogramsPerMilliliter(double picogramspermilliliter)
        {
            return new Density((picogramspermilliliter/1e-3) * 1e-12d);
        }

        /// <summary>
        ///     Get Density from PoundsPerCubicFoot.
        /// </summary>
        public static Density FromPoundsPerCubicFoot(double poundspercubicfoot)
        {
            return new Density(poundspercubicfoot/0.062427961);
        }

        /// <summary>
        ///     Get Density from PoundsPerCubicInch.
        /// </summary>
        public static Density FromPoundsPerCubicInch(double poundspercubicinch)
        {
            return new Density(poundspercubicinch/3.6127298147753e-5);
        }

        /// <summary>
        ///     Get Density from SlugsPerCubicFoot.
        /// </summary>
        public static Density FromSlugsPerCubicFoot(double slugspercubicfoot)
        {
            return new Density(slugspercubicfoot*515.378818);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicCentimeter.
        /// </summary>
        public static Density FromTonnesPerCubicCentimeter(double tonnespercubiccentimeter)
        {
            return new Density(tonnespercubiccentimeter/1e-9);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicMeter.
        /// </summary>
        public static Density FromTonnesPerCubicMeter(double tonnespercubicmeter)
        {
            return new Density(tonnespercubicmeter/0.001);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicMillimeter.
        /// </summary>
        public static Density FromTonnesPerCubicMillimeter(double tonnespercubicmillimeter)
        {
            return new Density(tonnespercubicmillimeter/1e-12);
        }

#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerDeciLiter.
        /// </summary>
        public static Density? FromCentigramsPerDeciLiter(double? centigramsperdeciliter)
        {
            if (centigramsperdeciliter.HasValue)
            {
                return FromCentigramsPerDeciLiter(centigramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerLiter.
        /// </summary>
        public static Density? FromCentigramsPerLiter(double? centigramsperliter)
        {
            if (centigramsperliter.HasValue)
            {
                return FromCentigramsPerLiter(centigramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerMilliliter.
        /// </summary>
        public static Density? FromCentigramsPerMilliliter(double? centigramspermilliliter)
        {
            if (centigramspermilliliter.HasValue)
            {
                return FromCentigramsPerMilliliter(centigramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerDeciLiter.
        /// </summary>
        public static Density? FromDecigramsPerDeciLiter(double? decigramsperdeciliter)
        {
            if (decigramsperdeciliter.HasValue)
            {
                return FromDecigramsPerDeciLiter(decigramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerLiter.
        /// </summary>
        public static Density? FromDecigramsPerLiter(double? decigramsperliter)
        {
            if (decigramsperliter.HasValue)
            {
                return FromDecigramsPerLiter(decigramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerMilliliter.
        /// </summary>
        public static Density? FromDecigramsPerMilliliter(double? decigramspermilliliter)
        {
            if (decigramspermilliliter.HasValue)
            {
                return FromDecigramsPerMilliliter(decigramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicCentimeter.
        /// </summary>
        public static Density? FromGramsPerCubicCentimeter(double? gramspercubiccentimeter)
        {
            if (gramspercubiccentimeter.HasValue)
            {
                return FromGramsPerCubicCentimeter(gramspercubiccentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicMeter.
        /// </summary>
        public static Density? FromGramsPerCubicMeter(double? gramspercubicmeter)
        {
            if (gramspercubicmeter.HasValue)
            {
                return FromGramsPerCubicMeter(gramspercubicmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicMillimeter.
        /// </summary>
        public static Density? FromGramsPerCubicMillimeter(double? gramspercubicmillimeter)
        {
            if (gramspercubicmillimeter.HasValue)
            {
                return FromGramsPerCubicMillimeter(gramspercubicmillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerDeciLiter.
        /// </summary>
        public static Density? FromGramsPerDeciLiter(double? gramsperdeciliter)
        {
            if (gramsperdeciliter.HasValue)
            {
                return FromGramsPerDeciLiter(gramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerLiter.
        /// </summary>
        public static Density? FromGramsPerLiter(double? gramsperliter)
        {
            if (gramsperliter.HasValue)
            {
                return FromGramsPerLiter(gramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerMilliliter.
        /// </summary>
        public static Density? FromGramsPerMilliliter(double? gramspermilliliter)
        {
            if (gramspermilliliter.HasValue)
            {
                return FromGramsPerMilliliter(gramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicCentimeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicCentimeter(double? kilogramspercubiccentimeter)
        {
            if (kilogramspercubiccentimeter.HasValue)
            {
                return FromKilogramsPerCubicCentimeter(kilogramspercubiccentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicMeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicMeter(double? kilogramspercubicmeter)
        {
            if (kilogramspercubicmeter.HasValue)
            {
                return FromKilogramsPerCubicMeter(kilogramspercubicmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicMillimeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicMillimeter(double? kilogramspercubicmillimeter)
        {
            if (kilogramspercubicmillimeter.HasValue)
            {
                return FromKilogramsPerCubicMillimeter(kilogramspercubicmillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilopoundsPerCubicFoot.
        /// </summary>
        public static Density? FromKilopoundsPerCubicFoot(double? kilopoundspercubicfoot)
        {
            if (kilopoundspercubicfoot.HasValue)
            {
                return FromKilopoundsPerCubicFoot(kilopoundspercubicfoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilopoundsPerCubicInch.
        /// </summary>
        public static Density? FromKilopoundsPerCubicInch(double? kilopoundspercubicinch)
        {
            if (kilopoundspercubicinch.HasValue)
            {
                return FromKilopoundsPerCubicInch(kilopoundspercubicinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerDeciLiter.
        /// </summary>
        public static Density? FromMicrogramsPerDeciLiter(double? microgramsperdeciliter)
        {
            if (microgramsperdeciliter.HasValue)
            {
                return FromMicrogramsPerDeciLiter(microgramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerLiter.
        /// </summary>
        public static Density? FromMicrogramsPerLiter(double? microgramsperliter)
        {
            if (microgramsperliter.HasValue)
            {
                return FromMicrogramsPerLiter(microgramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerMilliliter.
        /// </summary>
        public static Density? FromMicrogramsPerMilliliter(double? microgramspermilliliter)
        {
            if (microgramspermilliliter.HasValue)
            {
                return FromMicrogramsPerMilliliter(microgramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerDeciLiter.
        /// </summary>
        public static Density? FromMilligramsPerDeciLiter(double? milligramsperdeciliter)
        {
            if (milligramsperdeciliter.HasValue)
            {
                return FromMilligramsPerDeciLiter(milligramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerLiter.
        /// </summary>
        public static Density? FromMilligramsPerLiter(double? milligramsperliter)
        {
            if (milligramsperliter.HasValue)
            {
                return FromMilligramsPerLiter(milligramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerMilliliter.
        /// </summary>
        public static Density? FromMilligramsPerMilliliter(double? milligramspermilliliter)
        {
            if (milligramspermilliliter.HasValue)
            {
                return FromMilligramsPerMilliliter(milligramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerDeciLiter.
        /// </summary>
        public static Density? FromNanogramsPerDeciLiter(double? nanogramsperdeciliter)
        {
            if (nanogramsperdeciliter.HasValue)
            {
                return FromNanogramsPerDeciLiter(nanogramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerLiter.
        /// </summary>
        public static Density? FromNanogramsPerLiter(double? nanogramsperliter)
        {
            if (nanogramsperliter.HasValue)
            {
                return FromNanogramsPerLiter(nanogramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerMilliliter.
        /// </summary>
        public static Density? FromNanogramsPerMilliliter(double? nanogramspermilliliter)
        {
            if (nanogramspermilliliter.HasValue)
            {
                return FromNanogramsPerMilliliter(nanogramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerDeciLiter.
        /// </summary>
        public static Density? FromPicogramsPerDeciLiter(double? picogramsperdeciliter)
        {
            if (picogramsperdeciliter.HasValue)
            {
                return FromPicogramsPerDeciLiter(picogramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerLiter.
        /// </summary>
        public static Density? FromPicogramsPerLiter(double? picogramsperliter)
        {
            if (picogramsperliter.HasValue)
            {
                return FromPicogramsPerLiter(picogramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerMilliliter.
        /// </summary>
        public static Density? FromPicogramsPerMilliliter(double? picogramspermilliliter)
        {
            if (picogramspermilliliter.HasValue)
            {
                return FromPicogramsPerMilliliter(picogramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerCubicFoot.
        /// </summary>
        public static Density? FromPoundsPerCubicFoot(double? poundspercubicfoot)
        {
            if (poundspercubicfoot.HasValue)
            {
                return FromPoundsPerCubicFoot(poundspercubicfoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerCubicInch.
        /// </summary>
        public static Density? FromPoundsPerCubicInch(double? poundspercubicinch)
        {
            if (poundspercubicinch.HasValue)
            {
                return FromPoundsPerCubicInch(poundspercubicinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable SlugsPerCubicFoot.
        /// </summary>
        public static Density? FromSlugsPerCubicFoot(double? slugspercubicfoot)
        {
            if (slugspercubicfoot.HasValue)
            {
                return FromSlugsPerCubicFoot(slugspercubicfoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicCentimeter.
        /// </summary>
        public static Density? FromTonnesPerCubicCentimeter(double? tonnespercubiccentimeter)
        {
            if (tonnespercubiccentimeter.HasValue)
            {
                return FromTonnesPerCubicCentimeter(tonnespercubiccentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicMeter.
        /// </summary>
        public static Density? FromTonnesPerCubicMeter(double? tonnespercubicmeter)
        {
            if (tonnespercubicmeter.HasValue)
            {
                return FromTonnesPerCubicMeter(tonnespercubicmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicMillimeter.
        /// </summary>
        public static Density? FromTonnesPerCubicMillimeter(double? tonnespercubicmillimeter)
        {
            if (tonnespercubicmillimeter.HasValue)
            {
                return FromTonnesPerCubicMillimeter(tonnespercubicmillimeter.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        public static Density From(double val, DensityUnit fromUnit)
        {
            switch (fromUnit)
            {
                case DensityUnit.CentigramPerDeciliter:
                    return FromCentigramsPerDeciLiter(val);
                case DensityUnit.CentigramPerLiter:
                    return FromCentigramsPerLiter(val);
                case DensityUnit.CentigramPerMilliliter:
                    return FromCentigramsPerMilliliter(val);
                case DensityUnit.DecigramPerDeciliter:
                    return FromDecigramsPerDeciLiter(val);
                case DensityUnit.DecigramPerLiter:
                    return FromDecigramsPerLiter(val);
                case DensityUnit.DecigramPerMilliliter:
                    return FromDecigramsPerMilliliter(val);
                case DensityUnit.GramPerCubicCentimeter:
                    return FromGramsPerCubicCentimeter(val);
                case DensityUnit.GramPerCubicMeter:
                    return FromGramsPerCubicMeter(val);
                case DensityUnit.GramPerCubicMillimeter:
                    return FromGramsPerCubicMillimeter(val);
                case DensityUnit.GramPerDeciliter:
                    return FromGramsPerDeciLiter(val);
                case DensityUnit.GramPerLiter:
                    return FromGramsPerLiter(val);
                case DensityUnit.GramPerMilliliter:
                    return FromGramsPerMilliliter(val);
                case DensityUnit.KilogramPerCubicCentimeter:
                    return FromKilogramsPerCubicCentimeter(val);
                case DensityUnit.KilogramPerCubicMeter:
                    return FromKilogramsPerCubicMeter(val);
                case DensityUnit.KilogramPerCubicMillimeter:
                    return FromKilogramsPerCubicMillimeter(val);
                case DensityUnit.KilopoundPerCubicFoot:
                    return FromKilopoundsPerCubicFoot(val);
                case DensityUnit.KilopoundPerCubicInch:
                    return FromKilopoundsPerCubicInch(val);
                case DensityUnit.MicrogramPerDeciliter:
                    return FromMicrogramsPerDeciLiter(val);
                case DensityUnit.MicrogramPerLiter:
                    return FromMicrogramsPerLiter(val);
                case DensityUnit.MicrogramPerMilliliter:
                    return FromMicrogramsPerMilliliter(val);
                case DensityUnit.MilligramPerDeciliter:
                    return FromMilligramsPerDeciLiter(val);
                case DensityUnit.MilligramPerLiter:
                    return FromMilligramsPerLiter(val);
                case DensityUnit.MilligramPerMilliliter:
                    return FromMilligramsPerMilliliter(val);
                case DensityUnit.NanogramPerDeciliter:
                    return FromNanogramsPerDeciLiter(val);
                case DensityUnit.NanogramPerLiter:
                    return FromNanogramsPerLiter(val);
                case DensityUnit.NanogramPerMilliliter:
                    return FromNanogramsPerMilliliter(val);
                case DensityUnit.PicogramPerDeciliter:
                    return FromPicogramsPerDeciLiter(val);
                case DensityUnit.PicogramPerLiter:
                    return FromPicogramsPerLiter(val);
                case DensityUnit.PicogramPerMilliliter:
                    return FromPicogramsPerMilliliter(val);
                case DensityUnit.PoundPerCubicFoot:
                    return FromPoundsPerCubicFoot(val);
                case DensityUnit.PoundPerCubicInch:
                    return FromPoundsPerCubicInch(val);
                case DensityUnit.SlugPerCubicFoot:
                    return FromSlugsPerCubicFoot(val);
                case DensityUnit.TonnePerCubicCentimeter:
                    return FromTonnesPerCubicCentimeter(val);
                case DensityUnit.TonnePerCubicMeter:
                    return FromTonnesPerCubicMeter(val);
                case DensityUnit.TonnePerCubicMillimeter:
                    return FromTonnesPerCubicMillimeter(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        public static Density? From(double? value, DensityUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case DensityUnit.CentigramPerDeciliter:
                    return FromCentigramsPerDeciLiter(value.Value);
                case DensityUnit.CentigramPerLiter:
                    return FromCentigramsPerLiter(value.Value);
                case DensityUnit.CentigramPerMilliliter:
                    return FromCentigramsPerMilliliter(value.Value);
                case DensityUnit.DecigramPerDeciliter:
                    return FromDecigramsPerDeciLiter(value.Value);
                case DensityUnit.DecigramPerLiter:
                    return FromDecigramsPerLiter(value.Value);
                case DensityUnit.DecigramPerMilliliter:
                    return FromDecigramsPerMilliliter(value.Value);
                case DensityUnit.GramPerCubicCentimeter:
                    return FromGramsPerCubicCentimeter(value.Value);
                case DensityUnit.GramPerCubicMeter:
                    return FromGramsPerCubicMeter(value.Value);
                case DensityUnit.GramPerCubicMillimeter:
                    return FromGramsPerCubicMillimeter(value.Value);
                case DensityUnit.GramPerDeciliter:
                    return FromGramsPerDeciLiter(value.Value);
                case DensityUnit.GramPerLiter:
                    return FromGramsPerLiter(value.Value);
                case DensityUnit.GramPerMilliliter:
                    return FromGramsPerMilliliter(value.Value);
                case DensityUnit.KilogramPerCubicCentimeter:
                    return FromKilogramsPerCubicCentimeter(value.Value);
                case DensityUnit.KilogramPerCubicMeter:
                    return FromKilogramsPerCubicMeter(value.Value);
                case DensityUnit.KilogramPerCubicMillimeter:
                    return FromKilogramsPerCubicMillimeter(value.Value);
                case DensityUnit.KilopoundPerCubicFoot:
                    return FromKilopoundsPerCubicFoot(value.Value);
                case DensityUnit.KilopoundPerCubicInch:
                    return FromKilopoundsPerCubicInch(value.Value);
                case DensityUnit.MicrogramPerDeciliter:
                    return FromMicrogramsPerDeciLiter(value.Value);
                case DensityUnit.MicrogramPerLiter:
                    return FromMicrogramsPerLiter(value.Value);
                case DensityUnit.MicrogramPerMilliliter:
                    return FromMicrogramsPerMilliliter(value.Value);
                case DensityUnit.MilligramPerDeciliter:
                    return FromMilligramsPerDeciLiter(value.Value);
                case DensityUnit.MilligramPerLiter:
                    return FromMilligramsPerLiter(value.Value);
                case DensityUnit.MilligramPerMilliliter:
                    return FromMilligramsPerMilliliter(value.Value);
                case DensityUnit.NanogramPerDeciliter:
                    return FromNanogramsPerDeciLiter(value.Value);
                case DensityUnit.NanogramPerLiter:
                    return FromNanogramsPerLiter(value.Value);
                case DensityUnit.NanogramPerMilliliter:
                    return FromNanogramsPerMilliliter(value.Value);
                case DensityUnit.PicogramPerDeciliter:
                    return FromPicogramsPerDeciLiter(value.Value);
                case DensityUnit.PicogramPerLiter:
                    return FromPicogramsPerLiter(value.Value);
                case DensityUnit.PicogramPerMilliliter:
                    return FromPicogramsPerMilliliter(value.Value);
                case DensityUnit.PoundPerCubicFoot:
                    return FromPoundsPerCubicFoot(value.Value);
                case DensityUnit.PoundPerCubicInch:
                    return FromPoundsPerCubicInch(value.Value);
                case DensityUnit.SlugPerCubicFoot:
                    return FromSlugsPerCubicFoot(value.Value);
                case DensityUnit.TonnePerCubicCentimeter:
                    return FromTonnesPerCubicCentimeter(value.Value);
                case DensityUnit.TonnePerCubicMeter:
                    return FromTonnesPerCubicMeter(value.Value);
                case DensityUnit.TonnePerCubicMillimeter:
                    return FromTonnesPerCubicMillimeter(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(DensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(DensityUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

#if !WINDOWS_UWP
        public static Density operator -(Density right)
        {
            return new Density(-right._kilogramsPerCubicMeter);
        }

        public static Density operator +(Density left, Density right)
        {
            return new Density(left._kilogramsPerCubicMeter + right._kilogramsPerCubicMeter);
        }

        public static Density operator -(Density left, Density right)
        {
            return new Density(left._kilogramsPerCubicMeter - right._kilogramsPerCubicMeter);
        }

        public static Density operator *(double left, Density right)
        {
            return new Density(left*right._kilogramsPerCubicMeter);
        }

        public static Density operator *(Density left, double right)
        {
            return new Density(left._kilogramsPerCubicMeter*(double)right);
        }

        public static Density operator /(Density left, double right)
        {
            return new Density(left._kilogramsPerCubicMeter/(double)right);
        }

        public static double operator /(Density left, Density right)
        {
            return Convert.ToDouble(left._kilogramsPerCubicMeter/right._kilogramsPerCubicMeter);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Density)) throw new ArgumentException("Expected type Density.", "obj");
            return CompareTo((Density) obj);
        }

#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Density other)
        {
            return _kilogramsPerCubicMeter.CompareTo(other._kilogramsPerCubicMeter);
        }

#if !WINDOWS_UWP
        public static bool operator <=(Density left, Density right)
        {
            return left._kilogramsPerCubicMeter <= right._kilogramsPerCubicMeter;
        }

        public static bool operator >=(Density left, Density right)
        {
            return left._kilogramsPerCubicMeter >= right._kilogramsPerCubicMeter;
        }

        public static bool operator <(Density left, Density right)
        {
            return left._kilogramsPerCubicMeter < right._kilogramsPerCubicMeter;
        }

        public static bool operator >(Density left, Density right)
        {
            return left._kilogramsPerCubicMeter > right._kilogramsPerCubicMeter;
        }

        public static bool operator ==(Density left, Density right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._kilogramsPerCubicMeter == right._kilogramsPerCubicMeter;
        }

        public static bool operator !=(Density left, Density right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._kilogramsPerCubicMeter != right._kilogramsPerCubicMeter;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _kilogramsPerCubicMeter.Equals(((Density) obj)._kilogramsPerCubicMeter);
        }

        public override int GetHashCode()
        {
            return _kilogramsPerCubicMeter.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(DensityUnit unit)
        {
            switch (unit)
            {
                case DensityUnit.CentigramPerDeciliter:
                    return CentigramsPerDeciLiter;
                case DensityUnit.CentigramPerLiter:
                    return CentigramsPerLiter;
                case DensityUnit.CentigramPerMilliliter:
                    return CentigramsPerMilliliter;
                case DensityUnit.DecigramPerDeciliter:
                    return DecigramsPerDeciLiter;
                case DensityUnit.DecigramPerLiter:
                    return DecigramsPerLiter;
                case DensityUnit.DecigramPerMilliliter:
                    return DecigramsPerMilliliter;
                case DensityUnit.GramPerCubicCentimeter:
                    return GramsPerCubicCentimeter;
                case DensityUnit.GramPerCubicMeter:
                    return GramsPerCubicMeter;
                case DensityUnit.GramPerCubicMillimeter:
                    return GramsPerCubicMillimeter;
                case DensityUnit.GramPerDeciliter:
                    return GramsPerDeciLiter;
                case DensityUnit.GramPerLiter:
                    return GramsPerLiter;
                case DensityUnit.GramPerMilliliter:
                    return GramsPerMilliliter;
                case DensityUnit.KilogramPerCubicCentimeter:
                    return KilogramsPerCubicCentimeter;
                case DensityUnit.KilogramPerCubicMeter:
                    return KilogramsPerCubicMeter;
                case DensityUnit.KilogramPerCubicMillimeter:
                    return KilogramsPerCubicMillimeter;
                case DensityUnit.KilopoundPerCubicFoot:
                    return KilopoundsPerCubicFoot;
                case DensityUnit.KilopoundPerCubicInch:
                    return KilopoundsPerCubicInch;
                case DensityUnit.MicrogramPerDeciliter:
                    return MicrogramsPerDeciLiter;
                case DensityUnit.MicrogramPerLiter:
                    return MicrogramsPerLiter;
                case DensityUnit.MicrogramPerMilliliter:
                    return MicrogramsPerMilliliter;
                case DensityUnit.MilligramPerDeciliter:
                    return MilligramsPerDeciLiter;
                case DensityUnit.MilligramPerLiter:
                    return MilligramsPerLiter;
                case DensityUnit.MilligramPerMilliliter:
                    return MilligramsPerMilliliter;
                case DensityUnit.NanogramPerDeciliter:
                    return NanogramsPerDeciLiter;
                case DensityUnit.NanogramPerLiter:
                    return NanogramsPerLiter;
                case DensityUnit.NanogramPerMilliliter:
                    return NanogramsPerMilliliter;
                case DensityUnit.PicogramPerDeciliter:
                    return PicogramsPerDeciLiter;
                case DensityUnit.PicogramPerLiter:
                    return PicogramsPerLiter;
                case DensityUnit.PicogramPerMilliliter:
                    return PicogramsPerMilliliter;
                case DensityUnit.PoundPerCubicFoot:
                    return PoundsPerCubicFoot;
                case DensityUnit.PoundPerCubicInch:
                    return PoundsPerCubicInch;
                case DensityUnit.SlugPerCubicFoot:
                    return SlugsPerCubicFoot;
                case DensityUnit.TonnePerCubicCentimeter:
                    return TonnesPerCubicCentimeter;
                case DensityUnit.TonnePerCubicMeter:
                    return TonnesPerCubicMeter;
                case DensityUnit.TonnePerCubicMillimeter:
                    return TonnesPerCubicMillimeter;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return UnitParser.ParseUnit<Density>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    DensityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromKilogramsPerCubicMeter(x.KilogramsPerCubicMeter + y.KilogramsPerCubicMeter));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Density result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Density result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Density);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static DensityUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<DensityUnit>(str.Trim());

            if (unit == DensityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized DensityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is KilogramPerCubicMeter
        /// </summary>
        public static DensityUnit ToStringDefaultUnit { get; set; } = DensityUnit.KilogramPerCubicMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(DensityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(DensityUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(DensityUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(DensityUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Density
        /// </summary>
        public static Density MaxValue
        {
            get
            {
                return new Density(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Density
        /// </summary>
        public static Density MinValue
        {
            get
            {
                return new Density(double.MinValue);
            }
        }
    }
}
