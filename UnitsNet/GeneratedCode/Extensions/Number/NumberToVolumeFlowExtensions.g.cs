//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToVolumeFlow
{
    public static class NumberToVolumeFlowExtensions
    {
        #region AcreFootPerDay

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double)"/>
        public static VolumeFlow AcreFeetPerDay(this int value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double?)"/>
        public static VolumeFlow? AcreFeetPerDay(this int? value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double)"/>
        public static VolumeFlow AcreFeetPerDay(this long value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double?)"/>
        public static VolumeFlow? AcreFeetPerDay(this long? value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double)"/>
        public static VolumeFlow AcreFeetPerDay(this double value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double?)"/>
        public static VolumeFlow? AcreFeetPerDay(this double? value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double)"/>
        public static VolumeFlow AcreFeetPerDay(this float value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double?)"/>
        public static VolumeFlow? AcreFeetPerDay(this float? value) => VolumeFlow.FromAcreFeetPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double)"/>
        public static VolumeFlow AcreFeetPerDay(this decimal value) => VolumeFlow.FromAcreFeetPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(double?)"/>
        public static VolumeFlow? AcreFeetPerDay(this decimal? value) => VolumeFlow.FromAcreFeetPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region AcreFootPerHour

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double)"/>
        public static VolumeFlow AcreFeetPerHour(this int value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double?)"/>
        public static VolumeFlow? AcreFeetPerHour(this int? value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double)"/>
        public static VolumeFlow AcreFeetPerHour(this long value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double?)"/>
        public static VolumeFlow? AcreFeetPerHour(this long? value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double)"/>
        public static VolumeFlow AcreFeetPerHour(this double value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double?)"/>
        public static VolumeFlow? AcreFeetPerHour(this double? value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double)"/>
        public static VolumeFlow AcreFeetPerHour(this float value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double?)"/>
        public static VolumeFlow? AcreFeetPerHour(this float? value) => VolumeFlow.FromAcreFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double)"/>
        public static VolumeFlow AcreFeetPerHour(this decimal value) => VolumeFlow.FromAcreFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(double?)"/>
        public static VolumeFlow? AcreFeetPerHour(this decimal? value) => VolumeFlow.FromAcreFeetPerHour(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region AcreFootPerMinute

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double)"/>
        public static VolumeFlow AcreFeetPerMinute(this int value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double?)"/>
        public static VolumeFlow? AcreFeetPerMinute(this int? value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double)"/>
        public static VolumeFlow AcreFeetPerMinute(this long value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double?)"/>
        public static VolumeFlow? AcreFeetPerMinute(this long? value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double)"/>
        public static VolumeFlow AcreFeetPerMinute(this double value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double?)"/>
        public static VolumeFlow? AcreFeetPerMinute(this double? value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double)"/>
        public static VolumeFlow AcreFeetPerMinute(this float value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double?)"/>
        public static VolumeFlow? AcreFeetPerMinute(this float? value) => VolumeFlow.FromAcreFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double)"/>
        public static VolumeFlow AcreFeetPerMinute(this decimal value) => VolumeFlow.FromAcreFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(double?)"/>
        public static VolumeFlow? AcreFeetPerMinute(this decimal? value) => VolumeFlow.FromAcreFeetPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region AcreFootPerSecond

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double)"/>
        public static VolumeFlow AcreFeetPerSecond(this int value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double?)"/>
        public static VolumeFlow? AcreFeetPerSecond(this int? value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double)"/>
        public static VolumeFlow AcreFeetPerSecond(this long value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double?)"/>
        public static VolumeFlow? AcreFeetPerSecond(this long? value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double)"/>
        public static VolumeFlow AcreFeetPerSecond(this double value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double?)"/>
        public static VolumeFlow? AcreFeetPerSecond(this double? value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double)"/>
        public static VolumeFlow AcreFeetPerSecond(this float value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double?)"/>
        public static VolumeFlow? AcreFeetPerSecond(this float? value) => VolumeFlow.FromAcreFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double)"/>
        public static VolumeFlow AcreFeetPerSecond(this decimal value) => VolumeFlow.FromAcreFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(double?)"/>
        public static VolumeFlow? AcreFeetPerSecond(this decimal? value) => VolumeFlow.FromAcreFeetPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CentilitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double)"/>
        public static VolumeFlow CentilitersPerDay(this int value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double?)"/>
        public static VolumeFlow? CentilitersPerDay(this int? value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double)"/>
        public static VolumeFlow CentilitersPerDay(this long value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double?)"/>
        public static VolumeFlow? CentilitersPerDay(this long? value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double)"/>
        public static VolumeFlow CentilitersPerDay(this double value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double?)"/>
        public static VolumeFlow? CentilitersPerDay(this double? value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double)"/>
        public static VolumeFlow CentilitersPerDay(this float value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double?)"/>
        public static VolumeFlow? CentilitersPerDay(this float? value) => VolumeFlow.FromCentilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double)"/>
        public static VolumeFlow CentilitersPerDay(this decimal value) => VolumeFlow.FromCentilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(double?)"/>
        public static VolumeFlow? CentilitersPerDay(this decimal? value) => VolumeFlow.FromCentilitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CentilitersPerMinute

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double)"/>
        public static VolumeFlow CentilitersPerMinute(this int value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double?)"/>
        public static VolumeFlow? CentilitersPerMinute(this int? value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double)"/>
        public static VolumeFlow CentilitersPerMinute(this long value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double?)"/>
        public static VolumeFlow? CentilitersPerMinute(this long? value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double)"/>
        public static VolumeFlow CentilitersPerMinute(this double value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double?)"/>
        public static VolumeFlow? CentilitersPerMinute(this double? value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double)"/>
        public static VolumeFlow CentilitersPerMinute(this float value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double?)"/>
        public static VolumeFlow? CentilitersPerMinute(this float? value) => VolumeFlow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double)"/>
        public static VolumeFlow CentilitersPerMinute(this decimal value) => VolumeFlow.FromCentilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(double?)"/>
        public static VolumeFlow? CentilitersPerMinute(this decimal? value) => VolumeFlow.FromCentilitersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicDecimeterPerMinute

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double)"/>
        public static VolumeFlow CubicDecimetersPerMinute(this int value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double?)"/>
        public static VolumeFlow? CubicDecimetersPerMinute(this int? value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double)"/>
        public static VolumeFlow CubicDecimetersPerMinute(this long value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double?)"/>
        public static VolumeFlow? CubicDecimetersPerMinute(this long? value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double)"/>
        public static VolumeFlow CubicDecimetersPerMinute(this double value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double?)"/>
        public static VolumeFlow? CubicDecimetersPerMinute(this double? value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double)"/>
        public static VolumeFlow CubicDecimetersPerMinute(this float value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double?)"/>
        public static VolumeFlow? CubicDecimetersPerMinute(this float? value) => VolumeFlow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double)"/>
        public static VolumeFlow CubicDecimetersPerMinute(this decimal value) => VolumeFlow.FromCubicDecimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(double?)"/>
        public static VolumeFlow? CubicDecimetersPerMinute(this decimal? value) => VolumeFlow.FromCubicDecimetersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicFootPerHour

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double)"/>
        public static VolumeFlow CubicFeetPerHour(this int value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double?)"/>
        public static VolumeFlow? CubicFeetPerHour(this int? value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double)"/>
        public static VolumeFlow CubicFeetPerHour(this long value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double?)"/>
        public static VolumeFlow? CubicFeetPerHour(this long? value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double)"/>
        public static VolumeFlow CubicFeetPerHour(this double value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double?)"/>
        public static VolumeFlow? CubicFeetPerHour(this double? value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double)"/>
        public static VolumeFlow CubicFeetPerHour(this float value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double?)"/>
        public static VolumeFlow? CubicFeetPerHour(this float? value) => VolumeFlow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double)"/>
        public static VolumeFlow CubicFeetPerHour(this decimal value) => VolumeFlow.FromCubicFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(double?)"/>
        public static VolumeFlow? CubicFeetPerHour(this decimal? value) => VolumeFlow.FromCubicFeetPerHour(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicFootPerMinute

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double)"/>
        public static VolumeFlow CubicFeetPerMinute(this int value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double?)"/>
        public static VolumeFlow? CubicFeetPerMinute(this int? value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double)"/>
        public static VolumeFlow CubicFeetPerMinute(this long value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double?)"/>
        public static VolumeFlow? CubicFeetPerMinute(this long? value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double)"/>
        public static VolumeFlow CubicFeetPerMinute(this double value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double?)"/>
        public static VolumeFlow? CubicFeetPerMinute(this double? value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double)"/>
        public static VolumeFlow CubicFeetPerMinute(this float value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double?)"/>
        public static VolumeFlow? CubicFeetPerMinute(this float? value) => VolumeFlow.FromCubicFeetPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double)"/>
        public static VolumeFlow CubicFeetPerMinute(this decimal value) => VolumeFlow.FromCubicFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(double?)"/>
        public static VolumeFlow? CubicFeetPerMinute(this decimal? value) => VolumeFlow.FromCubicFeetPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicFootPerSecond

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double)"/>
        public static VolumeFlow CubicFeetPerSecond(this int value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double?)"/>
        public static VolumeFlow? CubicFeetPerSecond(this int? value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double)"/>
        public static VolumeFlow CubicFeetPerSecond(this long value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double?)"/>
        public static VolumeFlow? CubicFeetPerSecond(this long? value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double)"/>
        public static VolumeFlow CubicFeetPerSecond(this double value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double?)"/>
        public static VolumeFlow? CubicFeetPerSecond(this double? value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double)"/>
        public static VolumeFlow CubicFeetPerSecond(this float value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double?)"/>
        public static VolumeFlow? CubicFeetPerSecond(this float? value) => VolumeFlow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double)"/>
        public static VolumeFlow CubicFeetPerSecond(this decimal value) => VolumeFlow.FromCubicFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(double?)"/>
        public static VolumeFlow? CubicFeetPerSecond(this decimal? value) => VolumeFlow.FromCubicFeetPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicMeterPerDay

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double)"/>
        public static VolumeFlow CubicMetersPerDay(this int value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double?)"/>
        public static VolumeFlow? CubicMetersPerDay(this int? value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double)"/>
        public static VolumeFlow CubicMetersPerDay(this long value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double?)"/>
        public static VolumeFlow? CubicMetersPerDay(this long? value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double)"/>
        public static VolumeFlow CubicMetersPerDay(this double value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double?)"/>
        public static VolumeFlow? CubicMetersPerDay(this double? value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double)"/>
        public static VolumeFlow CubicMetersPerDay(this float value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double?)"/>
        public static VolumeFlow? CubicMetersPerDay(this float? value) => VolumeFlow.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double)"/>
        public static VolumeFlow CubicMetersPerDay(this decimal value) => VolumeFlow.FromCubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(double?)"/>
        public static VolumeFlow? CubicMetersPerDay(this decimal? value) => VolumeFlow.FromCubicMetersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicMeterPerHour

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double)"/>
        public static VolumeFlow CubicMetersPerHour(this int value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double?)"/>
        public static VolumeFlow? CubicMetersPerHour(this int? value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double)"/>
        public static VolumeFlow CubicMetersPerHour(this long value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double?)"/>
        public static VolumeFlow? CubicMetersPerHour(this long? value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double)"/>
        public static VolumeFlow CubicMetersPerHour(this double value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double?)"/>
        public static VolumeFlow? CubicMetersPerHour(this double? value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double)"/>
        public static VolumeFlow CubicMetersPerHour(this float value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double?)"/>
        public static VolumeFlow? CubicMetersPerHour(this float? value) => VolumeFlow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double)"/>
        public static VolumeFlow CubicMetersPerHour(this decimal value) => VolumeFlow.FromCubicMetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(double?)"/>
        public static VolumeFlow? CubicMetersPerHour(this decimal? value) => VolumeFlow.FromCubicMetersPerHour(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicMeterPerMinute

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double)"/>
        public static VolumeFlow CubicMetersPerMinute(this int value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double?)"/>
        public static VolumeFlow? CubicMetersPerMinute(this int? value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double)"/>
        public static VolumeFlow CubicMetersPerMinute(this long value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double?)"/>
        public static VolumeFlow? CubicMetersPerMinute(this long? value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double)"/>
        public static VolumeFlow CubicMetersPerMinute(this double value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double?)"/>
        public static VolumeFlow? CubicMetersPerMinute(this double? value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double)"/>
        public static VolumeFlow CubicMetersPerMinute(this float value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double?)"/>
        public static VolumeFlow? CubicMetersPerMinute(this float? value) => VolumeFlow.FromCubicMetersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double)"/>
        public static VolumeFlow CubicMetersPerMinute(this decimal value) => VolumeFlow.FromCubicMetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(double?)"/>
        public static VolumeFlow? CubicMetersPerMinute(this decimal? value) => VolumeFlow.FromCubicMetersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicMeterPerSecond

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double)"/>
        public static VolumeFlow CubicMetersPerSecond(this int value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double?)"/>
        public static VolumeFlow? CubicMetersPerSecond(this int? value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double)"/>
        public static VolumeFlow CubicMetersPerSecond(this long value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double?)"/>
        public static VolumeFlow? CubicMetersPerSecond(this long? value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double)"/>
        public static VolumeFlow CubicMetersPerSecond(this double value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double?)"/>
        public static VolumeFlow? CubicMetersPerSecond(this double? value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double)"/>
        public static VolumeFlow CubicMetersPerSecond(this float value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double?)"/>
        public static VolumeFlow? CubicMetersPerSecond(this float? value) => VolumeFlow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double)"/>
        public static VolumeFlow CubicMetersPerSecond(this decimal value) => VolumeFlow.FromCubicMetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(double?)"/>
        public static VolumeFlow? CubicMetersPerSecond(this decimal? value) => VolumeFlow.FromCubicMetersPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicYardPerHour

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double)"/>
        public static VolumeFlow CubicYardsPerHour(this int value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double?)"/>
        public static VolumeFlow? CubicYardsPerHour(this int? value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double)"/>
        public static VolumeFlow CubicYardsPerHour(this long value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double?)"/>
        public static VolumeFlow? CubicYardsPerHour(this long? value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double)"/>
        public static VolumeFlow CubicYardsPerHour(this double value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double?)"/>
        public static VolumeFlow? CubicYardsPerHour(this double? value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double)"/>
        public static VolumeFlow CubicYardsPerHour(this float value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double?)"/>
        public static VolumeFlow? CubicYardsPerHour(this float? value) => VolumeFlow.FromCubicYardsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double)"/>
        public static VolumeFlow CubicYardsPerHour(this decimal value) => VolumeFlow.FromCubicYardsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(double?)"/>
        public static VolumeFlow? CubicYardsPerHour(this decimal? value) => VolumeFlow.FromCubicYardsPerHour(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicYardPerMinute

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double)"/>
        public static VolumeFlow CubicYardsPerMinute(this int value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double?)"/>
        public static VolumeFlow? CubicYardsPerMinute(this int? value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double)"/>
        public static VolumeFlow CubicYardsPerMinute(this long value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double?)"/>
        public static VolumeFlow? CubicYardsPerMinute(this long? value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double)"/>
        public static VolumeFlow CubicYardsPerMinute(this double value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double?)"/>
        public static VolumeFlow? CubicYardsPerMinute(this double? value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double)"/>
        public static VolumeFlow CubicYardsPerMinute(this float value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double?)"/>
        public static VolumeFlow? CubicYardsPerMinute(this float? value) => VolumeFlow.FromCubicYardsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double)"/>
        public static VolumeFlow CubicYardsPerMinute(this decimal value) => VolumeFlow.FromCubicYardsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(double?)"/>
        public static VolumeFlow? CubicYardsPerMinute(this decimal? value) => VolumeFlow.FromCubicYardsPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicYardPerSecond

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double)"/>
        public static VolumeFlow CubicYardsPerSecond(this int value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double?)"/>
        public static VolumeFlow? CubicYardsPerSecond(this int? value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double)"/>
        public static VolumeFlow CubicYardsPerSecond(this long value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double?)"/>
        public static VolumeFlow? CubicYardsPerSecond(this long? value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double)"/>
        public static VolumeFlow CubicYardsPerSecond(this double value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double?)"/>
        public static VolumeFlow? CubicYardsPerSecond(this double? value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double)"/>
        public static VolumeFlow CubicYardsPerSecond(this float value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double?)"/>
        public static VolumeFlow? CubicYardsPerSecond(this float? value) => VolumeFlow.FromCubicYardsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double)"/>
        public static VolumeFlow CubicYardsPerSecond(this decimal value) => VolumeFlow.FromCubicYardsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(double?)"/>
        public static VolumeFlow? CubicYardsPerSecond(this decimal? value) => VolumeFlow.FromCubicYardsPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicYardsPerDay

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double)"/>
        public static VolumeFlow CubicYardsPerDay(this int value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double?)"/>
        public static VolumeFlow? CubicYardsPerDay(this int? value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double)"/>
        public static VolumeFlow CubicYardsPerDay(this long value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double?)"/>
        public static VolumeFlow? CubicYardsPerDay(this long? value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double)"/>
        public static VolumeFlow CubicYardsPerDay(this double value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double?)"/>
        public static VolumeFlow? CubicYardsPerDay(this double? value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double)"/>
        public static VolumeFlow CubicYardsPerDay(this float value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double?)"/>
        public static VolumeFlow? CubicYardsPerDay(this float? value) => VolumeFlow.FromCubicYardsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double)"/>
        public static VolumeFlow CubicYardsPerDay(this decimal value) => VolumeFlow.FromCubicYardsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(double?)"/>
        public static VolumeFlow? CubicYardsPerDay(this decimal? value) => VolumeFlow.FromCubicYardsPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecilitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double)"/>
        public static VolumeFlow DecilitersPerDay(this int value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double?)"/>
        public static VolumeFlow? DecilitersPerDay(this int? value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double)"/>
        public static VolumeFlow DecilitersPerDay(this long value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double?)"/>
        public static VolumeFlow? DecilitersPerDay(this long? value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double)"/>
        public static VolumeFlow DecilitersPerDay(this double value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double?)"/>
        public static VolumeFlow? DecilitersPerDay(this double? value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double)"/>
        public static VolumeFlow DecilitersPerDay(this float value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double?)"/>
        public static VolumeFlow? DecilitersPerDay(this float? value) => VolumeFlow.FromDecilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double)"/>
        public static VolumeFlow DecilitersPerDay(this decimal value) => VolumeFlow.FromDecilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(double?)"/>
        public static VolumeFlow? DecilitersPerDay(this decimal? value) => VolumeFlow.FromDecilitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecilitersPerMinute

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double)"/>
        public static VolumeFlow DecilitersPerMinute(this int value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double?)"/>
        public static VolumeFlow? DecilitersPerMinute(this int? value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double)"/>
        public static VolumeFlow DecilitersPerMinute(this long value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double?)"/>
        public static VolumeFlow? DecilitersPerMinute(this long? value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double)"/>
        public static VolumeFlow DecilitersPerMinute(this double value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double?)"/>
        public static VolumeFlow? DecilitersPerMinute(this double? value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double)"/>
        public static VolumeFlow DecilitersPerMinute(this float value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double?)"/>
        public static VolumeFlow? DecilitersPerMinute(this float? value) => VolumeFlow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double)"/>
        public static VolumeFlow DecilitersPerMinute(this decimal value) => VolumeFlow.FromDecilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(double?)"/>
        public static VolumeFlow? DecilitersPerMinute(this decimal? value) => VolumeFlow.FromDecilitersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilolitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double)"/>
        public static VolumeFlow KilolitersPerDay(this int value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double?)"/>
        public static VolumeFlow? KilolitersPerDay(this int? value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double)"/>
        public static VolumeFlow KilolitersPerDay(this long value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double?)"/>
        public static VolumeFlow? KilolitersPerDay(this long? value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double)"/>
        public static VolumeFlow KilolitersPerDay(this double value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double?)"/>
        public static VolumeFlow? KilolitersPerDay(this double? value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double)"/>
        public static VolumeFlow KilolitersPerDay(this float value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double?)"/>
        public static VolumeFlow? KilolitersPerDay(this float? value) => VolumeFlow.FromKilolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double)"/>
        public static VolumeFlow KilolitersPerDay(this decimal value) => VolumeFlow.FromKilolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(double?)"/>
        public static VolumeFlow? KilolitersPerDay(this decimal? value) => VolumeFlow.FromKilolitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilolitersPerMinute

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double)"/>
        public static VolumeFlow KilolitersPerMinute(this int value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double?)"/>
        public static VolumeFlow? KilolitersPerMinute(this int? value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double)"/>
        public static VolumeFlow KilolitersPerMinute(this long value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double?)"/>
        public static VolumeFlow? KilolitersPerMinute(this long? value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double)"/>
        public static VolumeFlow KilolitersPerMinute(this double value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double?)"/>
        public static VolumeFlow? KilolitersPerMinute(this double? value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double)"/>
        public static VolumeFlow KilolitersPerMinute(this float value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double?)"/>
        public static VolumeFlow? KilolitersPerMinute(this float? value) => VolumeFlow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double)"/>
        public static VolumeFlow KilolitersPerMinute(this decimal value) => VolumeFlow.FromKilolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(double?)"/>
        public static VolumeFlow? KilolitersPerMinute(this decimal? value) => VolumeFlow.FromKilolitersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region LitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double)"/>
        public static VolumeFlow LitersPerDay(this int value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double?)"/>
        public static VolumeFlow? LitersPerDay(this int? value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double)"/>
        public static VolumeFlow LitersPerDay(this long value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double?)"/>
        public static VolumeFlow? LitersPerDay(this long? value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double)"/>
        public static VolumeFlow LitersPerDay(this double value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double?)"/>
        public static VolumeFlow? LitersPerDay(this double? value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double)"/>
        public static VolumeFlow LitersPerDay(this float value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double?)"/>
        public static VolumeFlow? LitersPerDay(this float? value) => VolumeFlow.FromLitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double)"/>
        public static VolumeFlow LitersPerDay(this decimal value) => VolumeFlow.FromLitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(double?)"/>
        public static VolumeFlow? LitersPerDay(this decimal? value) => VolumeFlow.FromLitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region LitersPerHour

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double)"/>
        public static VolumeFlow LitersPerHour(this int value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double?)"/>
        public static VolumeFlow? LitersPerHour(this int? value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double)"/>
        public static VolumeFlow LitersPerHour(this long value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double?)"/>
        public static VolumeFlow? LitersPerHour(this long? value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double)"/>
        public static VolumeFlow LitersPerHour(this double value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double?)"/>
        public static VolumeFlow? LitersPerHour(this double? value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double)"/>
        public static VolumeFlow LitersPerHour(this float value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double?)"/>
        public static VolumeFlow? LitersPerHour(this float? value) => VolumeFlow.FromLitersPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double)"/>
        public static VolumeFlow LitersPerHour(this decimal value) => VolumeFlow.FromLitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(double?)"/>
        public static VolumeFlow? LitersPerHour(this decimal? value) => VolumeFlow.FromLitersPerHour(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region LitersPerMinute

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double)"/>
        public static VolumeFlow LitersPerMinute(this int value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double?)"/>
        public static VolumeFlow? LitersPerMinute(this int? value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double)"/>
        public static VolumeFlow LitersPerMinute(this long value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double?)"/>
        public static VolumeFlow? LitersPerMinute(this long? value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double)"/>
        public static VolumeFlow LitersPerMinute(this double value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double?)"/>
        public static VolumeFlow? LitersPerMinute(this double? value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double)"/>
        public static VolumeFlow LitersPerMinute(this float value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double?)"/>
        public static VolumeFlow? LitersPerMinute(this float? value) => VolumeFlow.FromLitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double)"/>
        public static VolumeFlow LitersPerMinute(this decimal value) => VolumeFlow.FromLitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(double?)"/>
        public static VolumeFlow? LitersPerMinute(this decimal? value) => VolumeFlow.FromLitersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region LitersPerSecond

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double)"/>
        public static VolumeFlow LitersPerSecond(this int value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double?)"/>
        public static VolumeFlow? LitersPerSecond(this int? value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double)"/>
        public static VolumeFlow LitersPerSecond(this long value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double?)"/>
        public static VolumeFlow? LitersPerSecond(this long? value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double)"/>
        public static VolumeFlow LitersPerSecond(this double value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double?)"/>
        public static VolumeFlow? LitersPerSecond(this double? value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double)"/>
        public static VolumeFlow LitersPerSecond(this float value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double?)"/>
        public static VolumeFlow? LitersPerSecond(this float? value) => VolumeFlow.FromLitersPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double)"/>
        public static VolumeFlow LitersPerSecond(this decimal value) => VolumeFlow.FromLitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(double?)"/>
        public static VolumeFlow? LitersPerSecond(this decimal? value) => VolumeFlow.FromLitersPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegalitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double)"/>
        public static VolumeFlow MegalitersPerDay(this int value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double?)"/>
        public static VolumeFlow? MegalitersPerDay(this int? value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double)"/>
        public static VolumeFlow MegalitersPerDay(this long value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double?)"/>
        public static VolumeFlow? MegalitersPerDay(this long? value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double)"/>
        public static VolumeFlow MegalitersPerDay(this double value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double?)"/>
        public static VolumeFlow? MegalitersPerDay(this double? value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double)"/>
        public static VolumeFlow MegalitersPerDay(this float value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double?)"/>
        public static VolumeFlow? MegalitersPerDay(this float? value) => VolumeFlow.FromMegalitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double)"/>
        public static VolumeFlow MegalitersPerDay(this decimal value) => VolumeFlow.FromMegalitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(double?)"/>
        public static VolumeFlow? MegalitersPerDay(this decimal? value) => VolumeFlow.FromMegalitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegaukGallonsPerSecond

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double)"/>
        public static VolumeFlow MegaukGallonsPerSecond(this int value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double?)"/>
        public static VolumeFlow? MegaukGallonsPerSecond(this int? value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double)"/>
        public static VolumeFlow MegaukGallonsPerSecond(this long value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double?)"/>
        public static VolumeFlow? MegaukGallonsPerSecond(this long? value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double)"/>
        public static VolumeFlow MegaukGallonsPerSecond(this double value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double?)"/>
        public static VolumeFlow? MegaukGallonsPerSecond(this double? value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double)"/>
        public static VolumeFlow MegaukGallonsPerSecond(this float value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double?)"/>
        public static VolumeFlow? MegaukGallonsPerSecond(this float? value) => VolumeFlow.FromMegaukGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double)"/>
        public static VolumeFlow MegaukGallonsPerSecond(this decimal value) => VolumeFlow.FromMegaukGallonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(double?)"/>
        public static VolumeFlow? MegaukGallonsPerSecond(this decimal? value) => VolumeFlow.FromMegaukGallonsPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicrolitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double)"/>
        public static VolumeFlow MicrolitersPerDay(this int value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double?)"/>
        public static VolumeFlow? MicrolitersPerDay(this int? value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double)"/>
        public static VolumeFlow MicrolitersPerDay(this long value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double?)"/>
        public static VolumeFlow? MicrolitersPerDay(this long? value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double)"/>
        public static VolumeFlow MicrolitersPerDay(this double value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double?)"/>
        public static VolumeFlow? MicrolitersPerDay(this double? value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double)"/>
        public static VolumeFlow MicrolitersPerDay(this float value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double?)"/>
        public static VolumeFlow? MicrolitersPerDay(this float? value) => VolumeFlow.FromMicrolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double)"/>
        public static VolumeFlow MicrolitersPerDay(this decimal value) => VolumeFlow.FromMicrolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(double?)"/>
        public static VolumeFlow? MicrolitersPerDay(this decimal? value) => VolumeFlow.FromMicrolitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicrolitersPerMinute

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double)"/>
        public static VolumeFlow MicrolitersPerMinute(this int value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double?)"/>
        public static VolumeFlow? MicrolitersPerMinute(this int? value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double)"/>
        public static VolumeFlow MicrolitersPerMinute(this long value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double?)"/>
        public static VolumeFlow? MicrolitersPerMinute(this long? value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double)"/>
        public static VolumeFlow MicrolitersPerMinute(this double value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double?)"/>
        public static VolumeFlow? MicrolitersPerMinute(this double? value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double)"/>
        public static VolumeFlow MicrolitersPerMinute(this float value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double?)"/>
        public static VolumeFlow? MicrolitersPerMinute(this float? value) => VolumeFlow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double)"/>
        public static VolumeFlow MicrolitersPerMinute(this decimal value) => VolumeFlow.FromMicrolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(double?)"/>
        public static VolumeFlow? MicrolitersPerMinute(this decimal? value) => VolumeFlow.FromMicrolitersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MillilitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double)"/>
        public static VolumeFlow MillilitersPerDay(this int value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double?)"/>
        public static VolumeFlow? MillilitersPerDay(this int? value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double)"/>
        public static VolumeFlow MillilitersPerDay(this long value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double?)"/>
        public static VolumeFlow? MillilitersPerDay(this long? value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double)"/>
        public static VolumeFlow MillilitersPerDay(this double value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double?)"/>
        public static VolumeFlow? MillilitersPerDay(this double? value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double)"/>
        public static VolumeFlow MillilitersPerDay(this float value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double?)"/>
        public static VolumeFlow? MillilitersPerDay(this float? value) => VolumeFlow.FromMillilitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double)"/>
        public static VolumeFlow MillilitersPerDay(this decimal value) => VolumeFlow.FromMillilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(double?)"/>
        public static VolumeFlow? MillilitersPerDay(this decimal? value) => VolumeFlow.FromMillilitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MillilitersPerMinute

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double)"/>
        public static VolumeFlow MillilitersPerMinute(this int value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double?)"/>
        public static VolumeFlow? MillilitersPerMinute(this int? value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double)"/>
        public static VolumeFlow MillilitersPerMinute(this long value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double?)"/>
        public static VolumeFlow? MillilitersPerMinute(this long? value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double)"/>
        public static VolumeFlow MillilitersPerMinute(this double value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double?)"/>
        public static VolumeFlow? MillilitersPerMinute(this double? value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double)"/>
        public static VolumeFlow MillilitersPerMinute(this float value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double?)"/>
        public static VolumeFlow? MillilitersPerMinute(this float? value) => VolumeFlow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double)"/>
        public static VolumeFlow MillilitersPerMinute(this decimal value) => VolumeFlow.FromMillilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(double?)"/>
        public static VolumeFlow? MillilitersPerMinute(this decimal? value) => VolumeFlow.FromMillilitersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MillionUsGallonsPerDay

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double)"/>
        public static VolumeFlow MillionUsGallonsPerDay(this int value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double?)"/>
        public static VolumeFlow? MillionUsGallonsPerDay(this int? value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double)"/>
        public static VolumeFlow MillionUsGallonsPerDay(this long value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double?)"/>
        public static VolumeFlow? MillionUsGallonsPerDay(this long? value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double)"/>
        public static VolumeFlow MillionUsGallonsPerDay(this double value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double?)"/>
        public static VolumeFlow? MillionUsGallonsPerDay(this double? value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double)"/>
        public static VolumeFlow MillionUsGallonsPerDay(this float value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double?)"/>
        public static VolumeFlow? MillionUsGallonsPerDay(this float? value) => VolumeFlow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double)"/>
        public static VolumeFlow MillionUsGallonsPerDay(this decimal value) => VolumeFlow.FromMillionUsGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(double?)"/>
        public static VolumeFlow? MillionUsGallonsPerDay(this decimal? value) => VolumeFlow.FromMillionUsGallonsPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanolitersPerDay

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double)"/>
        public static VolumeFlow NanolitersPerDay(this int value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double?)"/>
        public static VolumeFlow? NanolitersPerDay(this int? value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double)"/>
        public static VolumeFlow NanolitersPerDay(this long value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double?)"/>
        public static VolumeFlow? NanolitersPerDay(this long? value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double)"/>
        public static VolumeFlow NanolitersPerDay(this double value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double?)"/>
        public static VolumeFlow? NanolitersPerDay(this double? value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double)"/>
        public static VolumeFlow NanolitersPerDay(this float value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double?)"/>
        public static VolumeFlow? NanolitersPerDay(this float? value) => VolumeFlow.FromNanolitersPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double)"/>
        public static VolumeFlow NanolitersPerDay(this decimal value) => VolumeFlow.FromNanolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(double?)"/>
        public static VolumeFlow? NanolitersPerDay(this decimal? value) => VolumeFlow.FromNanolitersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanolitersPerMinute

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double)"/>
        public static VolumeFlow NanolitersPerMinute(this int value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double?)"/>
        public static VolumeFlow? NanolitersPerMinute(this int? value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double)"/>
        public static VolumeFlow NanolitersPerMinute(this long value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double?)"/>
        public static VolumeFlow? NanolitersPerMinute(this long? value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double)"/>
        public static VolumeFlow NanolitersPerMinute(this double value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double?)"/>
        public static VolumeFlow? NanolitersPerMinute(this double? value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double)"/>
        public static VolumeFlow NanolitersPerMinute(this float value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double?)"/>
        public static VolumeFlow? NanolitersPerMinute(this float? value) => VolumeFlow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double)"/>
        public static VolumeFlow NanolitersPerMinute(this decimal value) => VolumeFlow.FromNanolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(double?)"/>
        public static VolumeFlow? NanolitersPerMinute(this decimal? value) => VolumeFlow.FromNanolitersPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region OilBarrelsPerDay

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double)"/>
        public static VolumeFlow OilBarrelsPerDay(this int value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double?)"/>
        public static VolumeFlow? OilBarrelsPerDay(this int? value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double)"/>
        public static VolumeFlow OilBarrelsPerDay(this long value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double?)"/>
        public static VolumeFlow? OilBarrelsPerDay(this long? value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double)"/>
        public static VolumeFlow OilBarrelsPerDay(this double value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double?)"/>
        public static VolumeFlow? OilBarrelsPerDay(this double? value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double)"/>
        public static VolumeFlow OilBarrelsPerDay(this float value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double?)"/>
        public static VolumeFlow? OilBarrelsPerDay(this float? value) => VolumeFlow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double)"/>
        public static VolumeFlow OilBarrelsPerDay(this decimal value) => VolumeFlow.FromOilBarrelsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(double?)"/>
        public static VolumeFlow? OilBarrelsPerDay(this decimal? value) => VolumeFlow.FromOilBarrelsPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region OilBarrelsPerSecond

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double)"/>
        public static VolumeFlow OilBarrelsPerSecond(this int value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double?)"/>
        public static VolumeFlow? OilBarrelsPerSecond(this int? value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double)"/>
        public static VolumeFlow OilBarrelsPerSecond(this long value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double?)"/>
        public static VolumeFlow? OilBarrelsPerSecond(this long? value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double)"/>
        public static VolumeFlow OilBarrelsPerSecond(this double value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double?)"/>
        public static VolumeFlow? OilBarrelsPerSecond(this double? value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double)"/>
        public static VolumeFlow OilBarrelsPerSecond(this float value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double?)"/>
        public static VolumeFlow? OilBarrelsPerSecond(this float? value) => VolumeFlow.FromOilBarrelsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double)"/>
        public static VolumeFlow OilBarrelsPerSecond(this decimal value) => VolumeFlow.FromOilBarrelsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(double?)"/>
        public static VolumeFlow? OilBarrelsPerSecond(this decimal? value) => VolumeFlow.FromOilBarrelsPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UkGallonsPerDay

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double)"/>
        public static VolumeFlow UkGallonsPerDay(this int value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double?)"/>
        public static VolumeFlow? UkGallonsPerDay(this int? value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double)"/>
        public static VolumeFlow UkGallonsPerDay(this long value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double?)"/>
        public static VolumeFlow? UkGallonsPerDay(this long? value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double)"/>
        public static VolumeFlow UkGallonsPerDay(this double value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double?)"/>
        public static VolumeFlow? UkGallonsPerDay(this double? value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double)"/>
        public static VolumeFlow UkGallonsPerDay(this float value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double?)"/>
        public static VolumeFlow? UkGallonsPerDay(this float? value) => VolumeFlow.FromUkGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double)"/>
        public static VolumeFlow UkGallonsPerDay(this decimal value) => VolumeFlow.FromUkGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(double?)"/>
        public static VolumeFlow? UkGallonsPerDay(this decimal? value) => VolumeFlow.FromUkGallonsPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UkGallonsPerMinute

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double)"/>
        public static VolumeFlow UkGallonsPerMinute(this int value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double?)"/>
        public static VolumeFlow? UkGallonsPerMinute(this int? value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double)"/>
        public static VolumeFlow UkGallonsPerMinute(this long value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double?)"/>
        public static VolumeFlow? UkGallonsPerMinute(this long? value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double)"/>
        public static VolumeFlow UkGallonsPerMinute(this double value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double?)"/>
        public static VolumeFlow? UkGallonsPerMinute(this double? value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double)"/>
        public static VolumeFlow UkGallonsPerMinute(this float value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double?)"/>
        public static VolumeFlow? UkGallonsPerMinute(this float? value) => VolumeFlow.FromUkGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double)"/>
        public static VolumeFlow UkGallonsPerMinute(this decimal value) => VolumeFlow.FromUkGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(double?)"/>
        public static VolumeFlow? UkGallonsPerMinute(this decimal? value) => VolumeFlow.FromUkGallonsPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UkGallonsPerSecond

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double)"/>
        public static VolumeFlow UkGallonsPerSecond(this int value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double?)"/>
        public static VolumeFlow? UkGallonsPerSecond(this int? value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double)"/>
        public static VolumeFlow UkGallonsPerSecond(this long value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double?)"/>
        public static VolumeFlow? UkGallonsPerSecond(this long? value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double)"/>
        public static VolumeFlow UkGallonsPerSecond(this double value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double?)"/>
        public static VolumeFlow? UkGallonsPerSecond(this double? value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double)"/>
        public static VolumeFlow UkGallonsPerSecond(this float value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double?)"/>
        public static VolumeFlow? UkGallonsPerSecond(this float? value) => VolumeFlow.FromUkGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double)"/>
        public static VolumeFlow UkGallonsPerSecond(this decimal value) => VolumeFlow.FromUkGallonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(double?)"/>
        public static VolumeFlow? UkGallonsPerSecond(this decimal? value) => VolumeFlow.FromUkGallonsPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UsGallonsPerDay

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double)"/>
        public static VolumeFlow UsGallonsPerDay(this int value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double?)"/>
        public static VolumeFlow? UsGallonsPerDay(this int? value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double)"/>
        public static VolumeFlow UsGallonsPerDay(this long value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double?)"/>
        public static VolumeFlow? UsGallonsPerDay(this long? value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double)"/>
        public static VolumeFlow UsGallonsPerDay(this double value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double?)"/>
        public static VolumeFlow? UsGallonsPerDay(this double? value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double)"/>
        public static VolumeFlow UsGallonsPerDay(this float value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double?)"/>
        public static VolumeFlow? UsGallonsPerDay(this float? value) => VolumeFlow.FromUsGallonsPerDay(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double)"/>
        public static VolumeFlow UsGallonsPerDay(this decimal value) => VolumeFlow.FromUsGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(double?)"/>
        public static VolumeFlow? UsGallonsPerDay(this decimal? value) => VolumeFlow.FromUsGallonsPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UsGallonsPerHour

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double)"/>
        public static VolumeFlow UsGallonsPerHour(this int value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double?)"/>
        public static VolumeFlow? UsGallonsPerHour(this int? value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double)"/>
        public static VolumeFlow UsGallonsPerHour(this long value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double?)"/>
        public static VolumeFlow? UsGallonsPerHour(this long? value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double)"/>
        public static VolumeFlow UsGallonsPerHour(this double value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double?)"/>
        public static VolumeFlow? UsGallonsPerHour(this double? value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double)"/>
        public static VolumeFlow UsGallonsPerHour(this float value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double?)"/>
        public static VolumeFlow? UsGallonsPerHour(this float? value) => VolumeFlow.FromUsGallonsPerHour(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double)"/>
        public static VolumeFlow UsGallonsPerHour(this decimal value) => VolumeFlow.FromUsGallonsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(double?)"/>
        public static VolumeFlow? UsGallonsPerHour(this decimal? value) => VolumeFlow.FromUsGallonsPerHour(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UsGallonsPerMinute

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double)"/>
        public static VolumeFlow UsGallonsPerMinute(this int value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double?)"/>
        public static VolumeFlow? UsGallonsPerMinute(this int? value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double)"/>
        public static VolumeFlow UsGallonsPerMinute(this long value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double?)"/>
        public static VolumeFlow? UsGallonsPerMinute(this long? value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double)"/>
        public static VolumeFlow UsGallonsPerMinute(this double value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double?)"/>
        public static VolumeFlow? UsGallonsPerMinute(this double? value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double)"/>
        public static VolumeFlow UsGallonsPerMinute(this float value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double?)"/>
        public static VolumeFlow? UsGallonsPerMinute(this float? value) => VolumeFlow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double)"/>
        public static VolumeFlow UsGallonsPerMinute(this decimal value) => VolumeFlow.FromUsGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(double?)"/>
        public static VolumeFlow? UsGallonsPerMinute(this decimal? value) => VolumeFlow.FromUsGallonsPerMinute(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region UsGallonsPerSecond

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double)"/>
        public static VolumeFlow UsGallonsPerSecond(this int value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double?)"/>
        public static VolumeFlow? UsGallonsPerSecond(this int? value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double)"/>
        public static VolumeFlow UsGallonsPerSecond(this long value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double?)"/>
        public static VolumeFlow? UsGallonsPerSecond(this long? value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double)"/>
        public static VolumeFlow UsGallonsPerSecond(this double value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double?)"/>
        public static VolumeFlow? UsGallonsPerSecond(this double? value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double)"/>
        public static VolumeFlow UsGallonsPerSecond(this float value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double?)"/>
        public static VolumeFlow? UsGallonsPerSecond(this float? value) => VolumeFlow.FromUsGallonsPerSecond(value);

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double)"/>
        public static VolumeFlow UsGallonsPerSecond(this decimal value) => VolumeFlow.FromUsGallonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(double?)"/>
        public static VolumeFlow? UsGallonsPerSecond(this decimal? value) => VolumeFlow.FromUsGallonsPerSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
