//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToElectricResistivity
{
    public static class NumberToElectricResistivityExtensions
    {
        #region KiloohmCentimeter

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double)"/>
        public static ElectricResistivity KiloohmsCentimeter(this int value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double?)"/>
        public static ElectricResistivity? KiloohmsCentimeter(this int? value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double)"/>
        public static ElectricResistivity KiloohmsCentimeter(this long value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double?)"/>
        public static ElectricResistivity? KiloohmsCentimeter(this long? value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double)"/>
        public static ElectricResistivity KiloohmsCentimeter(this double value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double?)"/>
        public static ElectricResistivity? KiloohmsCentimeter(this double? value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double)"/>
        public static ElectricResistivity KiloohmsCentimeter(this float value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double?)"/>
        public static ElectricResistivity? KiloohmsCentimeter(this float? value) => ElectricResistivity.FromKiloohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double)"/>
        public static ElectricResistivity KiloohmsCentimeter(this decimal value) => ElectricResistivity.FromKiloohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(double?)"/>
        public static ElectricResistivity? KiloohmsCentimeter(this decimal? value) => ElectricResistivity.FromKiloohmsCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KiloohmMeter

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double)"/>
        public static ElectricResistivity KiloohmsMeters(this int value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double?)"/>
        public static ElectricResistivity? KiloohmsMeters(this int? value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double)"/>
        public static ElectricResistivity KiloohmsMeters(this long value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double?)"/>
        public static ElectricResistivity? KiloohmsMeters(this long? value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double)"/>
        public static ElectricResistivity KiloohmsMeters(this double value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double?)"/>
        public static ElectricResistivity? KiloohmsMeters(this double? value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double)"/>
        public static ElectricResistivity KiloohmsMeters(this float value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double?)"/>
        public static ElectricResistivity? KiloohmsMeters(this float? value) => ElectricResistivity.FromKiloohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double)"/>
        public static ElectricResistivity KiloohmsMeters(this decimal value) => ElectricResistivity.FromKiloohmsMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsMeters(double?)"/>
        public static ElectricResistivity? KiloohmsMeters(this decimal? value) => ElectricResistivity.FromKiloohmsMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegaohmCentimeter

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double)"/>
        public static ElectricResistivity MegaohmsCentimeter(this int value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double?)"/>
        public static ElectricResistivity? MegaohmsCentimeter(this int? value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double)"/>
        public static ElectricResistivity MegaohmsCentimeter(this long value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double?)"/>
        public static ElectricResistivity? MegaohmsCentimeter(this long? value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double)"/>
        public static ElectricResistivity MegaohmsCentimeter(this double value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double?)"/>
        public static ElectricResistivity? MegaohmsCentimeter(this double? value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double)"/>
        public static ElectricResistivity MegaohmsCentimeter(this float value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double?)"/>
        public static ElectricResistivity? MegaohmsCentimeter(this float? value) => ElectricResistivity.FromMegaohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double)"/>
        public static ElectricResistivity MegaohmsCentimeter(this decimal value) => ElectricResistivity.FromMegaohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(double?)"/>
        public static ElectricResistivity? MegaohmsCentimeter(this decimal? value) => ElectricResistivity.FromMegaohmsCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegaohmMeter

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double)"/>
        public static ElectricResistivity MegaohmsMeters(this int value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double?)"/>
        public static ElectricResistivity? MegaohmsMeters(this int? value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double)"/>
        public static ElectricResistivity MegaohmsMeters(this long value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double?)"/>
        public static ElectricResistivity? MegaohmsMeters(this long? value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double)"/>
        public static ElectricResistivity MegaohmsMeters(this double value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double?)"/>
        public static ElectricResistivity? MegaohmsMeters(this double? value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double)"/>
        public static ElectricResistivity MegaohmsMeters(this float value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double?)"/>
        public static ElectricResistivity? MegaohmsMeters(this float? value) => ElectricResistivity.FromMegaohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double)"/>
        public static ElectricResistivity MegaohmsMeters(this decimal value) => ElectricResistivity.FromMegaohmsMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsMeters(double?)"/>
        public static ElectricResistivity? MegaohmsMeters(this decimal? value) => ElectricResistivity.FromMegaohmsMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicroohmCentimeter

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double)"/>
        public static ElectricResistivity MicroohmsCentimeter(this int value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double?)"/>
        public static ElectricResistivity? MicroohmsCentimeter(this int? value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double)"/>
        public static ElectricResistivity MicroohmsCentimeter(this long value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double?)"/>
        public static ElectricResistivity? MicroohmsCentimeter(this long? value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double)"/>
        public static ElectricResistivity MicroohmsCentimeter(this double value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double?)"/>
        public static ElectricResistivity? MicroohmsCentimeter(this double? value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double)"/>
        public static ElectricResistivity MicroohmsCentimeter(this float value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double?)"/>
        public static ElectricResistivity? MicroohmsCentimeter(this float? value) => ElectricResistivity.FromMicroohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double)"/>
        public static ElectricResistivity MicroohmsCentimeter(this decimal value) => ElectricResistivity.FromMicroohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(double?)"/>
        public static ElectricResistivity? MicroohmsCentimeter(this decimal? value) => ElectricResistivity.FromMicroohmsCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicroohmMeter

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double)"/>
        public static ElectricResistivity MicroohmsMeters(this int value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double?)"/>
        public static ElectricResistivity? MicroohmsMeters(this int? value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double)"/>
        public static ElectricResistivity MicroohmsMeters(this long value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double?)"/>
        public static ElectricResistivity? MicroohmsMeters(this long? value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double)"/>
        public static ElectricResistivity MicroohmsMeters(this double value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double?)"/>
        public static ElectricResistivity? MicroohmsMeters(this double? value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double)"/>
        public static ElectricResistivity MicroohmsMeters(this float value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double?)"/>
        public static ElectricResistivity? MicroohmsMeters(this float? value) => ElectricResistivity.FromMicroohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double)"/>
        public static ElectricResistivity MicroohmsMeters(this decimal value) => ElectricResistivity.FromMicroohmsMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsMeters(double?)"/>
        public static ElectricResistivity? MicroohmsMeters(this decimal? value) => ElectricResistivity.FromMicroohmsMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilliohmCentimeter

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double)"/>
        public static ElectricResistivity MilliohmsCentimeter(this int value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double?)"/>
        public static ElectricResistivity? MilliohmsCentimeter(this int? value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double)"/>
        public static ElectricResistivity MilliohmsCentimeter(this long value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double?)"/>
        public static ElectricResistivity? MilliohmsCentimeter(this long? value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double)"/>
        public static ElectricResistivity MilliohmsCentimeter(this double value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double?)"/>
        public static ElectricResistivity? MilliohmsCentimeter(this double? value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double)"/>
        public static ElectricResistivity MilliohmsCentimeter(this float value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double?)"/>
        public static ElectricResistivity? MilliohmsCentimeter(this float? value) => ElectricResistivity.FromMilliohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double)"/>
        public static ElectricResistivity MilliohmsCentimeter(this decimal value) => ElectricResistivity.FromMilliohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(double?)"/>
        public static ElectricResistivity? MilliohmsCentimeter(this decimal? value) => ElectricResistivity.FromMilliohmsCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilliohmMeter

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double)"/>
        public static ElectricResistivity MilliohmsMeters(this int value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double?)"/>
        public static ElectricResistivity? MilliohmsMeters(this int? value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double)"/>
        public static ElectricResistivity MilliohmsMeters(this long value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double?)"/>
        public static ElectricResistivity? MilliohmsMeters(this long? value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double)"/>
        public static ElectricResistivity MilliohmsMeters(this double value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double?)"/>
        public static ElectricResistivity? MilliohmsMeters(this double? value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double)"/>
        public static ElectricResistivity MilliohmsMeters(this float value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double?)"/>
        public static ElectricResistivity? MilliohmsMeters(this float? value) => ElectricResistivity.FromMilliohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double)"/>
        public static ElectricResistivity MilliohmsMeters(this decimal value) => ElectricResistivity.FromMilliohmsMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsMeters(double?)"/>
        public static ElectricResistivity? MilliohmsMeters(this decimal? value) => ElectricResistivity.FromMilliohmsMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanoohmCentimeter

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double)"/>
        public static ElectricResistivity NanoohmsCentimeter(this int value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double?)"/>
        public static ElectricResistivity? NanoohmsCentimeter(this int? value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double)"/>
        public static ElectricResistivity NanoohmsCentimeter(this long value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double?)"/>
        public static ElectricResistivity? NanoohmsCentimeter(this long? value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double)"/>
        public static ElectricResistivity NanoohmsCentimeter(this double value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double?)"/>
        public static ElectricResistivity? NanoohmsCentimeter(this double? value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double)"/>
        public static ElectricResistivity NanoohmsCentimeter(this float value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double?)"/>
        public static ElectricResistivity? NanoohmsCentimeter(this float? value) => ElectricResistivity.FromNanoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double)"/>
        public static ElectricResistivity NanoohmsCentimeter(this decimal value) => ElectricResistivity.FromNanoohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(double?)"/>
        public static ElectricResistivity? NanoohmsCentimeter(this decimal? value) => ElectricResistivity.FromNanoohmsCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanoohmMeter

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double)"/>
        public static ElectricResistivity NanoohmsMeters(this int value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double?)"/>
        public static ElectricResistivity? NanoohmsMeters(this int? value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double)"/>
        public static ElectricResistivity NanoohmsMeters(this long value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double?)"/>
        public static ElectricResistivity? NanoohmsMeters(this long? value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double)"/>
        public static ElectricResistivity NanoohmsMeters(this double value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double?)"/>
        public static ElectricResistivity? NanoohmsMeters(this double? value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double)"/>
        public static ElectricResistivity NanoohmsMeters(this float value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double?)"/>
        public static ElectricResistivity? NanoohmsMeters(this float? value) => ElectricResistivity.FromNanoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double)"/>
        public static ElectricResistivity NanoohmsMeters(this decimal value) => ElectricResistivity.FromNanoohmsMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsMeters(double?)"/>
        public static ElectricResistivity? NanoohmsMeters(this decimal? value) => ElectricResistivity.FromNanoohmsMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region OhmCentimeter

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double)"/>
        public static ElectricResistivity OhmsCentimeter(this int value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double?)"/>
        public static ElectricResistivity? OhmsCentimeter(this int? value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double)"/>
        public static ElectricResistivity OhmsCentimeter(this long value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double?)"/>
        public static ElectricResistivity? OhmsCentimeter(this long? value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double)"/>
        public static ElectricResistivity OhmsCentimeter(this double value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double?)"/>
        public static ElectricResistivity? OhmsCentimeter(this double? value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double)"/>
        public static ElectricResistivity OhmsCentimeter(this float value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double?)"/>
        public static ElectricResistivity? OhmsCentimeter(this float? value) => ElectricResistivity.FromOhmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double)"/>
        public static ElectricResistivity OhmsCentimeter(this decimal value) => ElectricResistivity.FromOhmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(double?)"/>
        public static ElectricResistivity? OhmsCentimeter(this decimal? value) => ElectricResistivity.FromOhmsCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region OhmMeter

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double)"/>
        public static ElectricResistivity OhmsMeters(this int value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double?)"/>
        public static ElectricResistivity? OhmsMeters(this int? value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double)"/>
        public static ElectricResistivity OhmsMeters(this long value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double?)"/>
        public static ElectricResistivity? OhmsMeters(this long? value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double)"/>
        public static ElectricResistivity OhmsMeters(this double value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double?)"/>
        public static ElectricResistivity? OhmsMeters(this double? value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double)"/>
        public static ElectricResistivity OhmsMeters(this float value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double?)"/>
        public static ElectricResistivity? OhmsMeters(this float? value) => ElectricResistivity.FromOhmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double)"/>
        public static ElectricResistivity OhmsMeters(this decimal value) => ElectricResistivity.FromOhmsMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromOhmsMeters(double?)"/>
        public static ElectricResistivity? OhmsMeters(this decimal? value) => ElectricResistivity.FromOhmsMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PicoohmCentimeter

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double)"/>
        public static ElectricResistivity PicoohmsCentimeter(this int value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double?)"/>
        public static ElectricResistivity? PicoohmsCentimeter(this int? value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double)"/>
        public static ElectricResistivity PicoohmsCentimeter(this long value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double?)"/>
        public static ElectricResistivity? PicoohmsCentimeter(this long? value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double)"/>
        public static ElectricResistivity PicoohmsCentimeter(this double value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double?)"/>
        public static ElectricResistivity? PicoohmsCentimeter(this double? value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double)"/>
        public static ElectricResistivity PicoohmsCentimeter(this float value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double?)"/>
        public static ElectricResistivity? PicoohmsCentimeter(this float? value) => ElectricResistivity.FromPicoohmsCentimeter(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double)"/>
        public static ElectricResistivity PicoohmsCentimeter(this decimal value) => ElectricResistivity.FromPicoohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(double?)"/>
        public static ElectricResistivity? PicoohmsCentimeter(this decimal? value) => ElectricResistivity.FromPicoohmsCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PicoohmMeter

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double)"/>
        public static ElectricResistivity PicoohmsMeters(this int value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double?)"/>
        public static ElectricResistivity? PicoohmsMeters(this int? value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double)"/>
        public static ElectricResistivity PicoohmsMeters(this long value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double?)"/>
        public static ElectricResistivity? PicoohmsMeters(this long? value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double)"/>
        public static ElectricResistivity PicoohmsMeters(this double value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double?)"/>
        public static ElectricResistivity? PicoohmsMeters(this double? value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double)"/>
        public static ElectricResistivity PicoohmsMeters(this float value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double?)"/>
        public static ElectricResistivity? PicoohmsMeters(this float? value) => ElectricResistivity.FromPicoohmsMeters(value);

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double)"/>
        public static ElectricResistivity PicoohmsMeters(this decimal value) => ElectricResistivity.FromPicoohmsMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsMeters(double?)"/>
        public static ElectricResistivity? PicoohmsMeters(this decimal? value) => ElectricResistivity.FromPicoohmsMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
