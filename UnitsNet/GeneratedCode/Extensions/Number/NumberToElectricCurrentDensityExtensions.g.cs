//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToElectricCurrentDensity
{
    public static class NumberToElectricCurrentDensityExtensions
    {
        #region AmperePerSquareMeter

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity AmperesPerSquareMeter(this int value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? AmperesPerSquareMeter(this int? value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity AmperesPerSquareMeter(this long value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? AmperesPerSquareMeter(this long? value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity AmperesPerSquareMeter(this double value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? AmperesPerSquareMeter(this double? value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity AmperesPerSquareMeter(this float value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? AmperesPerSquareMeter(this float? value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity AmperesPerSquareMeter(this decimal value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCurrentDensity.FromAmperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? AmperesPerSquareMeter(this decimal? value) => ElectricCurrentDensity.FromAmperesPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KiloamperePerSquareMeter

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity KiloamperesPerSquareMeter(this int value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? KiloamperesPerSquareMeter(this int? value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity KiloamperesPerSquareMeter(this long value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? KiloamperesPerSquareMeter(this long? value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity KiloamperesPerSquareMeter(this double value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? KiloamperesPerSquareMeter(this double? value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity KiloamperesPerSquareMeter(this float value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? KiloamperesPerSquareMeter(this float? value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity KiloamperesPerSquareMeter(this decimal value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCurrentDensity.FromKiloamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? KiloamperesPerSquareMeter(this decimal? value) => ElectricCurrentDensity.FromKiloamperesPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegaamperePerSquareMeter

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MegaamperesPerSquareMeter(this int value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MegaamperesPerSquareMeter(this int? value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MegaamperesPerSquareMeter(this long value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MegaamperesPerSquareMeter(this long? value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MegaamperesPerSquareMeter(this double value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MegaamperesPerSquareMeter(this double? value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MegaamperesPerSquareMeter(this float value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MegaamperesPerSquareMeter(this float? value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MegaamperesPerSquareMeter(this decimal value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCurrentDensity.FromMegaamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MegaamperesPerSquareMeter(this decimal? value) => ElectricCurrentDensity.FromMegaamperesPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicroamperePerSquareMeter

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MicroamperesPerSquareMeter(this int value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MicroamperesPerSquareMeter(this int? value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MicroamperesPerSquareMeter(this long value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MicroamperesPerSquareMeter(this long? value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MicroamperesPerSquareMeter(this double value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MicroamperesPerSquareMeter(this double? value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MicroamperesPerSquareMeter(this float value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MicroamperesPerSquareMeter(this float? value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MicroamperesPerSquareMeter(this decimal value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCurrentDensity.FromMicroamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MicroamperesPerSquareMeter(this decimal? value) => ElectricCurrentDensity.FromMicroamperesPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilliamperePerSquareMeter

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MilliamperesPerSquareMeter(this int value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MilliamperesPerSquareMeter(this int? value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MilliamperesPerSquareMeter(this long value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MilliamperesPerSquareMeter(this long? value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MilliamperesPerSquareMeter(this double value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MilliamperesPerSquareMeter(this double? value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MilliamperesPerSquareMeter(this float value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MilliamperesPerSquareMeter(this float? value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity MilliamperesPerSquareMeter(this decimal value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCurrentDensity.FromMilliamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? MilliamperesPerSquareMeter(this decimal? value) => ElectricCurrentDensity.FromMilliamperesPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanoamperePerSquareMeter

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity NanoamperesPerSquareMeter(this int value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? NanoamperesPerSquareMeter(this int? value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity NanoamperesPerSquareMeter(this long value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? NanoamperesPerSquareMeter(this long? value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity NanoamperesPerSquareMeter(this double value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? NanoamperesPerSquareMeter(this double? value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity NanoamperesPerSquareMeter(this float value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? NanoamperesPerSquareMeter(this float? value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity NanoamperesPerSquareMeter(this decimal value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCurrentDensity.FromNanoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? NanoamperesPerSquareMeter(this decimal? value) => ElectricCurrentDensity.FromNanoamperesPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PicoamperePerSquareMeter

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity PicoamperesPerSquareMeter(this int value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? PicoamperesPerSquareMeter(this int? value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity PicoamperesPerSquareMeter(this long value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? PicoamperesPerSquareMeter(this long? value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity PicoamperesPerSquareMeter(this double value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? PicoamperesPerSquareMeter(this double? value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity PicoamperesPerSquareMeter(this float value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? PicoamperesPerSquareMeter(this float? value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value);

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double)"/>
        public static ElectricCurrentDensity PicoamperesPerSquareMeter(this decimal value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCurrentDensity.FromPicoamperesPerSquareMeter(double?)"/>
        public static ElectricCurrentDensity? PicoamperesPerSquareMeter(this decimal? value) => ElectricCurrentDensity.FromPicoamperesPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
