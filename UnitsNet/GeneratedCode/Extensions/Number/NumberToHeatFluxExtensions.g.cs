//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToHeatFlux
{
    public static class NumberToHeatFluxExtensions
    {
        #region BtuPerHourSquareFoot

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double)"/>
        public static HeatFlux BtuPerHourSquareFoot(this int value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double?)"/>
        public static HeatFlux? BtuPerHourSquareFoot(this int? value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double)"/>
        public static HeatFlux BtuPerHourSquareFoot(this long value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double?)"/>
        public static HeatFlux? BtuPerHourSquareFoot(this long? value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double)"/>
        public static HeatFlux BtuPerHourSquareFoot(this double value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double?)"/>
        public static HeatFlux? BtuPerHourSquareFoot(this double? value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double)"/>
        public static HeatFlux BtuPerHourSquareFoot(this float value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double?)"/>
        public static HeatFlux? BtuPerHourSquareFoot(this float? value) => HeatFlux.FromBtuPerHourSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double)"/>
        public static HeatFlux BtuPerHourSquareFoot(this decimal value) => HeatFlux.FromBtuPerHourSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtuPerHourSquareFoot(double?)"/>
        public static HeatFlux? BtuPerHourSquareFoot(this decimal? value) => HeatFlux.FromBtuPerHourSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region BtuPerMinuteSquareFoot

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double)"/>
        public static HeatFlux BtuPerMinuteSquareFoot(this int value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double?)"/>
        public static HeatFlux? BtuPerMinuteSquareFoot(this int? value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double)"/>
        public static HeatFlux BtuPerMinuteSquareFoot(this long value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double?)"/>
        public static HeatFlux? BtuPerMinuteSquareFoot(this long? value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double)"/>
        public static HeatFlux BtuPerMinuteSquareFoot(this double value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double?)"/>
        public static HeatFlux? BtuPerMinuteSquareFoot(this double? value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double)"/>
        public static HeatFlux BtuPerMinuteSquareFoot(this float value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double?)"/>
        public static HeatFlux? BtuPerMinuteSquareFoot(this float? value) => HeatFlux.FromBtuPerMinuteSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double)"/>
        public static HeatFlux BtuPerMinuteSquareFoot(this decimal value) => HeatFlux.FromBtuPerMinuteSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtuPerMinuteSquareFoot(double?)"/>
        public static HeatFlux? BtuPerMinuteSquareFoot(this decimal? value) => HeatFlux.FromBtuPerMinuteSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region BtuPerSecondSquareFoot

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double)"/>
        public static HeatFlux BtuPerSecondSquareFoot(this int value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double?)"/>
        public static HeatFlux? BtuPerSecondSquareFoot(this int? value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double)"/>
        public static HeatFlux BtuPerSecondSquareFoot(this long value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double?)"/>
        public static HeatFlux? BtuPerSecondSquareFoot(this long? value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double)"/>
        public static HeatFlux BtuPerSecondSquareFoot(this double value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double?)"/>
        public static HeatFlux? BtuPerSecondSquareFoot(this double? value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double)"/>
        public static HeatFlux BtuPerSecondSquareFoot(this float value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double?)"/>
        public static HeatFlux? BtuPerSecondSquareFoot(this float? value) => HeatFlux.FromBtuPerSecondSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double)"/>
        public static HeatFlux BtuPerSecondSquareFoot(this decimal value) => HeatFlux.FromBtuPerSecondSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareFoot(double?)"/>
        public static HeatFlux? BtuPerSecondSquareFoot(this decimal? value) => HeatFlux.FromBtuPerSecondSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region BtuPerSecondSquareInch

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double)"/>
        public static HeatFlux BtuPerSecondSquareInch(this int value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double?)"/>
        public static HeatFlux? BtuPerSecondSquareInch(this int? value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double)"/>
        public static HeatFlux BtuPerSecondSquareInch(this long value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double?)"/>
        public static HeatFlux? BtuPerSecondSquareInch(this long? value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double)"/>
        public static HeatFlux BtuPerSecondSquareInch(this double value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double?)"/>
        public static HeatFlux? BtuPerSecondSquareInch(this double? value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double)"/>
        public static HeatFlux BtuPerSecondSquareInch(this float value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double?)"/>
        public static HeatFlux? BtuPerSecondSquareInch(this float? value) => HeatFlux.FromBtuPerSecondSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double)"/>
        public static HeatFlux BtuPerSecondSquareInch(this decimal value) => HeatFlux.FromBtuPerSecondSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtuPerSecondSquareInch(double?)"/>
        public static HeatFlux? BtuPerSecondSquareInch(this decimal? value) => HeatFlux.FromBtuPerSecondSquareInch(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CalPerSecondSquareCentimeter

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux CalPerSecondSquareCentimeter(this int value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? CalPerSecondSquareCentimeter(this int? value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux CalPerSecondSquareCentimeter(this long value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? CalPerSecondSquareCentimeter(this long? value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux CalPerSecondSquareCentimeter(this double value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? CalPerSecondSquareCentimeter(this double? value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux CalPerSecondSquareCentimeter(this float value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? CalPerSecondSquareCentimeter(this float? value) => HeatFlux.FromCalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux CalPerSecondSquareCentimeter(this decimal value) => HeatFlux.FromCalPerSecondSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromCalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? CalPerSecondSquareCentimeter(this decimal? value) => HeatFlux.FromCalPerSecondSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CentiwattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double)"/>
        public static HeatFlux CentiwattsPerSquareMeter(this int value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double?)"/>
        public static HeatFlux? CentiwattsPerSquareMeter(this int? value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double)"/>
        public static HeatFlux CentiwattsPerSquareMeter(this long value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double?)"/>
        public static HeatFlux? CentiwattsPerSquareMeter(this long? value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double)"/>
        public static HeatFlux CentiwattsPerSquareMeter(this double value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double?)"/>
        public static HeatFlux? CentiwattsPerSquareMeter(this double? value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double)"/>
        public static HeatFlux CentiwattsPerSquareMeter(this float value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double?)"/>
        public static HeatFlux? CentiwattsPerSquareMeter(this float? value) => HeatFlux.FromCentiwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double)"/>
        public static HeatFlux CentiwattsPerSquareMeter(this decimal value) => HeatFlux.FromCentiwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double?)"/>
        public static HeatFlux? CentiwattsPerSquareMeter(this decimal? value) => HeatFlux.FromCentiwattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DeciwattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double)"/>
        public static HeatFlux DeciwattsPerSquareMeter(this int value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double?)"/>
        public static HeatFlux? DeciwattsPerSquareMeter(this int? value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double)"/>
        public static HeatFlux DeciwattsPerSquareMeter(this long value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double?)"/>
        public static HeatFlux? DeciwattsPerSquareMeter(this long? value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double)"/>
        public static HeatFlux DeciwattsPerSquareMeter(this double value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double?)"/>
        public static HeatFlux? DeciwattsPerSquareMeter(this double? value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double)"/>
        public static HeatFlux DeciwattsPerSquareMeter(this float value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double?)"/>
        public static HeatFlux? DeciwattsPerSquareMeter(this float? value) => HeatFlux.FromDeciwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double)"/>
        public static HeatFlux DeciwattsPerSquareMeter(this decimal value) => HeatFlux.FromDeciwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double?)"/>
        public static HeatFlux? DeciwattsPerSquareMeter(this decimal? value) => HeatFlux.FromDeciwattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilocalPerHourSquareMeter

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double)"/>
        public static HeatFlux KilocalPerHourSquareMeter(this int value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double?)"/>
        public static HeatFlux? KilocalPerHourSquareMeter(this int? value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double)"/>
        public static HeatFlux KilocalPerHourSquareMeter(this long value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double?)"/>
        public static HeatFlux? KilocalPerHourSquareMeter(this long? value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double)"/>
        public static HeatFlux KilocalPerHourSquareMeter(this double value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double?)"/>
        public static HeatFlux? KilocalPerHourSquareMeter(this double? value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double)"/>
        public static HeatFlux KilocalPerHourSquareMeter(this float value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double?)"/>
        public static HeatFlux? KilocalPerHourSquareMeter(this float? value) => HeatFlux.FromKilocalPerHourSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double)"/>
        public static HeatFlux KilocalPerHourSquareMeter(this decimal value) => HeatFlux.FromKilocalPerHourSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromKilocalPerHourSquareMeter(double?)"/>
        public static HeatFlux? KilocalPerHourSquareMeter(this decimal? value) => HeatFlux.FromKilocalPerHourSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilocalPerSecondSquareCentimeter

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux KilocalPerSecondSquareCentimeter(this int value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? KilocalPerSecondSquareCentimeter(this int? value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux KilocalPerSecondSquareCentimeter(this long value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? KilocalPerSecondSquareCentimeter(this long? value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux KilocalPerSecondSquareCentimeter(this double value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? KilocalPerSecondSquareCentimeter(this double? value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux KilocalPerSecondSquareCentimeter(this float value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? KilocalPerSecondSquareCentimeter(this float? value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double)"/>
        public static HeatFlux KilocalPerSecondSquareCentimeter(this decimal value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromKilocalPerSecondSquareCentimeter(double?)"/>
        public static HeatFlux? KilocalPerSecondSquareCentimeter(this decimal? value) => HeatFlux.FromKilocalPerSecondSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilowattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double)"/>
        public static HeatFlux KilowattsPerSquareMeter(this int value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double?)"/>
        public static HeatFlux? KilowattsPerSquareMeter(this int? value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double)"/>
        public static HeatFlux KilowattsPerSquareMeter(this long value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double?)"/>
        public static HeatFlux? KilowattsPerSquareMeter(this long? value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double)"/>
        public static HeatFlux KilowattsPerSquareMeter(this double value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double?)"/>
        public static HeatFlux? KilowattsPerSquareMeter(this double? value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double)"/>
        public static HeatFlux KilowattsPerSquareMeter(this float value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double?)"/>
        public static HeatFlux? KilowattsPerSquareMeter(this float? value) => HeatFlux.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double)"/>
        public static HeatFlux KilowattsPerSquareMeter(this decimal value) => HeatFlux.FromKilowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double?)"/>
        public static HeatFlux? KilowattsPerSquareMeter(this decimal? value) => HeatFlux.FromKilowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicrowattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double)"/>
        public static HeatFlux MicrowattsPerSquareMeter(this int value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double?)"/>
        public static HeatFlux? MicrowattsPerSquareMeter(this int? value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double)"/>
        public static HeatFlux MicrowattsPerSquareMeter(this long value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double?)"/>
        public static HeatFlux? MicrowattsPerSquareMeter(this long? value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double)"/>
        public static HeatFlux MicrowattsPerSquareMeter(this double value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double?)"/>
        public static HeatFlux? MicrowattsPerSquareMeter(this double? value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double)"/>
        public static HeatFlux MicrowattsPerSquareMeter(this float value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double?)"/>
        public static HeatFlux? MicrowattsPerSquareMeter(this float? value) => HeatFlux.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double)"/>
        public static HeatFlux MicrowattsPerSquareMeter(this decimal value) => HeatFlux.FromMicrowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double?)"/>
        public static HeatFlux? MicrowattsPerSquareMeter(this decimal? value) => HeatFlux.FromMicrowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilliwattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double)"/>
        public static HeatFlux MilliwattsPerSquareMeter(this int value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double?)"/>
        public static HeatFlux? MilliwattsPerSquareMeter(this int? value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double)"/>
        public static HeatFlux MilliwattsPerSquareMeter(this long value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double?)"/>
        public static HeatFlux? MilliwattsPerSquareMeter(this long? value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double)"/>
        public static HeatFlux MilliwattsPerSquareMeter(this double value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double?)"/>
        public static HeatFlux? MilliwattsPerSquareMeter(this double? value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double)"/>
        public static HeatFlux MilliwattsPerSquareMeter(this float value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double?)"/>
        public static HeatFlux? MilliwattsPerSquareMeter(this float? value) => HeatFlux.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double)"/>
        public static HeatFlux MilliwattsPerSquareMeter(this decimal value) => HeatFlux.FromMilliwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double?)"/>
        public static HeatFlux? MilliwattsPerSquareMeter(this decimal? value) => HeatFlux.FromMilliwattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanowattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double)"/>
        public static HeatFlux NanowattsPerSquareMeter(this int value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double?)"/>
        public static HeatFlux? NanowattsPerSquareMeter(this int? value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double)"/>
        public static HeatFlux NanowattsPerSquareMeter(this long value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double?)"/>
        public static HeatFlux? NanowattsPerSquareMeter(this long? value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double)"/>
        public static HeatFlux NanowattsPerSquareMeter(this double value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double?)"/>
        public static HeatFlux? NanowattsPerSquareMeter(this double? value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double)"/>
        public static HeatFlux NanowattsPerSquareMeter(this float value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double?)"/>
        public static HeatFlux? NanowattsPerSquareMeter(this float? value) => HeatFlux.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double)"/>
        public static HeatFlux NanowattsPerSquareMeter(this decimal value) => HeatFlux.FromNanowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double?)"/>
        public static HeatFlux? NanowattsPerSquareMeter(this decimal? value) => HeatFlux.FromNanowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareFoot

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double)"/>
        public static HeatFlux WattPerSquareFoot(this int value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double?)"/>
        public static HeatFlux? WattPerSquareFoot(this int? value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double)"/>
        public static HeatFlux WattPerSquareFoot(this long value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double?)"/>
        public static HeatFlux? WattPerSquareFoot(this long? value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double)"/>
        public static HeatFlux WattPerSquareFoot(this double value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double?)"/>
        public static HeatFlux? WattPerSquareFoot(this double? value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double)"/>
        public static HeatFlux WattPerSquareFoot(this float value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double?)"/>
        public static HeatFlux? WattPerSquareFoot(this float? value) => HeatFlux.FromWattPerSquareFoot(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double)"/>
        public static HeatFlux WattPerSquareFoot(this decimal value) => HeatFlux.FromWattPerSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareFoot(double?)"/>
        public static HeatFlux? WattPerSquareFoot(this decimal? value) => HeatFlux.FromWattPerSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareInch

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double)"/>
        public static HeatFlux WattPerSquareInch(this int value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double?)"/>
        public static HeatFlux? WattPerSquareInch(this int? value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double)"/>
        public static HeatFlux WattPerSquareInch(this long value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double?)"/>
        public static HeatFlux? WattPerSquareInch(this long? value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double)"/>
        public static HeatFlux WattPerSquareInch(this double value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double?)"/>
        public static HeatFlux? WattPerSquareInch(this double? value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double)"/>
        public static HeatFlux WattPerSquareInch(this float value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double?)"/>
        public static HeatFlux? WattPerSquareInch(this float? value) => HeatFlux.FromWattPerSquareInch(value);

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double)"/>
        public static HeatFlux WattPerSquareInch(this decimal value) => HeatFlux.FromWattPerSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromWattPerSquareInch(double?)"/>
        public static HeatFlux? WattPerSquareInch(this decimal? value) => HeatFlux.FromWattPerSquareInch(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double)"/>
        public static HeatFlux WattsPerSquareMeter(this int value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double?)"/>
        public static HeatFlux? WattsPerSquareMeter(this int? value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double)"/>
        public static HeatFlux WattsPerSquareMeter(this long value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double?)"/>
        public static HeatFlux? WattsPerSquareMeter(this long? value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double)"/>
        public static HeatFlux WattsPerSquareMeter(this double value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double?)"/>
        public static HeatFlux? WattsPerSquareMeter(this double? value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double)"/>
        public static HeatFlux WattsPerSquareMeter(this float value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double?)"/>
        public static HeatFlux? WattsPerSquareMeter(this float? value) => HeatFlux.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double)"/>
        public static HeatFlux WattsPerSquareMeter(this decimal value) => HeatFlux.FromWattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double?)"/>
        public static HeatFlux? WattsPerSquareMeter(this decimal? value) => HeatFlux.FromWattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
