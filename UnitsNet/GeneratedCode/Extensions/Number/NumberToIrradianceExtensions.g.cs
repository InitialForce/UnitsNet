//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToIrradiance
{
    public static class NumberToIrradianceExtensions
    {
        #region KilowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double)"/>
        public static Irradiance KilowattsPerSquareCentimeter(this int value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? KilowattsPerSquareCentimeter(this int? value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double)"/>
        public static Irradiance KilowattsPerSquareCentimeter(this long value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? KilowattsPerSquareCentimeter(this long? value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double)"/>
        public static Irradiance KilowattsPerSquareCentimeter(this double value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? KilowattsPerSquareCentimeter(this double? value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double)"/>
        public static Irradiance KilowattsPerSquareCentimeter(this float value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? KilowattsPerSquareCentimeter(this float? value) => Irradiance.FromKilowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double)"/>
        public static Irradiance KilowattsPerSquareCentimeter(this decimal value) => Irradiance.FromKilowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? KilowattsPerSquareCentimeter(this decimal? value) => Irradiance.FromKilowattsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double)"/>
        public static Irradiance KilowattsPerSquareMeter(this int value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double?)"/>
        public static Irradiance? KilowattsPerSquareMeter(this int? value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double)"/>
        public static Irradiance KilowattsPerSquareMeter(this long value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double?)"/>
        public static Irradiance? KilowattsPerSquareMeter(this long? value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double)"/>
        public static Irradiance KilowattsPerSquareMeter(this double value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double?)"/>
        public static Irradiance? KilowattsPerSquareMeter(this double? value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double)"/>
        public static Irradiance KilowattsPerSquareMeter(this float value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double?)"/>
        public static Irradiance? KilowattsPerSquareMeter(this float? value) => Irradiance.FromKilowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double)"/>
        public static Irradiance KilowattsPerSquareMeter(this decimal value) => Irradiance.FromKilowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(double?)"/>
        public static Irradiance? KilowattsPerSquareMeter(this decimal? value) => Irradiance.FromKilowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegawattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double)"/>
        public static Irradiance MegawattsPerSquareCentimeter(this int value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MegawattsPerSquareCentimeter(this int? value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double)"/>
        public static Irradiance MegawattsPerSquareCentimeter(this long value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MegawattsPerSquareCentimeter(this long? value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double)"/>
        public static Irradiance MegawattsPerSquareCentimeter(this double value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MegawattsPerSquareCentimeter(this double? value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double)"/>
        public static Irradiance MegawattsPerSquareCentimeter(this float value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MegawattsPerSquareCentimeter(this float? value) => Irradiance.FromMegawattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double)"/>
        public static Irradiance MegawattsPerSquareCentimeter(this decimal value) => Irradiance.FromMegawattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MegawattsPerSquareCentimeter(this decimal? value) => Irradiance.FromMegawattsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegawattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double)"/>
        public static Irradiance MegawattsPerSquareMeter(this int value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double?)"/>
        public static Irradiance? MegawattsPerSquareMeter(this int? value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double)"/>
        public static Irradiance MegawattsPerSquareMeter(this long value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double?)"/>
        public static Irradiance? MegawattsPerSquareMeter(this long? value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double)"/>
        public static Irradiance MegawattsPerSquareMeter(this double value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double?)"/>
        public static Irradiance? MegawattsPerSquareMeter(this double? value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double)"/>
        public static Irradiance MegawattsPerSquareMeter(this float value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double?)"/>
        public static Irradiance? MegawattsPerSquareMeter(this float? value) => Irradiance.FromMegawattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double)"/>
        public static Irradiance MegawattsPerSquareMeter(this decimal value) => Irradiance.FromMegawattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(double?)"/>
        public static Irradiance? MegawattsPerSquareMeter(this decimal? value) => Irradiance.FromMegawattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicrowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double)"/>
        public static Irradiance MicrowattsPerSquareCentimeter(this int value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareCentimeter(this int? value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double)"/>
        public static Irradiance MicrowattsPerSquareCentimeter(this long value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareCentimeter(this long? value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double)"/>
        public static Irradiance MicrowattsPerSquareCentimeter(this double value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareCentimeter(this double? value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double)"/>
        public static Irradiance MicrowattsPerSquareCentimeter(this float value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareCentimeter(this float? value) => Irradiance.FromMicrowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double)"/>
        public static Irradiance MicrowattsPerSquareCentimeter(this decimal value) => Irradiance.FromMicrowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareCentimeter(this decimal? value) => Irradiance.FromMicrowattsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicrowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double)"/>
        public static Irradiance MicrowattsPerSquareMeter(this int value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareMeter(this int? value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double)"/>
        public static Irradiance MicrowattsPerSquareMeter(this long value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareMeter(this long? value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double)"/>
        public static Irradiance MicrowattsPerSquareMeter(this double value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareMeter(this double? value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double)"/>
        public static Irradiance MicrowattsPerSquareMeter(this float value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareMeter(this float? value) => Irradiance.FromMicrowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double)"/>
        public static Irradiance MicrowattsPerSquareMeter(this decimal value) => Irradiance.FromMicrowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(double?)"/>
        public static Irradiance? MicrowattsPerSquareMeter(this decimal? value) => Irradiance.FromMicrowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilliwattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double)"/>
        public static Irradiance MilliwattsPerSquareCentimeter(this int value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareCentimeter(this int? value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double)"/>
        public static Irradiance MilliwattsPerSquareCentimeter(this long value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareCentimeter(this long? value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double)"/>
        public static Irradiance MilliwattsPerSquareCentimeter(this double value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareCentimeter(this double? value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double)"/>
        public static Irradiance MilliwattsPerSquareCentimeter(this float value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareCentimeter(this float? value) => Irradiance.FromMilliwattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double)"/>
        public static Irradiance MilliwattsPerSquareCentimeter(this decimal value) => Irradiance.FromMilliwattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareCentimeter(this decimal? value) => Irradiance.FromMilliwattsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilliwattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double)"/>
        public static Irradiance MilliwattsPerSquareMeter(this int value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareMeter(this int? value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double)"/>
        public static Irradiance MilliwattsPerSquareMeter(this long value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareMeter(this long? value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double)"/>
        public static Irradiance MilliwattsPerSquareMeter(this double value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareMeter(this double? value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double)"/>
        public static Irradiance MilliwattsPerSquareMeter(this float value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareMeter(this float? value) => Irradiance.FromMilliwattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double)"/>
        public static Irradiance MilliwattsPerSquareMeter(this decimal value) => Irradiance.FromMilliwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(double?)"/>
        public static Irradiance? MilliwattsPerSquareMeter(this decimal? value) => Irradiance.FromMilliwattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double)"/>
        public static Irradiance NanowattsPerSquareCentimeter(this int value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? NanowattsPerSquareCentimeter(this int? value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double)"/>
        public static Irradiance NanowattsPerSquareCentimeter(this long value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? NanowattsPerSquareCentimeter(this long? value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double)"/>
        public static Irradiance NanowattsPerSquareCentimeter(this double value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? NanowattsPerSquareCentimeter(this double? value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double)"/>
        public static Irradiance NanowattsPerSquareCentimeter(this float value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? NanowattsPerSquareCentimeter(this float? value) => Irradiance.FromNanowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double)"/>
        public static Irradiance NanowattsPerSquareCentimeter(this decimal value) => Irradiance.FromNanowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? NanowattsPerSquareCentimeter(this decimal? value) => Irradiance.FromNanowattsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double)"/>
        public static Irradiance NanowattsPerSquareMeter(this int value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double?)"/>
        public static Irradiance? NanowattsPerSquareMeter(this int? value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double)"/>
        public static Irradiance NanowattsPerSquareMeter(this long value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double?)"/>
        public static Irradiance? NanowattsPerSquareMeter(this long? value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double)"/>
        public static Irradiance NanowattsPerSquareMeter(this double value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double?)"/>
        public static Irradiance? NanowattsPerSquareMeter(this double? value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double)"/>
        public static Irradiance NanowattsPerSquareMeter(this float value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double?)"/>
        public static Irradiance? NanowattsPerSquareMeter(this float? value) => Irradiance.FromNanowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double)"/>
        public static Irradiance NanowattsPerSquareMeter(this decimal value) => Irradiance.FromNanowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(double?)"/>
        public static Irradiance? NanowattsPerSquareMeter(this decimal? value) => Irradiance.FromNanowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PicowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double)"/>
        public static Irradiance PicowattsPerSquareCentimeter(this int value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? PicowattsPerSquareCentimeter(this int? value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double)"/>
        public static Irradiance PicowattsPerSquareCentimeter(this long value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? PicowattsPerSquareCentimeter(this long? value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double)"/>
        public static Irradiance PicowattsPerSquareCentimeter(this double value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? PicowattsPerSquareCentimeter(this double? value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double)"/>
        public static Irradiance PicowattsPerSquareCentimeter(this float value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? PicowattsPerSquareCentimeter(this float? value) => Irradiance.FromPicowattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double)"/>
        public static Irradiance PicowattsPerSquareCentimeter(this decimal value) => Irradiance.FromPicowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(double?)"/>
        public static Irradiance? PicowattsPerSquareCentimeter(this decimal? value) => Irradiance.FromPicowattsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PicowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double)"/>
        public static Irradiance PicowattsPerSquareMeter(this int value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double?)"/>
        public static Irradiance? PicowattsPerSquareMeter(this int? value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double)"/>
        public static Irradiance PicowattsPerSquareMeter(this long value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double?)"/>
        public static Irradiance? PicowattsPerSquareMeter(this long? value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double)"/>
        public static Irradiance PicowattsPerSquareMeter(this double value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double?)"/>
        public static Irradiance? PicowattsPerSquareMeter(this double? value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double)"/>
        public static Irradiance PicowattsPerSquareMeter(this float value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double?)"/>
        public static Irradiance? PicowattsPerSquareMeter(this float? value) => Irradiance.FromPicowattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double)"/>
        public static Irradiance PicowattsPerSquareMeter(this decimal value) => Irradiance.FromPicowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(double?)"/>
        public static Irradiance? PicowattsPerSquareMeter(this decimal? value) => Irradiance.FromPicowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double)"/>
        public static Irradiance WattsPerSquareCentimeter(this int value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double?)"/>
        public static Irradiance? WattsPerSquareCentimeter(this int? value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double)"/>
        public static Irradiance WattsPerSquareCentimeter(this long value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double?)"/>
        public static Irradiance? WattsPerSquareCentimeter(this long? value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double)"/>
        public static Irradiance WattsPerSquareCentimeter(this double value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double?)"/>
        public static Irradiance? WattsPerSquareCentimeter(this double? value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double)"/>
        public static Irradiance WattsPerSquareCentimeter(this float value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double?)"/>
        public static Irradiance? WattsPerSquareCentimeter(this float? value) => Irradiance.FromWattsPerSquareCentimeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double)"/>
        public static Irradiance WattsPerSquareCentimeter(this decimal value) => Irradiance.FromWattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(double?)"/>
        public static Irradiance? WattsPerSquareCentimeter(this decimal? value) => Irradiance.FromWattsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double)"/>
        public static Irradiance WattsPerSquareMeter(this int value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double?)"/>
        public static Irradiance? WattsPerSquareMeter(this int? value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double)"/>
        public static Irradiance WattsPerSquareMeter(this long value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double?)"/>
        public static Irradiance? WattsPerSquareMeter(this long? value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double)"/>
        public static Irradiance WattsPerSquareMeter(this double value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double?)"/>
        public static Irradiance? WattsPerSquareMeter(this double? value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double)"/>
        public static Irradiance WattsPerSquareMeter(this float value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double?)"/>
        public static Irradiance? WattsPerSquareMeter(this float? value) => Irradiance.FromWattsPerSquareMeter(value);

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double)"/>
        public static Irradiance WattsPerSquareMeter(this decimal value) => Irradiance.FromWattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(double?)"/>
        public static Irradiance? WattsPerSquareMeter(this decimal? value) => Irradiance.FromWattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
