//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToAmountOfSubstance
{
    public static class NumberToAmountOfSubstanceExtensions
    {
        #region Centimole

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this int value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double?)"/>
        public static AmountOfSubstance? Centimoles(this int? value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this long value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double?)"/>
        public static AmountOfSubstance? Centimoles(this long? value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this double value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double?)"/>
        public static AmountOfSubstance? Centimoles(this double? value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this float value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double?)"/>
        public static AmountOfSubstance? Centimoles(this float? value) => AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this decimal value) => AmountOfSubstance.FromCentimoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double?)"/>
        public static AmountOfSubstance? Centimoles(this decimal? value) => AmountOfSubstance.FromCentimoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Decimole

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this int value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double?)"/>
        public static AmountOfSubstance? Decimoles(this int? value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this long value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double?)"/>
        public static AmountOfSubstance? Decimoles(this long? value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this double value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double?)"/>
        public static AmountOfSubstance? Decimoles(this double? value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this float value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double?)"/>
        public static AmountOfSubstance? Decimoles(this float? value) => AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this decimal value) => AmountOfSubstance.FromDecimoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double?)"/>
        public static AmountOfSubstance? Decimoles(this decimal? value) => AmountOfSubstance.FromDecimoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Kilomole

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this int value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double?)"/>
        public static AmountOfSubstance? Kilomoles(this int? value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this long value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double?)"/>
        public static AmountOfSubstance? Kilomoles(this long? value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this double value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double?)"/>
        public static AmountOfSubstance? Kilomoles(this double? value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this float value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double?)"/>
        public static AmountOfSubstance? Kilomoles(this float? value) => AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this decimal value) => AmountOfSubstance.FromKilomoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double?)"/>
        public static AmountOfSubstance? Kilomoles(this decimal? value) => AmountOfSubstance.FromKilomoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Micromole

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this int value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double?)"/>
        public static AmountOfSubstance? Micromoles(this int? value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this long value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double?)"/>
        public static AmountOfSubstance? Micromoles(this long? value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this double value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double?)"/>
        public static AmountOfSubstance? Micromoles(this double? value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this float value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double?)"/>
        public static AmountOfSubstance? Micromoles(this float? value) => AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this decimal value) => AmountOfSubstance.FromMicromoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double?)"/>
        public static AmountOfSubstance? Micromoles(this decimal? value) => AmountOfSubstance.FromMicromoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Millimole

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this int value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double?)"/>
        public static AmountOfSubstance? Millimoles(this int? value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this long value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double?)"/>
        public static AmountOfSubstance? Millimoles(this long? value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this double value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double?)"/>
        public static AmountOfSubstance? Millimoles(this double? value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this float value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double?)"/>
        public static AmountOfSubstance? Millimoles(this float? value) => AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this decimal value) => AmountOfSubstance.FromMillimoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double?)"/>
        public static AmountOfSubstance? Millimoles(this decimal? value) => AmountOfSubstance.FromMillimoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Mole

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this int value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double?)"/>
        public static AmountOfSubstance? Moles(this int? value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this long value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double?)"/>
        public static AmountOfSubstance? Moles(this long? value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this double value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double?)"/>
        public static AmountOfSubstance? Moles(this double? value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this float value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double?)"/>
        public static AmountOfSubstance? Moles(this float? value) => AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this decimal value) => AmountOfSubstance.FromMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double?)"/>
        public static AmountOfSubstance? Moles(this decimal? value) => AmountOfSubstance.FromMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Nanomole

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this int value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double?)"/>
        public static AmountOfSubstance? Nanomoles(this int? value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this long value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double?)"/>
        public static AmountOfSubstance? Nanomoles(this long? value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this double value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double?)"/>
        public static AmountOfSubstance? Nanomoles(this double? value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this float value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double?)"/>
        public static AmountOfSubstance? Nanomoles(this float? value) => AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this decimal value) => AmountOfSubstance.FromNanomoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double?)"/>
        public static AmountOfSubstance? Nanomoles(this decimal? value) => AmountOfSubstance.FromNanomoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
