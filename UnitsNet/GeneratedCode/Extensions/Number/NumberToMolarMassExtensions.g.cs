//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToMolarMass
{
    public static class NumberToMolarMassExtensions
    {
        #region CentigramPerMole

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double)"/>
        public static MolarMass CentigramsPerMoles(this int value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double?)"/>
        public static MolarMass? CentigramsPerMoles(this int? value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double)"/>
        public static MolarMass CentigramsPerMoles(this long value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double?)"/>
        public static MolarMass? CentigramsPerMoles(this long? value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double)"/>
        public static MolarMass CentigramsPerMoles(this double value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double?)"/>
        public static MolarMass? CentigramsPerMoles(this double? value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double)"/>
        public static MolarMass CentigramsPerMoles(this float value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double?)"/>
        public static MolarMass? CentigramsPerMoles(this float? value) => MolarMass.FromCentigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double)"/>
        public static MolarMass CentigramsPerMoles(this decimal value) => MolarMass.FromCentigramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMoles(double?)"/>
        public static MolarMass? CentigramsPerMoles(this decimal? value) => MolarMass.FromCentigramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecagramPerMole

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double)"/>
        public static MolarMass DecagramsPerMoles(this int value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double?)"/>
        public static MolarMass? DecagramsPerMoles(this int? value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double)"/>
        public static MolarMass DecagramsPerMoles(this long value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double?)"/>
        public static MolarMass? DecagramsPerMoles(this long? value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double)"/>
        public static MolarMass DecagramsPerMoles(this double value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double?)"/>
        public static MolarMass? DecagramsPerMoles(this double? value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double)"/>
        public static MolarMass DecagramsPerMoles(this float value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double?)"/>
        public static MolarMass? DecagramsPerMoles(this float? value) => MolarMass.FromDecagramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double)"/>
        public static MolarMass DecagramsPerMoles(this decimal value) => MolarMass.FromDecagramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMoles(double?)"/>
        public static MolarMass? DecagramsPerMoles(this decimal? value) => MolarMass.FromDecagramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecigramPerMole

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double)"/>
        public static MolarMass DecigramsPerMoles(this int value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double?)"/>
        public static MolarMass? DecigramsPerMoles(this int? value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double)"/>
        public static MolarMass DecigramsPerMoles(this long value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double?)"/>
        public static MolarMass? DecigramsPerMoles(this long? value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double)"/>
        public static MolarMass DecigramsPerMoles(this double value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double?)"/>
        public static MolarMass? DecigramsPerMoles(this double? value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double)"/>
        public static MolarMass DecigramsPerMoles(this float value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double?)"/>
        public static MolarMass? DecigramsPerMoles(this float? value) => MolarMass.FromDecigramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double)"/>
        public static MolarMass DecigramsPerMoles(this decimal value) => MolarMass.FromDecigramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMoles(double?)"/>
        public static MolarMass? DecigramsPerMoles(this decimal? value) => MolarMass.FromDecigramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region GramPerMole

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double)"/>
        public static MolarMass GramsPerMoles(this int value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double?)"/>
        public static MolarMass? GramsPerMoles(this int? value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double)"/>
        public static MolarMass GramsPerMoles(this long value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double?)"/>
        public static MolarMass? GramsPerMoles(this long? value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double)"/>
        public static MolarMass GramsPerMoles(this double value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double?)"/>
        public static MolarMass? GramsPerMoles(this double? value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double)"/>
        public static MolarMass GramsPerMoles(this float value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double?)"/>
        public static MolarMass? GramsPerMoles(this float? value) => MolarMass.FromGramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double)"/>
        public static MolarMass GramsPerMoles(this decimal value) => MolarMass.FromGramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromGramsPerMoles(double?)"/>
        public static MolarMass? GramsPerMoles(this decimal? value) => MolarMass.FromGramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region HectogramPerMole

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double)"/>
        public static MolarMass HectogramsPerMoles(this int value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double?)"/>
        public static MolarMass? HectogramsPerMoles(this int? value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double)"/>
        public static MolarMass HectogramsPerMoles(this long value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double?)"/>
        public static MolarMass? HectogramsPerMoles(this long? value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double)"/>
        public static MolarMass HectogramsPerMoles(this double value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double?)"/>
        public static MolarMass? HectogramsPerMoles(this double? value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double)"/>
        public static MolarMass HectogramsPerMoles(this float value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double?)"/>
        public static MolarMass? HectogramsPerMoles(this float? value) => MolarMass.FromHectogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double)"/>
        public static MolarMass HectogramsPerMoles(this decimal value) => MolarMass.FromHectogramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMoles(double?)"/>
        public static MolarMass? HectogramsPerMoles(this decimal? value) => MolarMass.FromHectogramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilogramPerMole

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double)"/>
        public static MolarMass KilogramsPerMoles(this int value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double?)"/>
        public static MolarMass? KilogramsPerMoles(this int? value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double)"/>
        public static MolarMass KilogramsPerMoles(this long value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double?)"/>
        public static MolarMass? KilogramsPerMoles(this long? value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double)"/>
        public static MolarMass KilogramsPerMoles(this double value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double?)"/>
        public static MolarMass? KilogramsPerMoles(this double? value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double)"/>
        public static MolarMass KilogramsPerMoles(this float value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double?)"/>
        public static MolarMass? KilogramsPerMoles(this float? value) => MolarMass.FromKilogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double)"/>
        public static MolarMass KilogramsPerMoles(this decimal value) => MolarMass.FromKilogramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMoles(double?)"/>
        public static MolarMass? KilogramsPerMoles(this decimal? value) => MolarMass.FromKilogramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilopoundPerMole

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double)"/>
        public static MolarMass KilopoundsPerMoles(this int value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double?)"/>
        public static MolarMass? KilopoundsPerMoles(this int? value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double)"/>
        public static MolarMass KilopoundsPerMoles(this long value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double?)"/>
        public static MolarMass? KilopoundsPerMoles(this long? value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double)"/>
        public static MolarMass KilopoundsPerMoles(this double value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double?)"/>
        public static MolarMass? KilopoundsPerMoles(this double? value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double)"/>
        public static MolarMass KilopoundsPerMoles(this float value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double?)"/>
        public static MolarMass? KilopoundsPerMoles(this float? value) => MolarMass.FromKilopoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double)"/>
        public static MolarMass KilopoundsPerMoles(this decimal value) => MolarMass.FromKilopoundsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMoles(double?)"/>
        public static MolarMass? KilopoundsPerMoles(this decimal? value) => MolarMass.FromKilopoundsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegapoundPerMole

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double)"/>
        public static MolarMass MegapoundsPerMoles(this int value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double?)"/>
        public static MolarMass? MegapoundsPerMoles(this int? value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double)"/>
        public static MolarMass MegapoundsPerMoles(this long value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double?)"/>
        public static MolarMass? MegapoundsPerMoles(this long? value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double)"/>
        public static MolarMass MegapoundsPerMoles(this double value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double?)"/>
        public static MolarMass? MegapoundsPerMoles(this double? value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double)"/>
        public static MolarMass MegapoundsPerMoles(this float value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double?)"/>
        public static MolarMass? MegapoundsPerMoles(this float? value) => MolarMass.FromMegapoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double)"/>
        public static MolarMass MegapoundsPerMoles(this decimal value) => MolarMass.FromMegapoundsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMoles(double?)"/>
        public static MolarMass? MegapoundsPerMoles(this decimal? value) => MolarMass.FromMegapoundsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicrogramPerMole

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double)"/>
        public static MolarMass MicrogramsPerMoles(this int value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double?)"/>
        public static MolarMass? MicrogramsPerMoles(this int? value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double)"/>
        public static MolarMass MicrogramsPerMoles(this long value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double?)"/>
        public static MolarMass? MicrogramsPerMoles(this long? value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double)"/>
        public static MolarMass MicrogramsPerMoles(this double value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double?)"/>
        public static MolarMass? MicrogramsPerMoles(this double? value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double)"/>
        public static MolarMass MicrogramsPerMoles(this float value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double?)"/>
        public static MolarMass? MicrogramsPerMoles(this float? value) => MolarMass.FromMicrogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double)"/>
        public static MolarMass MicrogramsPerMoles(this decimal value) => MolarMass.FromMicrogramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMoles(double?)"/>
        public static MolarMass? MicrogramsPerMoles(this decimal? value) => MolarMass.FromMicrogramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilligramPerMole

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double)"/>
        public static MolarMass MilligramsPerMoles(this int value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double?)"/>
        public static MolarMass? MilligramsPerMoles(this int? value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double)"/>
        public static MolarMass MilligramsPerMoles(this long value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double?)"/>
        public static MolarMass? MilligramsPerMoles(this long? value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double)"/>
        public static MolarMass MilligramsPerMoles(this double value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double?)"/>
        public static MolarMass? MilligramsPerMoles(this double? value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double)"/>
        public static MolarMass MilligramsPerMoles(this float value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double?)"/>
        public static MolarMass? MilligramsPerMoles(this float? value) => MolarMass.FromMilligramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double)"/>
        public static MolarMass MilligramsPerMoles(this decimal value) => MolarMass.FromMilligramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMoles(double?)"/>
        public static MolarMass? MilligramsPerMoles(this decimal? value) => MolarMass.FromMilligramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanogramPerMole

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double)"/>
        public static MolarMass NanogramsPerMoles(this int value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double?)"/>
        public static MolarMass? NanogramsPerMoles(this int? value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double)"/>
        public static MolarMass NanogramsPerMoles(this long value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double?)"/>
        public static MolarMass? NanogramsPerMoles(this long? value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double)"/>
        public static MolarMass NanogramsPerMoles(this double value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double?)"/>
        public static MolarMass? NanogramsPerMoles(this double? value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double)"/>
        public static MolarMass NanogramsPerMoles(this float value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double?)"/>
        public static MolarMass? NanogramsPerMoles(this float? value) => MolarMass.FromNanogramsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double)"/>
        public static MolarMass NanogramsPerMoles(this decimal value) => MolarMass.FromNanogramsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMoles(double?)"/>
        public static MolarMass? NanogramsPerMoles(this decimal? value) => MolarMass.FromNanogramsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PoundPerMole

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double)"/>
        public static MolarMass PoundsPerMoles(this int value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double?)"/>
        public static MolarMass? PoundsPerMoles(this int? value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double)"/>
        public static MolarMass PoundsPerMoles(this long value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double?)"/>
        public static MolarMass? PoundsPerMoles(this long? value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double)"/>
        public static MolarMass PoundsPerMoles(this double value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double?)"/>
        public static MolarMass? PoundsPerMoles(this double? value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double)"/>
        public static MolarMass PoundsPerMoles(this float value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double?)"/>
        public static MolarMass? PoundsPerMoles(this float? value) => MolarMass.FromPoundsPerMoles(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double)"/>
        public static MolarMass PoundsPerMoles(this decimal value) => MolarMass.FromPoundsPerMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass.FromPoundsPerMoles(double?)"/>
        public static MolarMass? PoundsPerMoles(this decimal? value) => MolarMass.FromPoundsPerMoles(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
