//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

#if !WINDOWS_UWP
// Extension methods/overloads not supported in Universal Windows Platform (WinRT Components)
namespace UnitsNet.Extensions.NumberToMolarity
{
    public static class NumberToMolarityExtensions
    {
        #region CentimolesPerLitre

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double)"/>
        public static Molarity CentimolesPerLitre(this int value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double?)"/>
        public static Molarity? CentimolesPerLitre(this int? value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double)"/>
        public static Molarity CentimolesPerLitre(this long value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double?)"/>
        public static Molarity? CentimolesPerLitre(this long? value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double)"/>
        public static Molarity CentimolesPerLitre(this double value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double?)"/>
        public static Molarity? CentimolesPerLitre(this double? value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double)"/>
        public static Molarity CentimolesPerLitre(this float value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double?)"/>
        public static Molarity? CentimolesPerLitre(this float? value) => Molarity.FromCentimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double)"/>
        public static Molarity CentimolesPerLitre(this decimal value) => Molarity.FromCentimolesPerLitre(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromCentimolesPerLitre(double?)"/>
        public static Molarity? CentimolesPerLitre(this decimal? value) => Molarity.FromCentimolesPerLitre(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DecimolesPerLitre

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double)"/>
        public static Molarity DecimolesPerLitre(this int value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double?)"/>
        public static Molarity? DecimolesPerLitre(this int? value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double)"/>
        public static Molarity DecimolesPerLitre(this long value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double?)"/>
        public static Molarity? DecimolesPerLitre(this long? value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double)"/>
        public static Molarity DecimolesPerLitre(this double value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double?)"/>
        public static Molarity? DecimolesPerLitre(this double? value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double)"/>
        public static Molarity DecimolesPerLitre(this float value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double?)"/>
        public static Molarity? DecimolesPerLitre(this float? value) => Molarity.FromDecimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double)"/>
        public static Molarity DecimolesPerLitre(this decimal value) => Molarity.FromDecimolesPerLitre(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromDecimolesPerLitre(double?)"/>
        public static Molarity? DecimolesPerLitre(this decimal? value) => Molarity.FromDecimolesPerLitre(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicromolesPerLitre

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double)"/>
        public static Molarity MicromolesPerLitre(this int value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double?)"/>
        public static Molarity? MicromolesPerLitre(this int? value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double)"/>
        public static Molarity MicromolesPerLitre(this long value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double?)"/>
        public static Molarity? MicromolesPerLitre(this long? value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double)"/>
        public static Molarity MicromolesPerLitre(this double value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double?)"/>
        public static Molarity? MicromolesPerLitre(this double? value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double)"/>
        public static Molarity MicromolesPerLitre(this float value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double?)"/>
        public static Molarity? MicromolesPerLitre(this float? value) => Molarity.FromMicromolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double)"/>
        public static Molarity MicromolesPerLitre(this decimal value) => Molarity.FromMicromolesPerLitre(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromMicromolesPerLitre(double?)"/>
        public static Molarity? MicromolesPerLitre(this decimal? value) => Molarity.FromMicromolesPerLitre(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MillimolesPerLitre

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double)"/>
        public static Molarity MillimolesPerLitre(this int value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double?)"/>
        public static Molarity? MillimolesPerLitre(this int? value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double)"/>
        public static Molarity MillimolesPerLitre(this long value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double?)"/>
        public static Molarity? MillimolesPerLitre(this long? value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double)"/>
        public static Molarity MillimolesPerLitre(this double value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double?)"/>
        public static Molarity? MillimolesPerLitre(this double? value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double)"/>
        public static Molarity MillimolesPerLitre(this float value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double?)"/>
        public static Molarity? MillimolesPerLitre(this float? value) => Molarity.FromMillimolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double)"/>
        public static Molarity MillimolesPerLitre(this decimal value) => Molarity.FromMillimolesPerLitre(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromMillimolesPerLitre(double?)"/>
        public static Molarity? MillimolesPerLitre(this decimal? value) => Molarity.FromMillimolesPerLitre(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MolesPerCubicMeter

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double)"/>
        public static Molarity MolesPerCubicMeter(this int value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double?)"/>
        public static Molarity? MolesPerCubicMeter(this int? value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double)"/>
        public static Molarity MolesPerCubicMeter(this long value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double?)"/>
        public static Molarity? MolesPerCubicMeter(this long? value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double)"/>
        public static Molarity MolesPerCubicMeter(this double value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double?)"/>
        public static Molarity? MolesPerCubicMeter(this double? value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double)"/>
        public static Molarity MolesPerCubicMeter(this float value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double?)"/>
        public static Molarity? MolesPerCubicMeter(this float? value) => Molarity.FromMolesPerCubicMeter(value);

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double)"/>
        public static Molarity MolesPerCubicMeter(this decimal value) => Molarity.FromMolesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromMolesPerCubicMeter(double?)"/>
        public static Molarity? MolesPerCubicMeter(this decimal? value) => Molarity.FromMolesPerCubicMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MolesPerLitre

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double)"/>
        public static Molarity MolesPerLitre(this int value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double?)"/>
        public static Molarity? MolesPerLitre(this int? value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double)"/>
        public static Molarity MolesPerLitre(this long value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double?)"/>
        public static Molarity? MolesPerLitre(this long? value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double)"/>
        public static Molarity MolesPerLitre(this double value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double?)"/>
        public static Molarity? MolesPerLitre(this double? value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double)"/>
        public static Molarity MolesPerLitre(this float value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double?)"/>
        public static Molarity? MolesPerLitre(this float? value) => Molarity.FromMolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double)"/>
        public static Molarity MolesPerLitre(this decimal value) => Molarity.FromMolesPerLitre(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromMolesPerLitre(double?)"/>
        public static Molarity? MolesPerLitre(this decimal? value) => Molarity.FromMolesPerLitre(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanomolesPerLitre

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double)"/>
        public static Molarity NanomolesPerLitre(this int value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double?)"/>
        public static Molarity? NanomolesPerLitre(this int? value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double)"/>
        public static Molarity NanomolesPerLitre(this long value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double?)"/>
        public static Molarity? NanomolesPerLitre(this long? value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double)"/>
        public static Molarity NanomolesPerLitre(this double value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double?)"/>
        public static Molarity? NanomolesPerLitre(this double? value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double)"/>
        public static Molarity NanomolesPerLitre(this float value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double?)"/>
        public static Molarity? NanomolesPerLitre(this float? value) => Molarity.FromNanomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double)"/>
        public static Molarity NanomolesPerLitre(this decimal value) => Molarity.FromNanomolesPerLitre(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromNanomolesPerLitre(double?)"/>
        public static Molarity? NanomolesPerLitre(this decimal? value) => Molarity.FromNanomolesPerLitre(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PicomolesPerLitre

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double)"/>
        public static Molarity PicomolesPerLitre(this int value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double?)"/>
        public static Molarity? PicomolesPerLitre(this int? value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double)"/>
        public static Molarity PicomolesPerLitre(this long value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double?)"/>
        public static Molarity? PicomolesPerLitre(this long? value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double)"/>
        public static Molarity PicomolesPerLitre(this double value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double?)"/>
        public static Molarity? PicomolesPerLitre(this double? value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double)"/>
        public static Molarity PicomolesPerLitre(this float value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double?)"/>
        public static Molarity? PicomolesPerLitre(this float? value) => Molarity.FromPicomolesPerLitre(value);

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double)"/>
        public static Molarity PicomolesPerLitre(this decimal value) => Molarity.FromPicomolesPerLitre(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity.FromPicomolesPerLitre(double?)"/>
        public static Molarity? PicomolesPerLitre(this decimal? value) => Molarity.FromPicomolesPerLitre(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
