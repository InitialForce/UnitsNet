//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToElectricCapacitance
{
    public static class NumberToElectricCapacitanceExtensions
    {
        #region Farad

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double)"/>
        public static ElectricCapacitance Farads(this int value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double?)"/>
        public static ElectricCapacitance? Farads(this int? value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double)"/>
        public static ElectricCapacitance Farads(this long value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double?)"/>
        public static ElectricCapacitance? Farads(this long? value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double)"/>
        public static ElectricCapacitance Farads(this double value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double?)"/>
        public static ElectricCapacitance? Farads(this double? value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double)"/>
        public static ElectricCapacitance Farads(this float value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double?)"/>
        public static ElectricCapacitance? Farads(this float? value) => ElectricCapacitance.FromFarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double)"/>
        public static ElectricCapacitance Farads(this decimal value) => ElectricCapacitance.FromFarads(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCapacitance.FromFarads(double?)"/>
        public static ElectricCapacitance? Farads(this decimal? value) => ElectricCapacitance.FromFarads(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Kilofarad

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double)"/>
        public static ElectricCapacitance Kilofarads(this int value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double?)"/>
        public static ElectricCapacitance? Kilofarads(this int? value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double)"/>
        public static ElectricCapacitance Kilofarads(this long value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double?)"/>
        public static ElectricCapacitance? Kilofarads(this long? value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double)"/>
        public static ElectricCapacitance Kilofarads(this double value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double?)"/>
        public static ElectricCapacitance? Kilofarads(this double? value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double)"/>
        public static ElectricCapacitance Kilofarads(this float value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double?)"/>
        public static ElectricCapacitance? Kilofarads(this float? value) => ElectricCapacitance.FromKilofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double)"/>
        public static ElectricCapacitance Kilofarads(this decimal value) => ElectricCapacitance.FromKilofarads(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCapacitance.FromKilofarads(double?)"/>
        public static ElectricCapacitance? Kilofarads(this decimal? value) => ElectricCapacitance.FromKilofarads(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Megafarad

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double)"/>
        public static ElectricCapacitance Megafarads(this int value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double?)"/>
        public static ElectricCapacitance? Megafarads(this int? value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double)"/>
        public static ElectricCapacitance Megafarads(this long value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double?)"/>
        public static ElectricCapacitance? Megafarads(this long? value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double)"/>
        public static ElectricCapacitance Megafarads(this double value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double?)"/>
        public static ElectricCapacitance? Megafarads(this double? value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double)"/>
        public static ElectricCapacitance Megafarads(this float value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double?)"/>
        public static ElectricCapacitance? Megafarads(this float? value) => ElectricCapacitance.FromMegafarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double)"/>
        public static ElectricCapacitance Megafarads(this decimal value) => ElectricCapacitance.FromMegafarads(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCapacitance.FromMegafarads(double?)"/>
        public static ElectricCapacitance? Megafarads(this decimal? value) => ElectricCapacitance.FromMegafarads(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Microfarad

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double)"/>
        public static ElectricCapacitance Microfarads(this int value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double?)"/>
        public static ElectricCapacitance? Microfarads(this int? value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double)"/>
        public static ElectricCapacitance Microfarads(this long value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double?)"/>
        public static ElectricCapacitance? Microfarads(this long? value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double)"/>
        public static ElectricCapacitance Microfarads(this double value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double?)"/>
        public static ElectricCapacitance? Microfarads(this double? value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double)"/>
        public static ElectricCapacitance Microfarads(this float value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double?)"/>
        public static ElectricCapacitance? Microfarads(this float? value) => ElectricCapacitance.FromMicrofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double)"/>
        public static ElectricCapacitance Microfarads(this decimal value) => ElectricCapacitance.FromMicrofarads(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCapacitance.FromMicrofarads(double?)"/>
        public static ElectricCapacitance? Microfarads(this decimal? value) => ElectricCapacitance.FromMicrofarads(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Millifarad

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double)"/>
        public static ElectricCapacitance Millifarads(this int value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double?)"/>
        public static ElectricCapacitance? Millifarads(this int? value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double)"/>
        public static ElectricCapacitance Millifarads(this long value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double?)"/>
        public static ElectricCapacitance? Millifarads(this long? value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double)"/>
        public static ElectricCapacitance Millifarads(this double value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double?)"/>
        public static ElectricCapacitance? Millifarads(this double? value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double)"/>
        public static ElectricCapacitance Millifarads(this float value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double?)"/>
        public static ElectricCapacitance? Millifarads(this float? value) => ElectricCapacitance.FromMillifarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double)"/>
        public static ElectricCapacitance Millifarads(this decimal value) => ElectricCapacitance.FromMillifarads(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCapacitance.FromMillifarads(double?)"/>
        public static ElectricCapacitance? Millifarads(this decimal? value) => ElectricCapacitance.FromMillifarads(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Nanofarad

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double)"/>
        public static ElectricCapacitance Nanofarads(this int value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double?)"/>
        public static ElectricCapacitance? Nanofarads(this int? value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double)"/>
        public static ElectricCapacitance Nanofarads(this long value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double?)"/>
        public static ElectricCapacitance? Nanofarads(this long? value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double)"/>
        public static ElectricCapacitance Nanofarads(this double value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double?)"/>
        public static ElectricCapacitance? Nanofarads(this double? value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double)"/>
        public static ElectricCapacitance Nanofarads(this float value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double?)"/>
        public static ElectricCapacitance? Nanofarads(this float? value) => ElectricCapacitance.FromNanofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double)"/>
        public static ElectricCapacitance Nanofarads(this decimal value) => ElectricCapacitance.FromNanofarads(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCapacitance.FromNanofarads(double?)"/>
        public static ElectricCapacitance? Nanofarads(this decimal? value) => ElectricCapacitance.FromNanofarads(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Picofarad

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double)"/>
        public static ElectricCapacitance Picofarads(this int value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double?)"/>
        public static ElectricCapacitance? Picofarads(this int? value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double)"/>
        public static ElectricCapacitance Picofarads(this long value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double?)"/>
        public static ElectricCapacitance? Picofarads(this long? value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double)"/>
        public static ElectricCapacitance Picofarads(this double value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double?)"/>
        public static ElectricCapacitance? Picofarads(this double? value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double)"/>
        public static ElectricCapacitance Picofarads(this float value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double?)"/>
        public static ElectricCapacitance? Picofarads(this float? value) => ElectricCapacitance.FromPicofarads(value);

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double)"/>
        public static ElectricCapacitance Picofarads(this decimal value) => ElectricCapacitance.FromPicofarads(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricCapacitance.FromPicofarads(double?)"/>
        public static ElectricCapacitance? Picofarads(this decimal? value) => ElectricCapacitance.FromPicofarads(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
