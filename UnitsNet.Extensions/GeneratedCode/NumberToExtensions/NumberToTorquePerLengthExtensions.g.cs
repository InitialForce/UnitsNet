//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
                        
namespace UnitsNet.Extensions.NumberToTorquePerLength
{
    /// <summary>
    /// A number to TorquePerLength Extensions
    /// </summary>
    public static class NumberToTorquePerLengthExtensions
    {

        #region KilogramForceCentimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromKilogramForceCentimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilogramForceCentimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromKilogramForceCentimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region KilogramForceMeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromKilogramForceMetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilogramForceMetersPerMeter<T>(this T value) =>
             TorquePerLength.FromKilogramForceMetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region KilogramForceMillimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromKilogramForceMillimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilogramForceMillimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromKilogramForceMillimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region KilonewtonCentimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromKilonewtonCentimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilonewtonCentimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromKilonewtonCentimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region KilonewtonMeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromKilonewtonMetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilonewtonMetersPerMeter<T>(this T value) =>
             TorquePerLength.FromKilonewtonMetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region KilonewtonMillimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromKilonewtonMillimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilonewtonMillimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromKilonewtonMillimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region KilopoundForceFootPerFoot

        /// <inheritdoc cref="TorquePerLength.FromKilopoundForceFeetPerFoot(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilopoundForceFeetPerFoot<T>(this T value) =>
             TorquePerLength.FromKilopoundForceFeetPerFoot(Convert.ToDouble(value));

        #endregion

        #region KilopoundForceInchPerFoot

        /// <inheritdoc cref="TorquePerLength.FromKilopoundForceInchesPerFoot(UnitsNet.QuantityValue)" />
        public static TorquePerLength KilopoundForceInchesPerFoot<T>(this T value) =>
             TorquePerLength.FromKilopoundForceInchesPerFoot(Convert.ToDouble(value));

        #endregion

        #region MeganewtonCentimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromMeganewtonCentimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength MeganewtonCentimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromMeganewtonCentimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region MeganewtonMeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromMeganewtonMetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength MeganewtonMetersPerMeter<T>(this T value) =>
             TorquePerLength.FromMeganewtonMetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region MeganewtonMillimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromMeganewtonMillimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength MeganewtonMillimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromMeganewtonMillimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region MegapoundForceFootPerFoot

        /// <inheritdoc cref="TorquePerLength.FromMegapoundForceFeetPerFoot(UnitsNet.QuantityValue)" />
        public static TorquePerLength MegapoundForceFeetPerFoot<T>(this T value) =>
             TorquePerLength.FromMegapoundForceFeetPerFoot(Convert.ToDouble(value));

        #endregion

        #region MegapoundForceInchPerFoot

        /// <inheritdoc cref="TorquePerLength.FromMegapoundForceInchesPerFoot(UnitsNet.QuantityValue)" />
        public static TorquePerLength MegapoundForceInchesPerFoot<T>(this T value) =>
             TorquePerLength.FromMegapoundForceInchesPerFoot(Convert.ToDouble(value));

        #endregion

        #region NewtonCentimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromNewtonCentimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength NewtonCentimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromNewtonCentimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region NewtonMeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromNewtonMetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength NewtonMetersPerMeter<T>(this T value) =>
             TorquePerLength.FromNewtonMetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region NewtonMillimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromNewtonMillimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength NewtonMillimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromNewtonMillimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region PoundForceFootPerFoot

        /// <inheritdoc cref="TorquePerLength.FromPoundForceFeetPerFoot(UnitsNet.QuantityValue)" />
        public static TorquePerLength PoundForceFeetPerFoot<T>(this T value) =>
             TorquePerLength.FromPoundForceFeetPerFoot(Convert.ToDouble(value));

        #endregion

        #region PoundForceInchPerFoot

        /// <inheritdoc cref="TorquePerLength.FromPoundForceInchesPerFoot(UnitsNet.QuantityValue)" />
        public static TorquePerLength PoundForceInchesPerFoot<T>(this T value) =>
             TorquePerLength.FromPoundForceInchesPerFoot(Convert.ToDouble(value));

        #endregion

        #region TonneForceCentimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromTonneForceCentimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength TonneForceCentimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromTonneForceCentimetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region TonneForceMeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromTonneForceMetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength TonneForceMetersPerMeter<T>(this T value) =>
             TorquePerLength.FromTonneForceMetersPerMeter(Convert.ToDouble(value));

        #endregion

        #region TonneForceMillimeterPerMeter

        /// <inheritdoc cref="TorquePerLength.FromTonneForceMillimetersPerMeter(UnitsNet.QuantityValue)" />
        public static TorquePerLength TonneForceMillimetersPerMeter<T>(this T value) =>
             TorquePerLength.FromTonneForceMillimetersPerMeter(Convert.ToDouble(value));

        #endregion

    }
}
