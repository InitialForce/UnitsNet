//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
                        
namespace UnitsNet.Extensions.NumberToForcePerLength
{
    /// <summary>
    /// A number to ForcePerLength Extensions
    /// </summary>
    public static class NumberToForcePerLengthExtensions
    {

        #region CentinewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromCentinewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength CentinewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromCentinewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region DecinewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromDecinewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength DecinewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromDecinewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region KilogramForcePerMeter

        /// <inheritdoc cref="ForcePerLength.FromKilogramsForcePerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength KilogramsForcePerMeter<T>(this T value) =>
             ForcePerLength.FromKilogramsForcePerMeter(Convert.ToDouble(value));

        #endregion

        #region KilonewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromKilonewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength KilonewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromKilonewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region MeganewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromMeganewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength MeganewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromMeganewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region MicronewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromMicronewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength MicronewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromMicronewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region MillinewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromMillinewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength MillinewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromMillinewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region NanonewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromNanonewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength NanonewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromNanonewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region NewtonPerMeter

        /// <inheritdoc cref="ForcePerLength.FromNewtonsPerMeter(UnitsNet.QuantityValue)" />
        public static ForcePerLength NewtonsPerMeter<T>(this T value) =>
             ForcePerLength.FromNewtonsPerMeter(Convert.ToDouble(value));

        #endregion

        #region PoundForcePerFoot

        /// <inheritdoc cref="ForcePerLength.FromPoundsForcePerFoot(UnitsNet.QuantityValue)" />
        public static ForcePerLength PoundsForcePerFoot<T>(this T value) =>
             ForcePerLength.FromPoundsForcePerFoot(Convert.ToDouble(value));

        #endregion

        #region PoundForcePerInch

        /// <inheritdoc cref="ForcePerLength.FromPoundsForcePerInch(UnitsNet.QuantityValue)" />
        public static ForcePerLength PoundsForcePerInch<T>(this T value) =>
             ForcePerLength.FromPoundsForcePerInch(Convert.ToDouble(value));

        #endregion

        #region PoundForcePerYard

        /// <inheritdoc cref="ForcePerLength.FromPoundsForcePerYard(UnitsNet.QuantityValue)" />
        public static ForcePerLength PoundsForcePerYard<T>(this T value) =>
             ForcePerLength.FromPoundsForcePerYard(Convert.ToDouble(value));

        #endregion

    }
}
