//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
                        
namespace UnitsNet.Extensions.NumberToEntropy
{
    /// <summary>
    /// A number to Entropy Extensions
    /// </summary>
    public static class NumberToEntropyExtensions
    {

        #region CaloriePerKelvin

        /// <inheritdoc cref="Entropy.FromCaloriesPerKelvin(UnitsNet.QuantityValue)" />
        public static Entropy CaloriesPerKelvin<T>(this T value) =>
             Entropy.FromCaloriesPerKelvin(Convert.ToDouble(value));

        #endregion

        #region JoulePerDegreeCelsius

        /// <inheritdoc cref="Entropy.FromJoulesPerDegreeCelsius(UnitsNet.QuantityValue)" />
        public static Entropy JoulesPerDegreeCelsius<T>(this T value) =>
             Entropy.FromJoulesPerDegreeCelsius(Convert.ToDouble(value));

        #endregion

        #region JoulePerKelvin

        /// <inheritdoc cref="Entropy.FromJoulesPerKelvin(UnitsNet.QuantityValue)" />
        public static Entropy JoulesPerKelvin<T>(this T value) =>
             Entropy.FromJoulesPerKelvin(Convert.ToDouble(value));

        #endregion

        #region KilocaloriePerKelvin

        /// <inheritdoc cref="Entropy.FromKilocaloriesPerKelvin(UnitsNet.QuantityValue)" />
        public static Entropy KilocaloriesPerKelvin<T>(this T value) =>
             Entropy.FromKilocaloriesPerKelvin(Convert.ToDouble(value));

        #endregion

        #region KilojoulePerDegreeCelsius

        /// <inheritdoc cref="Entropy.FromKilojoulesPerDegreeCelsius(UnitsNet.QuantityValue)" />
        public static Entropy KilojoulesPerDegreeCelsius<T>(this T value) =>
             Entropy.FromKilojoulesPerDegreeCelsius(Convert.ToDouble(value));

        #endregion

        #region KilojoulePerKelvin

        /// <inheritdoc cref="Entropy.FromKilojoulesPerKelvin(UnitsNet.QuantityValue)" />
        public static Entropy KilojoulesPerKelvin<T>(this T value) =>
             Entropy.FromKilojoulesPerKelvin(Convert.ToDouble(value));

        #endregion

        #region MegajoulePerKelvin

        /// <inheritdoc cref="Entropy.FromMegajoulesPerKelvin(UnitsNet.QuantityValue)" />
        public static Entropy MegajoulesPerKelvin<T>(this T value) =>
             Entropy.FromMegajoulesPerKelvin(Convert.ToDouble(value));

        #endregion

    }
}
