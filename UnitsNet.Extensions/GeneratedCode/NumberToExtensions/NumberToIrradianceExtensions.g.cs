//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
                        
namespace UnitsNet.Extensions.NumberToIrradiance
{
    /// <summary>
    /// A number to Irradiance Extensions
    /// </summary>
    public static class NumberToIrradianceExtensions
    {

        #region KilowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(UnitsNet.QuantityValue)" />
        public static Irradiance KilowattsPerSquareCentimeter<T>(this T value) =>
             Irradiance.FromKilowattsPerSquareCentimeter(Convert.ToDouble(value));

        #endregion

        #region KilowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static Irradiance KilowattsPerSquareMeter<T>(this T value) =>
             Irradiance.FromKilowattsPerSquareMeter(Convert.ToDouble(value));

        #endregion

        #region MegawattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(UnitsNet.QuantityValue)" />
        public static Irradiance MegawattsPerSquareCentimeter<T>(this T value) =>
             Irradiance.FromMegawattsPerSquareCentimeter(Convert.ToDouble(value));

        #endregion

        #region MegawattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static Irradiance MegawattsPerSquareMeter<T>(this T value) =>
             Irradiance.FromMegawattsPerSquareMeter(Convert.ToDouble(value));

        #endregion

        #region MicrowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(UnitsNet.QuantityValue)" />
        public static Irradiance MicrowattsPerSquareCentimeter<T>(this T value) =>
             Irradiance.FromMicrowattsPerSquareCentimeter(Convert.ToDouble(value));

        #endregion

        #region MicrowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static Irradiance MicrowattsPerSquareMeter<T>(this T value) =>
             Irradiance.FromMicrowattsPerSquareMeter(Convert.ToDouble(value));

        #endregion

        #region MilliwattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(UnitsNet.QuantityValue)" />
        public static Irradiance MilliwattsPerSquareCentimeter<T>(this T value) =>
             Irradiance.FromMilliwattsPerSquareCentimeter(Convert.ToDouble(value));

        #endregion

        #region MilliwattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static Irradiance MilliwattsPerSquareMeter<T>(this T value) =>
             Irradiance.FromMilliwattsPerSquareMeter(Convert.ToDouble(value));

        #endregion

        #region NanowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(UnitsNet.QuantityValue)" />
        public static Irradiance NanowattsPerSquareCentimeter<T>(this T value) =>
             Irradiance.FromNanowattsPerSquareCentimeter(Convert.ToDouble(value));

        #endregion

        #region NanowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static Irradiance NanowattsPerSquareMeter<T>(this T value) =>
             Irradiance.FromNanowattsPerSquareMeter(Convert.ToDouble(value));

        #endregion

        #region PicowattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(UnitsNet.QuantityValue)" />
        public static Irradiance PicowattsPerSquareCentimeter<T>(this T value) =>
             Irradiance.FromPicowattsPerSquareCentimeter(Convert.ToDouble(value));

        #endregion

        #region PicowattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static Irradiance PicowattsPerSquareMeter<T>(this T value) =>
             Irradiance.FromPicowattsPerSquareMeter(Convert.ToDouble(value));

        #endregion

        #region WattPerSquareCentimeter

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(UnitsNet.QuantityValue)" />
        public static Irradiance WattsPerSquareCentimeter<T>(this T value) =>
             Irradiance.FromWattsPerSquareCentimeter(Convert.ToDouble(value));

        #endregion

        #region WattPerSquareMeter

        /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static Irradiance WattsPerSquareMeter<T>(this T value) =>
             Irradiance.FromWattsPerSquareMeter(Convert.ToDouble(value));

        #endregion

    }
}
