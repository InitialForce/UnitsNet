//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToRotationalSpeed
{
    /// <summary>
    /// A number to RotationalSpeed Extensions
    /// </summary>
    public static class NumberToRotationalSpeedExtensions
    {
        /// <inheritdoc cref="RotationalSpeed{T}.FromCentiradiansPerSecond(T)" />
        public static RotationalSpeed<double> CentiradiansPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromCentiradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromDeciradiansPerSecond(T)" />
        public static RotationalSpeed<double> DeciradiansPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromDeciradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromDegreesPerMinute(T)" />
        public static RotationalSpeed<double> DegreesPerMinute<T>(this T value) =>
            RotationalSpeed<double>.FromDegreesPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromDegreesPerSecond(T)" />
        public static RotationalSpeed<double> DegreesPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromDegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromMicrodegreesPerSecond(T)" />
        public static RotationalSpeed<double> MicrodegreesPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromMicrodegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromMicroradiansPerSecond(T)" />
        public static RotationalSpeed<double> MicroradiansPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromMicroradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromMillidegreesPerSecond(T)" />
        public static RotationalSpeed<double> MillidegreesPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromMillidegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromMilliradiansPerSecond(T)" />
        public static RotationalSpeed<double> MilliradiansPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromMilliradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromNanodegreesPerSecond(T)" />
        public static RotationalSpeed<double> NanodegreesPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromNanodegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromNanoradiansPerSecond(T)" />
        public static RotationalSpeed<double> NanoradiansPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromNanoradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromRadiansPerSecond(T)" />
        public static RotationalSpeed<double> RadiansPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromRadiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromRevolutionsPerMinute(T)" />
        public static RotationalSpeed<double> RevolutionsPerMinute<T>(this T value) =>
            RotationalSpeed<double>.FromRevolutionsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed{T}.FromRevolutionsPerSecond(T)" />
        public static RotationalSpeed<double> RevolutionsPerSecond<T>(this T value) =>
            RotationalSpeed<double>.FromRevolutionsPerSecond(Convert.ToDouble(value));

    }
}
