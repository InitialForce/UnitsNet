//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
                        
namespace UnitsNet.NumberExtensions.NumberToElectricPotentialRate
{
    /// <summary>
    /// A number to ElectricPotentialRate Extensions
    /// </summary>
    public static class NumberToElectricPotentialRateExtensions
    {
        /// <inheritdoc cref="ElectricPotentialRate.FromKilovoltsPerHours(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate KilovoltsPerHours<T>(this T value) =>
            ElectricPotentialRate.FromKilovoltsPerHours(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromKilovoltsPerMinutes(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate KilovoltsPerMinutes<T>(this T value) =>
            ElectricPotentialRate.FromKilovoltsPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromKilovoltsPerSecond(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate KilovoltsPerSecond<T>(this T value) =>
            ElectricPotentialRate.FromKilovoltsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMegavoltsPerHours(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MegavoltsPerHours<T>(this T value) =>
            ElectricPotentialRate.FromMegavoltsPerHours(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMegavoltsPerMinutes(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MegavoltsPerMinutes<T>(this T value) =>
            ElectricPotentialRate.FromMegavoltsPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMegavoltsPerSecond(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MegavoltsPerSecond<T>(this T value) =>
            ElectricPotentialRate.FromMegavoltsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMicrovoltsPerHours(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MicrovoltsPerHours<T>(this T value) =>
            ElectricPotentialRate.FromMicrovoltsPerHours(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMicrovoltsPerMinutes(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MicrovoltsPerMinutes<T>(this T value) =>
            ElectricPotentialRate.FromMicrovoltsPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMicrovoltsPerSecond(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MicrovoltsPerSecond<T>(this T value) =>
            ElectricPotentialRate.FromMicrovoltsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMillivoltsPerHours(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MillivoltsPerHours<T>(this T value) =>
            ElectricPotentialRate.FromMillivoltsPerHours(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMillivoltsPerMinutes(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MillivoltsPerMinutes<T>(this T value) =>
            ElectricPotentialRate.FromMillivoltsPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromMillivoltsPerSecond(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate MillivoltsPerSecond<T>(this T value) =>
            ElectricPotentialRate.FromMillivoltsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromVoltsPerHours(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate VoltsPerHours<T>(this T value) =>
            ElectricPotentialRate.FromVoltsPerHours(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromVoltsPerMinutes(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate VoltsPerMinutes<T>(this T value) =>
            ElectricPotentialRate.FromVoltsPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotentialRate.FromVoltsPerSecond(UnitsNet.QuantityValue)" />
        public static ElectricPotentialRate VoltsPerSecond<T>(this T value) =>
            ElectricPotentialRate.FromVoltsPerSecond(Convert.ToDouble(value));

    }
}
