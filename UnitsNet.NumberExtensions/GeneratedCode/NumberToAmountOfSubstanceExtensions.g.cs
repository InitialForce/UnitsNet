//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAmountOfSubstance
{
    /// <summary>
    /// A number to AmountOfSubstance Extensions
    /// </summary>
    public static class NumberToAmountOfSubstanceExtensions
    {
        /// <inheritdoc cref="AmountOfSubstance{T}.FromCentimoles(T)" />
        public static AmountOfSubstance<double> Centimoles<T>(this T value) =>
            AmountOfSubstance<double>.FromCentimoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromCentipoundMoles(T)" />
        public static AmountOfSubstance<double> CentipoundMoles<T>(this T value) =>
            AmountOfSubstance<double>.FromCentipoundMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromDecimoles(T)" />
        public static AmountOfSubstance<double> Decimoles<T>(this T value) =>
            AmountOfSubstance<double>.FromDecimoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromDecipoundMoles(T)" />
        public static AmountOfSubstance<double> DecipoundMoles<T>(this T value) =>
            AmountOfSubstance<double>.FromDecipoundMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromKilomoles(T)" />
        public static AmountOfSubstance<double> Kilomoles<T>(this T value) =>
            AmountOfSubstance<double>.FromKilomoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromKilopoundMoles(T)" />
        public static AmountOfSubstance<double> KilopoundMoles<T>(this T value) =>
            AmountOfSubstance<double>.FromKilopoundMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromMegamoles(T)" />
        public static AmountOfSubstance<double> Megamoles<T>(this T value) =>
            AmountOfSubstance<double>.FromMegamoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromMicromoles(T)" />
        public static AmountOfSubstance<double> Micromoles<T>(this T value) =>
            AmountOfSubstance<double>.FromMicromoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromMicropoundMoles(T)" />
        public static AmountOfSubstance<double> MicropoundMoles<T>(this T value) =>
            AmountOfSubstance<double>.FromMicropoundMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromMillimoles(T)" />
        public static AmountOfSubstance<double> Millimoles<T>(this T value) =>
            AmountOfSubstance<double>.FromMillimoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromMillipoundMoles(T)" />
        public static AmountOfSubstance<double> MillipoundMoles<T>(this T value) =>
            AmountOfSubstance<double>.FromMillipoundMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromMoles(T)" />
        public static AmountOfSubstance<double> Moles<T>(this T value) =>
            AmountOfSubstance<double>.FromMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromNanomoles(T)" />
        public static AmountOfSubstance<double> Nanomoles<T>(this T value) =>
            AmountOfSubstance<double>.FromNanomoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromNanopoundMoles(T)" />
        public static AmountOfSubstance<double> NanopoundMoles<T>(this T value) =>
            AmountOfSubstance<double>.FromNanopoundMoles(Convert.ToDouble(value));

        /// <inheritdoc cref="AmountOfSubstance{T}.FromPoundMoles(T)" />
        public static AmountOfSubstance<double> PoundMoles<T>(this T value) =>
            AmountOfSubstance<double>.FromPoundMoles(Convert.ToDouble(value));

    }
}
