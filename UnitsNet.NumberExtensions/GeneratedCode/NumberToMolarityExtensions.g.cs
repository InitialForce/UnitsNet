//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMolarity
{
    /// <summary>
    /// A number to Molarity Extensions
    /// </summary>
    public static class NumberToMolarityExtensions
    {
        /// <inheritdoc cref="Molarity{T}.FromCentimolesPerLiter(T)" />
        public static Molarity<double> CentimolesPerLiter<T>(this T value) =>
            Molarity<double>.FromCentimolesPerLiter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity{T}.FromDecimolesPerLiter(T)" />
        public static Molarity<double> DecimolesPerLiter<T>(this T value) =>
            Molarity<double>.FromDecimolesPerLiter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity{T}.FromMicromolesPerLiter(T)" />
        public static Molarity<double> MicromolesPerLiter<T>(this T value) =>
            Molarity<double>.FromMicromolesPerLiter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity{T}.FromMillimolesPerLiter(T)" />
        public static Molarity<double> MillimolesPerLiter<T>(this T value) =>
            Molarity<double>.FromMillimolesPerLiter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity{T}.FromMolesPerCubicMeter(T)" />
        public static Molarity<double> MolesPerCubicMeter<T>(this T value) =>
            Molarity<double>.FromMolesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity{T}.FromMolesPerLiter(T)" />
        public static Molarity<double> MolesPerLiter<T>(this T value) =>
            Molarity<double>.FromMolesPerLiter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity{T}.FromNanomolesPerLiter(T)" />
        public static Molarity<double> NanomolesPerLiter<T>(this T value) =>
            Molarity<double>.FromNanomolesPerLiter(Convert.ToDouble(value));

        /// <inheritdoc cref="Molarity{T}.FromPicomolesPerLiter(T)" />
        public static Molarity<double> PicomolesPerLiter<T>(this T value) =>
            Molarity<double>.FromPicomolesPerLiter(Convert.ToDouble(value));

    }
}
