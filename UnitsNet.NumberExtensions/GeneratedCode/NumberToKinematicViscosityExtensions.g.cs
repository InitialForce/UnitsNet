//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToKinematicViscosity
{
    /// <summary>
    /// A number to KinematicViscosity Extensions
    /// </summary>
    public static class NumberToKinematicViscosityExtensions
    {
        /// <inheritdoc cref="KinematicViscosity{T}.FromCentistokes(T)" />
        public static KinematicViscosity<double> Centistokes<T>(this T value) =>
            KinematicViscosity<double>.FromCentistokes(Convert.ToDouble(value));

        /// <inheritdoc cref="KinematicViscosity{T}.FromDecistokes(T)" />
        public static KinematicViscosity<double> Decistokes<T>(this T value) =>
            KinematicViscosity<double>.FromDecistokes(Convert.ToDouble(value));

        /// <inheritdoc cref="KinematicViscosity{T}.FromKilostokes(T)" />
        public static KinematicViscosity<double> Kilostokes<T>(this T value) =>
            KinematicViscosity<double>.FromKilostokes(Convert.ToDouble(value));

        /// <inheritdoc cref="KinematicViscosity{T}.FromMicrostokes(T)" />
        public static KinematicViscosity<double> Microstokes<T>(this T value) =>
            KinematicViscosity<double>.FromMicrostokes(Convert.ToDouble(value));

        /// <inheritdoc cref="KinematicViscosity{T}.FromMillistokes(T)" />
        public static KinematicViscosity<double> Millistokes<T>(this T value) =>
            KinematicViscosity<double>.FromMillistokes(Convert.ToDouble(value));

        /// <inheritdoc cref="KinematicViscosity{T}.FromNanostokes(T)" />
        public static KinematicViscosity<double> Nanostokes<T>(this T value) =>
            KinematicViscosity<double>.FromNanostokes(Convert.ToDouble(value));

        /// <inheritdoc cref="KinematicViscosity{T}.FromSquareMetersPerSecond(T)" />
        public static KinematicViscosity<double> SquareMetersPerSecond<T>(this T value) =>
            KinematicViscosity<double>.FromSquareMetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="KinematicViscosity{T}.FromStokes(T)" />
        public static KinematicViscosity<double> Stokes<T>(this T value) =>
            KinematicViscosity<double>.FromStokes(Convert.ToDouble(value));

    }
}
