//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
                        
namespace UnitsNet.NumberExtensions.NumberToTemperature
{
    /// <summary>
    /// A number to Temperature Extensions
    /// </summary>
    public static class NumberToTemperatureExtensions
    {
        /// <inheritdoc cref="Temperature.FromCentidegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature CentidegreesCelsius<T>(this T value) =>
            Temperature.FromCentidegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDecidegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature DecidegreesCelsius<T>(this T value) =>
            Temperature.FromDecidegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature DegreesCelsius<T>(this T value) =>
            Temperature.FromDegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDegreesDelisle(UnitsNet.QuantityValue)" />
        public static Temperature DegreesDelisle<T>(this T value) =>
            Temperature.FromDegreesDelisle(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDegreesFahrenheit(UnitsNet.QuantityValue)" />
        public static Temperature DegreesFahrenheit<T>(this T value) =>
            Temperature.FromDegreesFahrenheit(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDegreesNewton(UnitsNet.QuantityValue)" />
        public static Temperature DegreesNewton<T>(this T value) =>
            Temperature.FromDegreesNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDegreesRankine(UnitsNet.QuantityValue)" />
        public static Temperature DegreesRankine<T>(this T value) =>
            Temperature.FromDegreesRankine(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDegreesReaumur(UnitsNet.QuantityValue)" />
        public static Temperature DegreesReaumur<T>(this T value) =>
            Temperature.FromDegreesReaumur(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromDegreesRoemer(UnitsNet.QuantityValue)" />
        public static Temperature DegreesRoemer<T>(this T value) =>
            Temperature.FromDegreesRoemer(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromHectodegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature HectodegreesCelsius<T>(this T value) =>
            Temperature.FromHectodegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromKelvins(UnitsNet.QuantityValue)" />
        public static Temperature Kelvins<T>(this T value) =>
            Temperature.FromKelvins(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromKilodegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature KilodegreesCelsius<T>(this T value) =>
            Temperature.FromKilodegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromMicrodegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature MicrodegreesCelsius<T>(this T value) =>
            Temperature.FromMicrodegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromMillidegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature MillidegreesCelsius<T>(this T value) =>
            Temperature.FromMillidegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromNanodegreesCelsius(UnitsNet.QuantityValue)" />
        public static Temperature NanodegreesCelsius<T>(this T value) =>
            Temperature.FromNanodegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="Temperature.FromSolarTemperatures(UnitsNet.QuantityValue)" />
        public static Temperature SolarTemperatures<T>(this T value) =>
            Temperature.FromSolarTemperatures(Convert.ToDouble(value));

    }
}
