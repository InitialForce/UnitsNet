//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToInformation
{
    /// <summary>
    /// A number to Information Extensions
    /// </summary>
    public static class NumberToInformationExtensions
    {
        /// <inheritdoc cref="Information{T}.FromBits(T)" />
        public static Information<double> Bits<T>(this T value) =>
            Information<double>.FromBits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromBytes(T)" />
        public static Information<double> Bytes<T>(this T value) =>
            Information<double>.FromBytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromExabits(T)" />
        public static Information<double> Exabits<T>(this T value) =>
            Information<double>.FromExabits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromExabytes(T)" />
        public static Information<double> Exabytes<T>(this T value) =>
            Information<double>.FromExabytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromExbibits(T)" />
        public static Information<double> Exbibits<T>(this T value) =>
            Information<double>.FromExbibits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromExbibytes(T)" />
        public static Information<double> Exbibytes<T>(this T value) =>
            Information<double>.FromExbibytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromGibibits(T)" />
        public static Information<double> Gibibits<T>(this T value) =>
            Information<double>.FromGibibits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromGibibytes(T)" />
        public static Information<double> Gibibytes<T>(this T value) =>
            Information<double>.FromGibibytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromGigabits(T)" />
        public static Information<double> Gigabits<T>(this T value) =>
            Information<double>.FromGigabits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromGigabytes(T)" />
        public static Information<double> Gigabytes<T>(this T value) =>
            Information<double>.FromGigabytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromKibibits(T)" />
        public static Information<double> Kibibits<T>(this T value) =>
            Information<double>.FromKibibits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromKibibytes(T)" />
        public static Information<double> Kibibytes<T>(this T value) =>
            Information<double>.FromKibibytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromKilobits(T)" />
        public static Information<double> Kilobits<T>(this T value) =>
            Information<double>.FromKilobits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromKilobytes(T)" />
        public static Information<double> Kilobytes<T>(this T value) =>
            Information<double>.FromKilobytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromMebibits(T)" />
        public static Information<double> Mebibits<T>(this T value) =>
            Information<double>.FromMebibits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromMebibytes(T)" />
        public static Information<double> Mebibytes<T>(this T value) =>
            Information<double>.FromMebibytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromMegabits(T)" />
        public static Information<double> Megabits<T>(this T value) =>
            Information<double>.FromMegabits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromMegabytes(T)" />
        public static Information<double> Megabytes<T>(this T value) =>
            Information<double>.FromMegabytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromPebibits(T)" />
        public static Information<double> Pebibits<T>(this T value) =>
            Information<double>.FromPebibits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromPebibytes(T)" />
        public static Information<double> Pebibytes<T>(this T value) =>
            Information<double>.FromPebibytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromPetabits(T)" />
        public static Information<double> Petabits<T>(this T value) =>
            Information<double>.FromPetabits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromPetabytes(T)" />
        public static Information<double> Petabytes<T>(this T value) =>
            Information<double>.FromPetabytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromTebibits(T)" />
        public static Information<double> Tebibits<T>(this T value) =>
            Information<double>.FromTebibits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromTebibytes(T)" />
        public static Information<double> Tebibytes<T>(this T value) =>
            Information<double>.FromTebibytes(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromTerabits(T)" />
        public static Information<double> Terabits<T>(this T value) =>
            Information<double>.FromTerabits(Convert.ToDouble(value));

        /// <inheritdoc cref="Information{T}.FromTerabytes(T)" />
        public static Information<double> Terabytes<T>(this T value) =>
            Information<double>.FromTerabytes(Convert.ToDouble(value));

    }
}
