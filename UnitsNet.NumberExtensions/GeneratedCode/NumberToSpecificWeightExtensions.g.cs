//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpecificWeight
{
    /// <summary>
    /// A number to SpecificWeight Extensions
    /// </summary>
    public static class NumberToSpecificWeightExtensions
    {
        /// <inheritdoc cref="SpecificWeight{T}.FromKilogramsForcePerCubicCentimeter(T)" />
        public static SpecificWeight<double> KilogramsForcePerCubicCentimeter<T>(this T value) =>
            SpecificWeight<double>.FromKilogramsForcePerCubicCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromKilogramsForcePerCubicMeter(T)" />
        public static SpecificWeight<double> KilogramsForcePerCubicMeter<T>(this T value) =>
            SpecificWeight<double>.FromKilogramsForcePerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromKilogramsForcePerCubicMillimeter(T)" />
        public static SpecificWeight<double> KilogramsForcePerCubicMillimeter<T>(this T value) =>
            SpecificWeight<double>.FromKilogramsForcePerCubicMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromKilonewtonsPerCubicCentimeter(T)" />
        public static SpecificWeight<double> KilonewtonsPerCubicCentimeter<T>(this T value) =>
            SpecificWeight<double>.FromKilonewtonsPerCubicCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromKilonewtonsPerCubicMeter(T)" />
        public static SpecificWeight<double> KilonewtonsPerCubicMeter<T>(this T value) =>
            SpecificWeight<double>.FromKilonewtonsPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromKilonewtonsPerCubicMillimeter(T)" />
        public static SpecificWeight<double> KilonewtonsPerCubicMillimeter<T>(this T value) =>
            SpecificWeight<double>.FromKilonewtonsPerCubicMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromKilopoundsForcePerCubicFoot(T)" />
        public static SpecificWeight<double> KilopoundsForcePerCubicFoot<T>(this T value) =>
            SpecificWeight<double>.FromKilopoundsForcePerCubicFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromKilopoundsForcePerCubicInch(T)" />
        public static SpecificWeight<double> KilopoundsForcePerCubicInch<T>(this T value) =>
            SpecificWeight<double>.FromKilopoundsForcePerCubicInch(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromMeganewtonsPerCubicMeter(T)" />
        public static SpecificWeight<double> MeganewtonsPerCubicMeter<T>(this T value) =>
            SpecificWeight<double>.FromMeganewtonsPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromNewtonsPerCubicCentimeter(T)" />
        public static SpecificWeight<double> NewtonsPerCubicCentimeter<T>(this T value) =>
            SpecificWeight<double>.FromNewtonsPerCubicCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromNewtonsPerCubicMeter(T)" />
        public static SpecificWeight<double> NewtonsPerCubicMeter<T>(this T value) =>
            SpecificWeight<double>.FromNewtonsPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromNewtonsPerCubicMillimeter(T)" />
        public static SpecificWeight<double> NewtonsPerCubicMillimeter<T>(this T value) =>
            SpecificWeight<double>.FromNewtonsPerCubicMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromPoundsForcePerCubicFoot(T)" />
        public static SpecificWeight<double> PoundsForcePerCubicFoot<T>(this T value) =>
            SpecificWeight<double>.FromPoundsForcePerCubicFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromPoundsForcePerCubicInch(T)" />
        public static SpecificWeight<double> PoundsForcePerCubicInch<T>(this T value) =>
            SpecificWeight<double>.FromPoundsForcePerCubicInch(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromTonnesForcePerCubicCentimeter(T)" />
        public static SpecificWeight<double> TonnesForcePerCubicCentimeter<T>(this T value) =>
            SpecificWeight<double>.FromTonnesForcePerCubicCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromTonnesForcePerCubicMeter(T)" />
        public static SpecificWeight<double> TonnesForcePerCubicMeter<T>(this T value) =>
            SpecificWeight<double>.FromTonnesForcePerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificWeight{T}.FromTonnesForcePerCubicMillimeter(T)" />
        public static SpecificWeight<double> TonnesForcePerCubicMillimeter<T>(this T value) =>
            SpecificWeight<double>.FromTonnesForcePerCubicMillimeter(Convert.ToDouble(value));

    }
}
