//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToBitRate
{
    /// <summary>
    /// A number to BitRate Extensions
    /// </summary>
    public static class NumberToBitRateExtensions
    {
        /// <inheritdoc cref="BitRate{T}.FromBitsPerSecond(T)" />
        public static BitRate<double> BitsPerSecond<T>(this T value) =>
            BitRate<double>.FromBitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromBytesPerSecond(T)" />
        public static BitRate<double> BytesPerSecond<T>(this T value) =>
            BitRate<double>.FromBytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromExabitsPerSecond(T)" />
        public static BitRate<double> ExabitsPerSecond<T>(this T value) =>
            BitRate<double>.FromExabitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromExabytesPerSecond(T)" />
        public static BitRate<double> ExabytesPerSecond<T>(this T value) =>
            BitRate<double>.FromExabytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromExbibitsPerSecond(T)" />
        public static BitRate<double> ExbibitsPerSecond<T>(this T value) =>
            BitRate<double>.FromExbibitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromExbibytesPerSecond(T)" />
        public static BitRate<double> ExbibytesPerSecond<T>(this T value) =>
            BitRate<double>.FromExbibytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromGibibitsPerSecond(T)" />
        public static BitRate<double> GibibitsPerSecond<T>(this T value) =>
            BitRate<double>.FromGibibitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromGibibytesPerSecond(T)" />
        public static BitRate<double> GibibytesPerSecond<T>(this T value) =>
            BitRate<double>.FromGibibytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromGigabitsPerSecond(T)" />
        public static BitRate<double> GigabitsPerSecond<T>(this T value) =>
            BitRate<double>.FromGigabitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromGigabytesPerSecond(T)" />
        public static BitRate<double> GigabytesPerSecond<T>(this T value) =>
            BitRate<double>.FromGigabytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromKibibitsPerSecond(T)" />
        public static BitRate<double> KibibitsPerSecond<T>(this T value) =>
            BitRate<double>.FromKibibitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromKibibytesPerSecond(T)" />
        public static BitRate<double> KibibytesPerSecond<T>(this T value) =>
            BitRate<double>.FromKibibytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromKilobitsPerSecond(T)" />
        public static BitRate<double> KilobitsPerSecond<T>(this T value) =>
            BitRate<double>.FromKilobitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromKilobytesPerSecond(T)" />
        public static BitRate<double> KilobytesPerSecond<T>(this T value) =>
            BitRate<double>.FromKilobytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromMebibitsPerSecond(T)" />
        public static BitRate<double> MebibitsPerSecond<T>(this T value) =>
            BitRate<double>.FromMebibitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromMebibytesPerSecond(T)" />
        public static BitRate<double> MebibytesPerSecond<T>(this T value) =>
            BitRate<double>.FromMebibytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromMegabitsPerSecond(T)" />
        public static BitRate<double> MegabitsPerSecond<T>(this T value) =>
            BitRate<double>.FromMegabitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromMegabytesPerSecond(T)" />
        public static BitRate<double> MegabytesPerSecond<T>(this T value) =>
            BitRate<double>.FromMegabytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromPebibitsPerSecond(T)" />
        public static BitRate<double> PebibitsPerSecond<T>(this T value) =>
            BitRate<double>.FromPebibitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromPebibytesPerSecond(T)" />
        public static BitRate<double> PebibytesPerSecond<T>(this T value) =>
            BitRate<double>.FromPebibytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromPetabitsPerSecond(T)" />
        public static BitRate<double> PetabitsPerSecond<T>(this T value) =>
            BitRate<double>.FromPetabitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromPetabytesPerSecond(T)" />
        public static BitRate<double> PetabytesPerSecond<T>(this T value) =>
            BitRate<double>.FromPetabytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromTebibitsPerSecond(T)" />
        public static BitRate<double> TebibitsPerSecond<T>(this T value) =>
            BitRate<double>.FromTebibitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromTebibytesPerSecond(T)" />
        public static BitRate<double> TebibytesPerSecond<T>(this T value) =>
            BitRate<double>.FromTebibytesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromTerabitsPerSecond(T)" />
        public static BitRate<double> TerabitsPerSecond<T>(this T value) =>
            BitRate<double>.FromTerabitsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="BitRate{T}.FromTerabytesPerSecond(T)" />
        public static BitRate<double> TerabytesPerSecond<T>(this T value) =>
            BitRate<double>.FromTerabytesPerSecond(Convert.ToDouble(value));

    }
}
