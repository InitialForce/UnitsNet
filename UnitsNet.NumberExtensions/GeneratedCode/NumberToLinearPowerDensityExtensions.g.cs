//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLinearPowerDensity
{
    /// <summary>
    /// A number to LinearPowerDensity Extensions
    /// </summary>
    public static class NumberToLinearPowerDensityExtensions
    {
        /// <inheritdoc cref="LinearPowerDensity{T}.FromGigawattsPerCentimeter(T)" />
        public static LinearPowerDensity<double> GigawattsPerCentimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromGigawattsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromGigawattsPerFoot(T)" />
        public static LinearPowerDensity<double> GigawattsPerFoot<T>(this T value) =>
            LinearPowerDensity<double>.FromGigawattsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromGigawattsPerInch(T)" />
        public static LinearPowerDensity<double> GigawattsPerInch<T>(this T value) =>
            LinearPowerDensity<double>.FromGigawattsPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromGigawattsPerMeter(T)" />
        public static LinearPowerDensity<double> GigawattsPerMeter<T>(this T value) =>
            LinearPowerDensity<double>.FromGigawattsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromGigawattsPerMillimeter(T)" />
        public static LinearPowerDensity<double> GigawattsPerMillimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromGigawattsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromKilowattsPerCentimeter(T)" />
        public static LinearPowerDensity<double> KilowattsPerCentimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromKilowattsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromKilowattsPerFoot(T)" />
        public static LinearPowerDensity<double> KilowattsPerFoot<T>(this T value) =>
            LinearPowerDensity<double>.FromKilowattsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromKilowattsPerInch(T)" />
        public static LinearPowerDensity<double> KilowattsPerInch<T>(this T value) =>
            LinearPowerDensity<double>.FromKilowattsPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromKilowattsPerMeter(T)" />
        public static LinearPowerDensity<double> KilowattsPerMeter<T>(this T value) =>
            LinearPowerDensity<double>.FromKilowattsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromKilowattsPerMillimeter(T)" />
        public static LinearPowerDensity<double> KilowattsPerMillimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromKilowattsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMegawattsPerCentimeter(T)" />
        public static LinearPowerDensity<double> MegawattsPerCentimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromMegawattsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMegawattsPerFoot(T)" />
        public static LinearPowerDensity<double> MegawattsPerFoot<T>(this T value) =>
            LinearPowerDensity<double>.FromMegawattsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMegawattsPerInch(T)" />
        public static LinearPowerDensity<double> MegawattsPerInch<T>(this T value) =>
            LinearPowerDensity<double>.FromMegawattsPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMegawattsPerMeter(T)" />
        public static LinearPowerDensity<double> MegawattsPerMeter<T>(this T value) =>
            LinearPowerDensity<double>.FromMegawattsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMegawattsPerMillimeter(T)" />
        public static LinearPowerDensity<double> MegawattsPerMillimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromMegawattsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMilliwattsPerCentimeter(T)" />
        public static LinearPowerDensity<double> MilliwattsPerCentimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromMilliwattsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMilliwattsPerFoot(T)" />
        public static LinearPowerDensity<double> MilliwattsPerFoot<T>(this T value) =>
            LinearPowerDensity<double>.FromMilliwattsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMilliwattsPerInch(T)" />
        public static LinearPowerDensity<double> MilliwattsPerInch<T>(this T value) =>
            LinearPowerDensity<double>.FromMilliwattsPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMilliwattsPerMeter(T)" />
        public static LinearPowerDensity<double> MilliwattsPerMeter<T>(this T value) =>
            LinearPowerDensity<double>.FromMilliwattsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromMilliwattsPerMillimeter(T)" />
        public static LinearPowerDensity<double> MilliwattsPerMillimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromMilliwattsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromWattsPerCentimeter(T)" />
        public static LinearPowerDensity<double> WattsPerCentimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromWattsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromWattsPerFoot(T)" />
        public static LinearPowerDensity<double> WattsPerFoot<T>(this T value) =>
            LinearPowerDensity<double>.FromWattsPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromWattsPerInch(T)" />
        public static LinearPowerDensity<double> WattsPerInch<T>(this T value) =>
            LinearPowerDensity<double>.FromWattsPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromWattsPerMeter(T)" />
        public static LinearPowerDensity<double> WattsPerMeter<T>(this T value) =>
            LinearPowerDensity<double>.FromWattsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="LinearPowerDensity{T}.FromWattsPerMillimeter(T)" />
        public static LinearPowerDensity<double> WattsPerMillimeter<T>(this T value) =>
            LinearPowerDensity<double>.FromWattsPerMillimeter(Convert.ToDouble(value));

    }
}
