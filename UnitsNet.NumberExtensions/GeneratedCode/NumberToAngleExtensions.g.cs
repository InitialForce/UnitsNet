//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAngle
{
    /// <summary>
    /// A number to Angle Extensions
    /// </summary>
    public static class NumberToAngleExtensions
    {
        /// <inheritdoc cref="Angle{T}.FromArcminutes(T)" />
        public static Angle<double> Arcminutes<T>(this T value) =>
            Angle<double>.FromArcminutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromArcseconds(T)" />
        public static Angle<double> Arcseconds<T>(this T value) =>
            Angle<double>.FromArcseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromCentiradians(T)" />
        public static Angle<double> Centiradians<T>(this T value) =>
            Angle<double>.FromCentiradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromDeciradians(T)" />
        public static Angle<double> Deciradians<T>(this T value) =>
            Angle<double>.FromDeciradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromDegrees(T)" />
        public static Angle<double> Degrees<T>(this T value) =>
            Angle<double>.FromDegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromGradians(T)" />
        public static Angle<double> Gradians<T>(this T value) =>
            Angle<double>.FromGradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromMicrodegrees(T)" />
        public static Angle<double> Microdegrees<T>(this T value) =>
            Angle<double>.FromMicrodegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromMicroradians(T)" />
        public static Angle<double> Microradians<T>(this T value) =>
            Angle<double>.FromMicroradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromMillidegrees(T)" />
        public static Angle<double> Millidegrees<T>(this T value) =>
            Angle<double>.FromMillidegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromMilliradians(T)" />
        public static Angle<double> Milliradians<T>(this T value) =>
            Angle<double>.FromMilliradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromNanodegrees(T)" />
        public static Angle<double> Nanodegrees<T>(this T value) =>
            Angle<double>.FromNanodegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromNanoradians(T)" />
        public static Angle<double> Nanoradians<T>(this T value) =>
            Angle<double>.FromNanoradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromRadians(T)" />
        public static Angle<double> Radians<T>(this T value) =>
            Angle<double>.FromRadians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle{T}.FromRevolutions(T)" />
        public static Angle<double> Revolutions<T>(this T value) =>
            Angle<double>.FromRevolutions(Convert.ToDouble(value));

    }
}
