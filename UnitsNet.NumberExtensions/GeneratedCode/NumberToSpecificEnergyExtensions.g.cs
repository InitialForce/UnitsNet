//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpecificEnergy
{
    /// <summary>
    /// A number to SpecificEnergy Extensions
    /// </summary>
    public static class NumberToSpecificEnergyExtensions
    {
        /// <inheritdoc cref="SpecificEnergy{T}.FromBtuPerPound(T)" />
        public static SpecificEnergy<double> BtuPerPound<T>(this T value) =>
            SpecificEnergy<double>.FromBtuPerPound(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromCaloriesPerGram(T)" />
        public static SpecificEnergy<double> CaloriesPerGram<T>(this T value) =>
            SpecificEnergy<double>.FromCaloriesPerGram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromGigawattDaysPerKilogram(T)" />
        public static SpecificEnergy<double> GigawattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromGigawattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromGigawattDaysPerShortTon(T)" />
        public static SpecificEnergy<double> GigawattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy<double>.FromGigawattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromGigawattDaysPerTonne(T)" />
        public static SpecificEnergy<double> GigawattDaysPerTonne<T>(this T value) =>
            SpecificEnergy<double>.FromGigawattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromGigawattHoursPerKilogram(T)" />
        public static SpecificEnergy<double> GigawattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromGigawattHoursPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromJoulesPerKilogram(T)" />
        public static SpecificEnergy<double> JoulesPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromJoulesPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromKilocaloriesPerGram(T)" />
        public static SpecificEnergy<double> KilocaloriesPerGram<T>(this T value) =>
            SpecificEnergy<double>.FromKilocaloriesPerGram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromKilojoulesPerKilogram(T)" />
        public static SpecificEnergy<double> KilojoulesPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromKilojoulesPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromKilowattDaysPerKilogram(T)" />
        public static SpecificEnergy<double> KilowattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromKilowattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromKilowattDaysPerShortTon(T)" />
        public static SpecificEnergy<double> KilowattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy<double>.FromKilowattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromKilowattDaysPerTonne(T)" />
        public static SpecificEnergy<double> KilowattDaysPerTonne<T>(this T value) =>
            SpecificEnergy<double>.FromKilowattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromKilowattHoursPerKilogram(T)" />
        public static SpecificEnergy<double> KilowattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromKilowattHoursPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromMegajoulesPerKilogram(T)" />
        public static SpecificEnergy<double> MegajoulesPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromMegajoulesPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromMegawattDaysPerKilogram(T)" />
        public static SpecificEnergy<double> MegawattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromMegawattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromMegawattDaysPerShortTon(T)" />
        public static SpecificEnergy<double> MegawattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy<double>.FromMegawattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromMegawattDaysPerTonne(T)" />
        public static SpecificEnergy<double> MegawattDaysPerTonne<T>(this T value) =>
            SpecificEnergy<double>.FromMegawattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromMegawattHoursPerKilogram(T)" />
        public static SpecificEnergy<double> MegawattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromMegawattHoursPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromTerawattDaysPerKilogram(T)" />
        public static SpecificEnergy<double> TerawattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromTerawattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromTerawattDaysPerShortTon(T)" />
        public static SpecificEnergy<double> TerawattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy<double>.FromTerawattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromTerawattDaysPerTonne(T)" />
        public static SpecificEnergy<double> TerawattDaysPerTonne<T>(this T value) =>
            SpecificEnergy<double>.FromTerawattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromWattDaysPerKilogram(T)" />
        public static SpecificEnergy<double> WattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromWattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromWattDaysPerShortTon(T)" />
        public static SpecificEnergy<double> WattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy<double>.FromWattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromWattDaysPerTonne(T)" />
        public static SpecificEnergy<double> WattDaysPerTonne<T>(this T value) =>
            SpecificEnergy<double>.FromWattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy{T}.FromWattHoursPerKilogram(T)" />
        public static SpecificEnergy<double> WattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy<double>.FromWattHoursPerKilogram(Convert.ToDouble(value));

    }
}
