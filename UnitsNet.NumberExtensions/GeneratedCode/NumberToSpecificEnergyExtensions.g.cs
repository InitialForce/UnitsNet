//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/OasysUnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/OasysUnitsNet.

using System;

#nullable enable

namespace OasysUnitsNet.NumberExtensions.NumberToSpecificEnergy
{
    /// <summary>
    /// A number to SpecificEnergy Extensions
    /// </summary>
    public static class NumberToSpecificEnergyExtensions
    {
        /// <inheritdoc cref="SpecificEnergy.FromBtuPerPound(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy BtuPerPound<T>(this T value) =>
            SpecificEnergy.FromBtuPerPound(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromCaloriesPerGram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy CaloriesPerGram<T>(this T value) =>
            SpecificEnergy.FromCaloriesPerGram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromGigawattDaysPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy GigawattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy.FromGigawattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromGigawattDaysPerShortTon(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy GigawattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy.FromGigawattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromGigawattDaysPerTonne(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy GigawattDaysPerTonne<T>(this T value) =>
            SpecificEnergy.FromGigawattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromGigawattHoursPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy GigawattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy.FromGigawattHoursPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromGigawattHoursPerPound(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy GigawattHoursPerPound<T>(this T value) =>
            SpecificEnergy.FromGigawattHoursPerPound(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromJoulesPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy JoulesPerKilogram<T>(this T value) =>
            SpecificEnergy.FromJoulesPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromKilocaloriesPerGram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy KilocaloriesPerGram<T>(this T value) =>
            SpecificEnergy.FromKilocaloriesPerGram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromKilojoulesPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy KilojoulesPerKilogram<T>(this T value) =>
            SpecificEnergy.FromKilojoulesPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromKilowattDaysPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy KilowattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy.FromKilowattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromKilowattDaysPerShortTon(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy KilowattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy.FromKilowattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromKilowattDaysPerTonne(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy KilowattDaysPerTonne<T>(this T value) =>
            SpecificEnergy.FromKilowattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromKilowattHoursPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy KilowattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy.FromKilowattHoursPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromKilowattHoursPerPound(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy KilowattHoursPerPound<T>(this T value) =>
            SpecificEnergy.FromKilowattHoursPerPound(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromMegajoulesPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy MegajoulesPerKilogram<T>(this T value) =>
            SpecificEnergy.FromMegajoulesPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromMegawattDaysPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy MegawattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy.FromMegawattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromMegawattDaysPerShortTon(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy MegawattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy.FromMegawattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromMegawattDaysPerTonne(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy MegawattDaysPerTonne<T>(this T value) =>
            SpecificEnergy.FromMegawattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromMegawattHoursPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy MegawattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy.FromMegawattHoursPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromMegawattHoursPerPound(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy MegawattHoursPerPound<T>(this T value) =>
            SpecificEnergy.FromMegawattHoursPerPound(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromTerawattDaysPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy TerawattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy.FromTerawattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromTerawattDaysPerShortTon(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy TerawattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy.FromTerawattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromTerawattDaysPerTonne(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy TerawattDaysPerTonne<T>(this T value) =>
            SpecificEnergy.FromTerawattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromWattDaysPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy WattDaysPerKilogram<T>(this T value) =>
            SpecificEnergy.FromWattDaysPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromWattDaysPerShortTon(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy WattDaysPerShortTon<T>(this T value) =>
            SpecificEnergy.FromWattDaysPerShortTon(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromWattDaysPerTonne(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy WattDaysPerTonne<T>(this T value) =>
            SpecificEnergy.FromWattDaysPerTonne(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromWattHoursPerKilogram(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy WattHoursPerKilogram<T>(this T value) =>
            SpecificEnergy.FromWattHoursPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEnergy.FromWattHoursPerPound(OasysUnitsNet.QuantityValue)" />
        public static SpecificEnergy WattHoursPerPound<T>(this T value) =>
            SpecificEnergy.FromWattHoursPerPound(Convert.ToDouble(value));

    }
}
