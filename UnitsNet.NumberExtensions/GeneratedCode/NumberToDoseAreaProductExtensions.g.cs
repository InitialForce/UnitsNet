//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToDoseAreaProduct
{
    /// <summary>
    /// A number to DoseAreaProduct Extensions
    /// </summary>
    public static class NumberToDoseAreaProductExtensions
    {
        /// <inheritdoc cref="DoseAreaProduct.FromCentigraySquareCentimeters(double)" />
        public static DoseAreaProduct CentigraySquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigraySquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromCentigraySquareDecimeters(double)" />
        public static DoseAreaProduct CentigraySquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigraySquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromCentigraySquareMeters(double)" />
        public static DoseAreaProduct CentigraySquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigraySquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromCentigraySquareMillimeters(double)" />
        public static DoseAreaProduct CentigraySquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigraySquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigraySquareCentimeters(double)" />
        public static DoseAreaProduct DecigraySquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigraySquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigraySquareDecimeters(double)" />
        public static DoseAreaProduct DecigraySquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigraySquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigraySquareMeters(double)" />
        public static DoseAreaProduct DecigraySquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigraySquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigraySquareMillimeters(double)" />
        public static DoseAreaProduct DecigraySquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigraySquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGraySquareCentimeters(double)" />
        public static DoseAreaProduct GraySquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGraySquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGraySquareDecimeters(double)" />
        public static DoseAreaProduct GraySquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGraySquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGraySquareMeters(double)" />
        public static DoseAreaProduct GraySquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGraySquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGraySquareMillimeters(double)" />
        public static DoseAreaProduct GraySquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGraySquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograySquareCentimeters(double)" />
        public static DoseAreaProduct MicrograySquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograySquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograySquareDecimeters(double)" />
        public static DoseAreaProduct MicrograySquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograySquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograySquareMeters(double)" />
        public static DoseAreaProduct MicrograySquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograySquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograySquareMillimeters(double)" />
        public static DoseAreaProduct MicrograySquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograySquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligraySquareCentimeters(double)" />
        public static DoseAreaProduct MilligraySquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligraySquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligraySquareDecimeters(double)" />
        public static DoseAreaProduct MilligraySquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligraySquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligraySquareMeters(double)" />
        public static DoseAreaProduct MilligraySquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligraySquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligraySquareMillimeters(double)" />
        public static DoseAreaProduct MilligraySquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligraySquareMillimeters(Convert.ToDouble(value));

    }
}
