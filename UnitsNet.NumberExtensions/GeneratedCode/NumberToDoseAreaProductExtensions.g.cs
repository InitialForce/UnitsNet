//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToDoseAreaProduct
{
    /// <summary>
    /// A number to DoseAreaProduct Extensions
    /// </summary>
    public static class NumberToDoseAreaProductExtensions
    {
        /// <inheritdoc cref="DoseAreaProduct.FromCentigrayPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct CentigrayPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigrayPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromCentigrayPerSquareDecimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct CentigrayPerSquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigrayPerSquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromCentigrayPerSquareMeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct CentigrayPerSquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigrayPerSquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromCentigrayPerSquareMillimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct CentigrayPerSquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromCentigrayPerSquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigrayPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct DecigrayPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigrayPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigrayPerSquareDecimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct DecigrayPerSquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigrayPerSquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigrayPerSquareMeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct DecigrayPerSquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigrayPerSquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromDecigrayPerSquareMillimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct DecigrayPerSquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromDecigrayPerSquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGrayPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct GrayPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGrayPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGrayPerSquareDecimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct GrayPerSquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGrayPerSquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGrayPerSquareMeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct GrayPerSquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGrayPerSquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromGrayPerSquareMillimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct GrayPerSquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromGrayPerSquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograyPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MicrograyPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograyPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograyPerSquareDecimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MicrograyPerSquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograyPerSquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograyPerSquareMeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MicrograyPerSquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograyPerSquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMicrograyPerSquareMillimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MicrograyPerSquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMicrograyPerSquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligrayPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MilligrayPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligrayPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligrayPerSquareDecimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MilligrayPerSquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligrayPerSquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligrayPerSquareMeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MilligrayPerSquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligrayPerSquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="DoseAreaProduct.FromMilligrayPerSquareMillimeters(UnitsNet.QuantityValue)" />
        public static DoseAreaProduct MilligrayPerSquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => DoseAreaProduct.FromMilligrayPerSquareMillimeters(Convert.ToDouble(value));

    }
}
