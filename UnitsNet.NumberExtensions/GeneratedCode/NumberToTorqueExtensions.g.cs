//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToTorque
{
    /// <summary>
    /// A number to Torque Extensions
    /// </summary>
    public static class NumberToTorqueExtensions
    {
        /// <inheritdoc cref="Torque{T}.FromKilogramForceCentimeters(T)" />
        public static Torque<double> KilogramForceCentimeters<T>(this T value) =>
            Torque<double>.FromKilogramForceCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromKilogramForceMeters(T)" />
        public static Torque<double> KilogramForceMeters<T>(this T value) =>
            Torque<double>.FromKilogramForceMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromKilogramForceMillimeters(T)" />
        public static Torque<double> KilogramForceMillimeters<T>(this T value) =>
            Torque<double>.FromKilogramForceMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromKilonewtonCentimeters(T)" />
        public static Torque<double> KilonewtonCentimeters<T>(this T value) =>
            Torque<double>.FromKilonewtonCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromKilonewtonMeters(T)" />
        public static Torque<double> KilonewtonMeters<T>(this T value) =>
            Torque<double>.FromKilonewtonMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromKilonewtonMillimeters(T)" />
        public static Torque<double> KilonewtonMillimeters<T>(this T value) =>
            Torque<double>.FromKilonewtonMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromKilopoundForceFeet(T)" />
        public static Torque<double> KilopoundForceFeet<T>(this T value) =>
            Torque<double>.FromKilopoundForceFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromKilopoundForceInches(T)" />
        public static Torque<double> KilopoundForceInches<T>(this T value) =>
            Torque<double>.FromKilopoundForceInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromMeganewtonCentimeters(T)" />
        public static Torque<double> MeganewtonCentimeters<T>(this T value) =>
            Torque<double>.FromMeganewtonCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromMeganewtonMeters(T)" />
        public static Torque<double> MeganewtonMeters<T>(this T value) =>
            Torque<double>.FromMeganewtonMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromMeganewtonMillimeters(T)" />
        public static Torque<double> MeganewtonMillimeters<T>(this T value) =>
            Torque<double>.FromMeganewtonMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromMegapoundForceFeet(T)" />
        public static Torque<double> MegapoundForceFeet<T>(this T value) =>
            Torque<double>.FromMegapoundForceFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromMegapoundForceInches(T)" />
        public static Torque<double> MegapoundForceInches<T>(this T value) =>
            Torque<double>.FromMegapoundForceInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromNewtonCentimeters(T)" />
        public static Torque<double> NewtonCentimeters<T>(this T value) =>
            Torque<double>.FromNewtonCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromNewtonMeters(T)" />
        public static Torque<double> NewtonMeters<T>(this T value) =>
            Torque<double>.FromNewtonMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromNewtonMillimeters(T)" />
        public static Torque<double> NewtonMillimeters<T>(this T value) =>
            Torque<double>.FromNewtonMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromPoundalFeet(T)" />
        public static Torque<double> PoundalFeet<T>(this T value) =>
            Torque<double>.FromPoundalFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromPoundForceFeet(T)" />
        public static Torque<double> PoundForceFeet<T>(this T value) =>
            Torque<double>.FromPoundForceFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromPoundForceInches(T)" />
        public static Torque<double> PoundForceInches<T>(this T value) =>
            Torque<double>.FromPoundForceInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromTonneForceCentimeters(T)" />
        public static Torque<double> TonneForceCentimeters<T>(this T value) =>
            Torque<double>.FromTonneForceCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromTonneForceMeters(T)" />
        public static Torque<double> TonneForceMeters<T>(this T value) =>
            Torque<double>.FromTonneForceMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Torque{T}.FromTonneForceMillimeters(T)" />
        public static Torque<double> TonneForceMillimeters<T>(this T value) =>
            Torque<double>.FromTonneForceMillimeters(Convert.ToDouble(value));

    }
}
