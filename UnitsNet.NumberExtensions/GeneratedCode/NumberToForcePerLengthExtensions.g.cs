//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToForcePerLength
{
    /// <summary>
    /// A number to ForcePerLength Extensions
    /// </summary>
    public static class NumberToForcePerLengthExtensions
    {
        /// <inheritdoc cref="ForcePerLength{T}.FromCentinewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> CentinewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromCentinewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromCentinewtonsPerMeter(T)" />
        public static ForcePerLength<double> CentinewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromCentinewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromCentinewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> CentinewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromCentinewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromDecanewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> DecanewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromDecanewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromDecanewtonsPerMeter(T)" />
        public static ForcePerLength<double> DecanewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromDecanewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromDecanewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> DecanewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromDecanewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromDecinewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> DecinewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromDecinewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromDecinewtonsPerMeter(T)" />
        public static ForcePerLength<double> DecinewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromDecinewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromDecinewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> DecinewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromDecinewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilogramsForcePerCentimeter(T)" />
        public static ForcePerLength<double> KilogramsForcePerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromKilogramsForcePerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilogramsForcePerMeter(T)" />
        public static ForcePerLength<double> KilogramsForcePerMeter<T>(this T value) =>
            ForcePerLength<double>.FromKilogramsForcePerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilogramsForcePerMillimeter(T)" />
        public static ForcePerLength<double> KilogramsForcePerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromKilogramsForcePerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilonewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> KilonewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromKilonewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilonewtonsPerMeter(T)" />
        public static ForcePerLength<double> KilonewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromKilonewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilonewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> KilonewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromKilonewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilopoundsForcePerFoot(T)" />
        public static ForcePerLength<double> KilopoundsForcePerFoot<T>(this T value) =>
            ForcePerLength<double>.FromKilopoundsForcePerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromKilopoundsForcePerInch(T)" />
        public static ForcePerLength<double> KilopoundsForcePerInch<T>(this T value) =>
            ForcePerLength<double>.FromKilopoundsForcePerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMeganewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> MeganewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromMeganewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMeganewtonsPerMeter(T)" />
        public static ForcePerLength<double> MeganewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromMeganewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMeganewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> MeganewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromMeganewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMicronewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> MicronewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromMicronewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMicronewtonsPerMeter(T)" />
        public static ForcePerLength<double> MicronewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromMicronewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMicronewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> MicronewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromMicronewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMillinewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> MillinewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromMillinewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMillinewtonsPerMeter(T)" />
        public static ForcePerLength<double> MillinewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromMillinewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromMillinewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> MillinewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromMillinewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromNanonewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> NanonewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromNanonewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromNanonewtonsPerMeter(T)" />
        public static ForcePerLength<double> NanonewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromNanonewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromNanonewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> NanonewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromNanonewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromNewtonsPerCentimeter(T)" />
        public static ForcePerLength<double> NewtonsPerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromNewtonsPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromNewtonsPerMeter(T)" />
        public static ForcePerLength<double> NewtonsPerMeter<T>(this T value) =>
            ForcePerLength<double>.FromNewtonsPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromNewtonsPerMillimeter(T)" />
        public static ForcePerLength<double> NewtonsPerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromNewtonsPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromPoundsForcePerFoot(T)" />
        public static ForcePerLength<double> PoundsForcePerFoot<T>(this T value) =>
            ForcePerLength<double>.FromPoundsForcePerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromPoundsForcePerInch(T)" />
        public static ForcePerLength<double> PoundsForcePerInch<T>(this T value) =>
            ForcePerLength<double>.FromPoundsForcePerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromPoundsForcePerYard(T)" />
        public static ForcePerLength<double> PoundsForcePerYard<T>(this T value) =>
            ForcePerLength<double>.FromPoundsForcePerYard(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromTonnesForcePerCentimeter(T)" />
        public static ForcePerLength<double> TonnesForcePerCentimeter<T>(this T value) =>
            ForcePerLength<double>.FromTonnesForcePerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromTonnesForcePerMeter(T)" />
        public static ForcePerLength<double> TonnesForcePerMeter<T>(this T value) =>
            ForcePerLength<double>.FromTonnesForcePerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ForcePerLength{T}.FromTonnesForcePerMillimeter(T)" />
        public static ForcePerLength<double> TonnesForcePerMillimeter<T>(this T value) =>
            ForcePerLength<double>.FromTonnesForcePerMillimeter(Convert.ToDouble(value));

    }
}
