//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAcceleration
{
    /// <summary>
    /// A number to Acceleration Extensions
    /// </summary>
    public static class NumberToAccelerationExtensions
    {
        /// <inheritdoc cref="Acceleration{T}.FromCentimetersPerSecondSquared(T)" />
        public static Acceleration<double> CentimetersPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromCentimetersPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromDecimetersPerSecondSquared(T)" />
        public static Acceleration<double> DecimetersPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromDecimetersPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromFeetPerSecondSquared(T)" />
        public static Acceleration<double> FeetPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromFeetPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromInchesPerSecondSquared(T)" />
        public static Acceleration<double> InchesPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromInchesPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromKilometersPerSecondSquared(T)" />
        public static Acceleration<double> KilometersPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromKilometersPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromKnotsPerHour(T)" />
        public static Acceleration<double> KnotsPerHour<T>(this T value) =>
            Acceleration<double>.FromKnotsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromKnotsPerMinute(T)" />
        public static Acceleration<double> KnotsPerMinute<T>(this T value) =>
            Acceleration<double>.FromKnotsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromKnotsPerSecond(T)" />
        public static Acceleration<double> KnotsPerSecond<T>(this T value) =>
            Acceleration<double>.FromKnotsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromMetersPerSecondSquared(T)" />
        public static Acceleration<double> MetersPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromMetersPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromMicrometersPerSecondSquared(T)" />
        public static Acceleration<double> MicrometersPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromMicrometersPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromMillimetersPerSecondSquared(T)" />
        public static Acceleration<double> MillimetersPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromMillimetersPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromMillistandardGravity(T)" />
        public static Acceleration<double> MillistandardGravity<T>(this T value) =>
            Acceleration<double>.FromMillistandardGravity(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromNanometersPerSecondSquared(T)" />
        public static Acceleration<double> NanometersPerSecondSquared<T>(this T value) =>
            Acceleration<double>.FromNanometersPerSecondSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="Acceleration{T}.FromStandardGravity(T)" />
        public static Acceleration<double> StandardGravity<T>(this T value) =>
            Acceleration<double>.FromStandardGravity(Convert.ToDouble(value));

    }
}
