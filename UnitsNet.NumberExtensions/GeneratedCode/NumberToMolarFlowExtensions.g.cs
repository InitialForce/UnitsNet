//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMolarFlow
{
    /// <summary>
    /// A number to MolarFlow Extensions
    /// </summary>
    public static class NumberToMolarFlowExtensions
    {
        /// <inheritdoc cref="MolarFlow.FromCentimolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow CentimolesPerDay<T>(this T value) =>
            MolarFlow.FromCentimolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromCentimolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow CentimolesPerSecond<T>(this T value) =>
            MolarFlow.FromCentimolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromDecamolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow DecamolesPerDay<T>(this T value) =>
            MolarFlow.FromDecamolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromDecamolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow DecamolesPerSecond<T>(this T value) =>
            MolarFlow.FromDecamolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromDecimolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow DecimolesPerDay<T>(this T value) =>
            MolarFlow.FromDecimolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromDecimolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow DecimolesPerSecond<T>(this T value) =>
            MolarFlow.FromDecimolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromHectomolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow HectomolesPerDay<T>(this T value) =>
            MolarFlow.FromHectomolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromHectomolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow HectomolesPerSecond<T>(this T value) =>
            MolarFlow.FromHectomolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromKilomolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow KilomolesPerDay<T>(this T value) =>
            MolarFlow.FromKilomolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromKilomolesPerHour(UnitsNet.QuantityValue)" />
        public static MolarFlow KilomolesPerHour<T>(this T value) =>
            MolarFlow.FromKilomolesPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromKilomolesPerMinute(UnitsNet.QuantityValue)" />
        public static MolarFlow KilomolesPerMinute<T>(this T value) =>
            MolarFlow.FromKilomolesPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromKilomolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow KilomolesPerSecond<T>(this T value) =>
            MolarFlow.FromKilomolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMegamolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow MegamolesPerDay<T>(this T value) =>
            MolarFlow.FromMegamolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMicromolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow MicromolesPerDay<T>(this T value) =>
            MolarFlow.FromMicromolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMicromolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow MicromolesPerSecond<T>(this T value) =>
            MolarFlow.FromMicromolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMillimolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow MillimolesPerDay<T>(this T value) =>
            MolarFlow.FromMillimolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMillimolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow MillimolesPerSecond<T>(this T value) =>
            MolarFlow.FromMillimolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow MolesPerDay<T>(this T value) =>
            MolarFlow.FromMolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMolesPerHour(UnitsNet.QuantityValue)" />
        public static MolarFlow MolesPerHour<T>(this T value) =>
            MolarFlow.FromMolesPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromMolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow MolesPerSecond<T>(this T value) =>
            MolarFlow.FromMolesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromNanomolesPerDay(UnitsNet.QuantityValue)" />
        public static MolarFlow NanomolesPerDay<T>(this T value) =>
            MolarFlow.FromNanomolesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarFlow.FromNanomolesPerSecond(UnitsNet.QuantityValue)" />
        public static MolarFlow NanomolesPerSecond<T>(this T value) =>
            MolarFlow.FromNanomolesPerSecond(Convert.ToDouble(value));

    }
}
