//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricResistivity
{
    /// <summary>
    /// A number to ElectricResistivity Extensions
    /// </summary>
    public static class NumberToElectricResistivityExtensions
    {
        /// <inheritdoc cref="ElectricResistivity{T}.FromKiloohmsCentimeter(T)" />
        public static ElectricResistivity<double> KiloohmsCentimeter<T>(this T value) =>
            ElectricResistivity<double>.FromKiloohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromKiloohmMeters(T)" />
        public static ElectricResistivity<double> KiloohmMeters<T>(this T value) =>
            ElectricResistivity<double>.FromKiloohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromMegaohmsCentimeter(T)" />
        public static ElectricResistivity<double> MegaohmsCentimeter<T>(this T value) =>
            ElectricResistivity<double>.FromMegaohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromMegaohmMeters(T)" />
        public static ElectricResistivity<double> MegaohmMeters<T>(this T value) =>
            ElectricResistivity<double>.FromMegaohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromMicroohmsCentimeter(T)" />
        public static ElectricResistivity<double> MicroohmsCentimeter<T>(this T value) =>
            ElectricResistivity<double>.FromMicroohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromMicroohmMeters(T)" />
        public static ElectricResistivity<double> MicroohmMeters<T>(this T value) =>
            ElectricResistivity<double>.FromMicroohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromMilliohmsCentimeter(T)" />
        public static ElectricResistivity<double> MilliohmsCentimeter<T>(this T value) =>
            ElectricResistivity<double>.FromMilliohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromMilliohmMeters(T)" />
        public static ElectricResistivity<double> MilliohmMeters<T>(this T value) =>
            ElectricResistivity<double>.FromMilliohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromNanoohmsCentimeter(T)" />
        public static ElectricResistivity<double> NanoohmsCentimeter<T>(this T value) =>
            ElectricResistivity<double>.FromNanoohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromNanoohmMeters(T)" />
        public static ElectricResistivity<double> NanoohmMeters<T>(this T value) =>
            ElectricResistivity<double>.FromNanoohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromOhmsCentimeter(T)" />
        public static ElectricResistivity<double> OhmsCentimeter<T>(this T value) =>
            ElectricResistivity<double>.FromOhmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromOhmMeters(T)" />
        public static ElectricResistivity<double> OhmMeters<T>(this T value) =>
            ElectricResistivity<double>.FromOhmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromPicoohmsCentimeter(T)" />
        public static ElectricResistivity<double> PicoohmsCentimeter<T>(this T value) =>
            ElectricResistivity<double>.FromPicoohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity{T}.FromPicoohmMeters(T)" />
        public static ElectricResistivity<double> PicoohmMeters<T>(this T value) =>
            ElectricResistivity<double>.FromPicoohmMeters(Convert.ToDouble(value));

    }
}
