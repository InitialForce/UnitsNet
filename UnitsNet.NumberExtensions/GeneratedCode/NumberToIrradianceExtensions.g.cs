//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToIrradiance
{
    /// <summary>
    /// A number to Irradiance Extensions
    /// </summary>
    public static class NumberToIrradianceExtensions
    {
        /// <inheritdoc cref="Irradiance{T}.FromKilowattsPerSquareCentimeter(T)" />
        public static Irradiance<double> KilowattsPerSquareCentimeter<T>(this T value) =>
            Irradiance<double>.FromKilowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromKilowattsPerSquareMeter(T)" />
        public static Irradiance<double> KilowattsPerSquareMeter<T>(this T value) =>
            Irradiance<double>.FromKilowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromMegawattsPerSquareCentimeter(T)" />
        public static Irradiance<double> MegawattsPerSquareCentimeter<T>(this T value) =>
            Irradiance<double>.FromMegawattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromMegawattsPerSquareMeter(T)" />
        public static Irradiance<double> MegawattsPerSquareMeter<T>(this T value) =>
            Irradiance<double>.FromMegawattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromMicrowattsPerSquareCentimeter(T)" />
        public static Irradiance<double> MicrowattsPerSquareCentimeter<T>(this T value) =>
            Irradiance<double>.FromMicrowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromMicrowattsPerSquareMeter(T)" />
        public static Irradiance<double> MicrowattsPerSquareMeter<T>(this T value) =>
            Irradiance<double>.FromMicrowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromMilliwattsPerSquareCentimeter(T)" />
        public static Irradiance<double> MilliwattsPerSquareCentimeter<T>(this T value) =>
            Irradiance<double>.FromMilliwattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromMilliwattsPerSquareMeter(T)" />
        public static Irradiance<double> MilliwattsPerSquareMeter<T>(this T value) =>
            Irradiance<double>.FromMilliwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromNanowattsPerSquareCentimeter(T)" />
        public static Irradiance<double> NanowattsPerSquareCentimeter<T>(this T value) =>
            Irradiance<double>.FromNanowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromNanowattsPerSquareMeter(T)" />
        public static Irradiance<double> NanowattsPerSquareMeter<T>(this T value) =>
            Irradiance<double>.FromNanowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromPicowattsPerSquareCentimeter(T)" />
        public static Irradiance<double> PicowattsPerSquareCentimeter<T>(this T value) =>
            Irradiance<double>.FromPicowattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromPicowattsPerSquareMeter(T)" />
        public static Irradiance<double> PicowattsPerSquareMeter<T>(this T value) =>
            Irradiance<double>.FromPicowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromWattsPerSquareCentimeter(T)" />
        public static Irradiance<double> WattsPerSquareCentimeter<T>(this T value) =>
            Irradiance<double>.FromWattsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiance{T}.FromWattsPerSquareMeter(T)" />
        public static Irradiance<double> WattsPerSquareMeter<T>(this T value) =>
            Irradiance<double>.FromWattsPerSquareMeter(Convert.ToDouble(value));

    }
}
