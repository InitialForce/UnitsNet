//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToRotationalStiffness
{
    /// <summary>
    /// A number to RotationalStiffness Extensions
    /// </summary>
    public static class NumberToRotationalStiffnessExtensions
    {
        /// <inheritdoc cref="RotationalStiffness{T}.FromCentinewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> CentinewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromCentinewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromCentinewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> CentinewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromCentinewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromCentinewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> CentinewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromCentinewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromDecanewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> DecanewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromDecanewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromDecanewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> DecanewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromDecanewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromDecanewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> DecanewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromDecanewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromDecinewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> DecinewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromDecinewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromDecinewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> DecinewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromDecinewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromDecinewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> DecinewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromDecinewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromKilonewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> KilonewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromKilonewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromKilonewtonMetersPerRadian(T)" />
        public static RotationalStiffness<double> KilonewtonMetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromKilonewtonMetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromKilonewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> KilonewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromKilonewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromKilonewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> KilonewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromKilonewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromKilopoundForceFeetPerDegrees(T)" />
        public static RotationalStiffness<double> KilopoundForceFeetPerDegrees<T>(this T value) =>
            RotationalStiffness<double>.FromKilopoundForceFeetPerDegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMeganewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> MeganewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromMeganewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMeganewtonMetersPerRadian(T)" />
        public static RotationalStiffness<double> MeganewtonMetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromMeganewtonMetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMeganewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> MeganewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromMeganewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMeganewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> MeganewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromMeganewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMicronewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> MicronewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromMicronewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMicronewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> MicronewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromMicronewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMicronewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> MicronewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromMicronewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMillinewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> MillinewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromMillinewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMillinewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> MillinewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromMillinewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromMillinewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> MillinewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromMillinewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromNanonewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> NanonewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromNanonewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromNanonewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> NanonewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromNanonewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromNanonewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> NanonewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromNanonewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromNewtonMetersPerDegree(T)" />
        public static RotationalStiffness<double> NewtonMetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromNewtonMetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromNewtonMetersPerRadian(T)" />
        public static RotationalStiffness<double> NewtonMetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromNewtonMetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromNewtonMillimetersPerDegree(T)" />
        public static RotationalStiffness<double> NewtonMillimetersPerDegree<T>(this T value) =>
            RotationalStiffness<double>.FromNewtonMillimetersPerDegree(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromNewtonMillimetersPerRadian(T)" />
        public static RotationalStiffness<double> NewtonMillimetersPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromNewtonMillimetersPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromPoundForceFeetPerRadian(T)" />
        public static RotationalStiffness<double> PoundForceFeetPerRadian<T>(this T value) =>
            RotationalStiffness<double>.FromPoundForceFeetPerRadian(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalStiffness{T}.FromPoundForceFeetPerDegrees(T)" />
        public static RotationalStiffness<double> PoundForceFeetPerDegrees<T>(this T value) =>
            RotationalStiffness<double>.FromPoundForceFeetPerDegrees(Convert.ToDouble(value));

    }
}
