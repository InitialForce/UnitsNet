//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLuminosity
{
    /// <summary>
    /// A number to Luminosity Extensions
    /// </summary>
    public static class NumberToLuminosityExtensions
    {
        /// <inheritdoc cref="Luminosity{T}.FromDecawatts(T)" />
        public static Luminosity<double> Decawatts<T>(this T value) =>
            Luminosity<double>.FromDecawatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromDeciwatts(T)" />
        public static Luminosity<double> Deciwatts<T>(this T value) =>
            Luminosity<double>.FromDeciwatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromFemtowatts(T)" />
        public static Luminosity<double> Femtowatts<T>(this T value) =>
            Luminosity<double>.FromFemtowatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromGigawatts(T)" />
        public static Luminosity<double> Gigawatts<T>(this T value) =>
            Luminosity<double>.FromGigawatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromKilowatts(T)" />
        public static Luminosity<double> Kilowatts<T>(this T value) =>
            Luminosity<double>.FromKilowatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromMegawatts(T)" />
        public static Luminosity<double> Megawatts<T>(this T value) =>
            Luminosity<double>.FromMegawatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromMicrowatts(T)" />
        public static Luminosity<double> Microwatts<T>(this T value) =>
            Luminosity<double>.FromMicrowatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromMilliwatts(T)" />
        public static Luminosity<double> Milliwatts<T>(this T value) =>
            Luminosity<double>.FromMilliwatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromNanowatts(T)" />
        public static Luminosity<double> Nanowatts<T>(this T value) =>
            Luminosity<double>.FromNanowatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromPetawatts(T)" />
        public static Luminosity<double> Petawatts<T>(this T value) =>
            Luminosity<double>.FromPetawatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromPicowatts(T)" />
        public static Luminosity<double> Picowatts<T>(this T value) =>
            Luminosity<double>.FromPicowatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromSolarLuminosities(T)" />
        public static Luminosity<double> SolarLuminosities<T>(this T value) =>
            Luminosity<double>.FromSolarLuminosities(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromTerawatts(T)" />
        public static Luminosity<double> Terawatts<T>(this T value) =>
            Luminosity<double>.FromTerawatts(Convert.ToDouble(value));

        /// <inheritdoc cref="Luminosity{T}.FromWatts(T)" />
        public static Luminosity<double> Watts<T>(this T value) =>
            Luminosity<double>.FromWatts(Convert.ToDouble(value));

    }
}
