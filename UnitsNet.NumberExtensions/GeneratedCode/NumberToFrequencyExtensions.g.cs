//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToFrequency
{
    /// <summary>
    /// A number to Frequency Extensions
    /// </summary>
    public static class NumberToFrequencyExtensions
    {
        /// <inheritdoc cref="Frequency{T}.FromBeatsPerMinute(T)" />
        public static Frequency<double> BeatsPerMinute<T>(this T value) =>
            Frequency<double>.FromBeatsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromCyclesPerHour(T)" />
        public static Frequency<double> CyclesPerHour<T>(this T value) =>
            Frequency<double>.FromCyclesPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromCyclesPerMinute(T)" />
        public static Frequency<double> CyclesPerMinute<T>(this T value) =>
            Frequency<double>.FromCyclesPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromGigahertz(T)" />
        public static Frequency<double> Gigahertz<T>(this T value) =>
            Frequency<double>.FromGigahertz(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromHertz(T)" />
        public static Frequency<double> Hertz<T>(this T value) =>
            Frequency<double>.FromHertz(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromKilohertz(T)" />
        public static Frequency<double> Kilohertz<T>(this T value) =>
            Frequency<double>.FromKilohertz(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromMegahertz(T)" />
        public static Frequency<double> Megahertz<T>(this T value) =>
            Frequency<double>.FromMegahertz(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromPerSecond(T)" />
        public static Frequency<double> PerSecond<T>(this T value) =>
            Frequency<double>.FromPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromRadiansPerSecond(T)" />
        public static Frequency<double> RadiansPerSecond<T>(this T value) =>
            Frequency<double>.FromRadiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Frequency{T}.FromTerahertz(T)" />
        public static Frequency<double> Terahertz<T>(this T value) =>
            Frequency<double>.FromTerahertz(Convert.ToDouble(value));

    }
}
