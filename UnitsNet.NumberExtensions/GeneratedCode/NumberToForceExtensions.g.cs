//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToForce
{
    /// <summary>
    /// A number to Force Extensions
    /// </summary>
    public static class NumberToForceExtensions
    {
        /// <inheritdoc cref="Force{T}.FromDecanewtons(T)" />
        public static Force<double> Decanewtons<T>(this T value) =>
            Force<double>.FromDecanewtons(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromDyne(T)" />
        public static Force<double> Dyne<T>(this T value) =>
            Force<double>.FromDyne(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromKilogramsForce(T)" />
        public static Force<double> KilogramsForce<T>(this T value) =>
            Force<double>.FromKilogramsForce(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromKilonewtons(T)" />
        public static Force<double> Kilonewtons<T>(this T value) =>
            Force<double>.FromKilonewtons(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromKiloPonds(T)" />
        public static Force<double> KiloPonds<T>(this T value) =>
            Force<double>.FromKiloPonds(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromKilopoundsForce(T)" />
        public static Force<double> KilopoundsForce<T>(this T value) =>
            Force<double>.FromKilopoundsForce(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromMeganewtons(T)" />
        public static Force<double> Meganewtons<T>(this T value) =>
            Force<double>.FromMeganewtons(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromMicronewtons(T)" />
        public static Force<double> Micronewtons<T>(this T value) =>
            Force<double>.FromMicronewtons(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromMillinewtons(T)" />
        public static Force<double> Millinewtons<T>(this T value) =>
            Force<double>.FromMillinewtons(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromNewtons(T)" />
        public static Force<double> Newtons<T>(this T value) =>
            Force<double>.FromNewtons(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromOunceForce(T)" />
        public static Force<double> OunceForce<T>(this T value) =>
            Force<double>.FromOunceForce(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromPoundals(T)" />
        public static Force<double> Poundals<T>(this T value) =>
            Force<double>.FromPoundals(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromPoundsForce(T)" />
        public static Force<double> PoundsForce<T>(this T value) =>
            Force<double>.FromPoundsForce(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromShortTonsForce(T)" />
        public static Force<double> ShortTonsForce<T>(this T value) =>
            Force<double>.FromShortTonsForce(Convert.ToDouble(value));

        /// <inheritdoc cref="Force{T}.FromTonnesForce(T)" />
        public static Force<double> TonnesForce<T>(this T value) =>
            Force<double>.FromTonnesForce(Convert.ToDouble(value));

    }
}
