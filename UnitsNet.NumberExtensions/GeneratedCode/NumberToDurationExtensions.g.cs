//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToDuration
{
    /// <summary>
    /// A number to Duration Extensions
    /// </summary>
    public static class NumberToDurationExtensions
    {
        /// <inheritdoc cref="Duration{T}.FromDays(T)" />
        public static Duration<double> Days<T>(this T value) =>
            Duration<double>.FromDays(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromHours(T)" />
        public static Duration<double> Hours<T>(this T value) =>
            Duration<double>.FromHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromMicroseconds(T)" />
        public static Duration<double> Microseconds<T>(this T value) =>
            Duration<double>.FromMicroseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromMilliseconds(T)" />
        public static Duration<double> Milliseconds<T>(this T value) =>
            Duration<double>.FromMilliseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromMinutes(T)" />
        public static Duration<double> Minutes<T>(this T value) =>
            Duration<double>.FromMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromMonths30(T)" />
        public static Duration<double> Months30<T>(this T value) =>
            Duration<double>.FromMonths30(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromNanoseconds(T)" />
        public static Duration<double> Nanoseconds<T>(this T value) =>
            Duration<double>.FromNanoseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromSeconds(T)" />
        public static Duration<double> Seconds<T>(this T value) =>
            Duration<double>.FromSeconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromWeeks(T)" />
        public static Duration<double> Weeks<T>(this T value) =>
            Duration<double>.FromWeeks(Convert.ToDouble(value));

        /// <inheritdoc cref="Duration{T}.FromYears365(T)" />
        public static Duration<double> Years365<T>(this T value) =>
            Duration<double>.FromYears365(Convert.ToDouble(value));

    }
}
