//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToDynamicViscosity
{
    /// <summary>
    /// A number to DynamicViscosity Extensions
    /// </summary>
    public static class NumberToDynamicViscosityExtensions
    {
        /// <inheritdoc cref="DynamicViscosity{T}.FromCentipoise(T)" />
        public static DynamicViscosity<double> Centipoise<T>(this T value) =>
            DynamicViscosity<double>.FromCentipoise(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromMicropascalSeconds(T)" />
        public static DynamicViscosity<double> MicropascalSeconds<T>(this T value) =>
            DynamicViscosity<double>.FromMicropascalSeconds(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromMillipascalSeconds(T)" />
        public static DynamicViscosity<double> MillipascalSeconds<T>(this T value) =>
            DynamicViscosity<double>.FromMillipascalSeconds(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromNewtonSecondsPerMeterSquared(T)" />
        public static DynamicViscosity<double> NewtonSecondsPerMeterSquared<T>(this T value) =>
            DynamicViscosity<double>.FromNewtonSecondsPerMeterSquared(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromPascalSeconds(T)" />
        public static DynamicViscosity<double> PascalSeconds<T>(this T value) =>
            DynamicViscosity<double>.FromPascalSeconds(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromPoise(T)" />
        public static DynamicViscosity<double> Poise<T>(this T value) =>
            DynamicViscosity<double>.FromPoise(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromPoundsForceSecondPerSquareFoot(T)" />
        public static DynamicViscosity<double> PoundsForceSecondPerSquareFoot<T>(this T value) =>
            DynamicViscosity<double>.FromPoundsForceSecondPerSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromPoundsForceSecondPerSquareInch(T)" />
        public static DynamicViscosity<double> PoundsForceSecondPerSquareInch<T>(this T value) =>
            DynamicViscosity<double>.FromPoundsForceSecondPerSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromPoundsPerFootSecond(T)" />
        public static DynamicViscosity<double> PoundsPerFootSecond<T>(this T value) =>
            DynamicViscosity<double>.FromPoundsPerFootSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="DynamicViscosity{T}.FromReyns(T)" />
        public static DynamicViscosity<double> Reyns<T>(this T value) =>
            DynamicViscosity<double>.FromReyns(Convert.ToDouble(value));

    }
}
