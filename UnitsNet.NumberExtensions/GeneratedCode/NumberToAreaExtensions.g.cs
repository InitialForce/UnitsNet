//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToArea
{
    /// <summary>
    /// A number to Area Extensions
    /// </summary>
    public static class NumberToAreaExtensions
    {
        /// <inheritdoc cref="Area{T}.FromAcres(T)" />
        public static Area<double> Acres<T>(this T value) =>
            Area<double>.FromAcres(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromHectares(T)" />
        public static Area<double> Hectares<T>(this T value) =>
            Area<double>.FromHectares(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareCentimeters(T)" />
        public static Area<double> SquareCentimeters<T>(this T value) =>
            Area<double>.FromSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareDecimeters(T)" />
        public static Area<double> SquareDecimeters<T>(this T value) =>
            Area<double>.FromSquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareFeet(T)" />
        public static Area<double> SquareFeet<T>(this T value) =>
            Area<double>.FromSquareFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareInches(T)" />
        public static Area<double> SquareInches<T>(this T value) =>
            Area<double>.FromSquareInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareKilometers(T)" />
        public static Area<double> SquareKilometers<T>(this T value) =>
            Area<double>.FromSquareKilometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareMeters(T)" />
        public static Area<double> SquareMeters<T>(this T value) =>
            Area<double>.FromSquareMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareMicrometers(T)" />
        public static Area<double> SquareMicrometers<T>(this T value) =>
            Area<double>.FromSquareMicrometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareMiles(T)" />
        public static Area<double> SquareMiles<T>(this T value) =>
            Area<double>.FromSquareMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareMillimeters(T)" />
        public static Area<double> SquareMillimeters<T>(this T value) =>
            Area<double>.FromSquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareNauticalMiles(T)" />
        public static Area<double> SquareNauticalMiles<T>(this T value) =>
            Area<double>.FromSquareNauticalMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromSquareYards(T)" />
        public static Area<double> SquareYards<T>(this T value) =>
            Area<double>.FromSquareYards(Convert.ToDouble(value));

        /// <inheritdoc cref="Area{T}.FromUsSurveySquareFeet(T)" />
        public static Area<double> UsSurveySquareFeet<T>(this T value) =>
            Area<double>.FromUsSurveySquareFeet(Convert.ToDouble(value));

    }
}
