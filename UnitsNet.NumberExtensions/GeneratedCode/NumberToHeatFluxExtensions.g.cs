//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToHeatFlux
{
    /// <summary>
    /// A number to HeatFlux Extensions
    /// </summary>
    public static class NumberToHeatFluxExtensions
    {
        /// <inheritdoc cref="HeatFlux{T}.FromBtusPerHourSquareFoot(T)" />
        public static HeatFlux<double> BtusPerHourSquareFoot<T>(this T value) =>
            HeatFlux<double>.FromBtusPerHourSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromBtusPerMinuteSquareFoot(T)" />
        public static HeatFlux<double> BtusPerMinuteSquareFoot<T>(this T value) =>
            HeatFlux<double>.FromBtusPerMinuteSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromBtusPerSecondSquareFoot(T)" />
        public static HeatFlux<double> BtusPerSecondSquareFoot<T>(this T value) =>
            HeatFlux<double>.FromBtusPerSecondSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromBtusPerSecondSquareInch(T)" />
        public static HeatFlux<double> BtusPerSecondSquareInch<T>(this T value) =>
            HeatFlux<double>.FromBtusPerSecondSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromCaloriesPerSecondSquareCentimeter(T)" />
        public static HeatFlux<double> CaloriesPerSecondSquareCentimeter<T>(this T value) =>
            HeatFlux<double>.FromCaloriesPerSecondSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromCentiwattsPerSquareMeter(T)" />
        public static HeatFlux<double> CentiwattsPerSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromCentiwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromDeciwattsPerSquareMeter(T)" />
        public static HeatFlux<double> DeciwattsPerSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromDeciwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromKilocaloriesPerHourSquareMeter(T)" />
        public static HeatFlux<double> KilocaloriesPerHourSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromKilocaloriesPerHourSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromKilocaloriesPerSecondSquareCentimeter(T)" />
        public static HeatFlux<double> KilocaloriesPerSecondSquareCentimeter<T>(this T value) =>
            HeatFlux<double>.FromKilocaloriesPerSecondSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromKilowattsPerSquareMeter(T)" />
        public static HeatFlux<double> KilowattsPerSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromKilowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromMicrowattsPerSquareMeter(T)" />
        public static HeatFlux<double> MicrowattsPerSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromMicrowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromMilliwattsPerSquareMeter(T)" />
        public static HeatFlux<double> MilliwattsPerSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromMilliwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromNanowattsPerSquareMeter(T)" />
        public static HeatFlux<double> NanowattsPerSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromNanowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromPoundsForcePerFootSecond(T)" />
        public static HeatFlux<double> PoundsForcePerFootSecond<T>(this T value) =>
            HeatFlux<double>.FromPoundsForcePerFootSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromPoundsPerSecondCubed(T)" />
        public static HeatFlux<double> PoundsPerSecondCubed<T>(this T value) =>
            HeatFlux<double>.FromPoundsPerSecondCubed(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromWattsPerSquareFoot(T)" />
        public static HeatFlux<double> WattsPerSquareFoot<T>(this T value) =>
            HeatFlux<double>.FromWattsPerSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromWattsPerSquareInch(T)" />
        public static HeatFlux<double> WattsPerSquareInch<T>(this T value) =>
            HeatFlux<double>.FromWattsPerSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux{T}.FromWattsPerSquareMeter(T)" />
        public static HeatFlux<double> WattsPerSquareMeter<T>(this T value) =>
            HeatFlux<double>.FromWattsPerSquareMeter(Convert.ToDouble(value));

    }
}
