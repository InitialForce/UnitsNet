//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToForceChangeRate
{
    /// <summary>
    /// A number to ForceChangeRate Extensions
    /// </summary>
    public static class NumberToForceChangeRateExtensions
    {
        /// <inheritdoc cref="ForceChangeRate{T}.FromCentinewtonsPerSecond(T)" />
        public static ForceChangeRate<double> CentinewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromCentinewtonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromDecanewtonsPerMinute(T)" />
        public static ForceChangeRate<double> DecanewtonsPerMinute<T>(this T value) =>
            ForceChangeRate<double>.FromDecanewtonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromDecanewtonsPerSecond(T)" />
        public static ForceChangeRate<double> DecanewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromDecanewtonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromDecinewtonsPerSecond(T)" />
        public static ForceChangeRate<double> DecinewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromDecinewtonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromKilonewtonsPerMinute(T)" />
        public static ForceChangeRate<double> KilonewtonsPerMinute<T>(this T value) =>
            ForceChangeRate<double>.FromKilonewtonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromKilonewtonsPerSecond(T)" />
        public static ForceChangeRate<double> KilonewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromKilonewtonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromMicronewtonsPerSecond(T)" />
        public static ForceChangeRate<double> MicronewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromMicronewtonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromMillinewtonsPerSecond(T)" />
        public static ForceChangeRate<double> MillinewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromMillinewtonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromNanonewtonsPerSecond(T)" />
        public static ForceChangeRate<double> NanonewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromNanonewtonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromNewtonsPerMinute(T)" />
        public static ForceChangeRate<double> NewtonsPerMinute<T>(this T value) =>
            ForceChangeRate<double>.FromNewtonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="ForceChangeRate{T}.FromNewtonsPerSecond(T)" />
        public static ForceChangeRate<double> NewtonsPerSecond<T>(this T value) =>
            ForceChangeRate<double>.FromNewtonsPerSecond(Convert.ToDouble(value));

    }
}
