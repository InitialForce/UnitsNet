//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToVolumeFlow
{
    /// <summary>
    /// A number to VolumeFlow Extensions
    /// </summary>
    public static class NumberToVolumeFlowExtensions
    {
        /// <inheritdoc cref="VolumeFlow{T}.FromAcreFeetPerDay(T)" />
        public static VolumeFlow<double> AcreFeetPerDay<T>(this T value) =>
            VolumeFlow<double>.FromAcreFeetPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromAcreFeetPerHour(T)" />
        public static VolumeFlow<double> AcreFeetPerHour<T>(this T value) =>
            VolumeFlow<double>.FromAcreFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromAcreFeetPerMinute(T)" />
        public static VolumeFlow<double> AcreFeetPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromAcreFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromAcreFeetPerSecond(T)" />
        public static VolumeFlow<double> AcreFeetPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromAcreFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCentilitersPerDay(T)" />
        public static VolumeFlow<double> CentilitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromCentilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCentilitersPerMinute(T)" />
        public static VolumeFlow<double> CentilitersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromCentilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCentilitersPerSecond(T)" />
        public static VolumeFlow<double> CentilitersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromCentilitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicCentimetersPerMinute(T)" />
        public static VolumeFlow<double> CubicCentimetersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromCubicCentimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicDecimetersPerMinute(T)" />
        public static VolumeFlow<double> CubicDecimetersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromCubicDecimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicFeetPerHour(T)" />
        public static VolumeFlow<double> CubicFeetPerHour<T>(this T value) =>
            VolumeFlow<double>.FromCubicFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicFeetPerMinute(T)" />
        public static VolumeFlow<double> CubicFeetPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromCubicFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicFeetPerSecond(T)" />
        public static VolumeFlow<double> CubicFeetPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromCubicFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicMetersPerDay(T)" />
        public static VolumeFlow<double> CubicMetersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromCubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicMetersPerHour(T)" />
        public static VolumeFlow<double> CubicMetersPerHour<T>(this T value) =>
            VolumeFlow<double>.FromCubicMetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicMetersPerMinute(T)" />
        public static VolumeFlow<double> CubicMetersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromCubicMetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicMetersPerSecond(T)" />
        public static VolumeFlow<double> CubicMetersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromCubicMetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicMillimetersPerSecond(T)" />
        public static VolumeFlow<double> CubicMillimetersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromCubicMillimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicYardsPerDay(T)" />
        public static VolumeFlow<double> CubicYardsPerDay<T>(this T value) =>
            VolumeFlow<double>.FromCubicYardsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicYardsPerHour(T)" />
        public static VolumeFlow<double> CubicYardsPerHour<T>(this T value) =>
            VolumeFlow<double>.FromCubicYardsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicYardsPerMinute(T)" />
        public static VolumeFlow<double> CubicYardsPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromCubicYardsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromCubicYardsPerSecond(T)" />
        public static VolumeFlow<double> CubicYardsPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromCubicYardsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromDecilitersPerDay(T)" />
        public static VolumeFlow<double> DecilitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromDecilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromDecilitersPerMinute(T)" />
        public static VolumeFlow<double> DecilitersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromDecilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromDecilitersPerSecond(T)" />
        public static VolumeFlow<double> DecilitersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromDecilitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromKilolitersPerDay(T)" />
        public static VolumeFlow<double> KilolitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromKilolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromKilolitersPerMinute(T)" />
        public static VolumeFlow<double> KilolitersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromKilolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromKilolitersPerSecond(T)" />
        public static VolumeFlow<double> KilolitersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromKilolitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromKilousGallonsPerMinute(T)" />
        public static VolumeFlow<double> KilousGallonsPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromKilousGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromLitersPerDay(T)" />
        public static VolumeFlow<double> LitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromLitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromLitersPerHour(T)" />
        public static VolumeFlow<double> LitersPerHour<T>(this T value) =>
            VolumeFlow<double>.FromLitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromLitersPerMinute(T)" />
        public static VolumeFlow<double> LitersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromLitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromLitersPerSecond(T)" />
        public static VolumeFlow<double> LitersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromLitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMegalitersPerDay(T)" />
        public static VolumeFlow<double> MegalitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromMegalitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMegaukGallonsPerSecond(T)" />
        public static VolumeFlow<double> MegaukGallonsPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromMegaukGallonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMicrolitersPerDay(T)" />
        public static VolumeFlow<double> MicrolitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromMicrolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMicrolitersPerMinute(T)" />
        public static VolumeFlow<double> MicrolitersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromMicrolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMicrolitersPerSecond(T)" />
        public static VolumeFlow<double> MicrolitersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromMicrolitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMillilitersPerDay(T)" />
        public static VolumeFlow<double> MillilitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromMillilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMillilitersPerMinute(T)" />
        public static VolumeFlow<double> MillilitersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromMillilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMillilitersPerSecond(T)" />
        public static VolumeFlow<double> MillilitersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromMillilitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromMillionUsGallonsPerDay(T)" />
        public static VolumeFlow<double> MillionUsGallonsPerDay<T>(this T value) =>
            VolumeFlow<double>.FromMillionUsGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromNanolitersPerDay(T)" />
        public static VolumeFlow<double> NanolitersPerDay<T>(this T value) =>
            VolumeFlow<double>.FromNanolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromNanolitersPerMinute(T)" />
        public static VolumeFlow<double> NanolitersPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromNanolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromNanolitersPerSecond(T)" />
        public static VolumeFlow<double> NanolitersPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromNanolitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromOilBarrelsPerDay(T)" />
        public static VolumeFlow<double> OilBarrelsPerDay<T>(this T value) =>
            VolumeFlow<double>.FromOilBarrelsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromOilBarrelsPerHour(T)" />
        public static VolumeFlow<double> OilBarrelsPerHour<T>(this T value) =>
            VolumeFlow<double>.FromOilBarrelsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromOilBarrelsPerMinute(T)" />
        public static VolumeFlow<double> OilBarrelsPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromOilBarrelsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromOilBarrelsPerSecond(T)" />
        public static VolumeFlow<double> OilBarrelsPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromOilBarrelsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUkGallonsPerDay(T)" />
        public static VolumeFlow<double> UkGallonsPerDay<T>(this T value) =>
            VolumeFlow<double>.FromUkGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUkGallonsPerHour(T)" />
        public static VolumeFlow<double> UkGallonsPerHour<T>(this T value) =>
            VolumeFlow<double>.FromUkGallonsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUkGallonsPerMinute(T)" />
        public static VolumeFlow<double> UkGallonsPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromUkGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUkGallonsPerSecond(T)" />
        public static VolumeFlow<double> UkGallonsPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromUkGallonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUsGallonsPerDay(T)" />
        public static VolumeFlow<double> UsGallonsPerDay<T>(this T value) =>
            VolumeFlow<double>.FromUsGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUsGallonsPerHour(T)" />
        public static VolumeFlow<double> UsGallonsPerHour<T>(this T value) =>
            VolumeFlow<double>.FromUsGallonsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUsGallonsPerMinute(T)" />
        public static VolumeFlow<double> UsGallonsPerMinute<T>(this T value) =>
            VolumeFlow<double>.FromUsGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow{T}.FromUsGallonsPerSecond(T)" />
        public static VolumeFlow<double> UsGallonsPerSecond<T>(this T value) =>
            VolumeFlow<double>.FromUsGallonsPerSecond(Convert.ToDouble(value));

    }
}
