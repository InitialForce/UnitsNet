//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToIrradiation
{
    /// <summary>
    /// A number to Irradiation Extensions
    /// </summary>
    public static class NumberToIrradiationExtensions
    {
        /// <inheritdoc cref="Irradiation{T}.FromJoulesPerSquareCentimeter(T)" />
        public static Irradiation<double> JoulesPerSquareCentimeter<T>(this T value) =>
            Irradiation<double>.FromJoulesPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiation{T}.FromJoulesPerSquareMeter(T)" />
        public static Irradiation<double> JoulesPerSquareMeter<T>(this T value) =>
            Irradiation<double>.FromJoulesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiation{T}.FromJoulesPerSquareMillimeter(T)" />
        public static Irradiation<double> JoulesPerSquareMillimeter<T>(this T value) =>
            Irradiation<double>.FromJoulesPerSquareMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiation{T}.FromKilojoulesPerSquareMeter(T)" />
        public static Irradiation<double> KilojoulesPerSquareMeter<T>(this T value) =>
            Irradiation<double>.FromKilojoulesPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiation{T}.FromKilowattHoursPerSquareMeter(T)" />
        public static Irradiation<double> KilowattHoursPerSquareMeter<T>(this T value) =>
            Irradiation<double>.FromKilowattHoursPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiation{T}.FromMillijoulesPerSquareCentimeter(T)" />
        public static Irradiation<double> MillijoulesPerSquareCentimeter<T>(this T value) =>
            Irradiation<double>.FromMillijoulesPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Irradiation{T}.FromWattHoursPerSquareMeter(T)" />
        public static Irradiation<double> WattHoursPerSquareMeter<T>(this T value) =>
            Irradiation<double>.FromWattHoursPerSquareMeter(Convert.ToDouble(value));

    }
}
