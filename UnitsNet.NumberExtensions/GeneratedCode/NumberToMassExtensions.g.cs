//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMass
{
    /// <summary>
    /// A number to Mass Extensions
    /// </summary>
    public static class NumberToMassExtensions
    {
        /// <inheritdoc cref="Mass{T}.FromCentigrams(T)" />
        public static Mass<double> Centigrams<T>(this T value) =>
            Mass<double>.FromCentigrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromDecagrams(T)" />
        public static Mass<double> Decagrams<T>(this T value) =>
            Mass<double>.FromDecagrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromDecigrams(T)" />
        public static Mass<double> Decigrams<T>(this T value) =>
            Mass<double>.FromDecigrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromEarthMasses(T)" />
        public static Mass<double> EarthMasses<T>(this T value) =>
            Mass<double>.FromEarthMasses(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromGrains(T)" />
        public static Mass<double> Grains<T>(this T value) =>
            Mass<double>.FromGrains(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromGrams(T)" />
        public static Mass<double> Grams<T>(this T value) =>
            Mass<double>.FromGrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromHectograms(T)" />
        public static Mass<double> Hectograms<T>(this T value) =>
            Mass<double>.FromHectograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromKilograms(T)" />
        public static Mass<double> Kilograms<T>(this T value) =>
            Mass<double>.FromKilograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromKilopounds(T)" />
        public static Mass<double> Kilopounds<T>(this T value) =>
            Mass<double>.FromKilopounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromKilotonnes(T)" />
        public static Mass<double> Kilotonnes<T>(this T value) =>
            Mass<double>.FromKilotonnes(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromLongHundredweight(T)" />
        public static Mass<double> LongHundredweight<T>(this T value) =>
            Mass<double>.FromLongHundredweight(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromLongTons(T)" />
        public static Mass<double> LongTons<T>(this T value) =>
            Mass<double>.FromLongTons(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromMegapounds(T)" />
        public static Mass<double> Megapounds<T>(this T value) =>
            Mass<double>.FromMegapounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromMegatonnes(T)" />
        public static Mass<double> Megatonnes<T>(this T value) =>
            Mass<double>.FromMegatonnes(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromMicrograms(T)" />
        public static Mass<double> Micrograms<T>(this T value) =>
            Mass<double>.FromMicrograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromMilligrams(T)" />
        public static Mass<double> Milligrams<T>(this T value) =>
            Mass<double>.FromMilligrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromNanograms(T)" />
        public static Mass<double> Nanograms<T>(this T value) =>
            Mass<double>.FromNanograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromOunces(T)" />
        public static Mass<double> Ounces<T>(this T value) =>
            Mass<double>.FromOunces(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromPounds(T)" />
        public static Mass<double> Pounds<T>(this T value) =>
            Mass<double>.FromPounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromShortHundredweight(T)" />
        public static Mass<double> ShortHundredweight<T>(this T value) =>
            Mass<double>.FromShortHundredweight(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromShortTons(T)" />
        public static Mass<double> ShortTons<T>(this T value) =>
            Mass<double>.FromShortTons(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromSlugs(T)" />
        public static Mass<double> Slugs<T>(this T value) =>
            Mass<double>.FromSlugs(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromSolarMasses(T)" />
        public static Mass<double> SolarMasses<T>(this T value) =>
            Mass<double>.FromSolarMasses(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromStone(T)" />
        public static Mass<double> Stone<T>(this T value) =>
            Mass<double>.FromStone(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass{T}.FromTonnes(T)" />
        public static Mass<double> Tonnes<T>(this T value) =>
            Mass<double>.FromTonnes(Convert.ToDouble(value));

    }
}
