//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricPotential
{
    /// <summary>
    /// A number to ElectricPotential Extensions
    /// </summary>
    public static class NumberToElectricPotentialExtensions
    {
        /// <inheritdoc cref="ElectricPotential{T}.FromKilovolts(T)" />
        public static ElectricPotential<double> Kilovolts<T>(this T value) =>
            ElectricPotential<double>.FromKilovolts(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotential{T}.FromMegavolts(T)" />
        public static ElectricPotential<double> Megavolts<T>(this T value) =>
            ElectricPotential<double>.FromMegavolts(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotential{T}.FromMicrovolts(T)" />
        public static ElectricPotential<double> Microvolts<T>(this T value) =>
            ElectricPotential<double>.FromMicrovolts(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotential{T}.FromMillivolts(T)" />
        public static ElectricPotential<double> Millivolts<T>(this T value) =>
            ElectricPotential<double>.FromMillivolts(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricPotential{T}.FromVolts(T)" />
        public static ElectricPotential<double> Volts<T>(this T value) =>
            ElectricPotential<double>.FromVolts(Convert.ToDouble(value));

    }
}
