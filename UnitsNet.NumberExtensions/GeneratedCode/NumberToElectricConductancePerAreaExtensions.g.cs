//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricConductancePerArea
{
    /// <summary>
    /// A number to ElectricConductancePerArea Extensions
    /// </summary>
    public static class NumberToElectricConductancePerAreaExtensions
    {
        /// <inheritdoc cref="ElectricConductancePerArea.FromFemtosiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea FemtosiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromFemtosiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromKilosiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea KilosiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromKilosiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromMegasiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea MegasiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromMegasiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromMicrosiemensPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea MicrosiemensPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromMicrosiemensPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromMicrosiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea MicrosiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromMicrosiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromMillisiemensPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea MillisiemensPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromMillisiemensPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromMillisiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea MillisiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromMillisiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromNanosiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea NanosiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromNanosiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromPicosiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea PicosiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromPicosiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareCentimeters(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareDecimeters(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareFeet(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareInches(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareInches<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareInches(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareMeter(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareMiles(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareMiles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareMillimeters(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerSquareYards(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerSquareYards<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerSquareYards(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricConductancePerArea.FromSiemensPerUsSurveySquareFeet(UnitsNet.QuantityValue)" />
        public static ElectricConductancePerArea SiemensPerUsSurveySquareFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => ElectricConductancePerArea.FromSiemensPerUsSurveySquareFeet(Convert.ToDouble(value));

    }
}
