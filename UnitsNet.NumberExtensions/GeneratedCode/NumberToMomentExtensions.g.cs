//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMoment
{
    /// <summary>
    /// A number to Moment Extensions
    /// </summary>
    public static class NumberToMomentExtensions
    {
        /// <inheritdoc cref="Moment.FromKilogramForceCentimeters(UnitsNet.QuantityValue)" />
        public static Moment KilogramForceCentimeters<T>(this T value) =>
            Moment.FromKilogramForceCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromKilogramForceMeters(UnitsNet.QuantityValue)" />
        public static Moment KilogramForceMeters<T>(this T value) =>
            Moment.FromKilogramForceMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromKilogramForceMillimeters(UnitsNet.QuantityValue)" />
        public static Moment KilogramForceMillimeters<T>(this T value) =>
            Moment.FromKilogramForceMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromKilonewtonCentimeters(UnitsNet.QuantityValue)" />
        public static Moment KilonewtonCentimeters<T>(this T value) =>
            Moment.FromKilonewtonCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromKilonewtonMeters(UnitsNet.QuantityValue)" />
        public static Moment KilonewtonMeters<T>(this T value) =>
            Moment.FromKilonewtonMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromKilonewtonMillimeters(UnitsNet.QuantityValue)" />
        public static Moment KilonewtonMillimeters<T>(this T value) =>
            Moment.FromKilonewtonMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromKilopoundForceFeet(UnitsNet.QuantityValue)" />
        public static Moment KilopoundForceFeet<T>(this T value) =>
            Moment.FromKilopoundForceFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromKilopoundForceInches(UnitsNet.QuantityValue)" />
        public static Moment KilopoundForceInches<T>(this T value) =>
            Moment.FromKilopoundForceInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromMeganewtonCentimeters(UnitsNet.QuantityValue)" />
        public static Moment MeganewtonCentimeters<T>(this T value) =>
            Moment.FromMeganewtonCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromMeganewtonMeters(UnitsNet.QuantityValue)" />
        public static Moment MeganewtonMeters<T>(this T value) =>
            Moment.FromMeganewtonMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromMeganewtonMillimeters(UnitsNet.QuantityValue)" />
        public static Moment MeganewtonMillimeters<T>(this T value) =>
            Moment.FromMeganewtonMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromMegapoundForceFeet(UnitsNet.QuantityValue)" />
        public static Moment MegapoundForceFeet<T>(this T value) =>
            Moment.FromMegapoundForceFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromMegapoundForceInches(UnitsNet.QuantityValue)" />
        public static Moment MegapoundForceInches<T>(this T value) =>
            Moment.FromMegapoundForceInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromNewtonCentimeters(UnitsNet.QuantityValue)" />
        public static Moment NewtonCentimeters<T>(this T value) =>
            Moment.FromNewtonCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromNewtonMeters(UnitsNet.QuantityValue)" />
        public static Moment NewtonMeters<T>(this T value) =>
            Moment.FromNewtonMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromNewtonMillimeters(UnitsNet.QuantityValue)" />
        public static Moment NewtonMillimeters<T>(this T value) =>
            Moment.FromNewtonMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromPoundalFeet(UnitsNet.QuantityValue)" />
        public static Moment PoundalFeet<T>(this T value) =>
            Moment.FromPoundalFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromPoundForceFeet(UnitsNet.QuantityValue)" />
        public static Moment PoundForceFeet<T>(this T value) =>
            Moment.FromPoundForceFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromPoundForceInches(UnitsNet.QuantityValue)" />
        public static Moment PoundForceInches<T>(this T value) =>
            Moment.FromPoundForceInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromTonneForceCentimeters(UnitsNet.QuantityValue)" />
        public static Moment TonneForceCentimeters<T>(this T value) =>
            Moment.FromTonneForceCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromTonneForceMeters(UnitsNet.QuantityValue)" />
        public static Moment TonneForceMeters<T>(this T value) =>
            Moment.FromTonneForceMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Moment.FromTonneForceMillimeters(UnitsNet.QuantityValue)" />
        public static Moment TonneForceMillimeters<T>(this T value) =>
            Moment.FromTonneForceMillimeters(Convert.ToDouble(value));

    }
}
