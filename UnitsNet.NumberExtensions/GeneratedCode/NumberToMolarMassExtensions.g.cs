//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMolarMass
{
    /// <summary>
    /// A number to MolarMass Extensions
    /// </summary>
    public static class NumberToMolarMassExtensions
    {
        /// <inheritdoc cref="MolarMass{T}.FromCentigramsPerMole(T)" />
        public static MolarMass<double> CentigramsPerMole<T>(this T value) =>
            MolarMass<double>.FromCentigramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromDecagramsPerMole(T)" />
        public static MolarMass<double> DecagramsPerMole<T>(this T value) =>
            MolarMass<double>.FromDecagramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromDecigramsPerMole(T)" />
        public static MolarMass<double> DecigramsPerMole<T>(this T value) =>
            MolarMass<double>.FromDecigramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromGramsPerMole(T)" />
        public static MolarMass<double> GramsPerMole<T>(this T value) =>
            MolarMass<double>.FromGramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromHectogramsPerMole(T)" />
        public static MolarMass<double> HectogramsPerMole<T>(this T value) =>
            MolarMass<double>.FromHectogramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromKilogramsPerMole(T)" />
        public static MolarMass<double> KilogramsPerMole<T>(this T value) =>
            MolarMass<double>.FromKilogramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromKilopoundsPerMole(T)" />
        public static MolarMass<double> KilopoundsPerMole<T>(this T value) =>
            MolarMass<double>.FromKilopoundsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromMegapoundsPerMole(T)" />
        public static MolarMass<double> MegapoundsPerMole<T>(this T value) =>
            MolarMass<double>.FromMegapoundsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromMicrogramsPerMole(T)" />
        public static MolarMass<double> MicrogramsPerMole<T>(this T value) =>
            MolarMass<double>.FromMicrogramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromMilligramsPerMole(T)" />
        public static MolarMass<double> MilligramsPerMole<T>(this T value) =>
            MolarMass<double>.FromMilligramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromNanogramsPerMole(T)" />
        public static MolarMass<double> NanogramsPerMole<T>(this T value) =>
            MolarMass<double>.FromNanogramsPerMole(Convert.ToDouble(value));

        /// <inheritdoc cref="MolarMass{T}.FromPoundsPerMole(T)" />
        public static MolarMass<double> PoundsPerMole<T>(this T value) =>
            MolarMass<double>.FromPoundsPerMole(Convert.ToDouble(value));

    }
}
