//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpecificEntropy
{
    /// <summary>
    /// A number to SpecificEntropy Extensions
    /// </summary>
    public static class NumberToSpecificEntropyExtensions
    {
        /// <inheritdoc cref="SpecificEntropy{T}.FromBtusPerPoundFahrenheit(T)" />
        public static SpecificEntropy<double> BtusPerPoundFahrenheit<T>(this T value) =>
            SpecificEntropy<double>.FromBtusPerPoundFahrenheit(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromCaloriesPerGramKelvin(T)" />
        public static SpecificEntropy<double> CaloriesPerGramKelvin<T>(this T value) =>
            SpecificEntropy<double>.FromCaloriesPerGramKelvin(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromJoulesPerKilogramDegreeCelsius(T)" />
        public static SpecificEntropy<double> JoulesPerKilogramDegreeCelsius<T>(this T value) =>
            SpecificEntropy<double>.FromJoulesPerKilogramDegreeCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromJoulesPerKilogramKelvin(T)" />
        public static SpecificEntropy<double> JoulesPerKilogramKelvin<T>(this T value) =>
            SpecificEntropy<double>.FromJoulesPerKilogramKelvin(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromKilocaloriesPerGramKelvin(T)" />
        public static SpecificEntropy<double> KilocaloriesPerGramKelvin<T>(this T value) =>
            SpecificEntropy<double>.FromKilocaloriesPerGramKelvin(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromKilojoulesPerKilogramDegreeCelsius(T)" />
        public static SpecificEntropy<double> KilojoulesPerKilogramDegreeCelsius<T>(this T value) =>
            SpecificEntropy<double>.FromKilojoulesPerKilogramDegreeCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromKilojoulesPerKilogramKelvin(T)" />
        public static SpecificEntropy<double> KilojoulesPerKilogramKelvin<T>(this T value) =>
            SpecificEntropy<double>.FromKilojoulesPerKilogramKelvin(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromMegajoulesPerKilogramDegreeCelsius(T)" />
        public static SpecificEntropy<double> MegajoulesPerKilogramDegreeCelsius<T>(this T value) =>
            SpecificEntropy<double>.FromMegajoulesPerKilogramDegreeCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="SpecificEntropy{T}.FromMegajoulesPerKilogramKelvin(T)" />
        public static SpecificEntropy<double> MegajoulesPerKilogramKelvin<T>(this T value) =>
            SpecificEntropy<double>.FromMegajoulesPerKilogramKelvin(Convert.ToDouble(value));

    }
}
