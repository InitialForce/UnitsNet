//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLength
{
    /// <summary>
    /// A number to Length Extensions
    /// </summary>
    public static class NumberToLengthExtensions
    {
        /// <inheritdoc cref="Length{T}.FromAstronomicalUnits(T)" />
        public static Length<double> AstronomicalUnits<T>(this T value) =>
            Length<double>.FromAstronomicalUnits(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromCentimeters(T)" />
        public static Length<double> Centimeters<T>(this T value) =>
            Length<double>.FromCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromChains(T)" />
        public static Length<double> Chains<T>(this T value) =>
            Length<double>.FromChains(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromDecimeters(T)" />
        public static Length<double> Decimeters<T>(this T value) =>
            Length<double>.FromDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromDtpPicas(T)" />
        public static Length<double> DtpPicas<T>(this T value) =>
            Length<double>.FromDtpPicas(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromDtpPoints(T)" />
        public static Length<double> DtpPoints<T>(this T value) =>
            Length<double>.FromDtpPoints(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromFathoms(T)" />
        public static Length<double> Fathoms<T>(this T value) =>
            Length<double>.FromFathoms(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromFeet(T)" />
        public static Length<double> Feet<T>(this T value) =>
            Length<double>.FromFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromHands(T)" />
        public static Length<double> Hands<T>(this T value) =>
            Length<double>.FromHands(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromHectometers(T)" />
        public static Length<double> Hectometers<T>(this T value) =>
            Length<double>.FromHectometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromInches(T)" />
        public static Length<double> Inches<T>(this T value) =>
            Length<double>.FromInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromKilolightYears(T)" />
        public static Length<double> KilolightYears<T>(this T value) =>
            Length<double>.FromKilolightYears(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromKilometers(T)" />
        public static Length<double> Kilometers<T>(this T value) =>
            Length<double>.FromKilometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromKiloparsecs(T)" />
        public static Length<double> Kiloparsecs<T>(this T value) =>
            Length<double>.FromKiloparsecs(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromLightYears(T)" />
        public static Length<double> LightYears<T>(this T value) =>
            Length<double>.FromLightYears(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMegalightYears(T)" />
        public static Length<double> MegalightYears<T>(this T value) =>
            Length<double>.FromMegalightYears(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMegaparsecs(T)" />
        public static Length<double> Megaparsecs<T>(this T value) =>
            Length<double>.FromMegaparsecs(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMeters(T)" />
        public static Length<double> Meters<T>(this T value) =>
            Length<double>.FromMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMicroinches(T)" />
        public static Length<double> Microinches<T>(this T value) =>
            Length<double>.FromMicroinches(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMicrometers(T)" />
        public static Length<double> Micrometers<T>(this T value) =>
            Length<double>.FromMicrometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMils(T)" />
        public static Length<double> Mils<T>(this T value) =>
            Length<double>.FromMils(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMiles(T)" />
        public static Length<double> Miles<T>(this T value) =>
            Length<double>.FromMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromMillimeters(T)" />
        public static Length<double> Millimeters<T>(this T value) =>
            Length<double>.FromMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromNanometers(T)" />
        public static Length<double> Nanometers<T>(this T value) =>
            Length<double>.FromNanometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromNauticalMiles(T)" />
        public static Length<double> NauticalMiles<T>(this T value) =>
            Length<double>.FromNauticalMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromParsecs(T)" />
        public static Length<double> Parsecs<T>(this T value) =>
            Length<double>.FromParsecs(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromPrinterPicas(T)" />
        public static Length<double> PrinterPicas<T>(this T value) =>
            Length<double>.FromPrinterPicas(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromPrinterPoints(T)" />
        public static Length<double> PrinterPoints<T>(this T value) =>
            Length<double>.FromPrinterPoints(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromShackles(T)" />
        public static Length<double> Shackles<T>(this T value) =>
            Length<double>.FromShackles(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromSolarRadiuses(T)" />
        public static Length<double> SolarRadiuses<T>(this T value) =>
            Length<double>.FromSolarRadiuses(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromTwips(T)" />
        public static Length<double> Twips<T>(this T value) =>
            Length<double>.FromTwips(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromUsSurveyFeet(T)" />
        public static Length<double> UsSurveyFeet<T>(this T value) =>
            Length<double>.FromUsSurveyFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Length{T}.FromYards(T)" />
        public static Length<double> Yards<T>(this T value) =>
            Length<double>.FromYards(Convert.ToDouble(value));

    }
}
