//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using UnitsNet.Units;
using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class PorousMediumPermeabilityTests : PorousMediumPermeabilityTestsBase
    {
        protected override bool SupportsSIUnitSystem => true;

        protected override double DarcysInOneSquareMeter => 0.10132499658e13;

        protected override double MicrodarcysInOneSquareMeter => 0.10132499658e19;

        protected override double MillidarcysInOneSquareMeter => 0.10132499658e16;

        protected override double SquareCentimetersInOneSquareMeter => 10000;

        protected override double SquareMetersInOneSquareMeter => 1;

        [Theory]
        [InlineData("2 D", 2, PorousMediumPermeabilityUnit.Darcy)]
        [InlineData("2 mD", 2, PorousMediumPermeabilityUnit.Millidarcy)]
        [InlineData("2 µD", 2, PorousMediumPermeabilityUnit.Microdarcy)]
        [InlineData("2 m²", 2, PorousMediumPermeabilityUnit.SquareMeter)]
        [InlineData("2 cm²", 2, PorousMediumPermeabilityUnit.SquareCentimeter)]
        public void Parse(string input, double value, PorousMediumPermeabilityUnit unit)
        {
            var result = PorousMediumPermeability.Parse(input);
            Assert.Equal(value, result.Value);
            Assert.Equal(unit, result.Unit);
        }

        [Theory]
        [InlineData("2 D", true)]
        [InlineData("2 kD", false)]
        public void TryParse(string input, bool successful)
        {
            PorousMediumPermeability unit;
            var result = PorousMediumPermeability.TryParse(input, out unit);
            Assert.Equal(successful, result);
        }

        [Theory]
        [InlineData("D", PorousMediumPermeabilityUnit.Darcy)]
        [InlineData("mD", PorousMediumPermeabilityUnit.Millidarcy)]
        [InlineData("µD", PorousMediumPermeabilityUnit.Microdarcy)]
        [InlineData("m²", PorousMediumPermeabilityUnit.SquareMeter)]
        [InlineData("cm²", PorousMediumPermeabilityUnit.SquareCentimeter)]
        public void ParseUnit(string input, PorousMediumPermeabilityUnit unit)
        {
            var result = PorousMediumPermeability.ParseUnit(input);
            Assert.Equal(unit, result);
        }

        [Theory]
        [InlineData("mD", true)]
        [InlineData("kD", false)]
        public void TryParseUnit(string input, bool successful)
        {
            PorousMediumPermeabilityUnit unit;
            var result = PorousMediumPermeability.TryParseUnit(input, out unit);
            Assert.Equal(successful, result);
        }
    }
}
