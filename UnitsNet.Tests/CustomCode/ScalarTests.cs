//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class ScalarTests : ScalarTestsBase
    {
        // Override properties in base class here
        protected override double AmountInOneAmount => 1;
        protected override bool SupportsSIUnitSystem => false;

        /// <summary>
        /// Purposely did not call it an Int as it is not an int underneath.
        /// </summary>
        [Fact]
        public void ScalarWholeNumberEqualsScalarWholeNumber()
        {
            int i = 1;
            var scalar = Scalar.FromAmount(i);
            Assert.Equal(i, scalar.Amount);
            var scalar2 = Scalar.FromAmount(1000000000);
            Assert.Equal(1000000000, scalar2.Amount);
        }

        [Fact]
        public void ScalarDoubleEqualsScalarDouble()
        {
            var scalar = Scalar.FromAmount(1.123456789);
            IQuantity quantity = scalar;
            Assert.Equal(1.123456789, scalar.Amount);
            var scalar2 = Scalar.FromAmount(0.0000000012345);
            Assert.Equal(0.0000000012345, scalar2.Amount);
        }


        
        [Fact]
        public void ScalarMathsAddition()
        {
            var scalar = Scalar.FromAmount(10.111111111);
            var scalar2 = Scalar.FromAmount(10.111111111);
            var scalar3 = scalar + scalar2;
            Assert.Equal(20.222222222, scalar3.Amount);
        }



    }
}
