//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated (once) by \generate-code.bat, but will not be
//     regenerated when it already exists. The purpose of creating this file is to make
//     it easier to remember to implement all the unit conversion test cases.
//
//     Whenever a new unit is added to this quantity and \generate-code.bat is run,
//     the base test class will get a new abstract property and cause a compile error
//     in this derived class, reminding the developer to implement the test case
//     for the new unit.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;
using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class MassConcentrationTests : MassConcentrationTestsBase
    {
        #region Unit Conversion Coefficients
        protected override double PicogramsPerLiterInOneKilogramPerCubicMeter => 1e12;
        protected override double PicogramsPerDeciliterInOneKilogramPerCubicMeter => 1e11;
        protected override double NanogramsPerLiterInOneKilogramPerCubicMeter => 1e9;
        protected override double PicogramsPerMilliliterInOneKilogramPerCubicMeter => 1e9;
        protected override double MicrogramsPerCubicMeterInOneKilogramPerCubicMeter => 1e9;
        protected override double NanogramsPerDeciliterInOneKilogramPerCubicMeter => 1e8;
        protected override double NanogramsPerMilliliterInOneKilogramPerCubicMeter => 1e6;
        protected override double MicrogramsPerLiterInOneKilogramPerCubicMeter => 1e6;
        protected override double MilligramsPerCubicMeterInOneKilogramPerCubicMeter => 1e6;
        protected override double MicrogramsPerDeciliterInOneKilogramPerCubicMeter => 1e5;
        protected override double MicrogramsPerMilliliterInOneKilogramPerCubicMeter => 1e3;
        protected override double GramsPerCubicMeterInOneKilogramPerCubicMeter => 1e3;
        protected override double MilligramsPerLiterInOneKilogramPerCubicMeter => 1e3;
        protected override double CentigramsPerLiterInOneKilogramPerCubicMeter => 1e2;
        protected override double MilligramsPerDeciliterInOneKilogramPerCubicMeter => 1e2;
        protected override double MilligramsPerMilliliterInOneKilogramPerCubicMeter => 1;
        protected override double GramsPerLiterInOneKilogramPerCubicMeter => 1;
        protected override double KilogramsPerCubicMeterInOneKilogramPerCubicMeter => 1;
        protected override double CentigramsPerDeciliterInOneKilogramPerCubicMeter => 1e1;
        protected override double DecigramsPerDeciliterInOneKilogramPerCubicMeter => 1;
        protected override double DecigramsPerLiterInOneKilogramPerCubicMeter => 1e1;
        protected override double CentigramsPerMilliliterInOneKilogramPerCubicMeter => 1e-1;
        protected override double GramsPerDeciliterInOneKilogramPerCubicMeter => 1e-1;
        protected override double DecigramsPerMilliliterInOneKilogramPerCubicMeter => 1e-2;
        protected override double KilogramsPerLiterInOneKilogramPerCubicMeter => 1e-3;
        protected override double GramsPerMilliliterInOneKilogramPerCubicMeter => 1e-3;
        protected override double GramsPerCubicCentimeterInOneKilogramPerCubicMeter => 1e-3;
        protected override double TonnesPerCubicMeterInOneKilogramPerCubicMeter => 1e-3;
        protected override double GramsPerCubicMillimeterInOneKilogramPerCubicMeter => 1e-6;
        protected override double KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter => 1e-6;
        protected override double KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter => 1e-9;
        protected override double TonnesPerCubicCentimeterInOneKilogramPerCubicMeter => 1e-9;
        protected override double TonnesPerCubicMillimeterInOneKilogramPerCubicMeter => 1e-12;

        protected override double PoundsPerImperialGallonInOneKilogramPerCubicMeter => 1.002241e-2;
        protected override double KilopoundsPerCubicFootInOneKilogramPerCubicMeter => 6.242796e-5;
        protected override double KilopoundsPerCubicInchInOneKilogramPerCubicMeter => 3.6127292e-8;
        protected override double PoundsPerCubicFootInOneKilogramPerCubicMeter => 6.242796e-2;
        protected override double PoundsPerCubicInchInOneKilogramPerCubicMeter => 3.61272923e-5;
        protected override double PoundsPerUSGallonInOneKilogramPerCubicMeter => 8.3454045e-3;
        protected override double SlugsPerCubicFootInOneKilogramPerCubicMeter => 0.00194032; 
        #endregion

        private const double DensityOfEthanolInKgPerCubicMeter = 789;

        [Fact]
        public static void MassConcentrationTimesVolumeEqualsMass()
        {
            Mass mass = MassConcentration.FromKilogramsPerCubicMeter(2) * Volume.FromCubicMeters(3);
            Assert.Equal(mass, Mass.FromKilograms(6));
        }

        [Fact]
        public static void VolumeTimesMassConcentrationEqualsMass()
        {
            Mass mass = Volume.FromCubicMeters(3) * MassConcentration.FromKilogramsPerCubicMeter(2);
            Assert.Equal(mass, Mass.FromKilograms(6));
        }

        [Fact]
        public void ExpectMolarityConvertedToMassConcentrationCorrectly()
        {
            var molarity = Molarity.FromMolesPerLiter(1.02698355);
            var molarMass = MolarMass.FromGramsPerMole(58.443);

            MassConcentration concentration = molarity.ToMassConcentration(molarMass);     // molarity * molarMass
            AssertEx.EqualTolerance(60.02, concentration.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
        }

        [Fact]
        public void ExpectMassConcentrationConvertedToMolarityCorrectly()
        {
            var concentration = MassConcentration.FromKilogramsPerCubicMeter(60.02);
            var molarMass = MolarMass.FromGramsPerMole(58.443);

            Molarity molarity = concentration.ToMolarity(molarMass);     // molarity / molarMass
            AssertEx.EqualTolerance(1026.98355, molarity.MolesPerCubicMeter, KilogramsPerCubicMeterTolerance);
        }

        [Fact]
        public void MassConcentrationFromVolumeConcentrationAndDensity()
        {
            var volumeConcentration = VolumeConcentration.FromPercent(50);
            var density = Density.FromGramsPerCubicMeter(10);

            MassConcentration massConcentration = volumeConcentration.ToMassConcentration(density); // volumeConcentration * density
            AssertEx.EqualTolerance(5, massConcentration.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
        }
        
        [Fact]
        public void MassConcentrationFromVolumeConcentrationEthanol()
        {
            const double VolumeConcentration_0_5M_Ethanol = 29.19419518377693;
            var density = Density.FromKilogramsPerCubicMeter(DensityOfEthanolInKgPerCubicMeter);
            var volumeConcentration = VolumeConcentration.FromMillilitersPerLiter(VolumeConcentration_0_5M_Ethanol);

            MassConcentration massConcentration = volumeConcentration.ToMassConcentration(density);
            AssertEx.EqualTolerance(23.03422, massConcentration.GramsPerLiter, GramsPerCubicMeterTolerance);
        }

//        [Fact]
//        public void DefaultSIUnitIsKgPerCubicMeter()
//        {
//            var massConcentration = new MassConcentration(1, UnitSystem.SI);
//            Assert.Equal(MassConcentrationUnit.KilogramPerCubicMeter, massConcentration.Unit); // MassConcentration.BaseUnit = KilogramPerCubicMeter
//        }

        [Fact]
        public void DefaultUnitTypeRespectedForCustomUnitSystem()
        {
            UnitSystem customSystem = new UnitSystem(new BaseUnits(LengthUnit.Millimeter, MassUnit.Gram, DurationUnit.Millisecond,
                ElectricCurrentUnit.Ampere, TemperatureUnit.DegreeCelsius, AmountOfSubstanceUnit.Mole, LuminousIntensityUnit.Candela));

            var massConcentration = new MassConcentration(1, customSystem);
            Assert.Equal(MassConcentrationUnit.GramPerCubicMillimeter, massConcentration.Unit);
        }
        
    }
}
