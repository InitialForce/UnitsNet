//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated (once) by \generate-code.bat, but will not be
//     regenerated when it already exists. The purpose of creating this file is to make
//     it easier to remember to implement all the unit conversion test cases.
//
//     Whenever a new unit is added to this unit class and \generate-code.bat is run,
//     the base test class will get a new abstract property and cause a compile error
//     in this derived class, reminding the developer to implement the test case
//     for the new unit.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyQuantity.extra.cs files to add code to generated unit classes.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.


using Xunit;
using System;

namespace UnitsNet.Tests.CustomCode
{
    public class MolarityTests : MolarityTestsBase
    {
        protected override double CentimolesPerLiterInOneMolesPerCubicMeter => 1e-1;
        protected override double DecimolesPerLiterInOneMolesPerCubicMeter => 1e-2;
        protected override double MicromolesPerLiterInOneMolesPerCubicMeter => 1e3;
        protected override double MillimolesPerLiterInOneMolesPerCubicMeter => 1;
        protected override double MolesPerLiterInOneMolesPerCubicMeter => 1e-3;
        protected override double NanomolesPerLiterInOneMolesPerCubicMeter => 1e6;
        protected override double PicomolesPerLiterInOneMolesPerCubicMeter => 1e9;
        protected override double MolesPerCubicMeterInOneMolesPerCubicMeter => 1;

        [Fact]
        public void ExpectDensityConvertedToMolarityCorrectly()
        {
            var density = Density.FromKilogramsPerCubicMeter(60.02);
            var mw = Mass.FromGrams(58.443);
            var molarity = (density / mw).MolesPerCubicMeter;
            AssertEx.EqualTolerance(1026.98355, molarity, MolesPerCubicMeterTolerance);
        }

        [Fact]
        public void ExpectMolarityConvertedToDensityCorrectly()
        {
            var molarity = Molarity.FromMolesPerLiter(1.02698355);
            var mw = Mass.FromGrams(58.443);
            var density = molarity.ToDensity(mw).KilogramsPerCubicMeter;
            AssertEx.EqualTolerance(60.02, density, MolesPerCubicMeterTolerance);
        }

    }

}
