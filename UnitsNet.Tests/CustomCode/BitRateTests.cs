//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated (once) by \generate-code.bat, but will not be
//     regenerated when it already exists. The purpose of creating this file is to make 
//     it easier to remember to implement all the unit conversion test cases.
// 
//     Whenever a new unit is added to this quantity and \generate-code.bat is run,
//     the base test class will get a new abstract property and cause a compile error
//     in this derived class, reminding the developer to implement the test case
//     for the new unit.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


using System;

namespace UnitsNet.Tests.CustomCode
{
    public class BitRateTests : BitRateTestsBase
    {
        protected override double BitsPerSecondInOneBitPerSecond => 1d;

        protected override double BytesPerSecondInOneBitPerSecond => 0.125d;

        protected override double ExabitsPerSecondInOneBitPerSecond => 1e-18d;

        protected override double ExabytesPerSecondInOneBitPerSecond => 0.125d * 1e-18d;

        protected override double ExbibitsPerSecondInOneBitPerSecond => 1d / Math.Pow(1024, 6);

        protected override double ExbibytesPerSecondInOneBitPerSecond => 8d / Math.Pow(1024, 6);

        protected override double GibibitsPerSecondInOneBitPerSecond => 1d / Math.Pow(1024, 3);

        protected override double GibibytesPerSecondInOneBitPerSecond => 1d / 8 / Math.Pow(1024, 3);

        protected override double GigabitsPerSecondInOneBitPerSecond => 1e-9d;

        protected override double GigabytesPerSecondInOneBitPerSecond => 0.125d * 1e-9d;

        protected override double KibibitsPerSecondInOneBitPerSecond => 1d / 1024d;

        protected override double KibibytesPerSecondInOneBitPerSecond => 1d / 8 / 1024d;

        protected override double KilobitsPerSecondInOneBitPerSecond => 0.001d;

        protected override double KilobytesPerSecondInOneBitPerSecond => 0.000125d;

        protected override double MebibitsPerSecondInOneBitPerSecond => 1d / Math.Pow(1024, 2);

        protected override double MebibytesPerSecondInOneBitPerSecond => 1d / 8 / Math.Pow(1024, 2);

        protected override double MegabitsPerSecondInOneBitPerSecond => 1e-6d;

        protected override double MegabytesPerSecondInOneBitPerSecond => 0.125d * 1e-6d;

        protected override double PebibitsPerSecondInOneBitPerSecond => 1d / Math.Pow(1024, 5);

        protected override double PebibytesPerSecondInOneBitPerSecond => 1d / 8 / Math.Pow(1024, 5);

        protected override double PetabitsPerSecondInOneBitPerSecond => 1e-15d;

        protected override double PetabytesPerSecondInOneBitPerSecond => 0.125d * 1e-15d;

        protected override double TebibitsPerSecondInOneBitPerSecond => 1d / Math.Pow(1024, 4);

        protected override double TebibytesPerSecondInOneBitPerSecond => 1d / 8 / Math.Pow(1024, 4);

        protected override double TerabitsPerSecondInOneBitPerSecond => 1e-12d;

        protected override double TerabytesPerSecondInOneBitPerSecond => 0.125d * 1e-12d;
    }
}
