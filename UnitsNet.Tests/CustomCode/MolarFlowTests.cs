//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;
using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class MolarFlowTests : MolarFlowTestsBase
    {
        // Override properties in base class here
        protected override bool SupportsSIUnitSystem => false;

        protected override double KilomolesPerHourInOneKilomolePerSecond => 3.599997e3;

        protected override double KilomolesPerMinuteInOneKilomolePerSecond => 5.999988e1;

        protected override double KilomolesPerSecondInOneKilomolePerSecond => 1.0;

        protected override double PoundsMolePerHourInOneKilomolePerSecond => 7.93663391482404e3;

        protected override double PoundsMolePerMinuteInOneKilomolePerSecond => 1.32277406886626e2;

        protected override double PoundsMolePerSecondInOneKilomolePerSecond => 2.2046244201838;

        [Fact]
        public void MolarFlowTimesTimeSpanEqualsAmountOfSubstance()
        {
            AmountOfSubstance amount = MolarFlow.FromKilomolesPerSecond(20) * TimeSpan.FromSeconds(2);
            Assert.Equal(AmountOfSubstance.FromKilomoles(40), amount);
        }

        [Fact]
        public void MolarFlowTimesDurationEqualsAmountOfSubstance()
        {
            AmountOfSubstance amount = MolarFlow.FromKilomolesPerSecond(20) * Duration.FromSeconds(2);
            Assert.Equal(AmountOfSubstance.FromKilomoles(40), amount);
        }

        [Fact]
        public void MolarFlowTimesMolarMassEqualsMassFlow()
        {
            MassFlow massFlow = MolarFlow.FromKilomolesPerSecond(2) * MolarMass.FromKilogramsPerKilomole(3);
            Assert.Equal(MassFlow.FromKilogramsPerSecond(6), massFlow);
        }

        [Fact]
        public void MolarFlowOverMolarityEqualsVolumeFlow()
        {
            VolumeFlow volumeFlow = MolarFlow.FromKilomolesPerSecond(6) / Molarity.FromKilomolesPerCubicMeter(3);
            Assert.Equal(VolumeFlow.FromCubicMetersPerSecond(2), volumeFlow);
        }

    }
}
