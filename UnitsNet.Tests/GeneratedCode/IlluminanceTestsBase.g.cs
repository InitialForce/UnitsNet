//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Illuminance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class IlluminanceTestsBase
    {
        protected abstract double KiloluxInOneLux { get; }
        protected abstract double LuxInOneLux { get; }
        protected abstract double MegaluxInOneLux { get; }
        protected abstract double MilliluxInOneLux { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KiloluxTolerance { get { return 1e-5; } }
        protected virtual double LuxTolerance { get { return 1e-5; } }
        protected virtual double MegaluxTolerance { get { return 1e-5; } }
        protected virtual double MilliluxTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Illuminance<double>((double)0.0, IlluminanceUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Illuminance<double>(double.PositiveInfinity, IlluminanceUnit.Lux));
            Assert.Throws<ArgumentException>(() => new Illuminance<double>(double.NegativeInfinity, IlluminanceUnit.Lux));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Illuminance<double>(double.NaN, IlluminanceUnit.Lux));
        }

        [Fact]
        public void LuxToIlluminanceUnits()
        {
            Illuminance<double> lux = Illuminance<double>.FromLux(1);
            AssertEx.EqualTolerance(KiloluxInOneLux, lux.Kilolux, KiloluxTolerance);
            AssertEx.EqualTolerance(LuxInOneLux, lux.Lux, LuxTolerance);
            AssertEx.EqualTolerance(MegaluxInOneLux, lux.Megalux, MegaluxTolerance);
            AssertEx.EqualTolerance(MilliluxInOneLux, lux.Millilux, MilliluxTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Illuminance<double>.From(1, IlluminanceUnit.Kilolux).Kilolux, KiloluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance<double>.From(1, IlluminanceUnit.Lux).Lux, LuxTolerance);
            AssertEx.EqualTolerance(1, Illuminance<double>.From(1, IlluminanceUnit.Megalux).Megalux, MegaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance<double>.From(1, IlluminanceUnit.Millilux).Millilux, MilliluxTolerance);
        }

        [Fact]
        public void FromLux_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Illuminance<double>.FromLux(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Illuminance<double>.FromLux(double.NegativeInfinity));
        }

        [Fact]
        public void FromLux_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Illuminance<double>.FromLux(double.NaN));
        }

        [Fact]
        public void As()
        {
            var lux = Illuminance<double>.FromLux(1);
            AssertEx.EqualTolerance(KiloluxInOneLux, lux.As(IlluminanceUnit.Kilolux), KiloluxTolerance);
            AssertEx.EqualTolerance(LuxInOneLux, lux.As(IlluminanceUnit.Lux), LuxTolerance);
            AssertEx.EqualTolerance(MegaluxInOneLux, lux.As(IlluminanceUnit.Megalux), MegaluxTolerance);
            AssertEx.EqualTolerance(MilliluxInOneLux, lux.As(IlluminanceUnit.Millilux), MilliluxTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var lux = Illuminance<double>.FromLux(1);

            var kiloluxQuantity = lux.ToUnit(IlluminanceUnit.Kilolux);
            AssertEx.EqualTolerance(KiloluxInOneLux, (double)kiloluxQuantity.Value, KiloluxTolerance);
            Assert.Equal(IlluminanceUnit.Kilolux, kiloluxQuantity.Unit);

            var luxQuantity = lux.ToUnit(IlluminanceUnit.Lux);
            AssertEx.EqualTolerance(LuxInOneLux, (double)luxQuantity.Value, LuxTolerance);
            Assert.Equal(IlluminanceUnit.Lux, luxQuantity.Unit);

            var megaluxQuantity = lux.ToUnit(IlluminanceUnit.Megalux);
            AssertEx.EqualTolerance(MegaluxInOneLux, (double)megaluxQuantity.Value, MegaluxTolerance);
            Assert.Equal(IlluminanceUnit.Megalux, megaluxQuantity.Unit);

            var milliluxQuantity = lux.ToUnit(IlluminanceUnit.Millilux);
            AssertEx.EqualTolerance(MilliluxInOneLux, (double)milliluxQuantity.Value, MilliluxTolerance);
            Assert.Equal(IlluminanceUnit.Millilux, milliluxQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Illuminance<double> lux = Illuminance<double>.FromLux(1);
            AssertEx.EqualTolerance(1, Illuminance<double>.FromKilolux(lux.Kilolux).Lux, KiloluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance<double>.FromLux(lux.Lux).Lux, LuxTolerance);
            AssertEx.EqualTolerance(1, Illuminance<double>.FromMegalux(lux.Megalux).Lux, MegaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance<double>.FromMillilux(lux.Millilux).Lux, MilliluxTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Illuminance<double> v = Illuminance<double>.FromLux(1);
            AssertEx.EqualTolerance(-1, -v.Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (Illuminance<double>.FromLux(3)-v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (v + v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(10, (v*10).Lux, LuxTolerance);
            AssertEx.EqualTolerance(10, (10*v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (Illuminance<double>.FromLux(10)/5).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, Illuminance<double>.FromLux(10)/Illuminance<double>.FromLux(5), LuxTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Illuminance<double> oneLux = Illuminance<double>.FromLux(1);
            Illuminance<double> twoLux = Illuminance<double>.FromLux(2);

            Assert.True(oneLux < twoLux);
            Assert.True(oneLux <= twoLux);
            Assert.True(twoLux > oneLux);
            Assert.True(twoLux >= oneLux);

            Assert.False(oneLux > twoLux);
            Assert.False(oneLux >= twoLux);
            Assert.False(twoLux < oneLux);
            Assert.False(twoLux <= oneLux);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Illuminance<double> lux = Illuminance<double>.FromLux(1);
            Assert.Equal(0, lux.CompareTo(lux));
            Assert.True(lux.CompareTo(Illuminance<double>.Zero) > 0);
            Assert.True(Illuminance<double>.Zero.CompareTo(lux) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Illuminance<double> lux = Illuminance<double>.FromLux(1);
            Assert.Throws<ArgumentException>(() => lux.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Illuminance<double> lux = Illuminance<double>.FromLux(1);
            Assert.Throws<ArgumentNullException>(() => lux.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Illuminance<double>.FromLux(1);
            var b = Illuminance<double>.FromLux(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Illuminance<double>.FromLux(1);
            var b = Illuminance<double>.FromLux(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Illuminance<double>.FromLux(1);
            Assert.True(v.Equals(Illuminance<double>.FromLux(1), LuxTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Illuminance<double>.Zero, LuxTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Illuminance<double> lux = Illuminance<double>.FromLux(1);
            Assert.False(lux.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Illuminance<double> lux = Illuminance<double>.FromLux(1);
            Assert.False(lux.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(IlluminanceUnit.Undefined, Illuminance<double>.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(IlluminanceUnit)).Cast<IlluminanceUnit>();
            foreach(var unit in units)
            {
                if(unit == IlluminanceUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Illuminance<double>.BaseDimensions is null);
        }
    }
}
