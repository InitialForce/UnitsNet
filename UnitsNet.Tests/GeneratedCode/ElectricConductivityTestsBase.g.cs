//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricConductivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricConductivityTestsBase
    {
        protected abstract double KiloohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double KiloohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double MegaohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double MegaohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double MicroohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double MicroohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double MilliohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double MilliohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double NanoohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double NanoohmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double OhmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double OhmsPerMeterInOneOhmPerMeter { get; }
        protected abstract double PicoohmsPerCentimeterInOneOhmPerMeter { get; }
        protected abstract double PicoohmsPerMeterInOneOhmPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KiloohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KiloohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double OhmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double OhmsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsPerMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void OhmPerMeterToElectricConductivityUnits()
        {
            ElectricConductivity ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(KiloohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.KiloohmsPerCentimeter, KiloohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmsPerMeterInOneOhmPerMeter, ohmpermeter.KiloohmsPerMeter, KiloohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.MegaohmsPerCentimeter, MegaohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerMeterInOneOhmPerMeter, ohmpermeter.MegaohmsPerMeter, MegaohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.MicroohmsPerCentimeter, MicroohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerMeterInOneOhmPerMeter, ohmpermeter.MicroohmsPerMeter, MicroohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.MilliohmsPerCentimeter, MilliohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerMeterInOneOhmPerMeter, ohmpermeter.MilliohmsPerMeter, MilliohmsPerMeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.NanoohmsPerCentimeter, NanoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerMeterInOneOhmPerMeter, ohmpermeter.NanoohmsPerMeter, NanoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(OhmsPerCentimeterInOneOhmPerMeter, ohmpermeter.OhmsPerCentimeter, OhmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(OhmsPerMeterInOneOhmPerMeter, ohmpermeter.OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.PicoohmsPerCentimeter, PicoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerMeterInOneOhmPerMeter, ohmpermeter.PicoohmsPerMeter, PicoohmsPerMeterTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.KiloohmPerCentimeter).KiloohmsPerCentimeter, KiloohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.KiloohmPerMeter).KiloohmsPerMeter, KiloohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.MegaohmPerCentimeter).MegaohmsPerCentimeter, MegaohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.MegaohmPerMeter).MegaohmsPerMeter, MegaohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.MicroohmPerCentimeter).MicroohmsPerCentimeter, MicroohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.MicroohmPerMeter).MicroohmsPerMeter, MicroohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.MilliohmPerCentimeter).MilliohmsPerCentimeter, MilliohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.MilliohmPerMeter).MilliohmsPerMeter, MilliohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.NanoohmPerCentimeter).NanoohmsPerCentimeter, NanoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.NanoohmPerMeter).NanoohmsPerMeter, NanoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.OhmPerCentimeter).OhmsPerCentimeter, OhmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.OhmPerMeter).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.PicoohmPerCentimeter).PicoohmsPerCentimeter, PicoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.From(1, ElectricConductivityUnit.PicoohmPerMeter).PicoohmsPerMeter, PicoohmsPerMeterTolerance);
        }

        [Fact]
        public void As()
        {
            var ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(KiloohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.KiloohmPerCentimeter), KiloohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.KiloohmPerMeter), KiloohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.MegaohmPerCentimeter), MegaohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.MegaohmPerMeter), MegaohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.MicroohmPerCentimeter), MicroohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.MicroohmPerMeter), MicroohmsPerMeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.MilliohmPerCentimeter), MilliohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.MilliohmPerMeter), MilliohmsPerMeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.NanoohmPerCentimeter), NanoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.NanoohmPerMeter), NanoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(OhmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.OhmPerCentimeter), OhmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(OhmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.OhmPerMeter), OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerCentimeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.PicoohmPerCentimeter), PicoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmsPerMeterInOneOhmPerMeter, ohmpermeter.As(ElectricConductivityUnit.PicoohmPerMeter), PicoohmsPerMeterTolerance);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricConductivity ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKiloohmsPerCentimeter(ohmpermeter.KiloohmsPerCentimeter).OhmsPerMeter, KiloohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromKiloohmsPerMeter(ohmpermeter.KiloohmsPerMeter).OhmsPerMeter, KiloohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegaohmsPerCentimeter(ohmpermeter.MegaohmsPerCentimeter).OhmsPerMeter, MegaohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMegaohmsPerMeter(ohmpermeter.MegaohmsPerMeter).OhmsPerMeter, MegaohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicroohmsPerCentimeter(ohmpermeter.MicroohmsPerCentimeter).OhmsPerMeter, MicroohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMicroohmsPerMeter(ohmpermeter.MicroohmsPerMeter).OhmsPerMeter, MicroohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMilliohmsPerCentimeter(ohmpermeter.MilliohmsPerCentimeter).OhmsPerMeter, MilliohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromMilliohmsPerMeter(ohmpermeter.MilliohmsPerMeter).OhmsPerMeter, MilliohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanoohmsPerCentimeter(ohmpermeter.NanoohmsPerCentimeter).OhmsPerMeter, NanoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromNanoohmsPerMeter(ohmpermeter.NanoohmsPerMeter).OhmsPerMeter, NanoohmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromOhmsPerCentimeter(ohmpermeter.OhmsPerCentimeter).OhmsPerMeter, OhmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromOhmsPerMeter(ohmpermeter.OhmsPerMeter).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicoohmsPerCentimeter(ohmpermeter.PicoohmsPerCentimeter).OhmsPerMeter, PicoohmsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductivity.FromPicoohmsPerMeter(ohmpermeter.PicoohmsPerMeter).OhmsPerMeter, PicoohmsPerMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricConductivity v = ElectricConductivity.FromOhmsPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricConductivity.FromOhmsPerMeter(3)-v).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricConductivity.FromOhmsPerMeter(10)/5).OhmsPerMeter, OhmsPerMeterTolerance);
            AssertEx.EqualTolerance(2, ElectricConductivity.FromOhmsPerMeter(10)/ElectricConductivity.FromOhmsPerMeter(5), OhmsPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricConductivity oneOhmPerMeter = ElectricConductivity.FromOhmsPerMeter(1);
            ElectricConductivity twoOhmsPerMeter = ElectricConductivity.FromOhmsPerMeter(2);

            Assert.True(oneOhmPerMeter < twoOhmsPerMeter);
            Assert.True(oneOhmPerMeter <= twoOhmsPerMeter);
            Assert.True(twoOhmsPerMeter > oneOhmPerMeter);
            Assert.True(twoOhmsPerMeter >= oneOhmPerMeter);

            Assert.False(oneOhmPerMeter > twoOhmsPerMeter);
            Assert.False(oneOhmPerMeter >= twoOhmsPerMeter);
            Assert.False(twoOhmsPerMeter < oneOhmPerMeter);
            Assert.False(twoOhmsPerMeter <= oneOhmPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricConductivity ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            Assert.Equal(0, ohmpermeter.CompareTo(ohmpermeter));
            Assert.True(ohmpermeter.CompareTo(ElectricConductivity.Zero) > 0);
            Assert.True(ElectricConductivity.Zero.CompareTo(ohmpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricConductivity ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            Assert.Throws<ArgumentException>(() => ohmpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricConductivity ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => ohmpermeter.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            ElectricConductivity a = ElectricConductivity.FromOhmsPerMeter(1);
            ElectricConductivity b = ElectricConductivity.FromOhmsPerMeter(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            ElectricConductivity v = ElectricConductivity.FromOhmsPerMeter(1);
            Assert.True(v.Equals(ElectricConductivity.FromOhmsPerMeter(1), ElectricConductivity.FromOhmsPerMeter(OhmsPerMeterTolerance)));
            Assert.False(v.Equals(ElectricConductivity.Zero, ElectricConductivity.FromOhmsPerMeter(OhmsPerMeterTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricConductivity ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            Assert.False(ohmpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricConductivity ohmpermeter = ElectricConductivity.FromOhmsPerMeter(1);
            Assert.False(ohmpermeter.Equals(null));
        }
    }
}
