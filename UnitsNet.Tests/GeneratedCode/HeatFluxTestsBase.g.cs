//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of HeatFlux.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class HeatFluxTestsBase
    {
        protected abstract double BtuPerSquareFootHourInOneWattPerSquareMeter { get; }
        protected abstract double BtuPerSquareFootMinuteInOneWattPerSquareMeter { get; }
        protected abstract double BtuPerSquareFootSecondInOneWattPerSquareMeter { get; }
        protected abstract double BtuPerSquareInchSecondInOneWattPerSquareMeter { get; }
        protected abstract double CalPerSquareCentiMeterSecondInOneWattPerSquareMeter { get; }
        protected abstract double CentiwattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double DeciwattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double KilocalPerSquareCentiMeterSecondInOneWattPerSquareMeter { get; }
        protected abstract double KiloCalPerSquareMeterHourInOneWattPerSquareMeter { get; }
        protected abstract double KilowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MicrowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MilliwattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double NanowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double WattPerSquareFootInOneWattPerSquareMeter { get; }
        protected abstract double WattPerSquareInchInOneWattPerSquareMeter { get; }
        protected abstract double WattsPerSquareMeterInOneWattPerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtuPerSquareFootHourTolerance { get { return 1e-5; } }
        protected virtual double BtuPerSquareFootMinuteTolerance { get { return 1e-5; } }
        protected virtual double BtuPerSquareFootSecondTolerance { get { return 1e-5; } }
        protected virtual double BtuPerSquareInchSecondTolerance { get { return 1e-5; } }
        protected virtual double CalPerSquareCentiMeterSecondTolerance { get { return 1e-5; } }
        protected virtual double CentiwattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilocalPerSquareCentiMeterSecondTolerance { get { return 1e-5; } }
        protected virtual double KiloCalPerSquareMeterHourTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double WattPerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double WattPerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double WattsPerSquareMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void WattPerSquareMeterToHeatFluxUnits()
        {
            HeatFlux wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(BtuPerSquareFootHourInOneWattPerSquareMeter, wattpersquaremeter.BtuPerSquareFootHour, BtuPerSquareFootHourTolerance);
            AssertEx.EqualTolerance(BtuPerSquareFootMinuteInOneWattPerSquareMeter, wattpersquaremeter.BtuPerSquareFootMinute, BtuPerSquareFootMinuteTolerance);
            AssertEx.EqualTolerance(BtuPerSquareFootSecondInOneWattPerSquareMeter, wattpersquaremeter.BtuPerSquareFootSecond, BtuPerSquareFootSecondTolerance);
            AssertEx.EqualTolerance(BtuPerSquareInchSecondInOneWattPerSquareMeter, wattpersquaremeter.BtuPerSquareInchSecond, BtuPerSquareInchSecondTolerance);
            AssertEx.EqualTolerance(CalPerSquareCentiMeterSecondInOneWattPerSquareMeter, wattpersquaremeter.CalPerSquareCentiMeterSecond, CalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(CentiwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.CentiwattsPerSquareMeter, CentiwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(DeciwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.DeciwattsPerSquareMeter, DeciwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilocalPerSquareCentiMeterSecondInOneWattPerSquareMeter, wattpersquaremeter.KilocalPerSquareCentiMeterSecond, KilocalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(KiloCalPerSquareMeterHourInOneWattPerSquareMeter, wattpersquaremeter.KiloCalPerSquareMeterHour, KiloCalPerSquareMeterHourTolerance);
            AssertEx.EqualTolerance(KilowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MilliwattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(WattPerSquareFootInOneWattPerSquareMeter, wattpersquaremeter.WattPerSquareFoot, WattPerSquareFootTolerance);
            AssertEx.EqualTolerance(WattPerSquareInchInOneWattPerSquareMeter, wattpersquaremeter.WattPerSquareInch, WattPerSquareInchTolerance);
            AssertEx.EqualTolerance(WattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.BtuPerSquareFootHour).BtuPerSquareFootHour, BtuPerSquareFootHourTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.BtuPerSquareFootMinute).BtuPerSquareFootMinute, BtuPerSquareFootMinuteTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.BtuPerSquareFootSecond).BtuPerSquareFootSecond, BtuPerSquareFootSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.BtuPerSquareInchSecond).BtuPerSquareInchSecond, BtuPerSquareInchSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.CalPerSquareCentiMeterSecond).CalPerSquareCentiMeterSecond, CalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.CentiwattPerSquareMeter).CentiwattsPerSquareMeter, CentiwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.DeciwattPerSquareMeter).DeciwattsPerSquareMeter, DeciwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.KilocalPerSquareCentiMeterSecond).KilocalPerSquareCentiMeterSecond, KilocalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.KiloCalPerSquareMeterHour).KiloCalPerSquareMeterHour, KiloCalPerSquareMeterHourTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.KilowattPerSquareMeter).KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.MicrowattPerSquareMeter).MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.MilliwattPerSquareMeter).MilliwattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.NanowattPerSquareMeter).NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.WattPerSquareFoot).WattPerSquareFoot, WattPerSquareFootTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.WattPerSquareInch).WattPerSquareInch, WattPerSquareInchTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.From(1, HeatFluxUnit.WattPerSquareMeter).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void As()
        {
            var wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(BtuPerSquareFootHourInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.BtuPerSquareFootHour), BtuPerSquareFootHourTolerance);
            AssertEx.EqualTolerance(BtuPerSquareFootMinuteInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.BtuPerSquareFootMinute), BtuPerSquareFootMinuteTolerance);
            AssertEx.EqualTolerance(BtuPerSquareFootSecondInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.BtuPerSquareFootSecond), BtuPerSquareFootSecondTolerance);
            AssertEx.EqualTolerance(BtuPerSquareInchSecondInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.BtuPerSquareInchSecond), BtuPerSquareInchSecondTolerance);
            AssertEx.EqualTolerance(CalPerSquareCentiMeterSecondInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.CalPerSquareCentiMeterSecond), CalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(CentiwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.CentiwattPerSquareMeter), CentiwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(DeciwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.DeciwattPerSquareMeter), DeciwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilocalPerSquareCentiMeterSecondInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.KilocalPerSquareCentiMeterSecond), KilocalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(KiloCalPerSquareMeterHourInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.KiloCalPerSquareMeterHour), KiloCalPerSquareMeterHourTolerance);
            AssertEx.EqualTolerance(KilowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.KilowattPerSquareMeter), KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.MicrowattPerSquareMeter), MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.MilliwattPerSquareMeter), MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.NanowattPerSquareMeter), NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(WattPerSquareFootInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.WattPerSquareFoot), WattPerSquareFootTolerance);
            AssertEx.EqualTolerance(WattPerSquareInchInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.WattPerSquareInch), WattPerSquareInchTolerance);
            AssertEx.EqualTolerance(WattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(HeatFluxUnit.WattPerSquareMeter), WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            HeatFlux wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(1, HeatFlux.FromBtuPerSquareFootHour(wattpersquaremeter.BtuPerSquareFootHour).WattsPerSquareMeter, BtuPerSquareFootHourTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromBtuPerSquareFootMinute(wattpersquaremeter.BtuPerSquareFootMinute).WattsPerSquareMeter, BtuPerSquareFootMinuteTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromBtuPerSquareFootSecond(wattpersquaremeter.BtuPerSquareFootSecond).WattsPerSquareMeter, BtuPerSquareFootSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromBtuPerSquareInchSecond(wattpersquaremeter.BtuPerSquareInchSecond).WattsPerSquareMeter, BtuPerSquareInchSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromCalPerSquareCentiMeterSecond(wattpersquaremeter.CalPerSquareCentiMeterSecond).WattsPerSquareMeter, CalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromCentiwattsPerSquareMeter(wattpersquaremeter.CentiwattsPerSquareMeter).WattsPerSquareMeter, CentiwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromDeciwattsPerSquareMeter(wattpersquaremeter.DeciwattsPerSquareMeter).WattsPerSquareMeter, DeciwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromKilocalPerSquareCentiMeterSecond(wattpersquaremeter.KilocalPerSquareCentiMeterSecond).WattsPerSquareMeter, KilocalPerSquareCentiMeterSecondTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromKiloCalPerSquareMeterHour(wattpersquaremeter.KiloCalPerSquareMeterHour).WattsPerSquareMeter, KiloCalPerSquareMeterHourTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromKilowattsPerSquareMeter(wattpersquaremeter.KilowattsPerSquareMeter).WattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromMicrowattsPerSquareMeter(wattpersquaremeter.MicrowattsPerSquareMeter).WattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromMilliwattsPerSquareMeter(wattpersquaremeter.MilliwattsPerSquareMeter).WattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromNanowattsPerSquareMeter(wattpersquaremeter.NanowattsPerSquareMeter).WattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromWattPerSquareFoot(wattpersquaremeter.WattPerSquareFoot).WattsPerSquareMeter, WattPerSquareFootTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromWattPerSquareInch(wattpersquaremeter.WattPerSquareInch).WattsPerSquareMeter, WattPerSquareInchTolerance);
            AssertEx.EqualTolerance(1, HeatFlux.FromWattsPerSquareMeter(wattpersquaremeter.WattsPerSquareMeter).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            HeatFlux v = HeatFlux.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(-1, -v.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (HeatFlux.FromWattsPerSquareMeter(3)-v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (HeatFlux.FromWattsPerSquareMeter(10)/5).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, HeatFlux.FromWattsPerSquareMeter(10)/HeatFlux.FromWattsPerSquareMeter(5), WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            HeatFlux oneWattPerSquareMeter = HeatFlux.FromWattsPerSquareMeter(1);
            HeatFlux twoWattsPerSquareMeter = HeatFlux.FromWattsPerSquareMeter(2);

            Assert.True(oneWattPerSquareMeter < twoWattsPerSquareMeter);
            Assert.True(oneWattPerSquareMeter <= twoWattsPerSquareMeter);
            Assert.True(twoWattsPerSquareMeter > oneWattPerSquareMeter);
            Assert.True(twoWattsPerSquareMeter >= oneWattPerSquareMeter);

            Assert.False(oneWattPerSquareMeter > twoWattsPerSquareMeter);
            Assert.False(oneWattPerSquareMeter >= twoWattsPerSquareMeter);
            Assert.False(twoWattsPerSquareMeter < oneWattPerSquareMeter);
            Assert.False(twoWattsPerSquareMeter <= oneWattPerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            HeatFlux wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            Assert.Equal(0, wattpersquaremeter.CompareTo(wattpersquaremeter));
            Assert.True(wattpersquaremeter.CompareTo(HeatFlux.Zero) > 0);
            Assert.True(HeatFlux.Zero.CompareTo(wattpersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            HeatFlux wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            HeatFlux wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            Assert.Throws<ArgumentNullException>(() => wattpersquaremeter.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            HeatFlux a = HeatFlux.FromWattsPerSquareMeter(1);
            HeatFlux b = HeatFlux.FromWattsPerSquareMeter(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            HeatFlux v = HeatFlux.FromWattsPerSquareMeter(1);
            Assert.True(v.Equals(HeatFlux.FromWattsPerSquareMeter(1), HeatFlux.FromWattsPerSquareMeter(WattsPerSquareMeterTolerance)));
            Assert.False(v.Equals(HeatFlux.Zero, HeatFlux.FromWattsPerSquareMeter(WattsPerSquareMeterTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            HeatFlux wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            Assert.False(wattpersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            HeatFlux wattpersquaremeter = HeatFlux.FromWattsPerSquareMeter(1);
            Assert.False(wattpersquaremeter.Equals(null));
        }
    }
}
