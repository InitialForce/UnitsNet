//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of BrakeSpecificFuelConsumption.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class BrakeSpecificFuelConsumptionTestsBase
    {
        protected abstract double GramsPerKiloWattHourInOneKilogramPerJoule { get; }
        protected abstract double KilogramsPerJouleInOneKilogramPerJoule { get; }
        protected abstract double PoundsPerMechanicalHorsepowerHourInOneKilogramPerJoule { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GramsPerKiloWattHourTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerJouleTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerMechanicalHorsepowerHourTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new BrakeSpecificFuelConsumption<double>((double)0.0, BrakeSpecificFuelConsumptionUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new BrakeSpecificFuelConsumption<double>(double.PositiveInfinity, BrakeSpecificFuelConsumptionUnit.KilogramPerJoule));
            Assert.Throws<ArgumentException>(() => new BrakeSpecificFuelConsumption<double>(double.NegativeInfinity, BrakeSpecificFuelConsumptionUnit.KilogramPerJoule));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new BrakeSpecificFuelConsumption<double>(double.NaN, BrakeSpecificFuelConsumptionUnit.KilogramPerJoule));
        }

        [Fact]
        public void KilogramPerJouleToBrakeSpecificFuelConsumptionUnits()
        {
            BrakeSpecificFuelConsumption<double> kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            AssertEx.EqualTolerance(GramsPerKiloWattHourInOneKilogramPerJoule, kilogramperjoule.GramsPerKiloWattHour, GramsPerKiloWattHourTolerance);
            AssertEx.EqualTolerance(KilogramsPerJouleInOneKilogramPerJoule, kilogramperjoule.KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(PoundsPerMechanicalHorsepowerHourInOneKilogramPerJoule, kilogramperjoule.PoundsPerMechanicalHorsepowerHour, PoundsPerMechanicalHorsepowerHourTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, BrakeSpecificFuelConsumption<double>.From(1, BrakeSpecificFuelConsumptionUnit.GramPerKiloWattHour).GramsPerKiloWattHour, GramsPerKiloWattHourTolerance);
            AssertEx.EqualTolerance(1, BrakeSpecificFuelConsumption<double>.From(1, BrakeSpecificFuelConsumptionUnit.KilogramPerJoule).KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(1, BrakeSpecificFuelConsumption<double>.From(1, BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour).PoundsPerMechanicalHorsepowerHour, PoundsPerMechanicalHorsepowerHourTolerance);
        }

        [Fact]
        public void FromKilogramsPerJoule_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(double.NegativeInfinity));
        }

        [Fact]
        public void FromKilogramsPerJoule_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(double.NaN));
        }

        [Fact]
        public void As()
        {
            var kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            AssertEx.EqualTolerance(GramsPerKiloWattHourInOneKilogramPerJoule, kilogramperjoule.As(BrakeSpecificFuelConsumptionUnit.GramPerKiloWattHour), GramsPerKiloWattHourTolerance);
            AssertEx.EqualTolerance(KilogramsPerJouleInOneKilogramPerJoule, kilogramperjoule.As(BrakeSpecificFuelConsumptionUnit.KilogramPerJoule), KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(PoundsPerMechanicalHorsepowerHourInOneKilogramPerJoule, kilogramperjoule.As(BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour), PoundsPerMechanicalHorsepowerHourTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);

            var gramperkilowatthourQuantity = kilogramperjoule.ToUnit(BrakeSpecificFuelConsumptionUnit.GramPerKiloWattHour);
            AssertEx.EqualTolerance(GramsPerKiloWattHourInOneKilogramPerJoule, (double)gramperkilowatthourQuantity.Value, GramsPerKiloWattHourTolerance);
            Assert.Equal(BrakeSpecificFuelConsumptionUnit.GramPerKiloWattHour, gramperkilowatthourQuantity.Unit);

            var kilogramperjouleQuantity = kilogramperjoule.ToUnit(BrakeSpecificFuelConsumptionUnit.KilogramPerJoule);
            AssertEx.EqualTolerance(KilogramsPerJouleInOneKilogramPerJoule, (double)kilogramperjouleQuantity.Value, KilogramsPerJouleTolerance);
            Assert.Equal(BrakeSpecificFuelConsumptionUnit.KilogramPerJoule, kilogramperjouleQuantity.Unit);

            var poundpermechanicalhorsepowerhourQuantity = kilogramperjoule.ToUnit(BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour);
            AssertEx.EqualTolerance(PoundsPerMechanicalHorsepowerHourInOneKilogramPerJoule, (double)poundpermechanicalhorsepowerhourQuantity.Value, PoundsPerMechanicalHorsepowerHourTolerance);
            Assert.Equal(BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour, poundpermechanicalhorsepowerhourQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            BrakeSpecificFuelConsumption<double> kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            AssertEx.EqualTolerance(1, BrakeSpecificFuelConsumption<double>.FromGramsPerKiloWattHour(kilogramperjoule.GramsPerKiloWattHour).KilogramsPerJoule, GramsPerKiloWattHourTolerance);
            AssertEx.EqualTolerance(1, BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(kilogramperjoule.KilogramsPerJoule).KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(1, BrakeSpecificFuelConsumption<double>.FromPoundsPerMechanicalHorsepowerHour(kilogramperjoule.PoundsPerMechanicalHorsepowerHour).KilogramsPerJoule, PoundsPerMechanicalHorsepowerHourTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            BrakeSpecificFuelConsumption<double> v = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            AssertEx.EqualTolerance(-1, -v.KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(2, (BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(3)-v).KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(2, (BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(10)/5).KilogramsPerJoule, KilogramsPerJouleTolerance);
            AssertEx.EqualTolerance(2, BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(10)/BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(5), KilogramsPerJouleTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            BrakeSpecificFuelConsumption<double> oneKilogramPerJoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            BrakeSpecificFuelConsumption<double> twoKilogramsPerJoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(2);

            Assert.True(oneKilogramPerJoule < twoKilogramsPerJoule);
            Assert.True(oneKilogramPerJoule <= twoKilogramsPerJoule);
            Assert.True(twoKilogramsPerJoule > oneKilogramPerJoule);
            Assert.True(twoKilogramsPerJoule >= oneKilogramPerJoule);

            Assert.False(oneKilogramPerJoule > twoKilogramsPerJoule);
            Assert.False(oneKilogramPerJoule >= twoKilogramsPerJoule);
            Assert.False(twoKilogramsPerJoule < oneKilogramPerJoule);
            Assert.False(twoKilogramsPerJoule <= oneKilogramPerJoule);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            BrakeSpecificFuelConsumption<double> kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            Assert.Equal(0, kilogramperjoule.CompareTo(kilogramperjoule));
            Assert.True(kilogramperjoule.CompareTo(BrakeSpecificFuelConsumption<double>.Zero) > 0);
            Assert.True(BrakeSpecificFuelConsumption<double>.Zero.CompareTo(kilogramperjoule) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            BrakeSpecificFuelConsumption<double> kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            Assert.Throws<ArgumentException>(() => kilogramperjoule.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            BrakeSpecificFuelConsumption<double> kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            Assert.Throws<ArgumentNullException>(() => kilogramperjoule.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            var b = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            var b = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            Assert.True(v.Equals(BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1), KilogramsPerJouleTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(BrakeSpecificFuelConsumption<double>.Zero, KilogramsPerJouleTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            BrakeSpecificFuelConsumption<double> kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            Assert.False(kilogramperjoule.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            BrakeSpecificFuelConsumption<double> kilogramperjoule = BrakeSpecificFuelConsumption<double>.FromKilogramsPerJoule(1);
            Assert.False(kilogramperjoule.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(BrakeSpecificFuelConsumptionUnit.Undefined, BrakeSpecificFuelConsumption<double>.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(BrakeSpecificFuelConsumptionUnit)).Cast<BrakeSpecificFuelConsumptionUnit>();
            foreach(var unit in units)
            {
                if(unit == BrakeSpecificFuelConsumptionUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(BrakeSpecificFuelConsumption<double>.BaseDimensions is null);
        }
    }
}
