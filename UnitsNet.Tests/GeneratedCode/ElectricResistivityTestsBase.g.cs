//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricResistivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricResistivityTestsBase
    {
        protected abstract double KiloohmsCentimeterInOneOhmMeter { get; }
        protected abstract double KiloohmsMetersInOneOhmMeter { get; }
        protected abstract double MegaohmsCentimeterInOneOhmMeter { get; }
        protected abstract double MegaohmsMetersInOneOhmMeter { get; }
        protected abstract double MicroohmsCentimeterInOneOhmMeter { get; }
        protected abstract double MicroohmsMetersInOneOhmMeter { get; }
        protected abstract double MilliohmsCentimeterInOneOhmMeter { get; }
        protected abstract double MilliohmsMetersInOneOhmMeter { get; }
        protected abstract double NanoohmsCentimeterInOneOhmMeter { get; }
        protected abstract double NanoohmsMetersInOneOhmMeter { get; }
        protected abstract double OhmsCentimeterInOneOhmMeter { get; }
        protected abstract double OhmsMetersInOneOhmMeter { get; }
        protected abstract double PicoohmsCentimeterInOneOhmMeter { get; }
        protected abstract double PicoohmsMetersInOneOhmMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KiloohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KiloohmsMetersTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsMetersTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsMetersTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsMetersTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsMetersTolerance { get { return 1e-5; } }
        protected virtual double OhmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double OhmsMetersTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsMetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void OhmMeterToElectricResistivityUnits()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            AssertEx.EqualTolerance(KiloohmsCentimeterInOneOhmMeter, ohmmeter.KiloohmsCentimeter, KiloohmsCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmsMetersInOneOhmMeter, ohmmeter.KiloohmsMeters, KiloohmsMetersTolerance);
            AssertEx.EqualTolerance(MegaohmsCentimeterInOneOhmMeter, ohmmeter.MegaohmsCentimeter, MegaohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmsMetersInOneOhmMeter, ohmmeter.MegaohmsMeters, MegaohmsMetersTolerance);
            AssertEx.EqualTolerance(MicroohmsCentimeterInOneOhmMeter, ohmmeter.MicroohmsCentimeter, MicroohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmsMetersInOneOhmMeter, ohmmeter.MicroohmsMeters, MicroohmsMetersTolerance);
            AssertEx.EqualTolerance(MilliohmsCentimeterInOneOhmMeter, ohmmeter.MilliohmsCentimeter, MilliohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmsMetersInOneOhmMeter, ohmmeter.MilliohmsMeters, MilliohmsMetersTolerance);
            AssertEx.EqualTolerance(NanoohmsCentimeterInOneOhmMeter, ohmmeter.NanoohmsCentimeter, NanoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmsMetersInOneOhmMeter, ohmmeter.NanoohmsMeters, NanoohmsMetersTolerance);
            AssertEx.EqualTolerance(OhmsCentimeterInOneOhmMeter, ohmmeter.OhmsCentimeter, OhmsCentimeterTolerance);
            AssertEx.EqualTolerance(OhmsMetersInOneOhmMeter, ohmmeter.OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(PicoohmsCentimeterInOneOhmMeter, ohmmeter.PicoohmsCentimeter, PicoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmsMetersInOneOhmMeter, ohmmeter.PicoohmsMeters, PicoohmsMetersTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.KiloohmCentimeter).KiloohmsCentimeter, KiloohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.KiloohmMeter).KiloohmsMeters, KiloohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.MegaohmCentimeter).MegaohmsCentimeter, MegaohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.MegaohmMeter).MegaohmsMeters, MegaohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.MicroohmCentimeter).MicroohmsCentimeter, MicroohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.MicroohmMeter).MicroohmsMeters, MicroohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.MilliohmCentimeter).MilliohmsCentimeter, MilliohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.MilliohmMeter).MilliohmsMeters, MilliohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.NanoohmCentimeter).NanoohmsCentimeter, NanoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.NanoohmMeter).NanoohmsMeters, NanoohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.OhmCentimeter).OhmsCentimeter, OhmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.OhmMeter).OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.PicoohmCentimeter).PicoohmsCentimeter, PicoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.From(1, ElectricResistivityUnit.PicoohmMeter).PicoohmsMeters, PicoohmsMetersTolerance);
        }

        [Fact]
        public void As()
        {
            var ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            AssertEx.EqualTolerance(KiloohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.KiloohmCentimeter), KiloohmsCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmsMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.KiloohmMeter), KiloohmsMetersTolerance);
            AssertEx.EqualTolerance(MegaohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MegaohmCentimeter), MegaohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmsMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MegaohmMeter), MegaohmsMetersTolerance);
            AssertEx.EqualTolerance(MicroohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MicroohmCentimeter), MicroohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmsMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MicroohmMeter), MicroohmsMetersTolerance);
            AssertEx.EqualTolerance(MilliohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MilliohmCentimeter), MilliohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmsMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MilliohmMeter), MilliohmsMetersTolerance);
            AssertEx.EqualTolerance(NanoohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.NanoohmCentimeter), NanoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmsMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.NanoohmMeter), NanoohmsMetersTolerance);
            AssertEx.EqualTolerance(OhmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.OhmCentimeter), OhmsCentimeterTolerance);
            AssertEx.EqualTolerance(OhmsMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.OhmMeter), OhmsMetersTolerance);
            AssertEx.EqualTolerance(PicoohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.PicoohmCentimeter), PicoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmsMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.PicoohmMeter), PicoohmsMetersTolerance);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromKiloohmsCentimeter(ohmmeter.KiloohmsCentimeter).OhmsMeters, KiloohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromKiloohmsMeters(ohmmeter.KiloohmsMeters).OhmsMeters, KiloohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromMegaohmsCentimeter(ohmmeter.MegaohmsCentimeter).OhmsMeters, MegaohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromMegaohmsMeters(ohmmeter.MegaohmsMeters).OhmsMeters, MegaohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromMicroohmsCentimeter(ohmmeter.MicroohmsCentimeter).OhmsMeters, MicroohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromMicroohmsMeters(ohmmeter.MicroohmsMeters).OhmsMeters, MicroohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromMilliohmsCentimeter(ohmmeter.MilliohmsCentimeter).OhmsMeters, MilliohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromMilliohmsMeters(ohmmeter.MilliohmsMeters).OhmsMeters, MilliohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromNanoohmsCentimeter(ohmmeter.NanoohmsCentimeter).OhmsMeters, NanoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromNanoohmsMeters(ohmmeter.NanoohmsMeters).OhmsMeters, NanoohmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromOhmsCentimeter(ohmmeter.OhmsCentimeter).OhmsMeters, OhmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromOhmsMeters(ohmmeter.OhmsMeters).OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromPicoohmsCentimeter(ohmmeter.PicoohmsCentimeter).OhmsMeters, PicoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(1, ElectricResistivity.FromPicoohmsMeters(ohmmeter.PicoohmsMeters).OhmsMeters, PicoohmsMetersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricResistivity v = ElectricResistivity.FromOhmsMeters(1);
            AssertEx.EqualTolerance(-1, -v.OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(2, (ElectricResistivity.FromOhmsMeters(3)-v).OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(2, (ElectricResistivity.FromOhmsMeters(10)/5).OhmsMeters, OhmsMetersTolerance);
            AssertEx.EqualTolerance(2, ElectricResistivity.FromOhmsMeters(10)/ElectricResistivity.FromOhmsMeters(5), OhmsMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricResistivity oneOhmMeter = ElectricResistivity.FromOhmsMeters(1);
            ElectricResistivity twoOhmsMeters = ElectricResistivity.FromOhmsMeters(2);

            Assert.True(oneOhmMeter < twoOhmsMeters);
            Assert.True(oneOhmMeter <= twoOhmsMeters);
            Assert.True(twoOhmsMeters > oneOhmMeter);
            Assert.True(twoOhmsMeters >= oneOhmMeter);

            Assert.False(oneOhmMeter > twoOhmsMeters);
            Assert.False(oneOhmMeter >= twoOhmsMeters);
            Assert.False(twoOhmsMeters < oneOhmMeter);
            Assert.False(twoOhmsMeters <= oneOhmMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            Assert.Equal(0, ohmmeter.CompareTo(ohmmeter));
            Assert.True(ohmmeter.CompareTo(ElectricResistivity.Zero) > 0);
            Assert.True(ElectricResistivity.Zero.CompareTo(ohmmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            Assert.Throws<ArgumentException>(() => ohmmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            Assert.Throws<ArgumentNullException>(() => ohmmeter.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            ElectricResistivity a = ElectricResistivity.FromOhmsMeters(1);
            ElectricResistivity b = ElectricResistivity.FromOhmsMeters(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            ElectricResistivity v = ElectricResistivity.FromOhmsMeters(1);
            Assert.True(v.Equals(ElectricResistivity.FromOhmsMeters(1), ElectricResistivity.FromOhmsMeters(OhmsMetersTolerance)));
            Assert.False(v.Equals(ElectricResistivity.Zero, ElectricResistivity.FromOhmsMeters(OhmsMetersTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            Assert.False(ohmmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmsMeters(1);
            Assert.False(ohmmeter.Equals(null));
        }
    }
}
