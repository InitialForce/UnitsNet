//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Capacitance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class CapacitanceTestsBase
    {
        protected abstract double FaradsInOneFarad { get; }
        protected abstract double MicrofaradsInOneFarad { get; }
        protected abstract double MillifaradsInOneFarad { get; }
        protected abstract double NanofaradsInOneFarad { get; }
        protected abstract double PicofaradsInOneFarad { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double FaradsTolerance { get { return 1e-5; } }
        protected virtual double MicrofaradsTolerance { get { return 1e-5; } }
        protected virtual double MillifaradsTolerance { get { return 1e-5; } }
        protected virtual double NanofaradsTolerance { get { return 1e-5; } }
        protected virtual double PicofaradsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void FaradToCapacitanceUnits()
        {
            Capacitance farad = Capacitance.FromFarads(1);
            AssertEx.EqualTolerance(FaradsInOneFarad, farad.Farads, FaradsTolerance);
            AssertEx.EqualTolerance(MicrofaradsInOneFarad, farad.Microfarads, MicrofaradsTolerance);
            AssertEx.EqualTolerance(MillifaradsInOneFarad, farad.Millifarads, MillifaradsTolerance);
            AssertEx.EqualTolerance(NanofaradsInOneFarad, farad.Nanofarads, NanofaradsTolerance);
            AssertEx.EqualTolerance(PicofaradsInOneFarad, farad.Picofarads, PicofaradsTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Capacitance.From(1, CapacitanceUnit.Farad).Farads, FaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.From(1, CapacitanceUnit.Microfarad).Microfarads, MicrofaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.From(1, CapacitanceUnit.Millifarad).Millifarads, MillifaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.From(1, CapacitanceUnit.Nanofarad).Nanofarads, NanofaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.From(1, CapacitanceUnit.Picofarad).Picofarads, PicofaradsTolerance);
        }

        [Fact]
        public void As()
        {
            var farad = Capacitance.FromFarads(1);
            AssertEx.EqualTolerance(FaradsInOneFarad, farad.As(CapacitanceUnit.Farad), FaradsTolerance);
            AssertEx.EqualTolerance(MicrofaradsInOneFarad, farad.As(CapacitanceUnit.Microfarad), MicrofaradsTolerance);
            AssertEx.EqualTolerance(MillifaradsInOneFarad, farad.As(CapacitanceUnit.Millifarad), MillifaradsTolerance);
            AssertEx.EqualTolerance(NanofaradsInOneFarad, farad.As(CapacitanceUnit.Nanofarad), NanofaradsTolerance);
            AssertEx.EqualTolerance(PicofaradsInOneFarad, farad.As(CapacitanceUnit.Picofarad), PicofaradsTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var farad = Capacitance.FromFarads(1);

            var faradQuantity = farad.ToUnit(CapacitanceUnit.Farad);
            AssertEx.EqualTolerance(FaradsInOneFarad, (double)faradQuantity.Value, FaradsTolerance);
            Assert.Equal(CapacitanceUnit.Farad, faradQuantity.Unit);

            var microfaradQuantity = farad.ToUnit(CapacitanceUnit.Microfarad);
            AssertEx.EqualTolerance(MicrofaradsInOneFarad, (double)microfaradQuantity.Value, MicrofaradsTolerance);
            Assert.Equal(CapacitanceUnit.Microfarad, microfaradQuantity.Unit);

            var millifaradQuantity = farad.ToUnit(CapacitanceUnit.Millifarad);
            AssertEx.EqualTolerance(MillifaradsInOneFarad, (double)millifaradQuantity.Value, MillifaradsTolerance);
            Assert.Equal(CapacitanceUnit.Millifarad, millifaradQuantity.Unit);

            var nanofaradQuantity = farad.ToUnit(CapacitanceUnit.Nanofarad);
            AssertEx.EqualTolerance(NanofaradsInOneFarad, (double)nanofaradQuantity.Value, NanofaradsTolerance);
            Assert.Equal(CapacitanceUnit.Nanofarad, nanofaradQuantity.Unit);

            var picofaradQuantity = farad.ToUnit(CapacitanceUnit.Picofarad);
            AssertEx.EqualTolerance(PicofaradsInOneFarad, (double)picofaradQuantity.Value, PicofaradsTolerance);
            Assert.Equal(CapacitanceUnit.Picofarad, picofaradQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Capacitance farad = Capacitance.FromFarads(1);
            AssertEx.EqualTolerance(1, Capacitance.FromFarads(farad.Farads).Farads, FaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.FromMicrofarads(farad.Microfarads).Farads, MicrofaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.FromMillifarads(farad.Millifarads).Farads, MillifaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.FromNanofarads(farad.Nanofarads).Farads, NanofaradsTolerance);
            AssertEx.EqualTolerance(1, Capacitance.FromPicofarads(farad.Picofarads).Farads, PicofaradsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Capacitance v = Capacitance.FromFarads(1);
            AssertEx.EqualTolerance(-1, -v.Farads, FaradsTolerance);
            AssertEx.EqualTolerance(2, (Capacitance.FromFarads(3)-v).Farads, FaradsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Farads, FaradsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Farads, FaradsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Farads, FaradsTolerance);
            AssertEx.EqualTolerance(2, (Capacitance.FromFarads(10)/5).Farads, FaradsTolerance);
            AssertEx.EqualTolerance(2, Capacitance.FromFarads(10)/Capacitance.FromFarads(5), FaradsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Capacitance oneFarad = Capacitance.FromFarads(1);
            Capacitance twoFarads = Capacitance.FromFarads(2);

            Assert.True(oneFarad < twoFarads);
            Assert.True(oneFarad <= twoFarads);
            Assert.True(twoFarads > oneFarad);
            Assert.True(twoFarads >= oneFarad);

            Assert.False(oneFarad > twoFarads);
            Assert.False(oneFarad >= twoFarads);
            Assert.False(twoFarads < oneFarad);
            Assert.False(twoFarads <= oneFarad);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Capacitance farad = Capacitance.FromFarads(1);
            Assert.Equal(0, farad.CompareTo(farad));
            Assert.True(farad.CompareTo(Capacitance.Zero) > 0);
            Assert.True(Capacitance.Zero.CompareTo(farad) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Capacitance farad = Capacitance.FromFarads(1);
            Assert.Throws<ArgumentException>(() => farad.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Capacitance farad = Capacitance.FromFarads(1);
            Assert.Throws<ArgumentNullException>(() => farad.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            Capacitance a = Capacitance.FromFarads(1);
            Capacitance b = Capacitance.FromFarads(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            Capacitance v = Capacitance.FromFarads(1);
            Assert.True(v.Equals(Capacitance.FromFarads(1), Capacitance.FromFarads(FaradsTolerance)));
            Assert.False(v.Equals(Capacitance.Zero, Capacitance.FromFarads(FaradsTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Capacitance farad = Capacitance.FromFarads(1);
            Assert.False(farad.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Capacitance farad = Capacitance.FromFarads(1);
            Assert.False(farad.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(CapacitanceUnit.Undefined, Capacitance.Units);
        }

    }
}
