//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SubstanceAmount.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SubstanceAmountTestsBase
    {
        protected abstract double CentimolesInOneMole { get; }
        protected abstract double DecimolesInOneMole { get; }
        protected abstract double KilomolesInOneMole { get; }
        protected abstract double MicromolesInOneMole { get; }
        protected abstract double MillimolesInOneMole { get; }
        protected abstract double MolesInOneMole { get; }
        protected abstract double NanomolesInOneMole { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimolesTolerance { get { return 1e-5; } }
        protected virtual double DecimolesTolerance { get { return 1e-5; } }
        protected virtual double KilomolesTolerance { get { return 1e-5; } }
        protected virtual double MicromolesTolerance { get { return 1e-5; } }
        protected virtual double MillimolesTolerance { get { return 1e-5; } }
        protected virtual double MolesTolerance { get { return 1e-5; } }
        protected virtual double NanomolesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void MoleToSubstanceAmountUnits()
        {
            SubstanceAmount mole = SubstanceAmount.FromMoles(1);
            AssertEx.EqualTolerance(CentimolesInOneMole, mole.Centimoles, CentimolesTolerance);
            AssertEx.EqualTolerance(DecimolesInOneMole, mole.Decimoles, DecimolesTolerance);
            AssertEx.EqualTolerance(KilomolesInOneMole, mole.Kilomoles, KilomolesTolerance);
            AssertEx.EqualTolerance(MicromolesInOneMole, mole.Micromoles, MicromolesTolerance);
            AssertEx.EqualTolerance(MillimolesInOneMole, mole.Millimoles, MillimolesTolerance);
            AssertEx.EqualTolerance(MolesInOneMole, mole.Moles, MolesTolerance);
            AssertEx.EqualTolerance(NanomolesInOneMole, mole.Nanomoles, NanomolesTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, SubstanceAmount.From(1, SubstanceAmountUnit.Centimole).Centimoles, CentimolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.From(1, SubstanceAmountUnit.Decimole).Decimoles, DecimolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.From(1, SubstanceAmountUnit.Kilomole).Kilomoles, KilomolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.From(1, SubstanceAmountUnit.Micromole).Micromoles, MicromolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.From(1, SubstanceAmountUnit.Millimole).Millimoles, MillimolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.From(1, SubstanceAmountUnit.Mole).Moles, MolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.From(1, SubstanceAmountUnit.Nanomole).Nanomoles, NanomolesTolerance);
        }

        [Fact]
        public void As()
        {
            var mole = SubstanceAmount.FromMoles(1);
            AssertEx.EqualTolerance(CentimolesInOneMole, mole.As(SubstanceAmountUnit.Centimole), CentimolesTolerance);
            AssertEx.EqualTolerance(DecimolesInOneMole, mole.As(SubstanceAmountUnit.Decimole), DecimolesTolerance);
            AssertEx.EqualTolerance(KilomolesInOneMole, mole.As(SubstanceAmountUnit.Kilomole), KilomolesTolerance);
            AssertEx.EqualTolerance(MicromolesInOneMole, mole.As(SubstanceAmountUnit.Micromole), MicromolesTolerance);
            AssertEx.EqualTolerance(MillimolesInOneMole, mole.As(SubstanceAmountUnit.Millimole), MillimolesTolerance);
            AssertEx.EqualTolerance(MolesInOneMole, mole.As(SubstanceAmountUnit.Mole), MolesTolerance);
            AssertEx.EqualTolerance(NanomolesInOneMole, mole.As(SubstanceAmountUnit.Nanomole), NanomolesTolerance);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SubstanceAmount mole = SubstanceAmount.FromMoles(1);
            AssertEx.EqualTolerance(1, SubstanceAmount.FromCentimoles(mole.Centimoles).Moles, CentimolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.FromDecimoles(mole.Decimoles).Moles, DecimolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.FromKilomoles(mole.Kilomoles).Moles, KilomolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.FromMicromoles(mole.Micromoles).Moles, MicromolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.FromMillimoles(mole.Millimoles).Moles, MillimolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.FromMoles(mole.Moles).Moles, MolesTolerance);
            AssertEx.EqualTolerance(1, SubstanceAmount.FromNanomoles(mole.Nanomoles).Moles, NanomolesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SubstanceAmount v = SubstanceAmount.FromMoles(1);
            AssertEx.EqualTolerance(-1, -v.Moles, MolesTolerance);
            AssertEx.EqualTolerance(2, (SubstanceAmount.FromMoles(3)-v).Moles, MolesTolerance);
            AssertEx.EqualTolerance(2, (v + v).Moles, MolesTolerance);
            AssertEx.EqualTolerance(10, (v*10).Moles, MolesTolerance);
            AssertEx.EqualTolerance(10, (10*v).Moles, MolesTolerance);
            AssertEx.EqualTolerance(2, (SubstanceAmount.FromMoles(10)/5).Moles, MolesTolerance);
            AssertEx.EqualTolerance(2, SubstanceAmount.FromMoles(10)/SubstanceAmount.FromMoles(5), MolesTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SubstanceAmount oneMole = SubstanceAmount.FromMoles(1);
            SubstanceAmount twoMoles = SubstanceAmount.FromMoles(2);

            Assert.True(oneMole < twoMoles);
            Assert.True(oneMole <= twoMoles);
            Assert.True(twoMoles > oneMole);
            Assert.True(twoMoles >= oneMole);

            Assert.False(oneMole > twoMoles);
            Assert.False(oneMole >= twoMoles);
            Assert.False(twoMoles < oneMole);
            Assert.False(twoMoles <= oneMole);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SubstanceAmount mole = SubstanceAmount.FromMoles(1);
            Assert.Equal(0, mole.CompareTo(mole));
            Assert.True(mole.CompareTo(SubstanceAmount.Zero) > 0);
            Assert.True(SubstanceAmount.Zero.CompareTo(mole) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SubstanceAmount mole = SubstanceAmount.FromMoles(1);
            Assert.Throws<ArgumentException>(() => mole.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SubstanceAmount mole = SubstanceAmount.FromMoles(1);
            Assert.Throws<ArgumentNullException>(() => mole.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            SubstanceAmount a = SubstanceAmount.FromMoles(1);
            SubstanceAmount b = SubstanceAmount.FromMoles(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            SubstanceAmount v = SubstanceAmount.FromMoles(1);
            Assert.True(v.Equals(SubstanceAmount.FromMoles(1)));
            Assert.False(v.Equals(SubstanceAmount.Zero));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SubstanceAmount mole = SubstanceAmount.FromMoles(1);
            Assert.False(mole.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SubstanceAmount mole = SubstanceAmount.FromMoles(1);
            Assert.False(mole.Equals(null));
        }
    }
}
