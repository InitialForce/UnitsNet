//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Frequency.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class FrequencyTestsBase
    {
        protected abstract double BeatsPerMinuteInOneHertz { get; }
        protected abstract double CyclesPerHourInOneHertz { get; }
        protected abstract double CyclesPerMinuteInOneHertz { get; }
        protected abstract double GigahertzInOneHertz { get; }
        protected abstract double HertzInOneHertz { get; }
        protected abstract double KilohertzInOneHertz { get; }
        protected abstract double MegahertzInOneHertz { get; }
        protected abstract double RadiansPerSecondInOneHertz { get; }
        protected abstract double TerahertzInOneHertz { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BeatsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CyclesPerHourTolerance { get { return 1e-5; } }
        protected virtual double CyclesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double GigahertzTolerance { get { return 1e-5; } }
        protected virtual double HertzTolerance { get { return 1e-5; } }
        protected virtual double KilohertzTolerance { get { return 1e-5; } }
        protected virtual double MegahertzTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TerahertzTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Frequency<double>((double)0.0, FrequencyUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Frequency<double>(double.PositiveInfinity, FrequencyUnit.Hertz));
            Assert.Throws<ArgumentException>(() => new Frequency<double>(double.NegativeInfinity, FrequencyUnit.Hertz));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Frequency<double>(double.NaN, FrequencyUnit.Hertz));
        }

        [Fact]
        public void HertzToFrequencyUnits()
        {
            Frequency<double> hertz = Frequency<double>.FromHertz(1);
            AssertEx.EqualTolerance(BeatsPerMinuteInOneHertz, hertz.BeatsPerMinute, BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(CyclesPerHourInOneHertz, hertz.CyclesPerHour, CyclesPerHourTolerance);
            AssertEx.EqualTolerance(CyclesPerMinuteInOneHertz, hertz.CyclesPerMinute, CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(GigahertzInOneHertz, hertz.Gigahertz, GigahertzTolerance);
            AssertEx.EqualTolerance(HertzInOneHertz, hertz.Hertz, HertzTolerance);
            AssertEx.EqualTolerance(KilohertzInOneHertz, hertz.Kilohertz, KilohertzTolerance);
            AssertEx.EqualTolerance(MegahertzInOneHertz, hertz.Megahertz, MegahertzTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneHertz, hertz.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(TerahertzInOneHertz, hertz.Terahertz, TerahertzTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.BeatPerMinute).BeatsPerMinute, BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.CyclePerHour).CyclesPerHour, CyclesPerHourTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.CyclePerMinute).CyclesPerMinute, CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.Gigahertz).Gigahertz, GigahertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.Hertz).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.Kilohertz).Kilohertz, KilohertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.Megahertz).Megahertz, MegahertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.RadianPerSecond).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.From(1, FrequencyUnit.Terahertz).Terahertz, TerahertzTolerance);
        }

        [Fact]
        public void FromHertz_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Frequency<double>.FromHertz(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Frequency<double>.FromHertz(double.NegativeInfinity));
        }

        [Fact]
        public void FromHertz_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Frequency<double>.FromHertz(double.NaN));
        }

        [Fact]
        public void As()
        {
            var hertz = Frequency<double>.FromHertz(1);
            AssertEx.EqualTolerance(BeatsPerMinuteInOneHertz, hertz.As(FrequencyUnit.BeatPerMinute), BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(CyclesPerHourInOneHertz, hertz.As(FrequencyUnit.CyclePerHour), CyclesPerHourTolerance);
            AssertEx.EqualTolerance(CyclesPerMinuteInOneHertz, hertz.As(FrequencyUnit.CyclePerMinute), CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(GigahertzInOneHertz, hertz.As(FrequencyUnit.Gigahertz), GigahertzTolerance);
            AssertEx.EqualTolerance(HertzInOneHertz, hertz.As(FrequencyUnit.Hertz), HertzTolerance);
            AssertEx.EqualTolerance(KilohertzInOneHertz, hertz.As(FrequencyUnit.Kilohertz), KilohertzTolerance);
            AssertEx.EqualTolerance(MegahertzInOneHertz, hertz.As(FrequencyUnit.Megahertz), MegahertzTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneHertz, hertz.As(FrequencyUnit.RadianPerSecond), RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(TerahertzInOneHertz, hertz.As(FrequencyUnit.Terahertz), TerahertzTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var hertz = Frequency<double>.FromHertz(1);

            var beatperminuteQuantity = hertz.ToUnit(FrequencyUnit.BeatPerMinute);
            AssertEx.EqualTolerance(BeatsPerMinuteInOneHertz, (double)beatperminuteQuantity.Value, BeatsPerMinuteTolerance);
            Assert.Equal(FrequencyUnit.BeatPerMinute, beatperminuteQuantity.Unit);

            var cycleperhourQuantity = hertz.ToUnit(FrequencyUnit.CyclePerHour);
            AssertEx.EqualTolerance(CyclesPerHourInOneHertz, (double)cycleperhourQuantity.Value, CyclesPerHourTolerance);
            Assert.Equal(FrequencyUnit.CyclePerHour, cycleperhourQuantity.Unit);

            var cycleperminuteQuantity = hertz.ToUnit(FrequencyUnit.CyclePerMinute);
            AssertEx.EqualTolerance(CyclesPerMinuteInOneHertz, (double)cycleperminuteQuantity.Value, CyclesPerMinuteTolerance);
            Assert.Equal(FrequencyUnit.CyclePerMinute, cycleperminuteQuantity.Unit);

            var gigahertzQuantity = hertz.ToUnit(FrequencyUnit.Gigahertz);
            AssertEx.EqualTolerance(GigahertzInOneHertz, (double)gigahertzQuantity.Value, GigahertzTolerance);
            Assert.Equal(FrequencyUnit.Gigahertz, gigahertzQuantity.Unit);

            var hertzQuantity = hertz.ToUnit(FrequencyUnit.Hertz);
            AssertEx.EqualTolerance(HertzInOneHertz, (double)hertzQuantity.Value, HertzTolerance);
            Assert.Equal(FrequencyUnit.Hertz, hertzQuantity.Unit);

            var kilohertzQuantity = hertz.ToUnit(FrequencyUnit.Kilohertz);
            AssertEx.EqualTolerance(KilohertzInOneHertz, (double)kilohertzQuantity.Value, KilohertzTolerance);
            Assert.Equal(FrequencyUnit.Kilohertz, kilohertzQuantity.Unit);

            var megahertzQuantity = hertz.ToUnit(FrequencyUnit.Megahertz);
            AssertEx.EqualTolerance(MegahertzInOneHertz, (double)megahertzQuantity.Value, MegahertzTolerance);
            Assert.Equal(FrequencyUnit.Megahertz, megahertzQuantity.Unit);

            var radianpersecondQuantity = hertz.ToUnit(FrequencyUnit.RadianPerSecond);
            AssertEx.EqualTolerance(RadiansPerSecondInOneHertz, (double)radianpersecondQuantity.Value, RadiansPerSecondTolerance);
            Assert.Equal(FrequencyUnit.RadianPerSecond, radianpersecondQuantity.Unit);

            var terahertzQuantity = hertz.ToUnit(FrequencyUnit.Terahertz);
            AssertEx.EqualTolerance(TerahertzInOneHertz, (double)terahertzQuantity.Value, TerahertzTolerance);
            Assert.Equal(FrequencyUnit.Terahertz, terahertzQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Frequency<double> hertz = Frequency<double>.FromHertz(1);
            AssertEx.EqualTolerance(1, Frequency<double>.FromBeatsPerMinute(hertz.BeatsPerMinute).Hertz, BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromCyclesPerHour(hertz.CyclesPerHour).Hertz, CyclesPerHourTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromCyclesPerMinute(hertz.CyclesPerMinute).Hertz, CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromGigahertz(hertz.Gigahertz).Hertz, GigahertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromHertz(hertz.Hertz).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromKilohertz(hertz.Kilohertz).Hertz, KilohertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromMegahertz(hertz.Megahertz).Hertz, MegahertzTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromRadiansPerSecond(hertz.RadiansPerSecond).Hertz, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, Frequency<double>.FromTerahertz(hertz.Terahertz).Hertz, TerahertzTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Frequency<double> v = Frequency<double>.FromHertz(1);
            AssertEx.EqualTolerance(-1, -v.Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, (Frequency<double>.FromHertz(3)-v).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, (v + v).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(10, (v*10).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(10, (10*v).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, (Frequency<double>.FromHertz(10)/5).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, Frequency<double>.FromHertz(10)/Frequency<double>.FromHertz(5), HertzTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Frequency<double> oneHertz = Frequency<double>.FromHertz(1);
            Frequency<double> twoHertz = Frequency<double>.FromHertz(2);

            Assert.True(oneHertz < twoHertz);
            Assert.True(oneHertz <= twoHertz);
            Assert.True(twoHertz > oneHertz);
            Assert.True(twoHertz >= oneHertz);

            Assert.False(oneHertz > twoHertz);
            Assert.False(oneHertz >= twoHertz);
            Assert.False(twoHertz < oneHertz);
            Assert.False(twoHertz <= oneHertz);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Frequency<double> hertz = Frequency<double>.FromHertz(1);
            Assert.Equal(0, hertz.CompareTo(hertz));
            Assert.True(hertz.CompareTo(Frequency<double>.Zero) > 0);
            Assert.True(Frequency<double>.Zero.CompareTo(hertz) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Frequency<double> hertz = Frequency<double>.FromHertz(1);
            Assert.Throws<ArgumentException>(() => hertz.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Frequency<double> hertz = Frequency<double>.FromHertz(1);
            Assert.Throws<ArgumentNullException>(() => hertz.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Frequency<double>.FromHertz(1);
            var b = Frequency<double>.FromHertz(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Frequency<double>.FromHertz(1);
            var b = Frequency<double>.FromHertz(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Frequency<double>.FromHertz(1);
            Assert.True(v.Equals(Frequency<double>.FromHertz(1), HertzTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Frequency<double>.Zero, HertzTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Frequency<double> hertz = Frequency<double>.FromHertz(1);
            Assert.False(hertz.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Frequency<double> hertz = Frequency<double>.FromHertz(1);
            Assert.False(hertz.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(FrequencyUnit.Undefined, Frequency<double>.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(FrequencyUnit)).Cast<FrequencyUnit>();
            foreach(var unit in units)
            {
                if(unit == FrequencyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Frequency<double>.BaseDimensions is null);
        }
    }
}
