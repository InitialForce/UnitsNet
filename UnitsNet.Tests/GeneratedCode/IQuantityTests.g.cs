//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;
using Xunit;

namespace UnitsNet.Tests
{
    public partial class IQuantityTests
    {
        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            void Assertion(int expectedValue, Enum expectedUnit, IQuantity quantity)
            {
                Assert.Equal(expectedUnit, quantity.Unit);
                Assert.Equal(expectedValue, quantity.Value);
            }

            Assertion(3, AccelerationUnit.StandardGravity, Quantity.From<double>(3, AccelerationUnit.StandardGravity));
            Assertion(3, AmountOfSubstanceUnit.PoundMole, Quantity.From<double>(3, AmountOfSubstanceUnit.PoundMole));
            Assertion(3, AmplitudeRatioUnit.DecibelVolt, Quantity.From<double>(3, AmplitudeRatioUnit.DecibelVolt));
            Assertion(3, AngleUnit.Revolution, Quantity.From<double>(3, AngleUnit.Revolution));
            Assertion(3, ApparentEnergyUnit.VoltampereHour, Quantity.From<double>(3, ApparentEnergyUnit.VoltampereHour));
            Assertion(3, ApparentPowerUnit.Voltampere, Quantity.From<double>(3, ApparentPowerUnit.Voltampere));
            Assertion(3, AreaUnit.UsSurveySquareFoot, Quantity.From<double>(3, AreaUnit.UsSurveySquareFoot));
            Assertion(3, AreaDensityUnit.KilogramPerSquareMeter, Quantity.From<double>(3, AreaDensityUnit.KilogramPerSquareMeter));
            Assertion(3, AreaMomentOfInertiaUnit.MillimeterToTheFourth, Quantity.From<double>(3, AreaMomentOfInertiaUnit.MillimeterToTheFourth));
            Assertion(3, BitRateUnit.TerabytePerSecond, Quantity.From<double>(3, BitRateUnit.TerabytePerSecond));
            Assertion(3, BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour, Quantity.From<double>(3, BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour));
            Assertion(3, CapacitanceUnit.Picofarad, Quantity.From<double>(3, CapacitanceUnit.Picofarad));
            Assertion(3, CoefficientOfThermalExpansionUnit.InverseKelvin, Quantity.From<double>(3, CoefficientOfThermalExpansionUnit.InverseKelvin));
            Assertion(3, DensityUnit.TonnePerCubicMillimeter, Quantity.From<double>(3, DensityUnit.TonnePerCubicMillimeter));
            Assertion(3, DurationUnit.Year365, Quantity.From<double>(3, DurationUnit.Year365));
            Assertion(3, DynamicViscosityUnit.Reyn, Quantity.From<double>(3, DynamicViscosityUnit.Reyn));
            Assertion(3, ElectricAdmittanceUnit.Siemens, Quantity.From<double>(3, ElectricAdmittanceUnit.Siemens));
            Assertion(3, ElectricChargeUnit.MilliampereHour, Quantity.From<double>(3, ElectricChargeUnit.MilliampereHour));
            Assertion(3, ElectricChargeDensityUnit.CoulombPerCubicMeter, Quantity.From<double>(3, ElectricChargeDensityUnit.CoulombPerCubicMeter));
            Assertion(3, ElectricConductanceUnit.Siemens, Quantity.From<double>(3, ElectricConductanceUnit.Siemens));
            Assertion(3, ElectricConductivityUnit.SiemensPerMeter, Quantity.From<double>(3, ElectricConductivityUnit.SiemensPerMeter));
            Assertion(3, ElectricCurrentUnit.Picoampere, Quantity.From<double>(3, ElectricCurrentUnit.Picoampere));
            Assertion(3, ElectricCurrentDensityUnit.AmperePerSquareMeter, Quantity.From<double>(3, ElectricCurrentDensityUnit.AmperePerSquareMeter));
            Assertion(3, ElectricCurrentGradientUnit.AmperePerSecond, Quantity.From<double>(3, ElectricCurrentGradientUnit.AmperePerSecond));
            Assertion(3, ElectricFieldUnit.VoltPerMeter, Quantity.From<double>(3, ElectricFieldUnit.VoltPerMeter));
            Assertion(3, ElectricInductanceUnit.Nanohenry, Quantity.From<double>(3, ElectricInductanceUnit.Nanohenry));
            Assertion(3, ElectricPotentialUnit.Volt, Quantity.From<double>(3, ElectricPotentialUnit.Volt));
            Assertion(3, ElectricPotentialAcUnit.VoltAc, Quantity.From<double>(3, ElectricPotentialAcUnit.VoltAc));
            Assertion(3, ElectricPotentialDcUnit.VoltDc, Quantity.From<double>(3, ElectricPotentialDcUnit.VoltDc));
            Assertion(3, ElectricResistanceUnit.Ohm, Quantity.From<double>(3, ElectricResistanceUnit.Ohm));
            Assertion(3, ElectricResistivityUnit.PicoohmMeter, Quantity.From<double>(3, ElectricResistivityUnit.PicoohmMeter));
            Assertion(3, ElectricSurfaceChargeDensityUnit.CoulombPerSquareMeter, Quantity.From<double>(3, ElectricSurfaceChargeDensityUnit.CoulombPerSquareMeter));
            Assertion(3, EnergyUnit.WattHour, Quantity.From<double>(3, EnergyUnit.WattHour));
            Assertion(3, EntropyUnit.MegajoulePerKelvin, Quantity.From<double>(3, EntropyUnit.MegajoulePerKelvin));
            Assertion(3, ForceUnit.TonneForce, Quantity.From<double>(3, ForceUnit.TonneForce));
            Assertion(3, ForceChangeRateUnit.NewtonPerSecond, Quantity.From<double>(3, ForceChangeRateUnit.NewtonPerSecond));
            Assertion(3, ForcePerLengthUnit.PoundForcePerYard, Quantity.From<double>(3, ForcePerLengthUnit.PoundForcePerYard));
            Assertion(3, FrequencyUnit.Terahertz, Quantity.From<double>(3, FrequencyUnit.Terahertz));
            Assertion(3, FuelEfficiencyUnit.MilePerUsGallon, Quantity.From<double>(3, FuelEfficiencyUnit.MilePerUsGallon));
            Assertion(3, HeatFluxUnit.WattPerSquareMeter, Quantity.From<double>(3, HeatFluxUnit.WattPerSquareMeter));
            Assertion(3, HeatTransferCoefficientUnit.WattPerSquareMeterKelvin, Quantity.From<double>(3, HeatTransferCoefficientUnit.WattPerSquareMeterKelvin));
            Assertion(3, IlluminanceUnit.Millilux, Quantity.From<double>(3, IlluminanceUnit.Millilux));
            Assertion(3, InformationUnit.Terabyte, Quantity.From<double>(3, InformationUnit.Terabyte));
            Assertion(3, IrradianceUnit.WattPerSquareMeter, Quantity.From<double>(3, IrradianceUnit.WattPerSquareMeter));
            Assertion(3, IrradiationUnit.WattHourPerSquareMeter, Quantity.From<double>(3, IrradiationUnit.WattHourPerSquareMeter));
            Assertion(3, KinematicViscosityUnit.Stokes, Quantity.From<double>(3, KinematicViscosityUnit.Stokes));
            Assertion(3, LapseRateUnit.DegreeCelsiusPerKilometer, Quantity.From<double>(3, LapseRateUnit.DegreeCelsiusPerKilometer));
            Assertion(3, LengthUnit.Yard, Quantity.From<double>(3, LengthUnit.Yard));
            Assertion(3, LevelUnit.Neper, Quantity.From<double>(3, LevelUnit.Neper));
            Assertion(3, LinearDensityUnit.PoundPerFoot, Quantity.From<double>(3, LinearDensityUnit.PoundPerFoot));
            Assertion(3, LuminosityUnit.Watt, Quantity.From<double>(3, LuminosityUnit.Watt));
            Assertion(3, LuminousFluxUnit.Lumen, Quantity.From<double>(3, LuminousFluxUnit.Lumen));
            Assertion(3, LuminousIntensityUnit.Candela, Quantity.From<double>(3, LuminousIntensityUnit.Candela));
            Assertion(3, MagneticFieldUnit.Tesla, Quantity.From<double>(3, MagneticFieldUnit.Tesla));
            Assertion(3, MagneticFluxUnit.Weber, Quantity.From<double>(3, MagneticFluxUnit.Weber));
            Assertion(3, MagnetizationUnit.AmperePerMeter, Quantity.From<double>(3, MagnetizationUnit.AmperePerMeter));
            Assertion(3, MassUnit.Tonne, Quantity.From<double>(3, MassUnit.Tonne));
            Assertion(3, MassConcentrationUnit.TonnePerCubicMillimeter, Quantity.From<double>(3, MassConcentrationUnit.TonnePerCubicMillimeter));
            Assertion(3, MassFlowUnit.TonnePerHour, Quantity.From<double>(3, MassFlowUnit.TonnePerHour));
            Assertion(3, MassFluxUnit.KilogramPerSecondPerSquareMeter, Quantity.From<double>(3, MassFluxUnit.KilogramPerSecondPerSquareMeter));
            Assertion(3, MassFractionUnit.Percent, Quantity.From<double>(3, MassFractionUnit.Percent));
            Assertion(3, MassMomentOfInertiaUnit.TonneSquareMilimeter, Quantity.From<double>(3, MassMomentOfInertiaUnit.TonneSquareMilimeter));
            Assertion(3, MolarEnergyUnit.MegajoulePerMole, Quantity.From<double>(3, MolarEnergyUnit.MegajoulePerMole));
            Assertion(3, MolarEntropyUnit.MegajoulePerMoleKelvin, Quantity.From<double>(3, MolarEntropyUnit.MegajoulePerMoleKelvin));
            Assertion(3, MolarityUnit.PicomolesPerLiter, Quantity.From<double>(3, MolarityUnit.PicomolesPerLiter));
            Assertion(3, MolarMassUnit.PoundPerMole, Quantity.From<double>(3, MolarMassUnit.PoundPerMole));
            Assertion(3, PermeabilityUnit.HenryPerMeter, Quantity.From<double>(3, PermeabilityUnit.HenryPerMeter));
            Assertion(3, PermittivityUnit.FaradPerMeter, Quantity.From<double>(3, PermittivityUnit.FaradPerMeter));
            Assertion(3, PowerUnit.Watt, Quantity.From<double>(3, PowerUnit.Watt));
            Assertion(3, PowerDensityUnit.WattPerLiter, Quantity.From<double>(3, PowerDensityUnit.WattPerLiter));
            Assertion(3, PowerRatioUnit.DecibelWatt, Quantity.From<double>(3, PowerRatioUnit.DecibelWatt));
            Assertion(3, PressureUnit.Torr, Quantity.From<double>(3, PressureUnit.Torr));
            Assertion(3, PressureChangeRateUnit.PascalPerSecond, Quantity.From<double>(3, PressureChangeRateUnit.PascalPerSecond));
            Assertion(3, RatioUnit.Percent, Quantity.From<double>(3, RatioUnit.Percent));
            Assertion(3, RatioChangeRateUnit.PercentPerSecond, Quantity.From<double>(3, RatioChangeRateUnit.PercentPerSecond));
            Assertion(3, ReactiveEnergyUnit.VoltampereReactiveHour, Quantity.From<double>(3, ReactiveEnergyUnit.VoltampereReactiveHour));
            Assertion(3, ReactivePowerUnit.VoltampereReactive, Quantity.From<double>(3, ReactivePowerUnit.VoltampereReactive));
            Assertion(3, RotationalAccelerationUnit.RevolutionPerSecondSquared, Quantity.From<double>(3, RotationalAccelerationUnit.RevolutionPerSecondSquared));
            Assertion(3, RotationalSpeedUnit.RevolutionPerSecond, Quantity.From<double>(3, RotationalSpeedUnit.RevolutionPerSecond));
            Assertion(3, RotationalStiffnessUnit.NewtonMeterPerRadian, Quantity.From<double>(3, RotationalStiffnessUnit.NewtonMeterPerRadian));
            Assertion(3, RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter, Quantity.From<double>(3, RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter));
            Assertion(3, SolidAngleUnit.Steradian, Quantity.From<double>(3, SolidAngleUnit.Steradian));
            Assertion(3, SpecificEnergyUnit.WattHourPerKilogram, Quantity.From<double>(3, SpecificEnergyUnit.WattHourPerKilogram));
            Assertion(3, SpecificEntropyUnit.MegajoulePerKilogramKelvin, Quantity.From<double>(3, SpecificEntropyUnit.MegajoulePerKilogramKelvin));
            Assertion(3, SpecificVolumeUnit.MillicubicMeterPerKilogram, Quantity.From<double>(3, SpecificVolumeUnit.MillicubicMeterPerKilogram));
            Assertion(3, SpecificWeightUnit.TonneForcePerCubicMillimeter, Quantity.From<double>(3, SpecificWeightUnit.TonneForcePerCubicMillimeter));
            Assertion(3, SpeedUnit.YardPerSecond, Quantity.From<double>(3, SpeedUnit.YardPerSecond));
            Assertion(3, TemperatureUnit.SolarTemperature, Quantity.From<double>(3, TemperatureUnit.SolarTemperature));
            Assertion(3, TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond, Quantity.From<double>(3, TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond));
            Assertion(3, TemperatureDeltaUnit.Kelvin, Quantity.From<double>(3, TemperatureDeltaUnit.Kelvin));
            Assertion(3, ThermalConductivityUnit.WattPerMeterKelvin, Quantity.From<double>(3, ThermalConductivityUnit.WattPerMeterKelvin));
            Assertion(3, ThermalResistanceUnit.SquareMeterKelvinPerKilowatt, Quantity.From<double>(3, ThermalResistanceUnit.SquareMeterKelvinPerKilowatt));
            Assertion(3, TorqueUnit.TonneForceMillimeter, Quantity.From<double>(3, TorqueUnit.TonneForceMillimeter));
            Assertion(3, VitaminAUnit.InternationalUnit, Quantity.From<double>(3, VitaminAUnit.InternationalUnit));
            Assertion(3, VolumeUnit.UsTeaspoon, Quantity.From<double>(3, VolumeUnit.UsTeaspoon));
            Assertion(3, VolumeConcentrationUnit.PicolitersPerMililiter, Quantity.From<double>(3, VolumeConcentrationUnit.PicolitersPerMililiter));
            Assertion(3, VolumeFlowUnit.UsGallonPerSecond, Quantity.From<double>(3, VolumeFlowUnit.UsGallonPerSecond));
            Assertion(3, VolumePerLengthUnit.OilBarrelPerFoot, Quantity.From<double>(3, VolumePerLengthUnit.OilBarrelPerFoot));
        }

        [Fact]
        public void QuantityInfo_IsSameAsStaticInfoProperty()
        {
            void Assertion(QuantityInfo expected, IQuantity quantity) => Assert.Same(expected, quantity.QuantityInfo);

            Assertion(Acceleration<double>.Info, Acceleration<double>.Zero);
            Assertion(AmountOfSubstance<double>.Info, AmountOfSubstance<double>.Zero);
            Assertion(AmplitudeRatio<double>.Info, AmplitudeRatio<double>.Zero);
            Assertion(Angle<double>.Info, Angle<double>.Zero);
            Assertion(ApparentEnergy<double>.Info, ApparentEnergy<double>.Zero);
            Assertion(ApparentPower<double>.Info, ApparentPower<double>.Zero);
            Assertion(Area<double>.Info, Area<double>.Zero);
            Assertion(AreaDensity<double>.Info, AreaDensity<double>.Zero);
            Assertion(AreaMomentOfInertia<double>.Info, AreaMomentOfInertia<double>.Zero);
            Assertion(BitRate<double>.Info, BitRate<double>.Zero);
            Assertion(BrakeSpecificFuelConsumption<double>.Info, BrakeSpecificFuelConsumption<double>.Zero);
            Assertion(Capacitance<double>.Info, Capacitance<double>.Zero);
            Assertion(CoefficientOfThermalExpansion<double>.Info, CoefficientOfThermalExpansion<double>.Zero);
            Assertion(Density<double>.Info, Density<double>.Zero);
            Assertion(Duration<double>.Info, Duration<double>.Zero);
            Assertion(DynamicViscosity<double>.Info, DynamicViscosity<double>.Zero);
            Assertion(ElectricAdmittance<double>.Info, ElectricAdmittance<double>.Zero);
            Assertion(ElectricCharge<double>.Info, ElectricCharge<double>.Zero);
            Assertion(ElectricChargeDensity<double>.Info, ElectricChargeDensity<double>.Zero);
            Assertion(ElectricConductance<double>.Info, ElectricConductance<double>.Zero);
            Assertion(ElectricConductivity<double>.Info, ElectricConductivity<double>.Zero);
            Assertion(ElectricCurrent<double>.Info, ElectricCurrent<double>.Zero);
            Assertion(ElectricCurrentDensity<double>.Info, ElectricCurrentDensity<double>.Zero);
            Assertion(ElectricCurrentGradient<double>.Info, ElectricCurrentGradient<double>.Zero);
            Assertion(ElectricField<double>.Info, ElectricField<double>.Zero);
            Assertion(ElectricInductance<double>.Info, ElectricInductance<double>.Zero);
            Assertion(ElectricPotential<double>.Info, ElectricPotential<double>.Zero);
            Assertion(ElectricPotentialAc<double>.Info, ElectricPotentialAc<double>.Zero);
            Assertion(ElectricPotentialDc<double>.Info, ElectricPotentialDc<double>.Zero);
            Assertion(ElectricResistance<double>.Info, ElectricResistance<double>.Zero);
            Assertion(ElectricResistivity<double>.Info, ElectricResistivity<double>.Zero);
            Assertion(ElectricSurfaceChargeDensity<double>.Info, ElectricSurfaceChargeDensity<double>.Zero);
            Assertion(Energy<double>.Info, Energy<double>.Zero);
            Assertion(Entropy<double>.Info, Entropy<double>.Zero);
            Assertion(Force<double>.Info, Force<double>.Zero);
            Assertion(ForceChangeRate<double>.Info, ForceChangeRate<double>.Zero);
            Assertion(ForcePerLength<double>.Info, ForcePerLength<double>.Zero);
            Assertion(Frequency<double>.Info, Frequency<double>.Zero);
            Assertion(FuelEfficiency<double>.Info, FuelEfficiency<double>.Zero);
            Assertion(HeatFlux<double>.Info, HeatFlux<double>.Zero);
            Assertion(HeatTransferCoefficient<double>.Info, HeatTransferCoefficient<double>.Zero);
            Assertion(Illuminance<double>.Info, Illuminance<double>.Zero);
            Assertion(Information<double>.Info, Information<double>.Zero);
            Assertion(Irradiance<double>.Info, Irradiance<double>.Zero);
            Assertion(Irradiation<double>.Info, Irradiation<double>.Zero);
            Assertion(KinematicViscosity<double>.Info, KinematicViscosity<double>.Zero);
            Assertion(LapseRate<double>.Info, LapseRate<double>.Zero);
            Assertion(Length<double>.Info, Length<double>.Zero);
            Assertion(Level<double>.Info, Level<double>.Zero);
            Assertion(LinearDensity<double>.Info, LinearDensity<double>.Zero);
            Assertion(Luminosity<double>.Info, Luminosity<double>.Zero);
            Assertion(LuminousFlux<double>.Info, LuminousFlux<double>.Zero);
            Assertion(LuminousIntensity<double>.Info, LuminousIntensity<double>.Zero);
            Assertion(MagneticField<double>.Info, MagneticField<double>.Zero);
            Assertion(MagneticFlux<double>.Info, MagneticFlux<double>.Zero);
            Assertion(Magnetization<double>.Info, Magnetization<double>.Zero);
            Assertion(Mass<double>.Info, Mass<double>.Zero);
            Assertion(MassConcentration<double>.Info, MassConcentration<double>.Zero);
            Assertion(MassFlow<double>.Info, MassFlow<double>.Zero);
            Assertion(MassFlux<double>.Info, MassFlux<double>.Zero);
            Assertion(MassFraction<double>.Info, MassFraction<double>.Zero);
            Assertion(MassMomentOfInertia<double>.Info, MassMomentOfInertia<double>.Zero);
            Assertion(MolarEnergy<double>.Info, MolarEnergy<double>.Zero);
            Assertion(MolarEntropy<double>.Info, MolarEntropy<double>.Zero);
            Assertion(Molarity<double>.Info, Molarity<double>.Zero);
            Assertion(MolarMass<double>.Info, MolarMass<double>.Zero);
            Assertion(Permeability<double>.Info, Permeability<double>.Zero);
            Assertion(Permittivity<double>.Info, Permittivity<double>.Zero);
            Assertion(Power<double>.Info, Power<double>.Zero);
            Assertion(PowerDensity<double>.Info, PowerDensity<double>.Zero);
            Assertion(PowerRatio<double>.Info, PowerRatio<double>.Zero);
            Assertion(Pressure<double>.Info, Pressure<double>.Zero);
            Assertion(PressureChangeRate<double>.Info, PressureChangeRate<double>.Zero);
            Assertion(Ratio<double>.Info, Ratio<double>.Zero);
            Assertion(RatioChangeRate<double>.Info, RatioChangeRate<double>.Zero);
            Assertion(ReactiveEnergy<double>.Info, ReactiveEnergy<double>.Zero);
            Assertion(ReactivePower<double>.Info, ReactivePower<double>.Zero);
            Assertion(RotationalAcceleration<double>.Info, RotationalAcceleration<double>.Zero);
            Assertion(RotationalSpeed<double>.Info, RotationalSpeed<double>.Zero);
            Assertion(RotationalStiffness<double>.Info, RotationalStiffness<double>.Zero);
            Assertion(RotationalStiffnessPerLength<double>.Info, RotationalStiffnessPerLength<double>.Zero);
            Assertion(SolidAngle<double>.Info, SolidAngle<double>.Zero);
            Assertion(SpecificEnergy<double>.Info, SpecificEnergy<double>.Zero);
            Assertion(SpecificEntropy<double>.Info, SpecificEntropy<double>.Zero);
            Assertion(SpecificVolume<double>.Info, SpecificVolume<double>.Zero);
            Assertion(SpecificWeight<double>.Info, SpecificWeight<double>.Zero);
            Assertion(Speed<double>.Info, Speed<double>.Zero);
            Assertion(Temperature<double>.Info, Temperature<double>.Zero);
            Assertion(TemperatureChangeRate<double>.Info, TemperatureChangeRate<double>.Zero);
            Assertion(TemperatureDelta<double>.Info, TemperatureDelta<double>.Zero);
            Assertion(ThermalConductivity<double>.Info, ThermalConductivity<double>.Zero);
            Assertion(ThermalResistance<double>.Info, ThermalResistance<double>.Zero);
            Assertion(Torque<double>.Info, Torque<double>.Zero);
            Assertion(VitaminA<double>.Info, VitaminA<double>.Zero);
            Assertion(Volume<double>.Info, Volume<double>.Zero);
            Assertion(VolumeConcentration<double>.Info, VolumeConcentration<double>.Zero);
            Assertion(VolumeFlow<double>.Info, VolumeFlow<double>.Zero);
            Assertion(VolumePerLength<double>.Info, VolumePerLength<double>.Zero);
        }

        [Fact]
        public void Type_EqualsStaticQuantityTypeProperty()
        {
            void Assertion(QuantityType expected, IQuantity quantity) => Assert.Equal(expected, quantity.Type);

            Assertion(Acceleration<double>.QuantityType, Acceleration<double>.Zero);
            Assertion(AmountOfSubstance<double>.QuantityType, AmountOfSubstance<double>.Zero);
            Assertion(AmplitudeRatio<double>.QuantityType, AmplitudeRatio<double>.Zero);
            Assertion(Angle<double>.QuantityType, Angle<double>.Zero);
            Assertion(ApparentEnergy<double>.QuantityType, ApparentEnergy<double>.Zero);
            Assertion(ApparentPower<double>.QuantityType, ApparentPower<double>.Zero);
            Assertion(Area<double>.QuantityType, Area<double>.Zero);
            Assertion(AreaDensity<double>.QuantityType, AreaDensity<double>.Zero);
            Assertion(AreaMomentOfInertia<double>.QuantityType, AreaMomentOfInertia<double>.Zero);
            Assertion(BitRate<double>.QuantityType, BitRate<double>.Zero);
            Assertion(BrakeSpecificFuelConsumption<double>.QuantityType, BrakeSpecificFuelConsumption<double>.Zero);
            Assertion(Capacitance<double>.QuantityType, Capacitance<double>.Zero);
            Assertion(CoefficientOfThermalExpansion<double>.QuantityType, CoefficientOfThermalExpansion<double>.Zero);
            Assertion(Density<double>.QuantityType, Density<double>.Zero);
            Assertion(Duration<double>.QuantityType, Duration<double>.Zero);
            Assertion(DynamicViscosity<double>.QuantityType, DynamicViscosity<double>.Zero);
            Assertion(ElectricAdmittance<double>.QuantityType, ElectricAdmittance<double>.Zero);
            Assertion(ElectricCharge<double>.QuantityType, ElectricCharge<double>.Zero);
            Assertion(ElectricChargeDensity<double>.QuantityType, ElectricChargeDensity<double>.Zero);
            Assertion(ElectricConductance<double>.QuantityType, ElectricConductance<double>.Zero);
            Assertion(ElectricConductivity<double>.QuantityType, ElectricConductivity<double>.Zero);
            Assertion(ElectricCurrent<double>.QuantityType, ElectricCurrent<double>.Zero);
            Assertion(ElectricCurrentDensity<double>.QuantityType, ElectricCurrentDensity<double>.Zero);
            Assertion(ElectricCurrentGradient<double>.QuantityType, ElectricCurrentGradient<double>.Zero);
            Assertion(ElectricField<double>.QuantityType, ElectricField<double>.Zero);
            Assertion(ElectricInductance<double>.QuantityType, ElectricInductance<double>.Zero);
            Assertion(ElectricPotential<double>.QuantityType, ElectricPotential<double>.Zero);
            Assertion(ElectricPotentialAc<double>.QuantityType, ElectricPotentialAc<double>.Zero);
            Assertion(ElectricPotentialDc<double>.QuantityType, ElectricPotentialDc<double>.Zero);
            Assertion(ElectricResistance<double>.QuantityType, ElectricResistance<double>.Zero);
            Assertion(ElectricResistivity<double>.QuantityType, ElectricResistivity<double>.Zero);
            Assertion(ElectricSurfaceChargeDensity<double>.QuantityType, ElectricSurfaceChargeDensity<double>.Zero);
            Assertion(Energy<double>.QuantityType, Energy<double>.Zero);
            Assertion(Entropy<double>.QuantityType, Entropy<double>.Zero);
            Assertion(Force<double>.QuantityType, Force<double>.Zero);
            Assertion(ForceChangeRate<double>.QuantityType, ForceChangeRate<double>.Zero);
            Assertion(ForcePerLength<double>.QuantityType, ForcePerLength<double>.Zero);
            Assertion(Frequency<double>.QuantityType, Frequency<double>.Zero);
            Assertion(FuelEfficiency<double>.QuantityType, FuelEfficiency<double>.Zero);
            Assertion(HeatFlux<double>.QuantityType, HeatFlux<double>.Zero);
            Assertion(HeatTransferCoefficient<double>.QuantityType, HeatTransferCoefficient<double>.Zero);
            Assertion(Illuminance<double>.QuantityType, Illuminance<double>.Zero);
            Assertion(Information<double>.QuantityType, Information<double>.Zero);
            Assertion(Irradiance<double>.QuantityType, Irradiance<double>.Zero);
            Assertion(Irradiation<double>.QuantityType, Irradiation<double>.Zero);
            Assertion(KinematicViscosity<double>.QuantityType, KinematicViscosity<double>.Zero);
            Assertion(LapseRate<double>.QuantityType, LapseRate<double>.Zero);
            Assertion(Length<double>.QuantityType, Length<double>.Zero);
            Assertion(Level<double>.QuantityType, Level<double>.Zero);
            Assertion(LinearDensity<double>.QuantityType, LinearDensity<double>.Zero);
            Assertion(Luminosity<double>.QuantityType, Luminosity<double>.Zero);
            Assertion(LuminousFlux<double>.QuantityType, LuminousFlux<double>.Zero);
            Assertion(LuminousIntensity<double>.QuantityType, LuminousIntensity<double>.Zero);
            Assertion(MagneticField<double>.QuantityType, MagneticField<double>.Zero);
            Assertion(MagneticFlux<double>.QuantityType, MagneticFlux<double>.Zero);
            Assertion(Magnetization<double>.QuantityType, Magnetization<double>.Zero);
            Assertion(Mass<double>.QuantityType, Mass<double>.Zero);
            Assertion(MassConcentration<double>.QuantityType, MassConcentration<double>.Zero);
            Assertion(MassFlow<double>.QuantityType, MassFlow<double>.Zero);
            Assertion(MassFlux<double>.QuantityType, MassFlux<double>.Zero);
            Assertion(MassFraction<double>.QuantityType, MassFraction<double>.Zero);
            Assertion(MassMomentOfInertia<double>.QuantityType, MassMomentOfInertia<double>.Zero);
            Assertion(MolarEnergy<double>.QuantityType, MolarEnergy<double>.Zero);
            Assertion(MolarEntropy<double>.QuantityType, MolarEntropy<double>.Zero);
            Assertion(Molarity<double>.QuantityType, Molarity<double>.Zero);
            Assertion(MolarMass<double>.QuantityType, MolarMass<double>.Zero);
            Assertion(Permeability<double>.QuantityType, Permeability<double>.Zero);
            Assertion(Permittivity<double>.QuantityType, Permittivity<double>.Zero);
            Assertion(Power<double>.QuantityType, Power<double>.Zero);
            Assertion(PowerDensity<double>.QuantityType, PowerDensity<double>.Zero);
            Assertion(PowerRatio<double>.QuantityType, PowerRatio<double>.Zero);
            Assertion(Pressure<double>.QuantityType, Pressure<double>.Zero);
            Assertion(PressureChangeRate<double>.QuantityType, PressureChangeRate<double>.Zero);
            Assertion(Ratio<double>.QuantityType, Ratio<double>.Zero);
            Assertion(RatioChangeRate<double>.QuantityType, RatioChangeRate<double>.Zero);
            Assertion(ReactiveEnergy<double>.QuantityType, ReactiveEnergy<double>.Zero);
            Assertion(ReactivePower<double>.QuantityType, ReactivePower<double>.Zero);
            Assertion(RotationalAcceleration<double>.QuantityType, RotationalAcceleration<double>.Zero);
            Assertion(RotationalSpeed<double>.QuantityType, RotationalSpeed<double>.Zero);
            Assertion(RotationalStiffness<double>.QuantityType, RotationalStiffness<double>.Zero);
            Assertion(RotationalStiffnessPerLength<double>.QuantityType, RotationalStiffnessPerLength<double>.Zero);
            Assertion(SolidAngle<double>.QuantityType, SolidAngle<double>.Zero);
            Assertion(SpecificEnergy<double>.QuantityType, SpecificEnergy<double>.Zero);
            Assertion(SpecificEntropy<double>.QuantityType, SpecificEntropy<double>.Zero);
            Assertion(SpecificVolume<double>.QuantityType, SpecificVolume<double>.Zero);
            Assertion(SpecificWeight<double>.QuantityType, SpecificWeight<double>.Zero);
            Assertion(Speed<double>.QuantityType, Speed<double>.Zero);
            Assertion(Temperature<double>.QuantityType, Temperature<double>.Zero);
            Assertion(TemperatureChangeRate<double>.QuantityType, TemperatureChangeRate<double>.Zero);
            Assertion(TemperatureDelta<double>.QuantityType, TemperatureDelta<double>.Zero);
            Assertion(ThermalConductivity<double>.QuantityType, ThermalConductivity<double>.Zero);
            Assertion(ThermalResistance<double>.QuantityType, ThermalResistance<double>.Zero);
            Assertion(Torque<double>.QuantityType, Torque<double>.Zero);
            Assertion(VitaminA<double>.QuantityType, VitaminA<double>.Zero);
            Assertion(Volume<double>.QuantityType, Volume<double>.Zero);
            Assertion(VolumeConcentration<double>.QuantityType, VolumeConcentration<double>.Zero);
            Assertion(VolumeFlow<double>.QuantityType, VolumeFlow<double>.Zero);
            Assertion(VolumePerLength<double>.QuantityType, VolumePerLength<double>.Zero);
        }

        [Fact]
        public void Dimensions_IsSameAsStaticBaseDimensions()
        {
            void Assertion(BaseDimensions expected, IQuantity quantity) => Assert.Equal(expected, quantity.Dimensions);

            Assertion(Acceleration<double>.BaseDimensions, Acceleration<double>.Zero);
            Assertion(AmountOfSubstance<double>.BaseDimensions, AmountOfSubstance<double>.Zero);
            Assertion(AmplitudeRatio<double>.BaseDimensions, AmplitudeRatio<double>.Zero);
            Assertion(Angle<double>.BaseDimensions, Angle<double>.Zero);
            Assertion(ApparentEnergy<double>.BaseDimensions, ApparentEnergy<double>.Zero);
            Assertion(ApparentPower<double>.BaseDimensions, ApparentPower<double>.Zero);
            Assertion(Area<double>.BaseDimensions, Area<double>.Zero);
            Assertion(AreaDensity<double>.BaseDimensions, AreaDensity<double>.Zero);
            Assertion(AreaMomentOfInertia<double>.BaseDimensions, AreaMomentOfInertia<double>.Zero);
            Assertion(BitRate<double>.BaseDimensions, BitRate<double>.Zero);
            Assertion(BrakeSpecificFuelConsumption<double>.BaseDimensions, BrakeSpecificFuelConsumption<double>.Zero);
            Assertion(Capacitance<double>.BaseDimensions, Capacitance<double>.Zero);
            Assertion(CoefficientOfThermalExpansion<double>.BaseDimensions, CoefficientOfThermalExpansion<double>.Zero);
            Assertion(Density<double>.BaseDimensions, Density<double>.Zero);
            Assertion(Duration<double>.BaseDimensions, Duration<double>.Zero);
            Assertion(DynamicViscosity<double>.BaseDimensions, DynamicViscosity<double>.Zero);
            Assertion(ElectricAdmittance<double>.BaseDimensions, ElectricAdmittance<double>.Zero);
            Assertion(ElectricCharge<double>.BaseDimensions, ElectricCharge<double>.Zero);
            Assertion(ElectricChargeDensity<double>.BaseDimensions, ElectricChargeDensity<double>.Zero);
            Assertion(ElectricConductance<double>.BaseDimensions, ElectricConductance<double>.Zero);
            Assertion(ElectricConductivity<double>.BaseDimensions, ElectricConductivity<double>.Zero);
            Assertion(ElectricCurrent<double>.BaseDimensions, ElectricCurrent<double>.Zero);
            Assertion(ElectricCurrentDensity<double>.BaseDimensions, ElectricCurrentDensity<double>.Zero);
            Assertion(ElectricCurrentGradient<double>.BaseDimensions, ElectricCurrentGradient<double>.Zero);
            Assertion(ElectricField<double>.BaseDimensions, ElectricField<double>.Zero);
            Assertion(ElectricInductance<double>.BaseDimensions, ElectricInductance<double>.Zero);
            Assertion(ElectricPotential<double>.BaseDimensions, ElectricPotential<double>.Zero);
            Assertion(ElectricPotentialAc<double>.BaseDimensions, ElectricPotentialAc<double>.Zero);
            Assertion(ElectricPotentialDc<double>.BaseDimensions, ElectricPotentialDc<double>.Zero);
            Assertion(ElectricResistance<double>.BaseDimensions, ElectricResistance<double>.Zero);
            Assertion(ElectricResistivity<double>.BaseDimensions, ElectricResistivity<double>.Zero);
            Assertion(ElectricSurfaceChargeDensity<double>.BaseDimensions, ElectricSurfaceChargeDensity<double>.Zero);
            Assertion(Energy<double>.BaseDimensions, Energy<double>.Zero);
            Assertion(Entropy<double>.BaseDimensions, Entropy<double>.Zero);
            Assertion(Force<double>.BaseDimensions, Force<double>.Zero);
            Assertion(ForceChangeRate<double>.BaseDimensions, ForceChangeRate<double>.Zero);
            Assertion(ForcePerLength<double>.BaseDimensions, ForcePerLength<double>.Zero);
            Assertion(Frequency<double>.BaseDimensions, Frequency<double>.Zero);
            Assertion(FuelEfficiency<double>.BaseDimensions, FuelEfficiency<double>.Zero);
            Assertion(HeatFlux<double>.BaseDimensions, HeatFlux<double>.Zero);
            Assertion(HeatTransferCoefficient<double>.BaseDimensions, HeatTransferCoefficient<double>.Zero);
            Assertion(Illuminance<double>.BaseDimensions, Illuminance<double>.Zero);
            Assertion(Information<double>.BaseDimensions, Information<double>.Zero);
            Assertion(Irradiance<double>.BaseDimensions, Irradiance<double>.Zero);
            Assertion(Irradiation<double>.BaseDimensions, Irradiation<double>.Zero);
            Assertion(KinematicViscosity<double>.BaseDimensions, KinematicViscosity<double>.Zero);
            Assertion(LapseRate<double>.BaseDimensions, LapseRate<double>.Zero);
            Assertion(Length<double>.BaseDimensions, Length<double>.Zero);
            Assertion(Level<double>.BaseDimensions, Level<double>.Zero);
            Assertion(LinearDensity<double>.BaseDimensions, LinearDensity<double>.Zero);
            Assertion(Luminosity<double>.BaseDimensions, Luminosity<double>.Zero);
            Assertion(LuminousFlux<double>.BaseDimensions, LuminousFlux<double>.Zero);
            Assertion(LuminousIntensity<double>.BaseDimensions, LuminousIntensity<double>.Zero);
            Assertion(MagneticField<double>.BaseDimensions, MagneticField<double>.Zero);
            Assertion(MagneticFlux<double>.BaseDimensions, MagneticFlux<double>.Zero);
            Assertion(Magnetization<double>.BaseDimensions, Magnetization<double>.Zero);
            Assertion(Mass<double>.BaseDimensions, Mass<double>.Zero);
            Assertion(MassConcentration<double>.BaseDimensions, MassConcentration<double>.Zero);
            Assertion(MassFlow<double>.BaseDimensions, MassFlow<double>.Zero);
            Assertion(MassFlux<double>.BaseDimensions, MassFlux<double>.Zero);
            Assertion(MassFraction<double>.BaseDimensions, MassFraction<double>.Zero);
            Assertion(MassMomentOfInertia<double>.BaseDimensions, MassMomentOfInertia<double>.Zero);
            Assertion(MolarEnergy<double>.BaseDimensions, MolarEnergy<double>.Zero);
            Assertion(MolarEntropy<double>.BaseDimensions, MolarEntropy<double>.Zero);
            Assertion(Molarity<double>.BaseDimensions, Molarity<double>.Zero);
            Assertion(MolarMass<double>.BaseDimensions, MolarMass<double>.Zero);
            Assertion(Permeability<double>.BaseDimensions, Permeability<double>.Zero);
            Assertion(Permittivity<double>.BaseDimensions, Permittivity<double>.Zero);
            Assertion(Power<double>.BaseDimensions, Power<double>.Zero);
            Assertion(PowerDensity<double>.BaseDimensions, PowerDensity<double>.Zero);
            Assertion(PowerRatio<double>.BaseDimensions, PowerRatio<double>.Zero);
            Assertion(Pressure<double>.BaseDimensions, Pressure<double>.Zero);
            Assertion(PressureChangeRate<double>.BaseDimensions, PressureChangeRate<double>.Zero);
            Assertion(Ratio<double>.BaseDimensions, Ratio<double>.Zero);
            Assertion(RatioChangeRate<double>.BaseDimensions, RatioChangeRate<double>.Zero);
            Assertion(ReactiveEnergy<double>.BaseDimensions, ReactiveEnergy<double>.Zero);
            Assertion(ReactivePower<double>.BaseDimensions, ReactivePower<double>.Zero);
            Assertion(RotationalAcceleration<double>.BaseDimensions, RotationalAcceleration<double>.Zero);
            Assertion(RotationalSpeed<double>.BaseDimensions, RotationalSpeed<double>.Zero);
            Assertion(RotationalStiffness<double>.BaseDimensions, RotationalStiffness<double>.Zero);
            Assertion(RotationalStiffnessPerLength<double>.BaseDimensions, RotationalStiffnessPerLength<double>.Zero);
            Assertion(SolidAngle<double>.BaseDimensions, SolidAngle<double>.Zero);
            Assertion(SpecificEnergy<double>.BaseDimensions, SpecificEnergy<double>.Zero);
            Assertion(SpecificEntropy<double>.BaseDimensions, SpecificEntropy<double>.Zero);
            Assertion(SpecificVolume<double>.BaseDimensions, SpecificVolume<double>.Zero);
            Assertion(SpecificWeight<double>.BaseDimensions, SpecificWeight<double>.Zero);
            Assertion(Speed<double>.BaseDimensions, Speed<double>.Zero);
            Assertion(Temperature<double>.BaseDimensions, Temperature<double>.Zero);
            Assertion(TemperatureChangeRate<double>.BaseDimensions, TemperatureChangeRate<double>.Zero);
            Assertion(TemperatureDelta<double>.BaseDimensions, TemperatureDelta<double>.Zero);
            Assertion(ThermalConductivity<double>.BaseDimensions, ThermalConductivity<double>.Zero);
            Assertion(ThermalResistance<double>.BaseDimensions, ThermalResistance<double>.Zero);
            Assertion(Torque<double>.BaseDimensions, Torque<double>.Zero);
            Assertion(VitaminA<double>.BaseDimensions, VitaminA<double>.Zero);
            Assertion(Volume<double>.BaseDimensions, Volume<double>.Zero);
            Assertion(VolumeConcentration<double>.BaseDimensions, VolumeConcentration<double>.Zero);
            Assertion(VolumeFlow<double>.BaseDimensions, VolumeFlow<double>.Zero);
            Assertion(VolumePerLength<double>.BaseDimensions, VolumePerLength<double>.Zero);
        }
    }
}
