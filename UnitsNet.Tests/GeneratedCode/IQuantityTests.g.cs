//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;
using Xunit;

namespace UnitsNet.Tests
{
    public partial class IQuantityTests
    {
        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            IQuantity q;
            q = Quantity.From(3, AccelerationUnit.StandardGravity);
            Assert.Equal(AccelerationUnit.StandardGravity, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, AmountOfSubstanceUnit.PoundMole);
            Assert.Equal(AmountOfSubstanceUnit.PoundMole, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, AmplitudeRatioUnit.DecibelVolt);
            Assert.Equal(AmplitudeRatioUnit.DecibelVolt, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, AngleUnit.Revolution);
            Assert.Equal(AngleUnit.Revolution, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ApparentEnergyUnit.VoltampereHour);
            Assert.Equal(ApparentEnergyUnit.VoltampereHour, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ApparentPowerUnit.Voltampere);
            Assert.Equal(ApparentPowerUnit.Voltampere, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, AreaUnit.UsSurveySquareFoot);
            Assert.Equal(AreaUnit.UsSurveySquareFoot, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, AreaDensityUnit.KilogramPerSquareMeter);
            Assert.Equal(AreaDensityUnit.KilogramPerSquareMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, AreaMomentOfInertiaUnit.MillimeterToTheFourth);
            Assert.Equal(AreaMomentOfInertiaUnit.MillimeterToTheFourth, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, BitRateUnit.TerabytePerSecond);
            Assert.Equal(BitRateUnit.TerabytePerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour);
            Assert.Equal(BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, CapacitanceUnit.Picofarad);
            Assert.Equal(CapacitanceUnit.Picofarad, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, CoefficientOfThermalExpansionUnit.InverseKelvin);
            Assert.Equal(CoefficientOfThermalExpansionUnit.InverseKelvin, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, DensityUnit.TonnePerCubicMillimeter);
            Assert.Equal(DensityUnit.TonnePerCubicMillimeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, DurationUnit.Year365);
            Assert.Equal(DurationUnit.Year365, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, DynamicViscosityUnit.Reyn);
            Assert.Equal(DynamicViscosityUnit.Reyn, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricAdmittanceUnit.Siemens);
            Assert.Equal(ElectricAdmittanceUnit.Siemens, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricChargeUnit.Coulomb);
            Assert.Equal(ElectricChargeUnit.Coulomb, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricChargeDensityUnit.CoulombPerCubicMeter);
            Assert.Equal(ElectricChargeDensityUnit.CoulombPerCubicMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricConductanceUnit.Siemens);
            Assert.Equal(ElectricConductanceUnit.Siemens, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricConductivityUnit.SiemensPerMeter);
            Assert.Equal(ElectricConductivityUnit.SiemensPerMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricCurrentUnit.Picoampere);
            Assert.Equal(ElectricCurrentUnit.Picoampere, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricCurrentDensityUnit.AmperePerSquareMeter);
            Assert.Equal(ElectricCurrentDensityUnit.AmperePerSquareMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricCurrentGradientUnit.AmperePerSecond);
            Assert.Equal(ElectricCurrentGradientUnit.AmperePerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricFieldUnit.VoltPerMeter);
            Assert.Equal(ElectricFieldUnit.VoltPerMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricInductanceUnit.Nanohenry);
            Assert.Equal(ElectricInductanceUnit.Nanohenry, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricPotentialUnit.Volt);
            Assert.Equal(ElectricPotentialUnit.Volt, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricPotentialAcUnit.VoltAc);
            Assert.Equal(ElectricPotentialAcUnit.VoltAc, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricPotentialDcUnit.VoltDc);
            Assert.Equal(ElectricPotentialDcUnit.VoltDc, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricResistanceUnit.Ohm);
            Assert.Equal(ElectricResistanceUnit.Ohm, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricResistivityUnit.PicoohmMeter);
            Assert.Equal(ElectricResistivityUnit.PicoohmMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ElectricSurfaceChargeDensityUnit.CoulombPerSquareMeter);
            Assert.Equal(ElectricSurfaceChargeDensityUnit.CoulombPerSquareMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, EnergyUnit.WattHour);
            Assert.Equal(EnergyUnit.WattHour, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, EntropyUnit.MegajoulePerKelvin);
            Assert.Equal(EntropyUnit.MegajoulePerKelvin, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ForceUnit.TonneForce);
            Assert.Equal(ForceUnit.TonneForce, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ForceChangeRateUnit.NewtonPerSecond);
            Assert.Equal(ForceChangeRateUnit.NewtonPerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ForcePerLengthUnit.PoundForcePerYard);
            Assert.Equal(ForcePerLengthUnit.PoundForcePerYard, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, FrequencyUnit.Terahertz);
            Assert.Equal(FrequencyUnit.Terahertz, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, HeatFluxUnit.WattPerSquareMeter);
            Assert.Equal(HeatFluxUnit.WattPerSquareMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, HeatTransferCoefficientUnit.WattPerSquareMeterKelvin);
            Assert.Equal(HeatTransferCoefficientUnit.WattPerSquareMeterKelvin, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, IlluminanceUnit.Millilux);
            Assert.Equal(IlluminanceUnit.Millilux, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, InformationUnit.Terabyte);
            Assert.Equal(InformationUnit.Terabyte, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, IrradianceUnit.WattPerSquareMeter);
            Assert.Equal(IrradianceUnit.WattPerSquareMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, IrradiationUnit.WattHourPerSquareMeter);
            Assert.Equal(IrradiationUnit.WattHourPerSquareMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, KinematicViscosityUnit.Stokes);
            Assert.Equal(KinematicViscosityUnit.Stokes, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, LapseRateUnit.DegreeCelsiusPerKilometer);
            Assert.Equal(LapseRateUnit.DegreeCelsiusPerKilometer, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, LengthUnit.Yard);
            Assert.Equal(LengthUnit.Yard, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, LevelUnit.Neper);
            Assert.Equal(LevelUnit.Neper, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, LinearDensityUnit.PoundPerFoot);
            Assert.Equal(LinearDensityUnit.PoundPerFoot, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, LuminosityUnit.Watt);
            Assert.Equal(LuminosityUnit.Watt, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, LuminousFluxUnit.Lumen);
            Assert.Equal(LuminousFluxUnit.Lumen, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, LuminousIntensityUnit.Candela);
            Assert.Equal(LuminousIntensityUnit.Candela, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MagneticFieldUnit.Tesla);
            Assert.Equal(MagneticFieldUnit.Tesla, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MagneticFluxUnit.Weber);
            Assert.Equal(MagneticFluxUnit.Weber, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MagnetizationUnit.AmperePerMeter);
            Assert.Equal(MagnetizationUnit.AmperePerMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MassUnit.Tonne);
            Assert.Equal(MassUnit.Tonne, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MassConcentrationUnit.TonnePerCubicMillimeter);
            Assert.Equal(MassConcentrationUnit.TonnePerCubicMillimeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MassFlowUnit.TonnePerHour);
            Assert.Equal(MassFlowUnit.TonnePerHour, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MassFluxUnit.KilogramPerSecondPerSquareMeter);
            Assert.Equal(MassFluxUnit.KilogramPerSecondPerSquareMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MassFractionUnit.Percent);
            Assert.Equal(MassFractionUnit.Percent, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MassMomentOfInertiaUnit.TonneSquareMilimeter);
            Assert.Equal(MassMomentOfInertiaUnit.TonneSquareMilimeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MolarEnergyUnit.MegajoulePerMole);
            Assert.Equal(MolarEnergyUnit.MegajoulePerMole, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MolarEntropyUnit.MegajoulePerMoleKelvin);
            Assert.Equal(MolarEntropyUnit.MegajoulePerMoleKelvin, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MolarityUnit.PicomolesPerLiter);
            Assert.Equal(MolarityUnit.PicomolesPerLiter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, MolarMassUnit.PoundPerMole);
            Assert.Equal(MolarMassUnit.PoundPerMole, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, PermeabilityUnit.HenryPerMeter);
            Assert.Equal(PermeabilityUnit.HenryPerMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, PermittivityUnit.FaradPerMeter);
            Assert.Equal(PermittivityUnit.FaradPerMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, PowerUnit.Watt);
            Assert.Equal(PowerUnit.Watt, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, PowerDensityUnit.WattPerLiter);
            Assert.Equal(PowerDensityUnit.WattPerLiter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, PowerRatioUnit.DecibelWatt);
            Assert.Equal(PowerRatioUnit.DecibelWatt, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, PressureUnit.Torr);
            Assert.Equal(PressureUnit.Torr, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, PressureChangeRateUnit.PascalPerSecond);
            Assert.Equal(PressureChangeRateUnit.PascalPerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, RatioUnit.Percent);
            Assert.Equal(RatioUnit.Percent, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, RatioChangeRateUnit.PercentPerSecond);
            Assert.Equal(RatioChangeRateUnit.PercentPerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ReactiveEnergyUnit.VoltampereReactiveHour);
            Assert.Equal(ReactiveEnergyUnit.VoltampereReactiveHour, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ReactivePowerUnit.VoltampereReactive);
            Assert.Equal(ReactivePowerUnit.VoltampereReactive, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, RotationalAccelerationUnit.RevolutionPerSecondSquared);
            Assert.Equal(RotationalAccelerationUnit.RevolutionPerSecondSquared, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, RotationalSpeedUnit.RevolutionPerSecond);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, RotationalStiffnessUnit.NewtonMeterPerRadian);
            Assert.Equal(RotationalStiffnessUnit.NewtonMeterPerRadian, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter);
            Assert.Equal(RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, SolidAngleUnit.Steradian);
            Assert.Equal(SolidAngleUnit.Steradian, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, SpecificEnergyUnit.WattHourPerKilogram);
            Assert.Equal(SpecificEnergyUnit.WattHourPerKilogram, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, SpecificEntropyUnit.MegajoulePerKilogramKelvin);
            Assert.Equal(SpecificEntropyUnit.MegajoulePerKilogramKelvin, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, SpecificVolumeUnit.MillicubicMeterPerKilogram);
            Assert.Equal(SpecificVolumeUnit.MillicubicMeterPerKilogram, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, SpecificWeightUnit.TonneForcePerCubicMillimeter);
            Assert.Equal(SpecificWeightUnit.TonneForcePerCubicMillimeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, SpeedUnit.YardPerSecond);
            Assert.Equal(SpeedUnit.YardPerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, TemperatureUnit.SolarTemperature);
            Assert.Equal(TemperatureUnit.SolarTemperature, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond);
            Assert.Equal(TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, TemperatureDeltaUnit.Kelvin);
            Assert.Equal(TemperatureDeltaUnit.Kelvin, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ThermalConductivityUnit.WattPerMeterKelvin);
            Assert.Equal(ThermalConductivityUnit.WattPerMeterKelvin, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, ThermalResistanceUnit.SquareMeterKelvinPerKilowatt);
            Assert.Equal(ThermalResistanceUnit.SquareMeterKelvinPerKilowatt, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, TorqueUnit.TonneForceMillimeter);
            Assert.Equal(TorqueUnit.TonneForceMillimeter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, VitaminAUnit.InternationalUnit);
            Assert.Equal(VitaminAUnit.InternationalUnit, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, VolumeUnit.UsTeaspoon);
            Assert.Equal(VolumeUnit.UsTeaspoon, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, VolumeConcentrationUnit.PicolitersPerMililiter);
            Assert.Equal(VolumeConcentrationUnit.PicolitersPerMililiter, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, VolumeFlowUnit.UsGallonPerSecond);
            Assert.Equal(VolumeFlowUnit.UsGallonPerSecond, q.Unit);
            Assert.Equal(3, q.Value);

            q = Quantity.From(3, VolumePerLengthUnit.OilBarrelPerFoot);
            Assert.Equal(VolumePerLengthUnit.OilBarrelPerFoot, q.Unit);
            Assert.Equal(3, q.Value);

        }
    }
}
