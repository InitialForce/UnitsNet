//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MolarEnergy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarEnergyTestsBase : QuantityTestsBase
    {
        protected virtual double BritishThermalUnitsPerMoleInOneJoulePerMole { get; }
        protected virtual double BritishThermalUnitsPerPoundMoleInOneJoulePerMole { get; }
        protected virtual double BritishThermalUnitThermochemicalsPerMoleInOneJoulePerMole { get; }
        protected virtual double BritishThermalUnitThermochemicalsPerPoundMoleInOneJoulePerMole { get; }
        protected virtual double CaloriesPerMoleInOneJoulePerMole { get; }
        protected virtual double CalorieThermochemicalsPerMoleInOneJoulePerMole { get; }
        protected virtual double JoulesPerMoleInOneJoulePerMole { get; }
        protected virtual double KilocaloriesPerMoleInOneJoulePerMole { get; }
        protected virtual double KilocalorieThermochemicalsPerMoleInOneJoulePerMole { get; }
        protected virtual double KilojoulesPerMoleInOneJoulePerMole { get; }
        protected virtual double MegajoulesPerMoleInOneJoulePerMole { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BritishThermalUnitsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double BritishThermalUnitsPerPoundMoleTolerance { get { return 1e-5; } }
        protected virtual double BritishThermalUnitThermochemicalsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double BritishThermalUnitThermochemicalsPerPoundMoleTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerMoleTolerance { get { return 1e-5; } }
        protected virtual double CalorieThermochemicalsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilocalorieThermochemicalsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerMoleTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerMoleTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarEnergy((double)0.0, MolarEnergyUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MolarEnergy();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarEnergyUnit.JoulePerMole, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarEnergy(double.PositiveInfinity, MolarEnergyUnit.JoulePerMole));
            Assert.Throws<ArgumentException>(() => new MolarEnergy(double.NegativeInfinity, MolarEnergyUnit.JoulePerMole));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarEnergy(double.NaN, MolarEnergyUnit.JoulePerMole));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MolarEnergy(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MolarEnergy(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MolarEnergy) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MolarEnergy_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MolarEnergy(1, MolarEnergyUnit.JoulePerMole);

            QuantityInfo<MolarEnergyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MolarEnergy.Zero, quantityInfo.Zero);
            Assert.Equal("MolarEnergy", quantityInfo.Name);
            Assert.Equal(QuantityType.MolarEnergy, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<MolarEnergyUnit>().Except(new[] {MolarEnergyUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void JoulePerMoleToMolarEnergyUnits()
        {
            MolarEnergy joulepermole = MolarEnergy.FromJoulesPerMole(1);
            AssertEx.EqualTolerance(BritishThermalUnitsPerMoleInOneJoulePerMole, joulepermole.BritishThermalUnitsPerMole, BritishThermalUnitsPerMoleTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerPoundMoleInOneJoulePerMole, joulepermole.BritishThermalUnitsPerPoundMole, BritishThermalUnitsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitThermochemicalsPerMoleInOneJoulePerMole, joulepermole.BritishThermalUnitThermochemicalsPerMole, BritishThermalUnitThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitThermochemicalsPerPoundMoleInOneJoulePerMole, joulepermole.BritishThermalUnitThermochemicalsPerPoundMole, BritishThermalUnitThermochemicalsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(CaloriesPerMoleInOneJoulePerMole, joulepermole.CaloriesPerMole, CaloriesPerMoleTolerance);
            AssertEx.EqualTolerance(CalorieThermochemicalsPerMoleInOneJoulePerMole, joulepermole.CalorieThermochemicalsPerMole, CalorieThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(JoulesPerMoleInOneJoulePerMole, joulepermole.JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerMoleInOneJoulePerMole, joulepermole.KilocaloriesPerMole, KilocaloriesPerMoleTolerance);
            AssertEx.EqualTolerance(KilocalorieThermochemicalsPerMoleInOneJoulePerMole, joulepermole.KilocalorieThermochemicalsPerMole, KilocalorieThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(KilojoulesPerMoleInOneJoulePerMole, joulepermole.KilojoulesPerMole, KilojoulesPerMoleTolerance);
            AssertEx.EqualTolerance(MegajoulesPerMoleInOneJoulePerMole, joulepermole.MegajoulesPerMole, MegajoulesPerMoleTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MolarEnergy.From(1, MolarEnergyUnit.BritishThermalUnitPerMole);
            AssertEx.EqualTolerance(1, quantity00.BritishThermalUnitsPerMole, BritishThermalUnitsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitPerMole, quantity00.Unit);

            var quantity01 = MolarEnergy.From(1, MolarEnergyUnit.BritishThermalUnitPerPoundMole);
            AssertEx.EqualTolerance(1, quantity01.BritishThermalUnitsPerPoundMole, BritishThermalUnitsPerPoundMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitPerPoundMole, quantity01.Unit);

            var quantity02 = MolarEnergy.From(1, MolarEnergyUnit.BritishThermalUnitThermochemicalPerMole);
            AssertEx.EqualTolerance(1, quantity02.BritishThermalUnitThermochemicalsPerMole, BritishThermalUnitThermochemicalsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitThermochemicalPerMole, quantity02.Unit);

            var quantity03 = MolarEnergy.From(1, MolarEnergyUnit.BritishThermalUnitThermochemicalPerPoundMole);
            AssertEx.EqualTolerance(1, quantity03.BritishThermalUnitThermochemicalsPerPoundMole, BritishThermalUnitThermochemicalsPerPoundMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitThermochemicalPerPoundMole, quantity03.Unit);

            var quantity04 = MolarEnergy.From(1, MolarEnergyUnit.CaloriePerMole);
            AssertEx.EqualTolerance(1, quantity04.CaloriesPerMole, CaloriesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.CaloriePerMole, quantity04.Unit);

            var quantity05 = MolarEnergy.From(1, MolarEnergyUnit.CalorieThermochemicalPerMole);
            AssertEx.EqualTolerance(1, quantity05.CalorieThermochemicalsPerMole, CalorieThermochemicalsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.CalorieThermochemicalPerMole, quantity05.Unit);

            var quantity06 = MolarEnergy.From(1, MolarEnergyUnit.JoulePerMole);
            AssertEx.EqualTolerance(1, quantity06.JoulesPerMole, JoulesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.JoulePerMole, quantity06.Unit);

            var quantity07 = MolarEnergy.From(1, MolarEnergyUnit.KilocaloriePerMole);
            AssertEx.EqualTolerance(1, quantity07.KilocaloriesPerMole, KilocaloriesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.KilocaloriePerMole, quantity07.Unit);

            var quantity08 = MolarEnergy.From(1, MolarEnergyUnit.KilocalorieThermochemicalPerMole);
            AssertEx.EqualTolerance(1, quantity08.KilocalorieThermochemicalsPerMole, KilocalorieThermochemicalsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.KilocalorieThermochemicalPerMole, quantity08.Unit);

            var quantity09 = MolarEnergy.From(1, MolarEnergyUnit.KilojoulePerMole);
            AssertEx.EqualTolerance(1, quantity09.KilojoulesPerMole, KilojoulesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.KilojoulePerMole, quantity09.Unit);

            var quantity10 = MolarEnergy.From(1, MolarEnergyUnit.MegajoulePerMole);
            AssertEx.EqualTolerance(1, quantity10.MegajoulesPerMole, MegajoulesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.MegajoulePerMole, quantity10.Unit);

        }

        [Fact]
        public void FromJoulesPerMole_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarEnergy.FromJoulesPerMole(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MolarEnergy.FromJoulesPerMole(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoulesPerMole_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarEnergy.FromJoulesPerMole(double.NaN));
        }

        [Fact]
        public void As()
        {
            var joulepermole = MolarEnergy.FromJoulesPerMole(1);
            AssertEx.EqualTolerance(BritishThermalUnitsPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.BritishThermalUnitPerMole), BritishThermalUnitsPerMoleTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerPoundMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.BritishThermalUnitPerPoundMole), BritishThermalUnitsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitThermochemicalsPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.BritishThermalUnitThermochemicalPerMole), BritishThermalUnitThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitThermochemicalsPerPoundMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.BritishThermalUnitThermochemicalPerPoundMole), BritishThermalUnitThermochemicalsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(CaloriesPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.CaloriePerMole), CaloriesPerMoleTolerance);
            AssertEx.EqualTolerance(CalorieThermochemicalsPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.CalorieThermochemicalPerMole), CalorieThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(JoulesPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.JoulePerMole), JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.KilocaloriePerMole), KilocaloriesPerMoleTolerance);
            AssertEx.EqualTolerance(KilocalorieThermochemicalsPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.KilocalorieThermochemicalPerMole), KilocalorieThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(KilojoulesPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.KilojoulePerMole), KilojoulesPerMoleTolerance);
            AssertEx.EqualTolerance(MegajoulesPerMoleInOneJoulePerMole, joulepermole.As(MolarEnergyUnit.MegajoulePerMole), MegajoulesPerMoleTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MolarEnergy(value: 1, unit: MolarEnergy.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var joulepermole = MolarEnergy.FromJoulesPerMole(1);

            var britishthermalunitpermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.BritishThermalUnitPerMole);
            AssertEx.EqualTolerance(BritishThermalUnitsPerMoleInOneJoulePerMole, (double)britishthermalunitpermoleQuantity.Value, BritishThermalUnitsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitPerMole, britishthermalunitpermoleQuantity.Unit);

            var britishthermalunitperpoundmoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.BritishThermalUnitPerPoundMole);
            AssertEx.EqualTolerance(BritishThermalUnitsPerPoundMoleInOneJoulePerMole, (double)britishthermalunitperpoundmoleQuantity.Value, BritishThermalUnitsPerPoundMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitPerPoundMole, britishthermalunitperpoundmoleQuantity.Unit);

            var britishthermalunitthermochemicalpermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.BritishThermalUnitThermochemicalPerMole);
            AssertEx.EqualTolerance(BritishThermalUnitThermochemicalsPerMoleInOneJoulePerMole, (double)britishthermalunitthermochemicalpermoleQuantity.Value, BritishThermalUnitThermochemicalsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitThermochemicalPerMole, britishthermalunitthermochemicalpermoleQuantity.Unit);

            var britishthermalunitthermochemicalperpoundmoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.BritishThermalUnitThermochemicalPerPoundMole);
            AssertEx.EqualTolerance(BritishThermalUnitThermochemicalsPerPoundMoleInOneJoulePerMole, (double)britishthermalunitthermochemicalperpoundmoleQuantity.Value, BritishThermalUnitThermochemicalsPerPoundMoleTolerance);
            Assert.Equal(MolarEnergyUnit.BritishThermalUnitThermochemicalPerPoundMole, britishthermalunitthermochemicalperpoundmoleQuantity.Unit);

            var caloriepermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.CaloriePerMole);
            AssertEx.EqualTolerance(CaloriesPerMoleInOneJoulePerMole, (double)caloriepermoleQuantity.Value, CaloriesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.CaloriePerMole, caloriepermoleQuantity.Unit);

            var caloriethermochemicalpermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.CalorieThermochemicalPerMole);
            AssertEx.EqualTolerance(CalorieThermochemicalsPerMoleInOneJoulePerMole, (double)caloriethermochemicalpermoleQuantity.Value, CalorieThermochemicalsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.CalorieThermochemicalPerMole, caloriethermochemicalpermoleQuantity.Unit);

            var joulepermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.JoulePerMole);
            AssertEx.EqualTolerance(JoulesPerMoleInOneJoulePerMole, (double)joulepermoleQuantity.Value, JoulesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.JoulePerMole, joulepermoleQuantity.Unit);

            var kilocaloriepermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.KilocaloriePerMole);
            AssertEx.EqualTolerance(KilocaloriesPerMoleInOneJoulePerMole, (double)kilocaloriepermoleQuantity.Value, KilocaloriesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.KilocaloriePerMole, kilocaloriepermoleQuantity.Unit);

            var kilocaloriethermochemicalpermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.KilocalorieThermochemicalPerMole);
            AssertEx.EqualTolerance(KilocalorieThermochemicalsPerMoleInOneJoulePerMole, (double)kilocaloriethermochemicalpermoleQuantity.Value, KilocalorieThermochemicalsPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.KilocalorieThermochemicalPerMole, kilocaloriethermochemicalpermoleQuantity.Unit);

            var kilojoulepermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.KilojoulePerMole);
            AssertEx.EqualTolerance(KilojoulesPerMoleInOneJoulePerMole, (double)kilojoulepermoleQuantity.Value, KilojoulesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.KilojoulePerMole, kilojoulepermoleQuantity.Unit);

            var megajoulepermoleQuantity = joulepermole.ToUnit(MolarEnergyUnit.MegajoulePerMole);
            AssertEx.EqualTolerance(MegajoulesPerMoleInOneJoulePerMole, (double)megajoulepermoleQuantity.Value, MegajoulesPerMoleTolerance);
            Assert.Equal(MolarEnergyUnit.MegajoulePerMole, megajoulepermoleQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = MolarEnergy.FromJoulesPerMole(1).ToBaseUnit();
            Assert.Equal(MolarEnergy.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MolarEnergy joulepermole = MolarEnergy.FromJoulesPerMole(1);
            AssertEx.EqualTolerance(1, MolarEnergy.FromBritishThermalUnitsPerMole(joulepermole.BritishThermalUnitsPerMole).JoulesPerMole, BritishThermalUnitsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromBritishThermalUnitsPerPoundMole(joulepermole.BritishThermalUnitsPerPoundMole).JoulesPerMole, BritishThermalUnitsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromBritishThermalUnitThermochemicalsPerMole(joulepermole.BritishThermalUnitThermochemicalsPerMole).JoulesPerMole, BritishThermalUnitThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromBritishThermalUnitThermochemicalsPerPoundMole(joulepermole.BritishThermalUnitThermochemicalsPerPoundMole).JoulesPerMole, BritishThermalUnitThermochemicalsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromCaloriesPerMole(joulepermole.CaloriesPerMole).JoulesPerMole, CaloriesPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromCalorieThermochemicalsPerMole(joulepermole.CalorieThermochemicalsPerMole).JoulesPerMole, CalorieThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromJoulesPerMole(joulepermole.JoulesPerMole).JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromKilocaloriesPerMole(joulepermole.KilocaloriesPerMole).JoulesPerMole, KilocaloriesPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromKilocalorieThermochemicalsPerMole(joulepermole.KilocalorieThermochemicalsPerMole).JoulesPerMole, KilocalorieThermochemicalsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromKilojoulesPerMole(joulepermole.KilojoulesPerMole).JoulesPerMole, KilojoulesPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarEnergy.FromMegajoulesPerMole(joulepermole.MegajoulesPerMole).JoulesPerMole, MegajoulesPerMoleTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MolarEnergy v = MolarEnergy.FromJoulesPerMole(1);
            AssertEx.EqualTolerance(-1, -v.JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(2, (MolarEnergy.FromJoulesPerMole(3)-v).JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(2, (v + v).JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(10, (v*10).JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(10, (10*v).JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(2, (MolarEnergy.FromJoulesPerMole(10)/5).JoulesPerMole, JoulesPerMoleTolerance);
            AssertEx.EqualTolerance(2, MolarEnergy.FromJoulesPerMole(10)/MolarEnergy.FromJoulesPerMole(5), JoulesPerMoleTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MolarEnergy oneJoulePerMole = MolarEnergy.FromJoulesPerMole(1);
            MolarEnergy twoJoulesPerMole = MolarEnergy.FromJoulesPerMole(2);

            Assert.True(oneJoulePerMole < twoJoulesPerMole);
            Assert.True(oneJoulePerMole <= twoJoulesPerMole);
            Assert.True(twoJoulesPerMole > oneJoulePerMole);
            Assert.True(twoJoulesPerMole >= oneJoulePerMole);

            Assert.False(oneJoulePerMole > twoJoulesPerMole);
            Assert.False(oneJoulePerMole >= twoJoulesPerMole);
            Assert.False(twoJoulesPerMole < oneJoulePerMole);
            Assert.False(twoJoulesPerMole <= oneJoulePerMole);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MolarEnergy joulepermole = MolarEnergy.FromJoulesPerMole(1);
            Assert.Equal(0, joulepermole.CompareTo(joulepermole));
            Assert.True(joulepermole.CompareTo(MolarEnergy.Zero) > 0);
            Assert.True(MolarEnergy.Zero.CompareTo(joulepermole) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MolarEnergy joulepermole = MolarEnergy.FromJoulesPerMole(1);
            Assert.Throws<ArgumentException>(() => joulepermole.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MolarEnergy joulepermole = MolarEnergy.FromJoulesPerMole(1);
            Assert.Throws<ArgumentNullException>(() => joulepermole.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = MolarEnergy.FromJoulesPerMole(1);
            var b = MolarEnergy.FromJoulesPerMole(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = MolarEnergy.FromJoulesPerMole(1);
            var b = MolarEnergy.FromJoulesPerMole(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = MolarEnergy.FromJoulesPerMole(1);
            object b = MolarEnergy.FromJoulesPerMole(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MolarEnergy.FromJoulesPerMole(1);
            Assert.True(v.Equals(MolarEnergy.FromJoulesPerMole(1), JoulesPerMoleTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MolarEnergy.Zero, JoulesPerMoleTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MolarEnergy.FromJoulesPerMole(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MolarEnergy.FromJoulesPerMole(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MolarEnergy joulepermole = MolarEnergy.FromJoulesPerMole(1);
            Assert.False(joulepermole.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MolarEnergy joulepermole = MolarEnergy.FromJoulesPerMole(1);
            Assert.False(joulepermole.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MolarEnergyUnit.Undefined, MolarEnergy.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MolarEnergyUnit)).Cast<MolarEnergyUnit>();
            foreach(var unit in units)
            {
                if(unit == MolarEnergyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MolarEnergy.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 BTU/mol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitPerMole).ToString());
                Assert.Equal("1 Btu/lbmol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitPerPoundMole).ToString());
                Assert.Equal("1 Btu_th/mol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitThermochemicalPerMole).ToString());
                Assert.Equal("1 Btu_th/lbmol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitThermochemicalPerPoundMole).ToString());
                Assert.Equal("1 Cal/mol", new MolarEnergy(1, MolarEnergyUnit.CaloriePerMole).ToString());
                Assert.Equal("1 cal_th/mol", new MolarEnergy(1, MolarEnergyUnit.CalorieThermochemicalPerMole).ToString());
                Assert.Equal("1 J/mol", new MolarEnergy(1, MolarEnergyUnit.JoulePerMole).ToString());
                Assert.Equal("1 kCal/mol", new MolarEnergy(1, MolarEnergyUnit.KilocaloriePerMole).ToString());
                Assert.Equal("1 kcal_th/mol", new MolarEnergy(1, MolarEnergyUnit.KilocalorieThermochemicalPerMole).ToString());
                Assert.Equal("1 kJ/mol", new MolarEnergy(1, MolarEnergyUnit.KilojoulePerMole).ToString());
                Assert.Equal("1 MJ/mol", new MolarEnergy(1, MolarEnergyUnit.MegajoulePerMole).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 BTU/mol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitPerMole).ToString(swedishCulture));
            Assert.Equal("1 Btu/lbmol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitPerPoundMole).ToString(swedishCulture));
            Assert.Equal("1 Btu_th/mol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitThermochemicalPerMole).ToString(swedishCulture));
            Assert.Equal("1 Btu_th/lbmol", new MolarEnergy(1, MolarEnergyUnit.BritishThermalUnitThermochemicalPerPoundMole).ToString(swedishCulture));
            Assert.Equal("1 Cal/mol", new MolarEnergy(1, MolarEnergyUnit.CaloriePerMole).ToString(swedishCulture));
            Assert.Equal("1 cal_th/mol", new MolarEnergy(1, MolarEnergyUnit.CalorieThermochemicalPerMole).ToString(swedishCulture));
            Assert.Equal("1 J/mol", new MolarEnergy(1, MolarEnergyUnit.JoulePerMole).ToString(swedishCulture));
            Assert.Equal("1 kCal/mol", new MolarEnergy(1, MolarEnergyUnit.KilocaloriePerMole).ToString(swedishCulture));
            Assert.Equal("1 kcal_th/mol", new MolarEnergy(1, MolarEnergyUnit.KilocalorieThermochemicalPerMole).ToString(swedishCulture));
            Assert.Equal("1 kJ/mol", new MolarEnergy(1, MolarEnergyUnit.KilojoulePerMole).ToString(swedishCulture));
            Assert.Equal("1 MJ/mol", new MolarEnergy(1, MolarEnergyUnit.MegajoulePerMole).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s1"));
                Assert.Equal("0.12 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s2"));
                Assert.Equal("0.123 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s3"));
                Assert.Equal("0.1235 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s1", culture));
            Assert.Equal("0.12 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s2", culture));
            Assert.Equal("0.123 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s3", culture));
            Assert.Equal("0.1235 J/mol", new MolarEnergy(0.123456, MolarEnergyUnit.JoulePerMole).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MolarEnergy)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MolarEnergyUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(QuantityType.MolarEnergy, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(MolarEnergy.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(MolarEnergy.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MolarEnergy.FromJoulesPerMole(1.0);
            Assert.Equal(new {MolarEnergy.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MolarEnergy.FromJoulesPerMole(value);
            Assert.Equal(MolarEnergy.FromJoulesPerMole(-value), -quantity);
        }
    }
}
