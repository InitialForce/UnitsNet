//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricPotentialRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricPotentialRateTestsBase
    {
        protected abstract double KilovoltsPerHoursInOneVoltPerSecond { get; }
        protected abstract double KilovoltsPerMinutesInOneVoltPerSecond { get; }
        protected abstract double KilovoltsPerSecondInOneVoltPerSecond { get; }
        protected abstract double MegavoltsPerHoursInOneVoltPerSecond { get; }
        protected abstract double MegavoltsPerMinutesInOneVoltPerSecond { get; }
        protected abstract double MegavoltsPerSecondInOneVoltPerSecond { get; }
        protected abstract double MicrovoltsPerHoursInOneVoltPerSecond { get; }
        protected abstract double MicrovoltsPerMinutesInOneVoltPerSecond { get; }
        protected abstract double MicrovoltsPerSecondInOneVoltPerSecond { get; }
        protected abstract double MillivoltsPerHoursInOneVoltPerSecond { get; }
        protected abstract double MillivoltsPerMinutesInOneVoltPerSecond { get; }
        protected abstract double MillivoltsPerSecondInOneVoltPerSecond { get; }
        protected abstract double VoltsPerHoursInOneVoltPerSecond { get; }
        protected abstract double VoltsPerMinutesInOneVoltPerSecond { get; }
        protected abstract double VoltsPerSecondInOneVoltPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilovoltsPerHoursTolerance { get { return 1e-5; } }
        protected virtual double KilovoltsPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double KilovoltsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegavoltsPerHoursTolerance { get { return 1e-5; } }
        protected virtual double MegavoltsPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MegavoltsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltsPerHoursTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltsPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillivoltsPerHoursTolerance { get { return 1e-5; } }
        protected virtual double MillivoltsPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MillivoltsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double VoltsPerHoursTolerance { get { return 1e-5; } }
        protected virtual double VoltsPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double VoltsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricPotentialRate((double)0.0, ElectricPotentialRateUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricPotentialRate();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricPotentialRateUnit.VoltPerSecond, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricPotentialRate(double.PositiveInfinity, ElectricPotentialRateUnit.VoltPerSecond));
            Assert.Throws<ArgumentException>(() => new ElectricPotentialRate(double.NegativeInfinity, ElectricPotentialRateUnit.VoltPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricPotentialRate(double.NaN, ElectricPotentialRateUnit.VoltPerSecond));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricPotentialRate(value: 1.0, unitSystem: null));
        }

        [Fact]
        public void ElectricPotentialRate_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ElectricPotentialRate(1, ElectricPotentialRateUnit.VoltPerSecond);

            QuantityInfo<ElectricPotentialRateUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ElectricPotentialRate.Zero, quantityInfo.Zero);
            Assert.Equal("ElectricPotentialRate", quantityInfo.Name);
            Assert.Equal(QuantityType.ElectricPotentialRate, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<ElectricPotentialRateUnit>().Except(new[] {ElectricPotentialRateUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
#pragma warning disable 618
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
#pragma warning restore 618
        }

        [Fact]
        public void VoltPerSecondToElectricPotentialRateUnits()
        {
            ElectricPotentialRate voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            AssertEx.EqualTolerance(KilovoltsPerHoursInOneVoltPerSecond, voltpersecond.KilovoltsPerHours, KilovoltsPerHoursTolerance);
            AssertEx.EqualTolerance(KilovoltsPerMinutesInOneVoltPerSecond, voltpersecond.KilovoltsPerMinutes, KilovoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(KilovoltsPerSecondInOneVoltPerSecond, voltpersecond.KilovoltsPerSecond, KilovoltsPerSecondTolerance);
            AssertEx.EqualTolerance(MegavoltsPerHoursInOneVoltPerSecond, voltpersecond.MegavoltsPerHours, MegavoltsPerHoursTolerance);
            AssertEx.EqualTolerance(MegavoltsPerMinutesInOneVoltPerSecond, voltpersecond.MegavoltsPerMinutes, MegavoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(MegavoltsPerSecondInOneVoltPerSecond, voltpersecond.MegavoltsPerSecond, MegavoltsPerSecondTolerance);
            AssertEx.EqualTolerance(MicrovoltsPerHoursInOneVoltPerSecond, voltpersecond.MicrovoltsPerHours, MicrovoltsPerHoursTolerance);
            AssertEx.EqualTolerance(MicrovoltsPerMinutesInOneVoltPerSecond, voltpersecond.MicrovoltsPerMinutes, MicrovoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(MicrovoltsPerSecondInOneVoltPerSecond, voltpersecond.MicrovoltsPerSecond, MicrovoltsPerSecondTolerance);
            AssertEx.EqualTolerance(MillivoltsPerHoursInOneVoltPerSecond, voltpersecond.MillivoltsPerHours, MillivoltsPerHoursTolerance);
            AssertEx.EqualTolerance(MillivoltsPerMinutesInOneVoltPerSecond, voltpersecond.MillivoltsPerMinutes, MillivoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(MillivoltsPerSecondInOneVoltPerSecond, voltpersecond.MillivoltsPerSecond, MillivoltsPerSecondTolerance);
            AssertEx.EqualTolerance(VoltsPerHoursInOneVoltPerSecond, voltpersecond.VoltsPerHours, VoltsPerHoursTolerance);
            AssertEx.EqualTolerance(VoltsPerMinutesInOneVoltPerSecond, voltpersecond.VoltsPerMinutes, VoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(VoltsPerSecondInOneVoltPerSecond, voltpersecond.VoltsPerSecond, VoltsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.KilovoltPerHour);
            AssertEx.EqualTolerance(1, quantity00.KilovoltsPerHours, KilovoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.KilovoltPerHour, quantity00.Unit);

            var quantity01 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.KilovoltPerMinute);
            AssertEx.EqualTolerance(1, quantity01.KilovoltsPerMinutes, KilovoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.KilovoltPerMinute, quantity01.Unit);

            var quantity02 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.KilovoltPerSecond);
            AssertEx.EqualTolerance(1, quantity02.KilovoltsPerSecond, KilovoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.KilovoltPerSecond, quantity02.Unit);

            var quantity03 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MegavoltPerHour);
            AssertEx.EqualTolerance(1, quantity03.MegavoltsPerHours, MegavoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MegavoltPerHour, quantity03.Unit);

            var quantity04 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MegavoltPerMinute);
            AssertEx.EqualTolerance(1, quantity04.MegavoltsPerMinutes, MegavoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MegavoltPerMinute, quantity04.Unit);

            var quantity05 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MegavoltPerSecond);
            AssertEx.EqualTolerance(1, quantity05.MegavoltsPerSecond, MegavoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MegavoltPerSecond, quantity05.Unit);

            var quantity06 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MicrovoltPerHour);
            AssertEx.EqualTolerance(1, quantity06.MicrovoltsPerHours, MicrovoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MicrovoltPerHour, quantity06.Unit);

            var quantity07 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MicrovoltPerMinute);
            AssertEx.EqualTolerance(1, quantity07.MicrovoltsPerMinutes, MicrovoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MicrovoltPerMinute, quantity07.Unit);

            var quantity08 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MicrovoltPerSecond);
            AssertEx.EqualTolerance(1, quantity08.MicrovoltsPerSecond, MicrovoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MicrovoltPerSecond, quantity08.Unit);

            var quantity09 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MillivoltPerHour);
            AssertEx.EqualTolerance(1, quantity09.MillivoltsPerHours, MillivoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MillivoltPerHour, quantity09.Unit);

            var quantity10 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MillivoltPerMinute);
            AssertEx.EqualTolerance(1, quantity10.MillivoltsPerMinutes, MillivoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MillivoltPerMinute, quantity10.Unit);

            var quantity11 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.MillivoltPerSecond);
            AssertEx.EqualTolerance(1, quantity11.MillivoltsPerSecond, MillivoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MillivoltPerSecond, quantity11.Unit);

            var quantity12 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.VoltPerHour);
            AssertEx.EqualTolerance(1, quantity12.VoltsPerHours, VoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.VoltPerHour, quantity12.Unit);

            var quantity13 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.VoltPerMinute);
            AssertEx.EqualTolerance(1, quantity13.VoltsPerMinutes, VoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.VoltPerMinute, quantity13.Unit);

            var quantity14 = ElectricPotentialRate.From(1, ElectricPotentialRateUnit.VoltPerSecond);
            AssertEx.EqualTolerance(1, quantity14.VoltsPerSecond, VoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.VoltPerSecond, quantity14.Unit);

        }

        [Fact]
        public void FromVoltsPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ElectricPotentialRate.FromVoltsPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ElectricPotentialRate.FromVoltsPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromVoltsPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ElectricPotentialRate.FromVoltsPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            AssertEx.EqualTolerance(KilovoltsPerHoursInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.KilovoltPerHour), KilovoltsPerHoursTolerance);
            AssertEx.EqualTolerance(KilovoltsPerMinutesInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.KilovoltPerMinute), KilovoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(KilovoltsPerSecondInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.KilovoltPerSecond), KilovoltsPerSecondTolerance);
            AssertEx.EqualTolerance(MegavoltsPerHoursInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MegavoltPerHour), MegavoltsPerHoursTolerance);
            AssertEx.EqualTolerance(MegavoltsPerMinutesInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MegavoltPerMinute), MegavoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(MegavoltsPerSecondInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MegavoltPerSecond), MegavoltsPerSecondTolerance);
            AssertEx.EqualTolerance(MicrovoltsPerHoursInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MicrovoltPerHour), MicrovoltsPerHoursTolerance);
            AssertEx.EqualTolerance(MicrovoltsPerMinutesInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MicrovoltPerMinute), MicrovoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(MicrovoltsPerSecondInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MicrovoltPerSecond), MicrovoltsPerSecondTolerance);
            AssertEx.EqualTolerance(MillivoltsPerHoursInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MillivoltPerHour), MillivoltsPerHoursTolerance);
            AssertEx.EqualTolerance(MillivoltsPerMinutesInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MillivoltPerMinute), MillivoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(MillivoltsPerSecondInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.MillivoltPerSecond), MillivoltsPerSecondTolerance);
            AssertEx.EqualTolerance(VoltsPerHoursInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.VoltPerHour), VoltsPerHoursTolerance);
            AssertEx.EqualTolerance(VoltsPerMinutesInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.VoltPerMinute), VoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(VoltsPerSecondInOneVoltPerSecond, voltpersecond.As(ElectricPotentialRateUnit.VoltPerSecond), VoltsPerSecondTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);

            var kilovoltperhourQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.KilovoltPerHour);
            AssertEx.EqualTolerance(KilovoltsPerHoursInOneVoltPerSecond, (double)kilovoltperhourQuantity.Value, KilovoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.KilovoltPerHour, kilovoltperhourQuantity.Unit);

            var kilovoltperminuteQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.KilovoltPerMinute);
            AssertEx.EqualTolerance(KilovoltsPerMinutesInOneVoltPerSecond, (double)kilovoltperminuteQuantity.Value, KilovoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.KilovoltPerMinute, kilovoltperminuteQuantity.Unit);

            var kilovoltpersecondQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.KilovoltPerSecond);
            AssertEx.EqualTolerance(KilovoltsPerSecondInOneVoltPerSecond, (double)kilovoltpersecondQuantity.Value, KilovoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.KilovoltPerSecond, kilovoltpersecondQuantity.Unit);

            var megavoltperhourQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MegavoltPerHour);
            AssertEx.EqualTolerance(MegavoltsPerHoursInOneVoltPerSecond, (double)megavoltperhourQuantity.Value, MegavoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MegavoltPerHour, megavoltperhourQuantity.Unit);

            var megavoltperminuteQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MegavoltPerMinute);
            AssertEx.EqualTolerance(MegavoltsPerMinutesInOneVoltPerSecond, (double)megavoltperminuteQuantity.Value, MegavoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MegavoltPerMinute, megavoltperminuteQuantity.Unit);

            var megavoltpersecondQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MegavoltPerSecond);
            AssertEx.EqualTolerance(MegavoltsPerSecondInOneVoltPerSecond, (double)megavoltpersecondQuantity.Value, MegavoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MegavoltPerSecond, megavoltpersecondQuantity.Unit);

            var microvoltperhourQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MicrovoltPerHour);
            AssertEx.EqualTolerance(MicrovoltsPerHoursInOneVoltPerSecond, (double)microvoltperhourQuantity.Value, MicrovoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MicrovoltPerHour, microvoltperhourQuantity.Unit);

            var microvoltperminuteQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MicrovoltPerMinute);
            AssertEx.EqualTolerance(MicrovoltsPerMinutesInOneVoltPerSecond, (double)microvoltperminuteQuantity.Value, MicrovoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MicrovoltPerMinute, microvoltperminuteQuantity.Unit);

            var microvoltpersecondQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MicrovoltPerSecond);
            AssertEx.EqualTolerance(MicrovoltsPerSecondInOneVoltPerSecond, (double)microvoltpersecondQuantity.Value, MicrovoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MicrovoltPerSecond, microvoltpersecondQuantity.Unit);

            var millivoltperhourQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MillivoltPerHour);
            AssertEx.EqualTolerance(MillivoltsPerHoursInOneVoltPerSecond, (double)millivoltperhourQuantity.Value, MillivoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MillivoltPerHour, millivoltperhourQuantity.Unit);

            var millivoltperminuteQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MillivoltPerMinute);
            AssertEx.EqualTolerance(MillivoltsPerMinutesInOneVoltPerSecond, (double)millivoltperminuteQuantity.Value, MillivoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MillivoltPerMinute, millivoltperminuteQuantity.Unit);

            var millivoltpersecondQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.MillivoltPerSecond);
            AssertEx.EqualTolerance(MillivoltsPerSecondInOneVoltPerSecond, (double)millivoltpersecondQuantity.Value, MillivoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.MillivoltPerSecond, millivoltpersecondQuantity.Unit);

            var voltperhourQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.VoltPerHour);
            AssertEx.EqualTolerance(VoltsPerHoursInOneVoltPerSecond, (double)voltperhourQuantity.Value, VoltsPerHoursTolerance);
            Assert.Equal(ElectricPotentialRateUnit.VoltPerHour, voltperhourQuantity.Unit);

            var voltperminuteQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.VoltPerMinute);
            AssertEx.EqualTolerance(VoltsPerMinutesInOneVoltPerSecond, (double)voltperminuteQuantity.Value, VoltsPerMinutesTolerance);
            Assert.Equal(ElectricPotentialRateUnit.VoltPerMinute, voltperminuteQuantity.Unit);

            var voltpersecondQuantity = voltpersecond.ToUnit(ElectricPotentialRateUnit.VoltPerSecond);
            AssertEx.EqualTolerance(VoltsPerSecondInOneVoltPerSecond, (double)voltpersecondQuantity.Value, VoltsPerSecondTolerance);
            Assert.Equal(ElectricPotentialRateUnit.VoltPerSecond, voltpersecondQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricPotentialRate voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromKilovoltsPerHours(voltpersecond.KilovoltsPerHours).VoltsPerSecond, KilovoltsPerHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromKilovoltsPerMinutes(voltpersecond.KilovoltsPerMinutes).VoltsPerSecond, KilovoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromKilovoltsPerSecond(voltpersecond.KilovoltsPerSecond).VoltsPerSecond, KilovoltsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMegavoltsPerHours(voltpersecond.MegavoltsPerHours).VoltsPerSecond, MegavoltsPerHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMegavoltsPerMinutes(voltpersecond.MegavoltsPerMinutes).VoltsPerSecond, MegavoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMegavoltsPerSecond(voltpersecond.MegavoltsPerSecond).VoltsPerSecond, MegavoltsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMicrovoltsPerHours(voltpersecond.MicrovoltsPerHours).VoltsPerSecond, MicrovoltsPerHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMicrovoltsPerMinutes(voltpersecond.MicrovoltsPerMinutes).VoltsPerSecond, MicrovoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMicrovoltsPerSecond(voltpersecond.MicrovoltsPerSecond).VoltsPerSecond, MicrovoltsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMillivoltsPerHours(voltpersecond.MillivoltsPerHours).VoltsPerSecond, MillivoltsPerHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMillivoltsPerMinutes(voltpersecond.MillivoltsPerMinutes).VoltsPerSecond, MillivoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromMillivoltsPerSecond(voltpersecond.MillivoltsPerSecond).VoltsPerSecond, MillivoltsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromVoltsPerHours(voltpersecond.VoltsPerHours).VoltsPerSecond, VoltsPerHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromVoltsPerMinutes(voltpersecond.VoltsPerMinutes).VoltsPerSecond, VoltsPerMinutesTolerance);
            AssertEx.EqualTolerance(1, ElectricPotentialRate.FromVoltsPerSecond(voltpersecond.VoltsPerSecond).VoltsPerSecond, VoltsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricPotentialRate v = ElectricPotentialRate.FromVoltsPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.VoltsPerSecond, VoltsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (ElectricPotentialRate.FromVoltsPerSecond(3)-v).VoltsPerSecond, VoltsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).VoltsPerSecond, VoltsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).VoltsPerSecond, VoltsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).VoltsPerSecond, VoltsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (ElectricPotentialRate.FromVoltsPerSecond(10)/5).VoltsPerSecond, VoltsPerSecondTolerance);
            AssertEx.EqualTolerance(2, ElectricPotentialRate.FromVoltsPerSecond(10)/ElectricPotentialRate.FromVoltsPerSecond(5), VoltsPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricPotentialRate oneVoltPerSecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            ElectricPotentialRate twoVoltsPerSecond = ElectricPotentialRate.FromVoltsPerSecond(2);

            Assert.True(oneVoltPerSecond < twoVoltsPerSecond);
            Assert.True(oneVoltPerSecond <= twoVoltsPerSecond);
            Assert.True(twoVoltsPerSecond > oneVoltPerSecond);
            Assert.True(twoVoltsPerSecond >= oneVoltPerSecond);

            Assert.False(oneVoltPerSecond > twoVoltsPerSecond);
            Assert.False(oneVoltPerSecond >= twoVoltsPerSecond);
            Assert.False(twoVoltsPerSecond < oneVoltPerSecond);
            Assert.False(twoVoltsPerSecond <= oneVoltPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricPotentialRate voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            Assert.Equal(0, voltpersecond.CompareTo(voltpersecond));
            Assert.True(voltpersecond.CompareTo(ElectricPotentialRate.Zero) > 0);
            Assert.True(ElectricPotentialRate.Zero.CompareTo(voltpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricPotentialRate voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            Assert.Throws<ArgumentException>(() => voltpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricPotentialRate voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => voltpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ElectricPotentialRate.FromVoltsPerSecond(1);
            var b = ElectricPotentialRate.FromVoltsPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = ElectricPotentialRate.FromVoltsPerSecond(1);
            var b = ElectricPotentialRate.FromVoltsPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = ElectricPotentialRate.FromVoltsPerSecond(1);
            Assert.True(v.Equals(ElectricPotentialRate.FromVoltsPerSecond(1), VoltsPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ElectricPotentialRate.Zero, VoltsPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricPotentialRate voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            Assert.False(voltpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricPotentialRate voltpersecond = ElectricPotentialRate.FromVoltsPerSecond(1);
            Assert.False(voltpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ElectricPotentialRateUnit.Undefined, ElectricPotentialRate.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ElectricPotentialRateUnit)).Cast<ElectricPotentialRateUnit>();
            foreach(var unit in units)
            {
                if(unit == ElectricPotentialRateUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricPotentialRate.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.KilovoltPerHour).ToString());
                Assert.Equal("1 kV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.KilovoltPerMinute).ToString());
                Assert.Equal("1 kV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.KilovoltPerSecond).ToString());
                Assert.Equal("1 MV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MegavoltPerHour).ToString());
                Assert.Equal("1 MV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MegavoltPerMinute).ToString());
                Assert.Equal("1 MV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MegavoltPerSecond).ToString());
                Assert.Equal("1 µV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MicrovoltPerHour).ToString());
                Assert.Equal("1 µV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MicrovoltPerMinute).ToString());
                Assert.Equal("1 µV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MicrovoltPerSecond).ToString());
                Assert.Equal("1 mV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MillivoltPerHour).ToString());
                Assert.Equal("1 mV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MillivoltPerMinute).ToString());
                Assert.Equal("1 mV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MillivoltPerSecond).ToString());
                Assert.Equal("1 V/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.VoltPerHour).ToString());
                Assert.Equal("1 V/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.VoltPerMinute).ToString());
                Assert.Equal("1 V/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.VoltPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.KilovoltPerHour).ToString(swedishCulture));
            Assert.Equal("1 kV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.KilovoltPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.KilovoltPerSecond).ToString(swedishCulture));
            Assert.Equal("1 MV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MegavoltPerHour).ToString(swedishCulture));
            Assert.Equal("1 MV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MegavoltPerMinute).ToString(swedishCulture));
            Assert.Equal("1 MV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MegavoltPerSecond).ToString(swedishCulture));
            Assert.Equal("1 µV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MicrovoltPerHour).ToString(swedishCulture));
            Assert.Equal("1 µV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MicrovoltPerMinute).ToString(swedishCulture));
            Assert.Equal("1 µV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MicrovoltPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mV/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MillivoltPerHour).ToString(swedishCulture));
            Assert.Equal("1 mV/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MillivoltPerMinute).ToString(swedishCulture));
            Assert.Equal("1 mV/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.MillivoltPerSecond).ToString(swedishCulture));
            Assert.Equal("1 V/h", new ElectricPotentialRate(1, ElectricPotentialRateUnit.VoltPerHour).ToString(swedishCulture));
            Assert.Equal("1 V/min", new ElectricPotentialRate(1, ElectricPotentialRateUnit.VoltPerMinute).ToString(swedishCulture));
            Assert.Equal("1 V/s", new ElectricPotentialRate(1, ElectricPotentialRateUnit.VoltPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s1"));
                Assert.Equal("0.12 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s2"));
                Assert.Equal("0.123 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s3"));
                Assert.Equal("0.1235 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 V/s", new ElectricPotentialRate(0.123456, ElectricPotentialRateUnit.VoltPerSecond).ToString("s4", culture));
        }
    }
}
