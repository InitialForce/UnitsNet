//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Permeability.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PermeabilityTestsBase : QuantityTestsBase
    {
        protected virtual double DarciesInOneHenryPerMeter { get; }
        protected virtual double HenriesPerMeterInOneHenryPerMeter { get; }
        protected virtual double MicrodarciesInOneHenryPerMeter { get; }
        protected virtual double MillidarciesInOneHenryPerMeter { get; }
        protected virtual double NanodarciesInOneHenryPerMeter { get; }
        protected virtual double SquareMetersInOneHenryPerMeter { get; }
        protected virtual double SquareMicrometersInOneHenryPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DarciesTolerance { get { return 1e-5; } }
        protected virtual double HenriesPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrodarciesTolerance { get { return 1e-5; } }
        protected virtual double MillidarciesTolerance { get { return 1e-5; } }
        protected virtual double NanodarciesTolerance { get { return 1e-5; } }
        protected virtual double SquareMetersTolerance { get { return 1e-5; } }
        protected virtual double SquareMicrometersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Permeability((double)0.0, PermeabilityUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Permeability();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PermeabilityUnit.HenryPerMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Permeability(double.PositiveInfinity, PermeabilityUnit.HenryPerMeter));
            Assert.Throws<ArgumentException>(() => new Permeability(double.NegativeInfinity, PermeabilityUnit.HenryPerMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Permeability(double.NaN, PermeabilityUnit.HenryPerMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Permeability(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Permeability(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Permeability) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Permeability_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Permeability(1, PermeabilityUnit.HenryPerMeter);

            QuantityInfo<PermeabilityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Permeability.Zero, quantityInfo.Zero);
            Assert.Equal("Permeability", quantityInfo.Name);
            Assert.Equal(QuantityType.Permeability, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<PermeabilityUnit>().Except(new[] {PermeabilityUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void HenryPerMeterToPermeabilityUnits()
        {
            Permeability henrypermeter = Permeability.FromHenriesPerMeter(1);
            AssertEx.EqualTolerance(DarciesInOneHenryPerMeter, henrypermeter.Darcies, DarciesTolerance);
            AssertEx.EqualTolerance(HenriesPerMeterInOneHenryPerMeter, henrypermeter.HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(MicrodarciesInOneHenryPerMeter, henrypermeter.Microdarcies, MicrodarciesTolerance);
            AssertEx.EqualTolerance(MillidarciesInOneHenryPerMeter, henrypermeter.Millidarcies, MillidarciesTolerance);
            AssertEx.EqualTolerance(NanodarciesInOneHenryPerMeter, henrypermeter.Nanodarcies, NanodarciesTolerance);
            AssertEx.EqualTolerance(SquareMetersInOneHenryPerMeter, henrypermeter.SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(SquareMicrometersInOneHenryPerMeter, henrypermeter.SquareMicrometers, SquareMicrometersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Permeability.From(1, PermeabilityUnit.Darcy);
            AssertEx.EqualTolerance(1, quantity00.Darcies, DarciesTolerance);
            Assert.Equal(PermeabilityUnit.Darcy, quantity00.Unit);

            var quantity01 = Permeability.From(1, PermeabilityUnit.HenryPerMeter);
            AssertEx.EqualTolerance(1, quantity01.HenriesPerMeter, HenriesPerMeterTolerance);
            Assert.Equal(PermeabilityUnit.HenryPerMeter, quantity01.Unit);

            var quantity02 = Permeability.From(1, PermeabilityUnit.Microdarcy);
            AssertEx.EqualTolerance(1, quantity02.Microdarcies, MicrodarciesTolerance);
            Assert.Equal(PermeabilityUnit.Microdarcy, quantity02.Unit);

            var quantity03 = Permeability.From(1, PermeabilityUnit.Millidarcy);
            AssertEx.EqualTolerance(1, quantity03.Millidarcies, MillidarciesTolerance);
            Assert.Equal(PermeabilityUnit.Millidarcy, quantity03.Unit);

            var quantity04 = Permeability.From(1, PermeabilityUnit.Nanodarcy);
            AssertEx.EqualTolerance(1, quantity04.Nanodarcies, NanodarciesTolerance);
            Assert.Equal(PermeabilityUnit.Nanodarcy, quantity04.Unit);

            var quantity05 = Permeability.From(1, PermeabilityUnit.SquareMeter);
            AssertEx.EqualTolerance(1, quantity05.SquareMeters, SquareMetersTolerance);
            Assert.Equal(PermeabilityUnit.SquareMeter, quantity05.Unit);

            var quantity06 = Permeability.From(1, PermeabilityUnit.SquareMicrometer);
            AssertEx.EqualTolerance(1, quantity06.SquareMicrometers, SquareMicrometersTolerance);
            Assert.Equal(PermeabilityUnit.SquareMicrometer, quantity06.Unit);

        }

        [Fact]
        public void FromHenriesPerMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Permeability.FromHenriesPerMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Permeability.FromHenriesPerMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromHenriesPerMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Permeability.FromHenriesPerMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var henrypermeter = Permeability.FromHenriesPerMeter(1);
            AssertEx.EqualTolerance(DarciesInOneHenryPerMeter, henrypermeter.As(PermeabilityUnit.Darcy), DarciesTolerance);
            AssertEx.EqualTolerance(HenriesPerMeterInOneHenryPerMeter, henrypermeter.As(PermeabilityUnit.HenryPerMeter), HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(MicrodarciesInOneHenryPerMeter, henrypermeter.As(PermeabilityUnit.Microdarcy), MicrodarciesTolerance);
            AssertEx.EqualTolerance(MillidarciesInOneHenryPerMeter, henrypermeter.As(PermeabilityUnit.Millidarcy), MillidarciesTolerance);
            AssertEx.EqualTolerance(NanodarciesInOneHenryPerMeter, henrypermeter.As(PermeabilityUnit.Nanodarcy), NanodarciesTolerance);
            AssertEx.EqualTolerance(SquareMetersInOneHenryPerMeter, henrypermeter.As(PermeabilityUnit.SquareMeter), SquareMetersTolerance);
            AssertEx.EqualTolerance(SquareMicrometersInOneHenryPerMeter, henrypermeter.As(PermeabilityUnit.SquareMicrometer), SquareMicrometersTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Permeability(value: 1, unit: Permeability.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var henrypermeter = Permeability.FromHenriesPerMeter(1);

            var darcyQuantity = henrypermeter.ToUnit(PermeabilityUnit.Darcy);
            AssertEx.EqualTolerance(DarciesInOneHenryPerMeter, (double)darcyQuantity.Value, DarciesTolerance);
            Assert.Equal(PermeabilityUnit.Darcy, darcyQuantity.Unit);

            var henrypermeterQuantity = henrypermeter.ToUnit(PermeabilityUnit.HenryPerMeter);
            AssertEx.EqualTolerance(HenriesPerMeterInOneHenryPerMeter, (double)henrypermeterQuantity.Value, HenriesPerMeterTolerance);
            Assert.Equal(PermeabilityUnit.HenryPerMeter, henrypermeterQuantity.Unit);

            var microdarcyQuantity = henrypermeter.ToUnit(PermeabilityUnit.Microdarcy);
            AssertEx.EqualTolerance(MicrodarciesInOneHenryPerMeter, (double)microdarcyQuantity.Value, MicrodarciesTolerance);
            Assert.Equal(PermeabilityUnit.Microdarcy, microdarcyQuantity.Unit);

            var millidarcyQuantity = henrypermeter.ToUnit(PermeabilityUnit.Millidarcy);
            AssertEx.EqualTolerance(MillidarciesInOneHenryPerMeter, (double)millidarcyQuantity.Value, MillidarciesTolerance);
            Assert.Equal(PermeabilityUnit.Millidarcy, millidarcyQuantity.Unit);

            var nanodarcyQuantity = henrypermeter.ToUnit(PermeabilityUnit.Nanodarcy);
            AssertEx.EqualTolerance(NanodarciesInOneHenryPerMeter, (double)nanodarcyQuantity.Value, NanodarciesTolerance);
            Assert.Equal(PermeabilityUnit.Nanodarcy, nanodarcyQuantity.Unit);

            var squaremeterQuantity = henrypermeter.ToUnit(PermeabilityUnit.SquareMeter);
            AssertEx.EqualTolerance(SquareMetersInOneHenryPerMeter, (double)squaremeterQuantity.Value, SquareMetersTolerance);
            Assert.Equal(PermeabilityUnit.SquareMeter, squaremeterQuantity.Unit);

            var squaremicrometerQuantity = henrypermeter.ToUnit(PermeabilityUnit.SquareMicrometer);
            AssertEx.EqualTolerance(SquareMicrometersInOneHenryPerMeter, (double)squaremicrometerQuantity.Value, SquareMicrometersTolerance);
            Assert.Equal(PermeabilityUnit.SquareMicrometer, squaremicrometerQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = Permeability.FromHenriesPerMeter(1).ToBaseUnit();
            Assert.Equal(Permeability.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Permeability henrypermeter = Permeability.FromHenriesPerMeter(1);
            AssertEx.EqualTolerance(1, Permeability.FromDarcies(henrypermeter.Darcies).HenriesPerMeter, DarciesTolerance);
            AssertEx.EqualTolerance(1, Permeability.FromHenriesPerMeter(henrypermeter.HenriesPerMeter).HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(1, Permeability.FromMicrodarcies(henrypermeter.Microdarcies).HenriesPerMeter, MicrodarciesTolerance);
            AssertEx.EqualTolerance(1, Permeability.FromMillidarcies(henrypermeter.Millidarcies).HenriesPerMeter, MillidarciesTolerance);
            AssertEx.EqualTolerance(1, Permeability.FromNanodarcies(henrypermeter.Nanodarcies).HenriesPerMeter, NanodarciesTolerance);
            AssertEx.EqualTolerance(1, Permeability.FromSquareMeters(henrypermeter.SquareMeters).HenriesPerMeter, SquareMetersTolerance);
            AssertEx.EqualTolerance(1, Permeability.FromSquareMicrometers(henrypermeter.SquareMicrometers).HenriesPerMeter, SquareMicrometersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Permeability v = Permeability.FromHenriesPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(2, (Permeability.FromHenriesPerMeter(3)-v).HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(2, (Permeability.FromHenriesPerMeter(10)/5).HenriesPerMeter, HenriesPerMeterTolerance);
            AssertEx.EqualTolerance(2, Permeability.FromHenriesPerMeter(10)/Permeability.FromHenriesPerMeter(5), HenriesPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Permeability oneHenryPerMeter = Permeability.FromHenriesPerMeter(1);
            Permeability twoHenriesPerMeter = Permeability.FromHenriesPerMeter(2);

            Assert.True(oneHenryPerMeter < twoHenriesPerMeter);
            Assert.True(oneHenryPerMeter <= twoHenriesPerMeter);
            Assert.True(twoHenriesPerMeter > oneHenryPerMeter);
            Assert.True(twoHenriesPerMeter >= oneHenryPerMeter);

            Assert.False(oneHenryPerMeter > twoHenriesPerMeter);
            Assert.False(oneHenryPerMeter >= twoHenriesPerMeter);
            Assert.False(twoHenriesPerMeter < oneHenryPerMeter);
            Assert.False(twoHenriesPerMeter <= oneHenryPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Permeability henrypermeter = Permeability.FromHenriesPerMeter(1);
            Assert.Equal(0, henrypermeter.CompareTo(henrypermeter));
            Assert.True(henrypermeter.CompareTo(Permeability.Zero) > 0);
            Assert.True(Permeability.Zero.CompareTo(henrypermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Permeability henrypermeter = Permeability.FromHenriesPerMeter(1);
            Assert.Throws<ArgumentException>(() => henrypermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Permeability henrypermeter = Permeability.FromHenriesPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => henrypermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Permeability.FromHenriesPerMeter(1);
            var b = Permeability.FromHenriesPerMeter(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Permeability.FromHenriesPerMeter(1);
            var b = Permeability.FromHenriesPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Permeability.FromHenriesPerMeter(1);
            object b = Permeability.FromHenriesPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Permeability.FromHenriesPerMeter(1);
            Assert.True(v.Equals(Permeability.FromHenriesPerMeter(1), HenriesPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Permeability.Zero, HenriesPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Permeability.FromHenriesPerMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Permeability.FromHenriesPerMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Permeability henrypermeter = Permeability.FromHenriesPerMeter(1);
            Assert.False(henrypermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Permeability henrypermeter = Permeability.FromHenriesPerMeter(1);
            Assert.False(henrypermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(PermeabilityUnit.Undefined, Permeability.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PermeabilityUnit)).Cast<PermeabilityUnit>();
            foreach(var unit in units)
            {
                if(unit == PermeabilityUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Permeability.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 D", new Permeability(1, PermeabilityUnit.Darcy).ToString());
                Assert.Equal("1 H/m", new Permeability(1, PermeabilityUnit.HenryPerMeter).ToString());
                Assert.Equal("1 uD", new Permeability(1, PermeabilityUnit.Microdarcy).ToString());
                Assert.Equal("1 MDARCY", new Permeability(1, PermeabilityUnit.Millidarcy).ToString());
                Assert.Equal("1 nD", new Permeability(1, PermeabilityUnit.Nanodarcy).ToString());
                Assert.Equal("1 m2", new Permeability(1, PermeabilityUnit.SquareMeter).ToString());
                Assert.Equal("1 µm2", new Permeability(1, PermeabilityUnit.SquareMicrometer).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 D", new Permeability(1, PermeabilityUnit.Darcy).ToString(swedishCulture));
            Assert.Equal("1 H/m", new Permeability(1, PermeabilityUnit.HenryPerMeter).ToString(swedishCulture));
            Assert.Equal("1 uD", new Permeability(1, PermeabilityUnit.Microdarcy).ToString(swedishCulture));
            Assert.Equal("1 MDARCY", new Permeability(1, PermeabilityUnit.Millidarcy).ToString(swedishCulture));
            Assert.Equal("1 nD", new Permeability(1, PermeabilityUnit.Nanodarcy).ToString(swedishCulture));
            Assert.Equal("1 m2", new Permeability(1, PermeabilityUnit.SquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µm2", new Permeability(1, PermeabilityUnit.SquareMicrometer).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s1"));
                Assert.Equal("0.12 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s2"));
                Assert.Equal("0.123 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s3"));
                Assert.Equal("0.1235 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 H/m", new Permeability(0.123456, PermeabilityUnit.HenryPerMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Permeability)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(PermeabilityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(QuantityType.Permeability, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(Permeability.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(Permeability.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Permeability.FromHenriesPerMeter(1.0);
            Assert.Equal(new {Permeability.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Permeability.FromHenriesPerMeter(value);
            Assert.Equal(Permeability.FromHenriesPerMeter(-value), -quantity);
        }
    }
}
