//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricConductancePerArea.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricConductancePerAreaTestsBase : QuantityTestsBase
    {
        protected abstract double FemtosiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double KilosiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double MegasiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double MicrosiemensPerSquareCentimetersInOneSiemensPerSquareMeter { get; }
        protected abstract double MicrosiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double MillisiemensPerSquareCentimetersInOneSiemensPerSquareMeter { get; }
        protected abstract double MillisiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double NanosiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double PicosiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareCentimetersInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareDecimetersInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareFeetInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareInchesInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareMeterInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareMilesInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareMillimetersInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerSquareYardsInOneSiemensPerSquareMeter { get; }
        protected abstract double SiemensPerUsSurveySquareFeetInOneSiemensPerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double FemtosiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double PicosiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareFeetTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareInchesTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareMilesTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerSquareYardsTolerance { get { return 1e-5; } }
        protected virtual double SiemensPerUsSurveySquareFeetTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricConductancePerAreaUnit unit)
        {
            return unit switch
            {
                ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter => (FemtosiemensPerSquareMeterInOneSiemensPerSquareMeter, FemtosiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter => (KilosiemensPerSquareMeterInOneSiemensPerSquareMeter, KilosiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter => (MegasiemensPerSquareMeterInOneSiemensPerSquareMeter, MegasiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter => (MicrosiemensPerSquareCentimetersInOneSiemensPerSquareMeter, MicrosiemensPerSquareCentimetersTolerance),
                ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter => (MicrosiemensPerSquareMeterInOneSiemensPerSquareMeter, MicrosiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter => (MillisiemensPerSquareCentimetersInOneSiemensPerSquareMeter, MillisiemensPerSquareCentimetersTolerance),
                ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter => (MillisiemensPerSquareMeterInOneSiemensPerSquareMeter, MillisiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter => (NanosiemensPerSquareMeterInOneSiemensPerSquareMeter, NanosiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter => (PicosiemensPerSquareMeterInOneSiemensPerSquareMeter, PicosiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter => (SiemensPerSquareCentimetersInOneSiemensPerSquareMeter, SiemensPerSquareCentimetersTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter => (SiemensPerSquareDecimetersInOneSiemensPerSquareMeter, SiemensPerSquareDecimetersTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareFoot => (SiemensPerSquareFeetInOneSiemensPerSquareMeter, SiemensPerSquareFeetTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareInch => (SiemensPerSquareInchesInOneSiemensPerSquareMeter, SiemensPerSquareInchesTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareMeter => (SiemensPerSquareMeterInOneSiemensPerSquareMeter, SiemensPerSquareMeterTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareMile => (SiemensPerSquareMilesInOneSiemensPerSquareMeter, SiemensPerSquareMilesTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter => (SiemensPerSquareMillimetersInOneSiemensPerSquareMeter, SiemensPerSquareMillimetersTolerance),
                ElectricConductancePerAreaUnit.SiemensPerSquareYard => (SiemensPerSquareYardsInOneSiemensPerSquareMeter, SiemensPerSquareYardsTolerance),
                ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot => (SiemensPerUsSurveySquareFeetInOneSiemensPerSquareMeter, SiemensPerUsSurveySquareFeetTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter },
            new object[] { ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter },
            new object[] { ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareFoot },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareInch },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareMeter },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareMile },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerSquareYard },
            new object[] { ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricConductancePerArea();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricConductancePerArea(double.PositiveInfinity, ElectricConductancePerAreaUnit.SiemensPerSquareMeter));
            Assert.Throws<ArgumentException>(() => new ElectricConductancePerArea(double.NegativeInfinity, ElectricConductancePerAreaUnit.SiemensPerSquareMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricConductancePerArea(double.NaN, ElectricConductancePerAreaUnit.SiemensPerSquareMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricConductancePerArea(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new ElectricConductancePerArea(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (ElectricConductancePerArea) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void ElectricConductancePerArea_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter);

            QuantityInfo<ElectricConductancePerAreaUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ElectricConductancePerArea.Zero, quantityInfo.Zero);
            Assert.Equal("ElectricConductancePerArea", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<ElectricConductancePerAreaUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void SiemensPerSquareMeterToElectricConductancePerAreaUnits()
        {
            ElectricConductancePerArea siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            AssertEx.EqualTolerance(FemtosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.FemtosiemensPerSquareMeter, FemtosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.KilosiemensPerSquareMeter, KilosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegasiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.MegasiemensPerSquareMeter, MegasiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerSquareCentimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.MicrosiemensPerSquareCentimeters, MicrosiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.MicrosiemensPerSquareMeter, MicrosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MillisiemensPerSquareCentimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.MillisiemensPerSquareCentimeters, MillisiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MillisiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.MillisiemensPerSquareMeter, MillisiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.NanosiemensPerSquareMeter, NanosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.PicosiemensPerSquareMeter, PicosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareCentimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareCentimeters, SiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareDecimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareDecimeters, SiemensPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareFeetInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareFeet, SiemensPerSquareFeetTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareInchesInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareInches, SiemensPerSquareInchesTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareMilesInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareMiles, SiemensPerSquareMilesTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareMillimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareMillimeters, SiemensPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareYardsInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerSquareYards, SiemensPerSquareYardsTolerance);
            AssertEx.EqualTolerance(SiemensPerUsSurveySquareFeetInOneSiemensPerSquareMeter, siemenspersquaremeter.SiemensPerUsSurveySquareFeet, SiemensPerUsSurveySquareFeetTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity00.FemtosiemensPerSquareMeter, FemtosiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter, quantity00.Unit);

            var quantity01 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity01.KilosiemensPerSquareMeter, KilosiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter, quantity01.Unit);

            var quantity02 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity02.MegasiemensPerSquareMeter, MegasiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter, quantity02.Unit);

            var quantity03 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity03.MicrosiemensPerSquareCentimeters, MicrosiemensPerSquareCentimetersTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter, quantity03.Unit);

            var quantity04 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity04.MicrosiemensPerSquareMeter, MicrosiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter, quantity04.Unit);

            var quantity05 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity05.MillisiemensPerSquareCentimeters, MillisiemensPerSquareCentimetersTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter, quantity05.Unit);

            var quantity06 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity06.MillisiemensPerSquareMeter, MillisiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter, quantity06.Unit);

            var quantity07 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity07.NanosiemensPerSquareMeter, NanosiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter, quantity07.Unit);

            var quantity08 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity08.PicosiemensPerSquareMeter, PicosiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter, quantity08.Unit);

            var quantity09 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity09.SiemensPerSquareCentimeters, SiemensPerSquareCentimetersTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter, quantity09.Unit);

            var quantity10 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter);
            AssertEx.EqualTolerance(1, quantity10.SiemensPerSquareDecimeters, SiemensPerSquareDecimetersTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter, quantity10.Unit);

            var quantity11 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareFoot);
            AssertEx.EqualTolerance(1, quantity11.SiemensPerSquareFeet, SiemensPerSquareFeetTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareFoot, quantity11.Unit);

            var quantity12 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareInch);
            AssertEx.EqualTolerance(1, quantity12.SiemensPerSquareInches, SiemensPerSquareInchesTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareInch, quantity12.Unit);

            var quantity13 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity13.SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMeter, quantity13.Unit);

            var quantity14 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareMile);
            AssertEx.EqualTolerance(1, quantity14.SiemensPerSquareMiles, SiemensPerSquareMilesTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMile, quantity14.Unit);

            var quantity15 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity15.SiemensPerSquareMillimeters, SiemensPerSquareMillimetersTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter, quantity15.Unit);

            var quantity16 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerSquareYard);
            AssertEx.EqualTolerance(1, quantity16.SiemensPerSquareYards, SiemensPerSquareYardsTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareYard, quantity16.Unit);

            var quantity17 = ElectricConductancePerArea.From(1, ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot);
            AssertEx.EqualTolerance(1, quantity17.SiemensPerUsSurveySquareFeet, SiemensPerUsSurveySquareFeetTolerance);
            Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot, quantity17.Unit);

        }

        [Fact]
        public void FromSiemensPerSquareMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ElectricConductancePerArea.FromSiemensPerSquareMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ElectricConductancePerArea.FromSiemensPerSquareMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromSiemensPerSquareMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ElectricConductancePerArea.FromSiemensPerSquareMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            AssertEx.EqualTolerance(FemtosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter), FemtosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter), KilosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegasiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter), MegasiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerSquareCentimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter), MicrosiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter), MicrosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MillisiemensPerSquareCentimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter), MillisiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MillisiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter), MillisiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter), NanosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicosiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter), PicosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareCentimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter), SiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareDecimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter), SiemensPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareFeetInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareFoot), SiemensPerSquareFeetTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareInchesInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareInch), SiemensPerSquareInchesTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareMeterInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareMeter), SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareMilesInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareMile), SiemensPerSquareMilesTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareMillimetersInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter), SiemensPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(SiemensPerSquareYardsInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerSquareYard), SiemensPerSquareYardsTolerance);
            AssertEx.EqualTolerance(SiemensPerUsSurveySquareFeetInOneSiemensPerSquareMeter, siemenspersquaremeter.As(ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot), SiemensPerUsSurveySquareFeetTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricConductancePerArea(value: 1, unit: ElectricConductancePerArea.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 fS/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.FemtosiemensPerSquareMeter, FemtosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 kS/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilosiemensPerSquareMeter, KilosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 MS/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegasiemensPerSquareMeter, MegasiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 µS/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrosiemensPerSquareCentimeters, MicrosiemensPerSquareCentimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 µS/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrosiemensPerSquareMeter, MicrosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 mS/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillisiemensPerSquareCentimeters, MillisiemensPerSquareCentimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 mS/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillisiemensPerSquareMeter, MillisiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 nS/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanosiemensPerSquareMeter, NanosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 pS/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicosiemensPerSquareMeter, PicosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareCentimeters, SiemensPerSquareCentimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareDecimeters, SiemensPerSquareDecimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/ft²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareFeet, SiemensPerSquareFeetTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/in²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareInches, SiemensPerSquareInchesTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/mi²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareMiles, SiemensPerSquareMilesTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareMillimeters, SiemensPerSquareMillimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/yd²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareYards, SiemensPerSquareYardsTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricConductancePerArea.Parse("1 S/ft² (US)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SiemensPerUsSurveySquareFeet, SiemensPerUsSurveySquareFeetTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(ElectricConductancePerArea.TryParse("1 fS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.FemtosiemensPerSquareMeter, FemtosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 kS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilosiemensPerSquareMeter, KilosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 µS/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrosiemensPerSquareCentimeters, MicrosiemensPerSquareCentimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 µS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrosiemensPerSquareMeter, MicrosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 mS/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillisiemensPerSquareCentimeters, MillisiemensPerSquareCentimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 nS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanosiemensPerSquareMeter, NanosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 pS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicosiemensPerSquareMeter, PicosiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareCentimeters, SiemensPerSquareCentimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareDecimeters, SiemensPerSquareDecimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/ft²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareFeet, SiemensPerSquareFeetTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareFoot, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/in²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareInches, SiemensPerSquareInchesTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareInch, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/mi²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareMiles, SiemensPerSquareMilesTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMile, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareMillimeters, SiemensPerSquareMillimetersTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/yd²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerSquareYards, SiemensPerSquareYardsTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareYard, parsed.Unit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParse("1 S/ft² (US)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SiemensPerUsSurveySquareFeet, SiemensPerUsSurveySquareFeetTolerance);
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("fS/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("kS/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("MS/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("µS/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("µS/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("mS/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("mS/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("nS/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("pS/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/ft²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/in²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/mi²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/yd²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareYard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = ElectricConductancePerArea.ParseUnit("S/ft² (US)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("fS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("kS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("µS/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("µS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("mS/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("nS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("pS/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/ft²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareFoot, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/in²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareInch, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/mi²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMile, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/yd²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerSquareYard, parsedUnit);
            }

            {
                Assert.True(ElectricConductancePerArea.TryParseUnit("S/ft² (US)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricConductancePerAreaUnit unit)
        {
            var inBaseUnits = ElectricConductancePerArea.From(1.0, ElectricConductancePerArea.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricConductancePerAreaUnit unit)
        {
            var quantity = ElectricConductancePerArea.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricConductancePerAreaUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = ElectricConductancePerArea.Units.First(u => u != ElectricConductancePerArea.BaseUnit);

            var quantity = ElectricConductancePerArea.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricConductancePerAreaUnit unit)
        {
            var quantity = default(ElectricConductancePerArea);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricConductancePerArea siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromFemtosiemensPerSquareMeter(siemenspersquaremeter.FemtosiemensPerSquareMeter).SiemensPerSquareMeter, FemtosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromKilosiemensPerSquareMeter(siemenspersquaremeter.KilosiemensPerSquareMeter).SiemensPerSquareMeter, KilosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromMegasiemensPerSquareMeter(siemenspersquaremeter.MegasiemensPerSquareMeter).SiemensPerSquareMeter, MegasiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromMicrosiemensPerSquareCentimeters(siemenspersquaremeter.MicrosiemensPerSquareCentimeters).SiemensPerSquareMeter, MicrosiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromMicrosiemensPerSquareMeter(siemenspersquaremeter.MicrosiemensPerSquareMeter).SiemensPerSquareMeter, MicrosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromMillisiemensPerSquareCentimeters(siemenspersquaremeter.MillisiemensPerSquareCentimeters).SiemensPerSquareMeter, MillisiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromMillisiemensPerSquareMeter(siemenspersquaremeter.MillisiemensPerSquareMeter).SiemensPerSquareMeter, MillisiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromNanosiemensPerSquareMeter(siemenspersquaremeter.NanosiemensPerSquareMeter).SiemensPerSquareMeter, NanosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromPicosiemensPerSquareMeter(siemenspersquaremeter.PicosiemensPerSquareMeter).SiemensPerSquareMeter, PicosiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareCentimeters(siemenspersquaremeter.SiemensPerSquareCentimeters).SiemensPerSquareMeter, SiemensPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareDecimeters(siemenspersquaremeter.SiemensPerSquareDecimeters).SiemensPerSquareMeter, SiemensPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareFeet(siemenspersquaremeter.SiemensPerSquareFeet).SiemensPerSquareMeter, SiemensPerSquareFeetTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareInches(siemenspersquaremeter.SiemensPerSquareInches).SiemensPerSquareMeter, SiemensPerSquareInchesTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareMeter(siemenspersquaremeter.SiemensPerSquareMeter).SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareMiles(siemenspersquaremeter.SiemensPerSquareMiles).SiemensPerSquareMeter, SiemensPerSquareMilesTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareMillimeters(siemenspersquaremeter.SiemensPerSquareMillimeters).SiemensPerSquareMeter, SiemensPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerSquareYards(siemenspersquaremeter.SiemensPerSquareYards).SiemensPerSquareMeter, SiemensPerSquareYardsTolerance);
            AssertEx.EqualTolerance(1, ElectricConductancePerArea.FromSiemensPerUsSurveySquareFeet(siemenspersquaremeter.SiemensPerUsSurveySquareFeet).SiemensPerSquareMeter, SiemensPerUsSurveySquareFeetTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricConductancePerArea v = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            AssertEx.EqualTolerance(-1, -v.SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricConductancePerArea.FromSiemensPerSquareMeter(3)-v).SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricConductancePerArea.FromSiemensPerSquareMeter(10)/5).SiemensPerSquareMeter, SiemensPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, ElectricConductancePerArea.FromSiemensPerSquareMeter(10)/ElectricConductancePerArea.FromSiemensPerSquareMeter(5), SiemensPerSquareMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricConductancePerArea oneSiemensPerSquareMeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            ElectricConductancePerArea twoSiemensPerSquareMeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(2);

            Assert.True(oneSiemensPerSquareMeter < twoSiemensPerSquareMeter);
            Assert.True(oneSiemensPerSquareMeter <= twoSiemensPerSquareMeter);
            Assert.True(twoSiemensPerSquareMeter > oneSiemensPerSquareMeter);
            Assert.True(twoSiemensPerSquareMeter >= oneSiemensPerSquareMeter);

            Assert.False(oneSiemensPerSquareMeter > twoSiemensPerSquareMeter);
            Assert.False(oneSiemensPerSquareMeter >= twoSiemensPerSquareMeter);
            Assert.False(twoSiemensPerSquareMeter < oneSiemensPerSquareMeter);
            Assert.False(twoSiemensPerSquareMeter <= oneSiemensPerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricConductancePerArea siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            Assert.Equal(0, siemenspersquaremeter.CompareTo(siemenspersquaremeter));
            Assert.True(siemenspersquaremeter.CompareTo(ElectricConductancePerArea.Zero) > 0);
            Assert.True(ElectricConductancePerArea.Zero.CompareTo(siemenspersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricConductancePerArea siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            Assert.Throws<ArgumentException>(() => siemenspersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricConductancePerArea siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            Assert.Throws<ArgumentNullException>(() => siemenspersquaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter, 1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter, true)]  // Same value and unit.
        [InlineData(1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter, 2, ElectricConductancePerAreaUnit.SiemensPerSquareMeter, false)] // Different value.
        [InlineData(2, ElectricConductancePerAreaUnit.SiemensPerSquareMeter, 1, ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter, false)] // Different value and unit.
        [InlineData(1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter, 1, ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricConductancePerAreaUnit unitA, double valueB, ElectricConductancePerAreaUnit unitB, bool expectEqual)
        {
            var a = new ElectricConductancePerArea(valueA, unitA);
            var b = new ElectricConductancePerArea(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricConductancePerArea.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            Assert.True(v.Equals(ElectricConductancePerArea.FromSiemensPerSquareMeter(1), SiemensPerSquareMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ElectricConductancePerArea.Zero, SiemensPerSquareMeterTolerance, ComparisonType.Relative));
            Assert.True(ElectricConductancePerArea.FromSiemensPerSquareMeter(100).Equals(ElectricConductancePerArea.FromSiemensPerSquareMeter(120), (double)0.3m, ComparisonType.Relative));
            Assert.False(ElectricConductancePerArea.FromSiemensPerSquareMeter(100).Equals(ElectricConductancePerArea.FromSiemensPerSquareMeter(120), (double)0.1m, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ElectricConductancePerArea.FromSiemensPerSquareMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricConductancePerArea siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            Assert.False(siemenspersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricConductancePerArea siemenspersquaremeter = ElectricConductancePerArea.FromSiemensPerSquareMeter(1);
            Assert.False(siemenspersquaremeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ElectricConductancePerAreaUnit)).Cast<ElectricConductancePerAreaUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricConductancePerArea.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 fS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter).ToString());
                Assert.Equal("1 kS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter).ToString());
                Assert.Equal("1 MS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter).ToString());
                Assert.Equal("1 µS/cm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter).ToString());
                Assert.Equal("1 µS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter).ToString());
                Assert.Equal("1 mS/cm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter).ToString());
                Assert.Equal("1 mS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter).ToString());
                Assert.Equal("1 nS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter).ToString());
                Assert.Equal("1 pS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter).ToString());
                Assert.Equal("1 S/cm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter).ToString());
                Assert.Equal("1 S/dm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter).ToString());
                Assert.Equal("1 S/ft²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareFoot).ToString());
                Assert.Equal("1 S/in²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareInch).ToString());
                Assert.Equal("1 S/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString());
                Assert.Equal("1 S/mi²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareMile).ToString());
                Assert.Equal("1 S/mm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter).ToString());
                Assert.Equal("1 S/yd²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareYard).ToString());
                Assert.Equal("1 S/ft² (US)", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 fS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.FemtosiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.KilosiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 MS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MegasiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µS/cm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MicrosiemensPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MicrosiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mS/cm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MillisiemensPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.MillisiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 nS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.NanosiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 pS/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.PicosiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 S/cm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 S/dm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 S/ft²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 S/in²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareInch).ToString(swedishCulture));
            Assert.Equal("1 S/m²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 S/mi²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareMile).ToString(swedishCulture));
            Assert.Equal("1 S/mm²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 S/yd²", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerSquareYard).ToString(swedishCulture));
            Assert.Equal("1 S/ft² (US)", new ElectricConductancePerArea(1, ElectricConductancePerAreaUnit.SiemensPerUsSurveySquareFoot).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s1"));
                Assert.Equal("0.12 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s2"));
                Assert.Equal("0.123 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s3"));
                Assert.Equal("0.1235 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 S/m²", new ElectricConductancePerArea(0.123456, ElectricConductancePerAreaUnit.SiemensPerSquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(ElectricConductancePerArea)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(ElectricConductancePerAreaUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal(ElectricConductancePerArea.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal(ElectricConductancePerArea.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(1.0);
            Assert.Equal(new {ElectricConductancePerArea.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricConductancePerArea.FromSiemensPerSquareMeter(value);
            Assert.Equal(ElectricConductancePerArea.FromSiemensPerSquareMeter(-value), -quantity);
        }
    }
}
