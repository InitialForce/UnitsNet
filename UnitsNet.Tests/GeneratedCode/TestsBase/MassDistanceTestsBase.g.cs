//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MassDistance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassDistanceTestsBase : QuantityTestsBase
    {
        protected abstract double KilogramKilometersInOneKilogramKilometer { get; }
        protected abstract double ShortTonMilesInOneKilogramKilometer { get; }
        protected abstract double TonneKilometersInOneKilogramKilometer { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilogramKilometersTolerance { get { return 1e-5; } }
        protected virtual double ShortTonMilesTolerance { get { return 1e-5; } }
        protected virtual double TonneKilometersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MassDistanceUnit unit)
        {
            return unit switch
            {
                MassDistanceUnit.KilogramKilometer => (KilogramKilometersInOneKilogramKilometer, KilogramKilometersTolerance),
                MassDistanceUnit.ShortTonnMile => (ShortTonMilesInOneKilogramKilometer, ShortTonMilesTolerance),
                MassDistanceUnit.TonneKilometer => (TonneKilometersInOneKilogramKilometer, TonneKilometersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MassDistanceUnit.KilogramKilometer },
            new object[] { MassDistanceUnit.ShortTonnMile },
            new object[] { MassDistanceUnit.TonneKilometer },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MassDistance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MassDistanceUnit.KilogramKilometer, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MassDistance(double.PositiveInfinity, MassDistanceUnit.KilogramKilometer));
            Assert.Throws<ArgumentException>(() => new MassDistance(double.NegativeInfinity, MassDistanceUnit.KilogramKilometer));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MassDistance(double.NaN, MassDistanceUnit.KilogramKilometer));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MassDistance(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MassDistance(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MassDistance) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MassDistance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MassDistance(1, MassDistanceUnit.KilogramKilometer);

            QuantityInfo<MassDistanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MassDistance.Zero, quantityInfo.Zero);
            Assert.Equal("MassDistance", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MassDistanceUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void KilogramKilometerToMassDistanceUnits()
        {
            MassDistance kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            AssertEx.EqualTolerance(KilogramKilometersInOneKilogramKilometer, kilogramkilometer.KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(ShortTonMilesInOneKilogramKilometer, kilogramkilometer.ShortTonMiles, ShortTonMilesTolerance);
            AssertEx.EqualTolerance(TonneKilometersInOneKilogramKilometer, kilogramkilometer.TonneKilometers, TonneKilometersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MassDistance.From(1, MassDistanceUnit.KilogramKilometer);
            AssertEx.EqualTolerance(1, quantity00.KilogramKilometers, KilogramKilometersTolerance);
            Assert.Equal(MassDistanceUnit.KilogramKilometer, quantity00.Unit);

            var quantity01 = MassDistance.From(1, MassDistanceUnit.ShortTonnMile);
            AssertEx.EqualTolerance(1, quantity01.ShortTonMiles, ShortTonMilesTolerance);
            Assert.Equal(MassDistanceUnit.ShortTonnMile, quantity01.Unit);

            var quantity02 = MassDistance.From(1, MassDistanceUnit.TonneKilometer);
            AssertEx.EqualTolerance(1, quantity02.TonneKilometers, TonneKilometersTolerance);
            Assert.Equal(MassDistanceUnit.TonneKilometer, quantity02.Unit);

        }

        [Fact]
        public void FromKilogramKilometers_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MassDistance.FromKilogramKilometers(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MassDistance.FromKilogramKilometers(double.NegativeInfinity));
        }

        [Fact]
        public void FromKilogramKilometers_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MassDistance.FromKilogramKilometers(double.NaN));
        }

        [Fact]
        public void As()
        {
            var kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            AssertEx.EqualTolerance(KilogramKilometersInOneKilogramKilometer, kilogramkilometer.As(MassDistanceUnit.KilogramKilometer), KilogramKilometersTolerance);
            AssertEx.EqualTolerance(ShortTonMilesInOneKilogramKilometer, kilogramkilometer.As(MassDistanceUnit.ShortTonnMile), ShortTonMilesTolerance);
            AssertEx.EqualTolerance(TonneKilometersInOneKilogramKilometer, kilogramkilometer.As(MassDistanceUnit.TonneKilometer), TonneKilometersTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MassDistance(value: 1, unit: MassDistance.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = MassDistance.Parse("1 kg⋅km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 kgkm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 кг⋅км", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 кгкм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 公斤·公里", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 公斤公里", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 t⋅mi", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 tmi", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 т⋅ми", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 Тми", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 t·mi", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 特米", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 t⋅km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 km⋅t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 tkm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 kmt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 т⋅км", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 км⋅т", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 ткм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 кмт", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 t·公里", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 公里·t", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 特公里", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassDistance.Parse("1 国民党", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(MassDistance.TryParse("1 kg⋅km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 kgkm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 кг⋅км", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 кгкм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 公斤·公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 公斤公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramKilometers, KilogramKilometersTolerance);
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 t⋅mi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 tmi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 т⋅ми", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 Тми", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 t·mi", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 特米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTonMiles, ShortTonMilesTolerance);
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 t⋅km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 km⋅t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 tkm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 kmt", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 т⋅км", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 км⋅т", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 ткм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 кмт", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 t·公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 公里·t", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 特公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

            {
                Assert.True(MassDistance.TryParse("1 国民党", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneKilometers, TonneKilometersTolerance);
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = MassDistance.ParseUnit("kg⋅km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("kgkm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("кг⋅км", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("кгкм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("公斤·公里", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("公斤公里", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("t⋅mi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("tmi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("т⋅ми", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("Тми", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("t·mi", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("特米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("t⋅km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("km⋅t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("tkm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("kmt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("т⋅км", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("км⋅т", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("ткм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("кмт", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("t·公里", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("公里·t", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("特公里", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MassDistance.ParseUnit("国民党", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(MassDistance.TryParseUnit("kg⋅km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("kgkm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("кг⋅км", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("кгкм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("公斤·公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("公斤公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.KilogramKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("t⋅mi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("tmi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("т⋅ми", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("Тми", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("t·mi", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("特米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.ShortTonnMile, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("t⋅km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("km⋅t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("tkm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("kmt", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("т⋅км", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("км⋅т", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("ткм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("кмт", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("t·公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("公里·t", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("特公里", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

            {
                Assert.True(MassDistance.TryParseUnit("国民党", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassDistanceUnit.TonneKilometer, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MassDistanceUnit unit)
        {
            var inBaseUnits = MassDistance.From(1.0, MassDistance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MassDistanceUnit unit)
        {
            var quantity = MassDistance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MassDistanceUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = MassDistance.Units.First(u => u != MassDistance.BaseUnit);

            var quantity = MassDistance.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MassDistanceUnit unit)
        {
            var quantity = default(MassDistance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MassDistance kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            AssertEx.EqualTolerance(1, MassDistance.FromKilogramKilometers(kilogramkilometer.KilogramKilometers).KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(1, MassDistance.FromShortTonMiles(kilogramkilometer.ShortTonMiles).KilogramKilometers, ShortTonMilesTolerance);
            AssertEx.EqualTolerance(1, MassDistance.FromTonneKilometers(kilogramkilometer.TonneKilometers).KilogramKilometers, TonneKilometersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MassDistance v = MassDistance.FromKilogramKilometers(1);
            AssertEx.EqualTolerance(-1, -v.KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(2, (MassDistance.FromKilogramKilometers(3)-v).KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(2, (MassDistance.FromKilogramKilometers(10)/5).KilogramKilometers, KilogramKilometersTolerance);
            AssertEx.EqualTolerance(2, MassDistance.FromKilogramKilometers(10)/MassDistance.FromKilogramKilometers(5), KilogramKilometersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MassDistance oneKilogramKilometer = MassDistance.FromKilogramKilometers(1);
            MassDistance twoKilogramKilometers = MassDistance.FromKilogramKilometers(2);

            Assert.True(oneKilogramKilometer < twoKilogramKilometers);
            Assert.True(oneKilogramKilometer <= twoKilogramKilometers);
            Assert.True(twoKilogramKilometers > oneKilogramKilometer);
            Assert.True(twoKilogramKilometers >= oneKilogramKilometer);

            Assert.False(oneKilogramKilometer > twoKilogramKilometers);
            Assert.False(oneKilogramKilometer >= twoKilogramKilometers);
            Assert.False(twoKilogramKilometers < oneKilogramKilometer);
            Assert.False(twoKilogramKilometers <= oneKilogramKilometer);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MassDistance kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            Assert.Equal(0, kilogramkilometer.CompareTo(kilogramkilometer));
            Assert.True(kilogramkilometer.CompareTo(MassDistance.Zero) > 0);
            Assert.True(MassDistance.Zero.CompareTo(kilogramkilometer) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MassDistance kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            Assert.Throws<ArgumentException>(() => kilogramkilometer.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MassDistance kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            Assert.Throws<ArgumentNullException>(() => kilogramkilometer.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MassDistanceUnit.KilogramKilometer, 1, MassDistanceUnit.KilogramKilometer, true)]  // Same value and unit.
        [InlineData(1, MassDistanceUnit.KilogramKilometer, 2, MassDistanceUnit.KilogramKilometer, false)] // Different value.
        [InlineData(2, MassDistanceUnit.KilogramKilometer, 1, MassDistanceUnit.ShortTonnMile, false)] // Different value and unit.
        [InlineData(1, MassDistanceUnit.KilogramKilometer, 1, MassDistanceUnit.ShortTonnMile, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MassDistanceUnit unitA, double valueB, MassDistanceUnit unitB, bool expectEqual)
        {
            var a = new MassDistance(valueA, unitA);
            var b = new MassDistance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MassDistance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MassDistance.FromKilogramKilometers(1);
            Assert.True(v.Equals(MassDistance.FromKilogramKilometers(1), KilogramKilometersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MassDistance.Zero, KilogramKilometersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MassDistance.FromKilogramKilometers(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MassDistance.FromKilogramKilometers(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MassDistance kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            Assert.False(kilogramkilometer.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MassDistance kilogramkilometer = MassDistance.FromKilogramKilometers(1);
            Assert.False(kilogramkilometer.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MassDistanceUnit)).Cast<MassDistanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MassDistance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kg⋅km", new MassDistance(1, MassDistanceUnit.KilogramKilometer).ToString());
                Assert.Equal("1 t⋅mi", new MassDistance(1, MassDistanceUnit.ShortTonnMile).ToString());
                Assert.Equal("1 t⋅km", new MassDistance(1, MassDistanceUnit.TonneKilometer).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kg⋅km", new MassDistance(1, MassDistanceUnit.KilogramKilometer).ToString(swedishCulture));
            Assert.Equal("1 t⋅mi", new MassDistance(1, MassDistanceUnit.ShortTonnMile).ToString(swedishCulture));
            Assert.Equal("1 t⋅km", new MassDistance(1, MassDistanceUnit.TonneKilometer).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s1"));
                Assert.Equal("0.12 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s2"));
                Assert.Equal("0.123 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s3"));
                Assert.Equal("0.1235 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s1", culture));
            Assert.Equal("0.12 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s2", culture));
            Assert.Equal("0.123 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s3", culture));
            Assert.Equal("0.1235 kg⋅km", new MassDistance(0.123456, MassDistanceUnit.KilogramKilometer).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MassDistance)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MassDistanceUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal(MassDistance.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal(MassDistance.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MassDistance.FromKilogramKilometers(1.0);
            Assert.Equal(new {MassDistance.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MassDistance.FromKilogramKilometers(value);
            Assert.Equal(MassDistance.FromKilogramKilometers(-value), -quantity);
        }
    }
}
