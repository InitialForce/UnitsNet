//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MolarFlow.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarFlowTestsBase : QuantityTestsBase
    {
        protected abstract double CentimolesPerDayInOneMolePerSecond { get; }
        protected abstract double CentimolesPerSecondInOneMolePerSecond { get; }
        protected abstract double DecamolesPerDayInOneMolePerSecond { get; }
        protected abstract double DecamolesPerSecondInOneMolePerSecond { get; }
        protected abstract double DecimolesPerDayInOneMolePerSecond { get; }
        protected abstract double DecimolesPerSecondInOneMolePerSecond { get; }
        protected abstract double HectomolesPerDayInOneMolePerSecond { get; }
        protected abstract double HectomolesPerSecondInOneMolePerSecond { get; }
        protected abstract double KilomolesPerDayInOneMolePerSecond { get; }
        protected abstract double KilomolesPerHourInOneMolePerSecond { get; }
        protected abstract double KilomolesPerMinuteInOneMolePerSecond { get; }
        protected abstract double KilomolesPerSecondInOneMolePerSecond { get; }
        protected abstract double MegamolesPerDayInOneMolePerSecond { get; }
        protected abstract double MicromolesPerDayInOneMolePerSecond { get; }
        protected abstract double MicromolesPerSecondInOneMolePerSecond { get; }
        protected abstract double MillimolesPerDayInOneMolePerSecond { get; }
        protected abstract double MillimolesPerSecondInOneMolePerSecond { get; }
        protected abstract double MolesPerDayInOneMolePerSecond { get; }
        protected abstract double MolesPerHourInOneMolePerSecond { get; }
        protected abstract double MolesPerSecondInOneMolePerSecond { get; }
        protected abstract double NanomolesPerDayInOneMolePerSecond { get; }
        protected abstract double NanomolesPerSecondInOneMolePerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double CentimolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecamolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double DecamolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecimolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double DecimolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectomolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double HectomolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegamolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double MicromolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double MicromolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillimolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double MillimolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double MolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanomolesPerDayTolerance { get { return 1e-5; } }
        protected virtual double NanomolesPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarFlow((double)0.0, MolarFlowUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MolarFlow();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarFlowUnit.MolePerSecond, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarFlow(double.PositiveInfinity, MolarFlowUnit.MolePerSecond));
            Assert.Throws<ArgumentException>(() => new MolarFlow(double.NegativeInfinity, MolarFlowUnit.MolePerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarFlow(double.NaN, MolarFlowUnit.MolePerSecond));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MolarFlow(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MolarFlow(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MolarFlow) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MolarFlow_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MolarFlow(1, MolarFlowUnit.MolePerSecond);

            QuantityInfo<MolarFlowUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MolarFlow.Zero, quantityInfo.Zero);
            Assert.Equal("MolarFlow", quantityInfo.Name);
            Assert.Equal(QuantityType.MolarFlow, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<MolarFlowUnit>().Except(new[] {MolarFlowUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void MolePerSecondToMolarFlowUnits()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(CentimolesPerDayInOneMolePerSecond, molepersecond.CentimolesPerDay, CentimolesPerDayTolerance);
            AssertEx.EqualTolerance(CentimolesPerSecondInOneMolePerSecond, molepersecond.CentimolesPerSecond, CentimolesPerSecondTolerance);
            AssertEx.EqualTolerance(DecamolesPerDayInOneMolePerSecond, molepersecond.DecamolesPerDay, DecamolesPerDayTolerance);
            AssertEx.EqualTolerance(DecamolesPerSecondInOneMolePerSecond, molepersecond.DecamolesPerSecond, DecamolesPerSecondTolerance);
            AssertEx.EqualTolerance(DecimolesPerDayInOneMolePerSecond, molepersecond.DecimolesPerDay, DecimolesPerDayTolerance);
            AssertEx.EqualTolerance(DecimolesPerSecondInOneMolePerSecond, molepersecond.DecimolesPerSecond, DecimolesPerSecondTolerance);
            AssertEx.EqualTolerance(HectomolesPerDayInOneMolePerSecond, molepersecond.HectomolesPerDay, HectomolesPerDayTolerance);
            AssertEx.EqualTolerance(HectomolesPerSecondInOneMolePerSecond, molepersecond.HectomolesPerSecond, HectomolesPerSecondTolerance);
            AssertEx.EqualTolerance(KilomolesPerDayInOneMolePerSecond, molepersecond.KilomolesPerDay, KilomolesPerDayTolerance);
            AssertEx.EqualTolerance(KilomolesPerHourInOneMolePerSecond, molepersecond.KilomolesPerHour, KilomolesPerHourTolerance);
            AssertEx.EqualTolerance(KilomolesPerMinuteInOneMolePerSecond, molepersecond.KilomolesPerMinute, KilomolesPerMinuteTolerance);
            AssertEx.EqualTolerance(KilomolesPerSecondInOneMolePerSecond, molepersecond.KilomolesPerSecond, KilomolesPerSecondTolerance);
            AssertEx.EqualTolerance(MegamolesPerDayInOneMolePerSecond, molepersecond.MegamolesPerDay, MegamolesPerDayTolerance);
            AssertEx.EqualTolerance(MicromolesPerDayInOneMolePerSecond, molepersecond.MicromolesPerDay, MicromolesPerDayTolerance);
            AssertEx.EqualTolerance(MicromolesPerSecondInOneMolePerSecond, molepersecond.MicromolesPerSecond, MicromolesPerSecondTolerance);
            AssertEx.EqualTolerance(MillimolesPerDayInOneMolePerSecond, molepersecond.MillimolesPerDay, MillimolesPerDayTolerance);
            AssertEx.EqualTolerance(MillimolesPerSecondInOneMolePerSecond, molepersecond.MillimolesPerSecond, MillimolesPerSecondTolerance);
            AssertEx.EqualTolerance(MolesPerDayInOneMolePerSecond, molepersecond.MolesPerDay, MolesPerDayTolerance);
            AssertEx.EqualTolerance(MolesPerHourInOneMolePerSecond, molepersecond.MolesPerHour, MolesPerHourTolerance);
            AssertEx.EqualTolerance(MolesPerSecondInOneMolePerSecond, molepersecond.MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(NanomolesPerDayInOneMolePerSecond, molepersecond.NanomolesPerDay, NanomolesPerDayTolerance);
            AssertEx.EqualTolerance(NanomolesPerSecondInOneMolePerSecond, molepersecond.NanomolesPerSecond, NanomolesPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MolarFlow.From(1, MolarFlowUnit.CentimolePerDay);
            AssertEx.EqualTolerance(1, quantity00.CentimolesPerDay, CentimolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.CentimolePerDay, quantity00.Unit);

            var quantity01 = MolarFlow.From(1, MolarFlowUnit.CentimolePerSecond);
            AssertEx.EqualTolerance(1, quantity01.CentimolesPerSecond, CentimolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.CentimolePerSecond, quantity01.Unit);

            var quantity02 = MolarFlow.From(1, MolarFlowUnit.DecamolePerDay);
            AssertEx.EqualTolerance(1, quantity02.DecamolesPerDay, DecamolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.DecamolePerDay, quantity02.Unit);

            var quantity03 = MolarFlow.From(1, MolarFlowUnit.DecamolePerSecond);
            AssertEx.EqualTolerance(1, quantity03.DecamolesPerSecond, DecamolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.DecamolePerSecond, quantity03.Unit);

            var quantity04 = MolarFlow.From(1, MolarFlowUnit.DecimolePerDay);
            AssertEx.EqualTolerance(1, quantity04.DecimolesPerDay, DecimolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.DecimolePerDay, quantity04.Unit);

            var quantity05 = MolarFlow.From(1, MolarFlowUnit.DecimolePerSecond);
            AssertEx.EqualTolerance(1, quantity05.DecimolesPerSecond, DecimolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.DecimolePerSecond, quantity05.Unit);

            var quantity06 = MolarFlow.From(1, MolarFlowUnit.HectomolePerDay);
            AssertEx.EqualTolerance(1, quantity06.HectomolesPerDay, HectomolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.HectomolePerDay, quantity06.Unit);

            var quantity07 = MolarFlow.From(1, MolarFlowUnit.HectomolePerSecond);
            AssertEx.EqualTolerance(1, quantity07.HectomolesPerSecond, HectomolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.HectomolePerSecond, quantity07.Unit);

            var quantity08 = MolarFlow.From(1, MolarFlowUnit.KilomolePerDay);
            AssertEx.EqualTolerance(1, quantity08.KilomolesPerDay, KilomolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerDay, quantity08.Unit);

            var quantity09 = MolarFlow.From(1, MolarFlowUnit.KilomolePerHour);
            AssertEx.EqualTolerance(1, quantity09.KilomolesPerHour, KilomolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerHour, quantity09.Unit);

            var quantity10 = MolarFlow.From(1, MolarFlowUnit.KilomolePerMinute);
            AssertEx.EqualTolerance(1, quantity10.KilomolesPerMinute, KilomolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerMinute, quantity10.Unit);

            var quantity11 = MolarFlow.From(1, MolarFlowUnit.KilomolePerSecond);
            AssertEx.EqualTolerance(1, quantity11.KilomolesPerSecond, KilomolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerSecond, quantity11.Unit);

            var quantity12 = MolarFlow.From(1, MolarFlowUnit.MegamolePerDay);
            AssertEx.EqualTolerance(1, quantity12.MegamolesPerDay, MegamolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MegamolePerDay, quantity12.Unit);

            var quantity13 = MolarFlow.From(1, MolarFlowUnit.MicromolePerDay);
            AssertEx.EqualTolerance(1, quantity13.MicromolesPerDay, MicromolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MicromolePerDay, quantity13.Unit);

            var quantity14 = MolarFlow.From(1, MolarFlowUnit.MicromolePerSecond);
            AssertEx.EqualTolerance(1, quantity14.MicromolesPerSecond, MicromolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.MicromolePerSecond, quantity14.Unit);

            var quantity15 = MolarFlow.From(1, MolarFlowUnit.MillimolePerDay);
            AssertEx.EqualTolerance(1, quantity15.MillimolesPerDay, MillimolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MillimolePerDay, quantity15.Unit);

            var quantity16 = MolarFlow.From(1, MolarFlowUnit.MillimolePerSecond);
            AssertEx.EqualTolerance(1, quantity16.MillimolesPerSecond, MillimolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.MillimolePerSecond, quantity16.Unit);

            var quantity17 = MolarFlow.From(1, MolarFlowUnit.MolePerDay);
            AssertEx.EqualTolerance(1, quantity17.MolesPerDay, MolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MolePerDay, quantity17.Unit);

            var quantity18 = MolarFlow.From(1, MolarFlowUnit.MolePerHour);
            AssertEx.EqualTolerance(1, quantity18.MolesPerHour, MolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.MolePerHour, quantity18.Unit);

            var quantity19 = MolarFlow.From(1, MolarFlowUnit.MolePerSecond);
            AssertEx.EqualTolerance(1, quantity19.MolesPerSecond, MolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.MolePerSecond, quantity19.Unit);

            var quantity20 = MolarFlow.From(1, MolarFlowUnit.NanomolePerDay);
            AssertEx.EqualTolerance(1, quantity20.NanomolesPerDay, NanomolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.NanomolePerDay, quantity20.Unit);

            var quantity21 = MolarFlow.From(1, MolarFlowUnit.NanomolePerSecond);
            AssertEx.EqualTolerance(1, quantity21.NanomolesPerSecond, NanomolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.NanomolePerSecond, quantity21.Unit);

        }

        [Fact]
        public void FromMolesPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarFlow.FromMolesPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MolarFlow.FromMolesPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromMolesPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarFlow.FromMolesPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var molepersecond = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(CentimolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.CentimolePerDay), CentimolesPerDayTolerance);
            AssertEx.EqualTolerance(CentimolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.CentimolePerSecond), CentimolesPerSecondTolerance);
            AssertEx.EqualTolerance(DecamolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.DecamolePerDay), DecamolesPerDayTolerance);
            AssertEx.EqualTolerance(DecamolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.DecamolePerSecond), DecamolesPerSecondTolerance);
            AssertEx.EqualTolerance(DecimolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.DecimolePerDay), DecimolesPerDayTolerance);
            AssertEx.EqualTolerance(DecimolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.DecimolePerSecond), DecimolesPerSecondTolerance);
            AssertEx.EqualTolerance(HectomolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.HectomolePerDay), HectomolesPerDayTolerance);
            AssertEx.EqualTolerance(HectomolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.HectomolePerSecond), HectomolesPerSecondTolerance);
            AssertEx.EqualTolerance(KilomolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.KilomolePerDay), KilomolesPerDayTolerance);
            AssertEx.EqualTolerance(KilomolesPerHourInOneMolePerSecond, molepersecond.As(MolarFlowUnit.KilomolePerHour), KilomolesPerHourTolerance);
            AssertEx.EqualTolerance(KilomolesPerMinuteInOneMolePerSecond, molepersecond.As(MolarFlowUnit.KilomolePerMinute), KilomolesPerMinuteTolerance);
            AssertEx.EqualTolerance(KilomolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.KilomolePerSecond), KilomolesPerSecondTolerance);
            AssertEx.EqualTolerance(MegamolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MegamolePerDay), MegamolesPerDayTolerance);
            AssertEx.EqualTolerance(MicromolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MicromolePerDay), MicromolesPerDayTolerance);
            AssertEx.EqualTolerance(MicromolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MicromolePerSecond), MicromolesPerSecondTolerance);
            AssertEx.EqualTolerance(MillimolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MillimolePerDay), MillimolesPerDayTolerance);
            AssertEx.EqualTolerance(MillimolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MillimolePerSecond), MillimolesPerSecondTolerance);
            AssertEx.EqualTolerance(MolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MolePerDay), MolesPerDayTolerance);
            AssertEx.EqualTolerance(MolesPerHourInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MolePerHour), MolesPerHourTolerance);
            AssertEx.EqualTolerance(MolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MolePerSecond), MolesPerSecondTolerance);
            AssertEx.EqualTolerance(NanomolesPerDayInOneMolePerSecond, molepersecond.As(MolarFlowUnit.NanomolePerDay), NanomolesPerDayTolerance);
            AssertEx.EqualTolerance(NanomolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.NanomolePerSecond), NanomolesPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var molepersecond = MolarFlow.FromMolesPerSecond(1);

            var centimoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.CentimolePerDay);
            AssertEx.EqualTolerance(CentimolesPerDayInOneMolePerSecond, (double)centimoleperdayQuantity.Value, CentimolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.CentimolePerDay, centimoleperdayQuantity.Unit);

            var centimolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.CentimolePerSecond);
            AssertEx.EqualTolerance(CentimolesPerSecondInOneMolePerSecond, (double)centimolepersecondQuantity.Value, CentimolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.CentimolePerSecond, centimolepersecondQuantity.Unit);

            var decamoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.DecamolePerDay);
            AssertEx.EqualTolerance(DecamolesPerDayInOneMolePerSecond, (double)decamoleperdayQuantity.Value, DecamolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.DecamolePerDay, decamoleperdayQuantity.Unit);

            var decamolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.DecamolePerSecond);
            AssertEx.EqualTolerance(DecamolesPerSecondInOneMolePerSecond, (double)decamolepersecondQuantity.Value, DecamolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.DecamolePerSecond, decamolepersecondQuantity.Unit);

            var decimoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.DecimolePerDay);
            AssertEx.EqualTolerance(DecimolesPerDayInOneMolePerSecond, (double)decimoleperdayQuantity.Value, DecimolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.DecimolePerDay, decimoleperdayQuantity.Unit);

            var decimolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.DecimolePerSecond);
            AssertEx.EqualTolerance(DecimolesPerSecondInOneMolePerSecond, (double)decimolepersecondQuantity.Value, DecimolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.DecimolePerSecond, decimolepersecondQuantity.Unit);

            var hectomoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.HectomolePerDay);
            AssertEx.EqualTolerance(HectomolesPerDayInOneMolePerSecond, (double)hectomoleperdayQuantity.Value, HectomolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.HectomolePerDay, hectomoleperdayQuantity.Unit);

            var hectomolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.HectomolePerSecond);
            AssertEx.EqualTolerance(HectomolesPerSecondInOneMolePerSecond, (double)hectomolepersecondQuantity.Value, HectomolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.HectomolePerSecond, hectomolepersecondQuantity.Unit);

            var kilomoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.KilomolePerDay);
            AssertEx.EqualTolerance(KilomolesPerDayInOneMolePerSecond, (double)kilomoleperdayQuantity.Value, KilomolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerDay, kilomoleperdayQuantity.Unit);

            var kilomoleperhourQuantity = molepersecond.ToUnit(MolarFlowUnit.KilomolePerHour);
            AssertEx.EqualTolerance(KilomolesPerHourInOneMolePerSecond, (double)kilomoleperhourQuantity.Value, KilomolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerHour, kilomoleperhourQuantity.Unit);

            var kilomoleperminuteQuantity = molepersecond.ToUnit(MolarFlowUnit.KilomolePerMinute);
            AssertEx.EqualTolerance(KilomolesPerMinuteInOneMolePerSecond, (double)kilomoleperminuteQuantity.Value, KilomolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerMinute, kilomoleperminuteQuantity.Unit);

            var kilomolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.KilomolePerSecond);
            AssertEx.EqualTolerance(KilomolesPerSecondInOneMolePerSecond, (double)kilomolepersecondQuantity.Value, KilomolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerSecond, kilomolepersecondQuantity.Unit);

            var megamoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.MegamolePerDay);
            AssertEx.EqualTolerance(MegamolesPerDayInOneMolePerSecond, (double)megamoleperdayQuantity.Value, MegamolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MegamolePerDay, megamoleperdayQuantity.Unit);

            var micromoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.MicromolePerDay);
            AssertEx.EqualTolerance(MicromolesPerDayInOneMolePerSecond, (double)micromoleperdayQuantity.Value, MicromolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MicromolePerDay, micromoleperdayQuantity.Unit);

            var micromolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.MicromolePerSecond);
            AssertEx.EqualTolerance(MicromolesPerSecondInOneMolePerSecond, (double)micromolepersecondQuantity.Value, MicromolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.MicromolePerSecond, micromolepersecondQuantity.Unit);

            var millimoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.MillimolePerDay);
            AssertEx.EqualTolerance(MillimolesPerDayInOneMolePerSecond, (double)millimoleperdayQuantity.Value, MillimolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MillimolePerDay, millimoleperdayQuantity.Unit);

            var millimolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.MillimolePerSecond);
            AssertEx.EqualTolerance(MillimolesPerSecondInOneMolePerSecond, (double)millimolepersecondQuantity.Value, MillimolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.MillimolePerSecond, millimolepersecondQuantity.Unit);

            var moleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.MolePerDay);
            AssertEx.EqualTolerance(MolesPerDayInOneMolePerSecond, (double)moleperdayQuantity.Value, MolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.MolePerDay, moleperdayQuantity.Unit);

            var moleperhourQuantity = molepersecond.ToUnit(MolarFlowUnit.MolePerHour);
            AssertEx.EqualTolerance(MolesPerHourInOneMolePerSecond, (double)moleperhourQuantity.Value, MolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.MolePerHour, moleperhourQuantity.Unit);

            var molepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.MolePerSecond);
            AssertEx.EqualTolerance(MolesPerSecondInOneMolePerSecond, (double)molepersecondQuantity.Value, MolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.MolePerSecond, molepersecondQuantity.Unit);

            var nanomoleperdayQuantity = molepersecond.ToUnit(MolarFlowUnit.NanomolePerDay);
            AssertEx.EqualTolerance(NanomolesPerDayInOneMolePerSecond, (double)nanomoleperdayQuantity.Value, NanomolesPerDayTolerance);
            Assert.Equal(MolarFlowUnit.NanomolePerDay, nanomoleperdayQuantity.Unit);

            var nanomolepersecondQuantity = molepersecond.ToUnit(MolarFlowUnit.NanomolePerSecond);
            AssertEx.EqualTolerance(NanomolesPerSecondInOneMolePerSecond, (double)nanomolepersecondQuantity.Value, NanomolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.NanomolePerSecond, nanomolepersecondQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = MolarFlow.FromMolesPerSecond(1).ToBaseUnit();
            Assert.Equal(MolarFlow.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(1, MolarFlow.FromCentimolesPerDay(molepersecond.CentimolesPerDay).MolesPerSecond, CentimolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromCentimolesPerSecond(molepersecond.CentimolesPerSecond).MolesPerSecond, CentimolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromDecamolesPerDay(molepersecond.DecamolesPerDay).MolesPerSecond, DecamolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromDecamolesPerSecond(molepersecond.DecamolesPerSecond).MolesPerSecond, DecamolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromDecimolesPerDay(molepersecond.DecimolesPerDay).MolesPerSecond, DecimolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromDecimolesPerSecond(molepersecond.DecimolesPerSecond).MolesPerSecond, DecimolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromHectomolesPerDay(molepersecond.HectomolesPerDay).MolesPerSecond, HectomolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromHectomolesPerSecond(molepersecond.HectomolesPerSecond).MolesPerSecond, HectomolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilomolesPerDay(molepersecond.KilomolesPerDay).MolesPerSecond, KilomolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilomolesPerHour(molepersecond.KilomolesPerHour).MolesPerSecond, KilomolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilomolesPerMinute(molepersecond.KilomolesPerMinute).MolesPerSecond, KilomolesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilomolesPerSecond(molepersecond.KilomolesPerSecond).MolesPerSecond, KilomolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMegamolesPerDay(molepersecond.MegamolesPerDay).MolesPerSecond, MegamolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMicromolesPerDay(molepersecond.MicromolesPerDay).MolesPerSecond, MicromolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMicromolesPerSecond(molepersecond.MicromolesPerSecond).MolesPerSecond, MicromolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMillimolesPerDay(molepersecond.MillimolesPerDay).MolesPerSecond, MillimolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMillimolesPerSecond(molepersecond.MillimolesPerSecond).MolesPerSecond, MillimolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMolesPerDay(molepersecond.MolesPerDay).MolesPerSecond, MolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMolesPerHour(molepersecond.MolesPerHour).MolesPerSecond, MolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMolesPerSecond(molepersecond.MolesPerSecond).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromNanomolesPerDay(molepersecond.NanomolesPerDay).MolesPerSecond, NanomolesPerDayTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromNanomolesPerSecond(molepersecond.NanomolesPerSecond).MolesPerSecond, NanomolesPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MolarFlow v = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MolarFlow.FromMolesPerSecond(3)-v).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MolarFlow.FromMolesPerSecond(10)/5).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, MolarFlow.FromMolesPerSecond(10)/MolarFlow.FromMolesPerSecond(5), MolesPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MolarFlow oneMolePerSecond = MolarFlow.FromMolesPerSecond(1);
            MolarFlow twoMolesPerSecond = MolarFlow.FromMolesPerSecond(2);

            Assert.True(oneMolePerSecond < twoMolesPerSecond);
            Assert.True(oneMolePerSecond <= twoMolesPerSecond);
            Assert.True(twoMolesPerSecond > oneMolePerSecond);
            Assert.True(twoMolesPerSecond >= oneMolePerSecond);

            Assert.False(oneMolePerSecond > twoMolesPerSecond);
            Assert.False(oneMolePerSecond >= twoMolesPerSecond);
            Assert.False(twoMolesPerSecond < oneMolePerSecond);
            Assert.False(twoMolesPerSecond <= oneMolePerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.Equal(0, molepersecond.CompareTo(molepersecond));
            Assert.True(molepersecond.CompareTo(MolarFlow.Zero) > 0);
            Assert.True(MolarFlow.Zero.CompareTo(molepersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.Throws<ArgumentException>(() => molepersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => molepersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = MolarFlow.FromMolesPerSecond(1);
            var b = MolarFlow.FromMolesPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = MolarFlow.FromMolesPerSecond(1);
            var b = MolarFlow.FromMolesPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = MolarFlow.FromMolesPerSecond(1);
            object b = MolarFlow.FromMolesPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MolarFlow.FromMolesPerSecond(1);
            Assert.True(v.Equals(MolarFlow.FromMolesPerSecond(1), MolesPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MolarFlow.Zero, MolesPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MolarFlow.FromMolesPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MolarFlow.FromMolesPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.False(molepersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.False(molepersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MolarFlowUnit.Undefined, MolarFlow.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MolarFlowUnit)).Cast<MolarFlowUnit>();
            foreach(var unit in units)
            {
                if(unit == MolarFlowUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MolarFlow.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cmol/d", new MolarFlow(1, MolarFlowUnit.CentimolePerDay).ToString());
                Assert.Equal("1 cmol/s", new MolarFlow(1, MolarFlowUnit.CentimolePerSecond).ToString());
                Assert.Equal("1 damol/d", new MolarFlow(1, MolarFlowUnit.DecamolePerDay).ToString());
                Assert.Equal("1 damol/s", new MolarFlow(1, MolarFlowUnit.DecamolePerSecond).ToString());
                Assert.Equal("1 dmol/d", new MolarFlow(1, MolarFlowUnit.DecimolePerDay).ToString());
                Assert.Equal("1 dmol/s", new MolarFlow(1, MolarFlowUnit.DecimolePerSecond).ToString());
                Assert.Equal("1 hmol/d", new MolarFlow(1, MolarFlowUnit.HectomolePerDay).ToString());
                Assert.Equal("1 hmol/s", new MolarFlow(1, MolarFlowUnit.HectomolePerSecond).ToString());
                Assert.Equal("1 kmol/d", new MolarFlow(1, MolarFlowUnit.KilomolePerDay).ToString());
                Assert.Equal("1 kmol/h", new MolarFlow(1, MolarFlowUnit.KilomolePerHour).ToString());
                Assert.Equal("1 kmol/min", new MolarFlow(1, MolarFlowUnit.KilomolePerMinute).ToString());
                Assert.Equal("1 kmol/s", new MolarFlow(1, MolarFlowUnit.KilomolePerSecond).ToString());
                Assert.Equal("1 Mmol/d", new MolarFlow(1, MolarFlowUnit.MegamolePerDay).ToString());
                Assert.Equal("1 µmol/d", new MolarFlow(1, MolarFlowUnit.MicromolePerDay).ToString());
                Assert.Equal("1 µmol/s", new MolarFlow(1, MolarFlowUnit.MicromolePerSecond).ToString());
                Assert.Equal("1 mmol/d", new MolarFlow(1, MolarFlowUnit.MillimolePerDay).ToString());
                Assert.Equal("1 mmol/s", new MolarFlow(1, MolarFlowUnit.MillimolePerSecond).ToString());
                Assert.Equal("1 mol/d", new MolarFlow(1, MolarFlowUnit.MolePerDay).ToString());
                Assert.Equal("1 mol/h", new MolarFlow(1, MolarFlowUnit.MolePerHour).ToString());
                Assert.Equal("1 mol/s", new MolarFlow(1, MolarFlowUnit.MolePerSecond).ToString());
                Assert.Equal("1 nmol/d", new MolarFlow(1, MolarFlowUnit.NanomolePerDay).ToString());
                Assert.Equal("1 nmol/s", new MolarFlow(1, MolarFlowUnit.NanomolePerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cmol/d", new MolarFlow(1, MolarFlowUnit.CentimolePerDay).ToString(swedishCulture));
            Assert.Equal("1 cmol/s", new MolarFlow(1, MolarFlowUnit.CentimolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 damol/d", new MolarFlow(1, MolarFlowUnit.DecamolePerDay).ToString(swedishCulture));
            Assert.Equal("1 damol/s", new MolarFlow(1, MolarFlowUnit.DecamolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 dmol/d", new MolarFlow(1, MolarFlowUnit.DecimolePerDay).ToString(swedishCulture));
            Assert.Equal("1 dmol/s", new MolarFlow(1, MolarFlowUnit.DecimolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 hmol/d", new MolarFlow(1, MolarFlowUnit.HectomolePerDay).ToString(swedishCulture));
            Assert.Equal("1 hmol/s", new MolarFlow(1, MolarFlowUnit.HectomolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 kmol/d", new MolarFlow(1, MolarFlowUnit.KilomolePerDay).ToString(swedishCulture));
            Assert.Equal("1 kmol/h", new MolarFlow(1, MolarFlowUnit.KilomolePerHour).ToString(swedishCulture));
            Assert.Equal("1 kmol/min", new MolarFlow(1, MolarFlowUnit.KilomolePerMinute).ToString(swedishCulture));
            Assert.Equal("1 kmol/s", new MolarFlow(1, MolarFlowUnit.KilomolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Mmol/d", new MolarFlow(1, MolarFlowUnit.MegamolePerDay).ToString(swedishCulture));
            Assert.Equal("1 µmol/d", new MolarFlow(1, MolarFlowUnit.MicromolePerDay).ToString(swedishCulture));
            Assert.Equal("1 µmol/s", new MolarFlow(1, MolarFlowUnit.MicromolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 mmol/d", new MolarFlow(1, MolarFlowUnit.MillimolePerDay).ToString(swedishCulture));
            Assert.Equal("1 mmol/s", new MolarFlow(1, MolarFlowUnit.MillimolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 mol/d", new MolarFlow(1, MolarFlowUnit.MolePerDay).ToString(swedishCulture));
            Assert.Equal("1 mol/h", new MolarFlow(1, MolarFlowUnit.MolePerHour).ToString(swedishCulture));
            Assert.Equal("1 mol/s", new MolarFlow(1, MolarFlowUnit.MolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 nmol/d", new MolarFlow(1, MolarFlowUnit.NanomolePerDay).ToString(swedishCulture));
            Assert.Equal("1 nmol/s", new MolarFlow(1, MolarFlowUnit.NanomolePerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s1"));
                Assert.Equal("0.12 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s2"));
                Assert.Equal("0.123 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s3"));
                Assert.Equal("0.1235 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s1", culture));
            Assert.Equal("0.12 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s2", culture));
            Assert.Equal("0.123 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MolarFlow)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MolarFlowUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(QuantityType.MolarFlow, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(MolarFlow.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(MolarFlow.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(new {MolarFlow.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MolarFlow.FromMolesPerSecond(value);
            Assert.Equal(MolarFlow.FromMolesPerSecond(-value), -quantity);
        }
    }
}
