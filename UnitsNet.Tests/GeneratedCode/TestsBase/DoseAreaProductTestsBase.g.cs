//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of DoseAreaProduct.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DoseAreaProductTestsBase : QuantityTestsBase
    {
        protected abstract double CentigraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double CentigraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double CentigraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double CentigraySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareMetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareMillimetersInOneGraySquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double CentigraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double CentigraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double CentigraySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareMillimetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(DoseAreaProductUnit unit)
        {
            return unit switch
            {
                DoseAreaProductUnit.CentigraySquareCentimeter => (CentigraySquareCentimetersInOneGraySquareMeter, CentigraySquareCentimetersTolerance),
                DoseAreaProductUnit.CentigraySquareDecimeter => (CentigraySquareDecimetersInOneGraySquareMeter, CentigraySquareDecimetersTolerance),
                DoseAreaProductUnit.CentigraySquareMeter => (CentigraySquareMetersInOneGraySquareMeter, CentigraySquareMetersTolerance),
                DoseAreaProductUnit.CentigraySquareMillimeter => (CentigraySquareMillimetersInOneGraySquareMeter, CentigraySquareMillimetersTolerance),
                DoseAreaProductUnit.DecigraySquareCentimeter => (DecigraySquareCentimetersInOneGraySquareMeter, DecigraySquareCentimetersTolerance),
                DoseAreaProductUnit.DecigraySquareDecimeter => (DecigraySquareDecimetersInOneGraySquareMeter, DecigraySquareDecimetersTolerance),
                DoseAreaProductUnit.DecigraySquareMeter => (DecigraySquareMetersInOneGraySquareMeter, DecigraySquareMetersTolerance),
                DoseAreaProductUnit.DecigraySquareMillimeter => (DecigraySquareMillimetersInOneGraySquareMeter, DecigraySquareMillimetersTolerance),
                DoseAreaProductUnit.GraySquareCentimeter => (GraySquareCentimetersInOneGraySquareMeter, GraySquareCentimetersTolerance),
                DoseAreaProductUnit.GraySquareDecimeter => (GraySquareDecimetersInOneGraySquareMeter, GraySquareDecimetersTolerance),
                DoseAreaProductUnit.GraySquareMeter => (GraySquareMetersInOneGraySquareMeter, GraySquareMetersTolerance),
                DoseAreaProductUnit.GraySquareMillimeter => (GraySquareMillimetersInOneGraySquareMeter, GraySquareMillimetersTolerance),
                DoseAreaProductUnit.MicrograySquareCentimeter => (MicrograySquareCentimetersInOneGraySquareMeter, MicrograySquareCentimetersTolerance),
                DoseAreaProductUnit.MicrograySquareDecimeter => (MicrograySquareDecimetersInOneGraySquareMeter, MicrograySquareDecimetersTolerance),
                DoseAreaProductUnit.MicrograySquareMeter => (MicrograySquareMetersInOneGraySquareMeter, MicrograySquareMetersTolerance),
                DoseAreaProductUnit.MicrograySquareMillimeter => (MicrograySquareMillimetersInOneGraySquareMeter, MicrograySquareMillimetersTolerance),
                DoseAreaProductUnit.MilligraySquareCentimeter => (MilligraySquareCentimetersInOneGraySquareMeter, MilligraySquareCentimetersTolerance),
                DoseAreaProductUnit.MilligraySquareDecimeter => (MilligraySquareDecimetersInOneGraySquareMeter, MilligraySquareDecimetersTolerance),
                DoseAreaProductUnit.MilligraySquareMeter => (MilligraySquareMetersInOneGraySquareMeter, MilligraySquareMetersTolerance),
                DoseAreaProductUnit.MilligraySquareMillimeter => (MilligraySquareMillimetersInOneGraySquareMeter, MilligraySquareMillimetersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { DoseAreaProductUnit.CentigraySquareCentimeter },
            new object[] { DoseAreaProductUnit.CentigraySquareDecimeter },
            new object[] { DoseAreaProductUnit.CentigraySquareMeter },
            new object[] { DoseAreaProductUnit.CentigraySquareMillimeter },
            new object[] { DoseAreaProductUnit.DecigraySquareCentimeter },
            new object[] { DoseAreaProductUnit.DecigraySquareDecimeter },
            new object[] { DoseAreaProductUnit.DecigraySquareMeter },
            new object[] { DoseAreaProductUnit.DecigraySquareMillimeter },
            new object[] { DoseAreaProductUnit.GraySquareCentimeter },
            new object[] { DoseAreaProductUnit.GraySquareDecimeter },
            new object[] { DoseAreaProductUnit.GraySquareMeter },
            new object[] { DoseAreaProductUnit.GraySquareMillimeter },
            new object[] { DoseAreaProductUnit.MicrograySquareCentimeter },
            new object[] { DoseAreaProductUnit.MicrograySquareDecimeter },
            new object[] { DoseAreaProductUnit.MicrograySquareMeter },
            new object[] { DoseAreaProductUnit.MicrograySquareMillimeter },
            new object[] { DoseAreaProductUnit.MilligraySquareCentimeter },
            new object[] { DoseAreaProductUnit.MilligraySquareDecimeter },
            new object[] { DoseAreaProductUnit.MilligraySquareMeter },
            new object[] { DoseAreaProductUnit.MilligraySquareMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new DoseAreaProduct();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DoseAreaProductUnit.GraySquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new DoseAreaProduct(double.PositiveInfinity, DoseAreaProductUnit.GraySquareMeter));
            Assert.Throws<ArgumentException>(() => new DoseAreaProduct(double.NegativeInfinity, DoseAreaProductUnit.GraySquareMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new DoseAreaProduct(double.NaN, DoseAreaProductUnit.GraySquareMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new DoseAreaProduct(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new DoseAreaProduct(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (DoseAreaProduct) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void DoseAreaProduct_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMeter);

            QuantityInfo<DoseAreaProductUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(DoseAreaProduct.Zero, quantityInfo.Zero);
            Assert.Equal("DoseAreaProduct", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<DoseAreaProductUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void GraySquareMeterToDoseAreaProductUnits()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            AssertEx.EqualTolerance(CentigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.CentigraySquareCentimeters, CentigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.CentigraySquareDecimeters, CentigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMetersInOneGraySquareMeter, graysquaremeter.CentigraySquareMeters, CentigraySquareMetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.CentigraySquareMillimeters, CentigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.DecigraySquareCentimeters, DecigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.DecigraySquareDecimeters, DecigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMetersInOneGraySquareMeter, graysquaremeter.DecigraySquareMeters, DecigraySquareMetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.DecigraySquareMillimeters, DecigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(GraySquareCentimetersInOneGraySquareMeter, graysquaremeter.GraySquareCentimeters, GraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(GraySquareDecimetersInOneGraySquareMeter, graysquaremeter.GraySquareDecimeters, GraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(GraySquareMetersInOneGraySquareMeter, graysquaremeter.GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(GraySquareMillimetersInOneGraySquareMeter, graysquaremeter.GraySquareMillimeters, GraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareCentimetersInOneGraySquareMeter, graysquaremeter.MicrograySquareCentimeters, MicrograySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareDecimetersInOneGraySquareMeter, graysquaremeter.MicrograySquareDecimeters, MicrograySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMetersInOneGraySquareMeter, graysquaremeter.MicrograySquareMeters, MicrograySquareMetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMillimetersInOneGraySquareMeter, graysquaremeter.MicrograySquareMillimeters, MicrograySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareCentimetersInOneGraySquareMeter, graysquaremeter.MilligraySquareCentimeters, MilligraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareDecimetersInOneGraySquareMeter, graysquaremeter.MilligraySquareDecimeters, MilligraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMetersInOneGraySquareMeter, graysquaremeter.MilligraySquareMeters, MilligraySquareMetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMillimetersInOneGraySquareMeter, graysquaremeter.MilligraySquareMillimeters, MilligraySquareMillimetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareCentimeter);
            AssertEx.EqualTolerance(1, quantity00.CentigraySquareCentimeters, CentigraySquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, quantity00.Unit);

            var quantity01 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareDecimeter);
            AssertEx.EqualTolerance(1, quantity01.CentigraySquareDecimeters, CentigraySquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, quantity01.Unit);

            var quantity02 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareMeter);
            AssertEx.EqualTolerance(1, quantity02.CentigraySquareMeters, CentigraySquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, quantity02.Unit);

            var quantity03 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareMillimeter);
            AssertEx.EqualTolerance(1, quantity03.CentigraySquareMillimeters, CentigraySquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, quantity03.Unit);

            var quantity04 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareCentimeter);
            AssertEx.EqualTolerance(1, quantity04.DecigraySquareCentimeters, DecigraySquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, quantity04.Unit);

            var quantity05 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareDecimeter);
            AssertEx.EqualTolerance(1, quantity05.DecigraySquareDecimeters, DecigraySquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, quantity05.Unit);

            var quantity06 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareMeter);
            AssertEx.EqualTolerance(1, quantity06.DecigraySquareMeters, DecigraySquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, quantity06.Unit);

            var quantity07 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareMillimeter);
            AssertEx.EqualTolerance(1, quantity07.DecigraySquareMillimeters, DecigraySquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, quantity07.Unit);

            var quantity08 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareCentimeter);
            AssertEx.EqualTolerance(1, quantity08.GraySquareCentimeters, GraySquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, quantity08.Unit);

            var quantity09 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareDecimeter);
            AssertEx.EqualTolerance(1, quantity09.GraySquareDecimeters, GraySquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, quantity09.Unit);

            var quantity10 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareMeter);
            AssertEx.EqualTolerance(1, quantity10.GraySquareMeters, GraySquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GraySquareMeter, quantity10.Unit);

            var quantity11 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareMillimeter);
            AssertEx.EqualTolerance(1, quantity11.GraySquareMillimeters, GraySquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, quantity11.Unit);

            var quantity12 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareCentimeter);
            AssertEx.EqualTolerance(1, quantity12.MicrograySquareCentimeters, MicrograySquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, quantity12.Unit);

            var quantity13 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareDecimeter);
            AssertEx.EqualTolerance(1, quantity13.MicrograySquareDecimeters, MicrograySquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, quantity13.Unit);

            var quantity14 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareMeter);
            AssertEx.EqualTolerance(1, quantity14.MicrograySquareMeters, MicrograySquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, quantity14.Unit);

            var quantity15 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareMillimeter);
            AssertEx.EqualTolerance(1, quantity15.MicrograySquareMillimeters, MicrograySquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, quantity15.Unit);

            var quantity16 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareCentimeter);
            AssertEx.EqualTolerance(1, quantity16.MilligraySquareCentimeters, MilligraySquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, quantity16.Unit);

            var quantity17 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareDecimeter);
            AssertEx.EqualTolerance(1, quantity17.MilligraySquareDecimeters, MilligraySquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, quantity17.Unit);

            var quantity18 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareMeter);
            AssertEx.EqualTolerance(1, quantity18.MilligraySquareMeters, MilligraySquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, quantity18.Unit);

            var quantity19 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareMillimeter);
            AssertEx.EqualTolerance(1, quantity19.MilligraySquareMillimeters, MilligraySquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, quantity19.Unit);

        }

        [Fact]
        public void FromGraySquareMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => DoseAreaProduct.FromGraySquareMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => DoseAreaProduct.FromGraySquareMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromGraySquareMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => DoseAreaProduct.FromGraySquareMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            AssertEx.EqualTolerance(CentigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareCentimeter), CentigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareDecimeter), CentigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareMeter), CentigraySquareMetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareMillimeter), CentigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareCentimeter), DecigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareDecimeter), DecigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareMeter), DecigraySquareMetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareMillimeter), DecigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(GraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareCentimeter), GraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(GraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareDecimeter), GraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(GraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareMeter), GraySquareMetersTolerance);
            AssertEx.EqualTolerance(GraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareMillimeter), GraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareCentimeter), MicrograySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareDecimeter), MicrograySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareMeter), MicrograySquareMetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareMillimeter), MicrograySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareCentimeter), MilligraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareDecimeter), MilligraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareMeter), MilligraySquareMetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareMillimeter), MilligraySquareMillimetersTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareCentimeters, CentigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareCentimeters, CentigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareDecimeters, CentigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareDecimeters, CentigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMeters, CentigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMeters, CentigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMillimeters, CentigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMillimeters, CentigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareCentimeters, DecigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareCentimeters, DecigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareDecimeters, DecigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareDecimeters, DecigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMeters, DecigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMeters, DecigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMillimeters, DecigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMillimeters, DecigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GraySquareCentimeters, GraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GraySquareCentimeters, GraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GraySquareDecimeters, GraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GraySquareDecimeters, GraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GraySquareMeters, GraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GraySquareMeters, GraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GraySquareMillimeters, GraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GraySquareMillimeters, GraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareCentimeters, MicrograySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareCentimeters, MicrograySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareDecimeters, MicrograySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareDecimeters, MicrograySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMeters, MicrograySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMeters, MicrograySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMillimeters, MicrograySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMillimeters, MicrograySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareCentimeters, MilligraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareCentimeters, MilligraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareDecimeters, MilligraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareDecimeters, MilligraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMeters, MilligraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMeters, MilligraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMillimeters, MilligraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMillimeters, MilligraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareCentimeters, CentigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareCentimeters, CentigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareDecimeters, CentigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareDecimeters, CentigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMeters, CentigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMeters, CentigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMillimeters, CentigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigraySquareMillimeters, CentigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareCentimeters, DecigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareCentimeters, DecigraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareDecimeters, DecigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareDecimeters, DecigraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMeters, DecigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMeters, DecigraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMillimeters, DecigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigraySquareMillimeters, DecigraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareCentimeters, GraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareCentimeters, GraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareDecimeters, GraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareDecimeters, GraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareMeters, GraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareMeters, GraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareMillimeters, GraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GraySquareMillimeters, GraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareCentimeters, MicrograySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareCentimeters, MicrograySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareDecimeters, MicrograySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareDecimeters, MicrograySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMeters, MicrograySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMeters, MicrograySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMillimeters, MicrograySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograySquareMillimeters, MicrograySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareCentimeters, MilligraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareCentimeters, MilligraySquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareDecimeters, MilligraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareDecimeters, MilligraySquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMeters, MilligraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMeters, MilligraySquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMillimeters, MilligraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligraySquareMillimeters, MilligraySquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(DoseAreaProductUnit unit)
        {
            var inBaseUnits = DoseAreaProduct.From(1.0, DoseAreaProduct.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(DoseAreaProductUnit unit)
        {
            var quantity = DoseAreaProduct.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(DoseAreaProductUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = DoseAreaProduct.Units.First(u => u != DoseAreaProduct.BaseUnit);

            var quantity = DoseAreaProduct.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(DoseAreaProductUnit unit)
        {
            var quantity = default(DoseAreaProduct);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigraySquareCentimeters(graysquaremeter.CentigraySquareCentimeters).GraySquareMeters, CentigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigraySquareDecimeters(graysquaremeter.CentigraySquareDecimeters).GraySquareMeters, CentigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigraySquareMeters(graysquaremeter.CentigraySquareMeters).GraySquareMeters, CentigraySquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigraySquareMillimeters(graysquaremeter.CentigraySquareMillimeters).GraySquareMeters, CentigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigraySquareCentimeters(graysquaremeter.DecigraySquareCentimeters).GraySquareMeters, DecigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigraySquareDecimeters(graysquaremeter.DecigraySquareDecimeters).GraySquareMeters, DecigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigraySquareMeters(graysquaremeter.DecigraySquareMeters).GraySquareMeters, DecigraySquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigraySquareMillimeters(graysquaremeter.DecigraySquareMillimeters).GraySquareMeters, DecigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGraySquareCentimeters(graysquaremeter.GraySquareCentimeters).GraySquareMeters, GraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGraySquareDecimeters(graysquaremeter.GraySquareDecimeters).GraySquareMeters, GraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGraySquareMeters(graysquaremeter.GraySquareMeters).GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGraySquareMillimeters(graysquaremeter.GraySquareMillimeters).GraySquareMeters, GraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograySquareCentimeters(graysquaremeter.MicrograySquareCentimeters).GraySquareMeters, MicrograySquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograySquareDecimeters(graysquaremeter.MicrograySquareDecimeters).GraySquareMeters, MicrograySquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograySquareMeters(graysquaremeter.MicrograySquareMeters).GraySquareMeters, MicrograySquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograySquareMillimeters(graysquaremeter.MicrograySquareMillimeters).GraySquareMeters, MicrograySquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligraySquareCentimeters(graysquaremeter.MilligraySquareCentimeters).GraySquareMeters, MilligraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligraySquareDecimeters(graysquaremeter.MilligraySquareDecimeters).GraySquareMeters, MilligraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligraySquareMeters(graysquaremeter.MilligraySquareMeters).GraySquareMeters, MilligraySquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligraySquareMillimeters(graysquaremeter.MilligraySquareMillimeters).GraySquareMeters, MilligraySquareMillimetersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            DoseAreaProduct v = DoseAreaProduct.FromGraySquareMeters(1);
            AssertEx.EqualTolerance(-1, -v.GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(2, (DoseAreaProduct.FromGraySquareMeters(3)-v).GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(2, (DoseAreaProduct.FromGraySquareMeters(10)/5).GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(2, DoseAreaProduct.FromGraySquareMeters(10)/DoseAreaProduct.FromGraySquareMeters(5), GraySquareMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            DoseAreaProduct oneGraySquareMeter = DoseAreaProduct.FromGraySquareMeters(1);
            DoseAreaProduct twoGraySquareMeters = DoseAreaProduct.FromGraySquareMeters(2);

            Assert.True(oneGraySquareMeter < twoGraySquareMeters);
            Assert.True(oneGraySquareMeter <= twoGraySquareMeters);
            Assert.True(twoGraySquareMeters > oneGraySquareMeter);
            Assert.True(twoGraySquareMeters >= oneGraySquareMeter);

            Assert.False(oneGraySquareMeter > twoGraySquareMeters);
            Assert.False(oneGraySquareMeter >= twoGraySquareMeters);
            Assert.False(twoGraySquareMeters < oneGraySquareMeter);
            Assert.False(twoGraySquareMeters <= oneGraySquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Equal(0, graysquaremeter.CompareTo(graysquaremeter));
            Assert.True(graysquaremeter.CompareTo(DoseAreaProduct.Zero) > 0);
            Assert.True(DoseAreaProduct.Zero.CompareTo(graysquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Throws<ArgumentException>(() => graysquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Throws<ArgumentNullException>(() => graysquaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, DoseAreaProductUnit.GraySquareMeter, 1, DoseAreaProductUnit.GraySquareMeter, true)]  // Same value and unit.
        [InlineData(1, DoseAreaProductUnit.GraySquareMeter, 2, DoseAreaProductUnit.GraySquareMeter, false)] // Different value.
        [InlineData(2, DoseAreaProductUnit.GraySquareMeter, 1, DoseAreaProductUnit.CentigraySquareCentimeter, false)] // Different value and unit.
        [InlineData(1, DoseAreaProductUnit.GraySquareMeter, 1, DoseAreaProductUnit.CentigraySquareCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, DoseAreaProductUnit unitA, double valueB, DoseAreaProductUnit unitB, bool expectEqual)
        {
            var a = new DoseAreaProduct(valueA, unitA);
            var b = new DoseAreaProduct(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = DoseAreaProduct.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.True(v.Equals(DoseAreaProduct.FromGraySquareMeters(1), GraySquareMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(DoseAreaProduct.Zero, GraySquareMetersTolerance, ComparisonType.Relative));
            Assert.True(DoseAreaProduct.FromGraySquareMeters(100).Equals(DoseAreaProduct.FromGraySquareMeters(120), (double)0.3m, ComparisonType.Relative));
            Assert.False(DoseAreaProduct.FromGraySquareMeters(100).Equals(DoseAreaProduct.FromGraySquareMeters(120), (double)0.1m, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(DoseAreaProduct.FromGraySquareMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.False(graysquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.False(graysquaremeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(DoseAreaProductUnit)).Cast<DoseAreaProductUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(DoseAreaProduct.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareCentimeter).ToString());
            Assert.Equal("1 cGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareDecimeter).ToString());
            Assert.Equal("1 cGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMeter).ToString());
            Assert.Equal("1 cGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMillimeter).ToString());
            Assert.Equal("1 dGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareCentimeter).ToString());
            Assert.Equal("1 dGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareDecimeter).ToString());
            Assert.Equal("1 dGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMeter).ToString());
            Assert.Equal("1 dGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMillimeter).ToString());
            Assert.Equal("1 Gy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareCentimeter).ToString());
            Assert.Equal("1 Gy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareDecimeter).ToString());
            Assert.Equal("1 Gy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMeter).ToString());
            Assert.Equal("1 Gy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMillimeter).ToString());
            Assert.Equal("1 µGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareCentimeter).ToString());
            Assert.Equal("1 µGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareDecimeter).ToString());
            Assert.Equal("1 µGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMeter).ToString());
            Assert.Equal("1 µGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMillimeter).ToString());
            Assert.Equal("1 mGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareCentimeter).ToString());
            Assert.Equal("1 mGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareDecimeter).ToString());
            Assert.Equal("1 mGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMeter).ToString());
            Assert.Equal("1 mGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s1"));
            Assert.Equal("0.12 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s2"));
            Assert.Equal("0.123 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s3"));
            Assert.Equal("0.1235 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(DoseAreaProduct)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(DoseAreaProductUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(DoseAreaProduct.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(DoseAreaProduct.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(new {DoseAreaProduct.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(value);
            Assert.Equal(DoseAreaProduct.FromGraySquareMeters(-value), -quantity);
        }
    }
}
