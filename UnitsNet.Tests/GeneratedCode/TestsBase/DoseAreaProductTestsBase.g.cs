//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of DoseAreaProduct.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DoseAreaProductTestsBase : QuantityTestsBase
    {
        protected abstract double CentigrayPerSquareCentimetersInOneGrayPerSquareMeter { get; }
        protected abstract double CentigrayPerSquareDecimetersInOneGrayPerSquareMeter { get; }
        protected abstract double CentigrayPerSquareMetersInOneGrayPerSquareMeter { get; }
        protected abstract double CentigrayPerSquareMillimetersInOneGrayPerSquareMeter { get; }
        protected abstract double DecigrayPerSquareCentimetersInOneGrayPerSquareMeter { get; }
        protected abstract double DecigrayPerSquareDecimetersInOneGrayPerSquareMeter { get; }
        protected abstract double DecigrayPerSquareMetersInOneGrayPerSquareMeter { get; }
        protected abstract double DecigrayPerSquareMillimetersInOneGrayPerSquareMeter { get; }
        protected abstract double GrayPerSquareCentimetersInOneGrayPerSquareMeter { get; }
        protected abstract double GrayPerSquareDecimetersInOneGrayPerSquareMeter { get; }
        protected abstract double GrayPerSquareMetersInOneGrayPerSquareMeter { get; }
        protected abstract double GrayPerSquareMillimetersInOneGrayPerSquareMeter { get; }
        protected abstract double MicrograyPerSquareCentimetersInOneGrayPerSquareMeter { get; }
        protected abstract double MicrograyPerSquareDecimetersInOneGrayPerSquareMeter { get; }
        protected abstract double MicrograyPerSquareMetersInOneGrayPerSquareMeter { get; }
        protected abstract double MicrograyPerSquareMillimetersInOneGrayPerSquareMeter { get; }
        protected abstract double MilligrayPerSquareCentimetersInOneGrayPerSquareMeter { get; }
        protected abstract double MilligrayPerSquareDecimetersInOneGrayPerSquareMeter { get; }
        protected abstract double MilligrayPerSquareMetersInOneGrayPerSquareMeter { get; }
        protected abstract double MilligrayPerSquareMillimetersInOneGrayPerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigrayPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double CentigrayPerSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double CentigrayPerSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double CentigrayPerSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigrayPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigrayPerSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigrayPerSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double DecigrayPerSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double GrayPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double GrayPerSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double GrayPerSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double GrayPerSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograyPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograyPerSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograyPerSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograyPerSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligrayPerSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligrayPerSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligrayPerSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MilligrayPerSquareMillimetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(DoseAreaProductUnit unit)
        {
            return unit switch
            {
                DoseAreaProductUnit.CentigrayPerSquareCentimeter => (CentigrayPerSquareCentimetersInOneGrayPerSquareMeter, CentigrayPerSquareCentimetersTolerance),
                DoseAreaProductUnit.CentigrayPerSquareDecimeter => (CentigrayPerSquareDecimetersInOneGrayPerSquareMeter, CentigrayPerSquareDecimetersTolerance),
                DoseAreaProductUnit.CentigrayPerSquareMeter => (CentigrayPerSquareMetersInOneGrayPerSquareMeter, CentigrayPerSquareMetersTolerance),
                DoseAreaProductUnit.CentigrayPerSquareMillimeter => (CentigrayPerSquareMillimetersInOneGrayPerSquareMeter, CentigrayPerSquareMillimetersTolerance),
                DoseAreaProductUnit.DecigrayPerSquareCentimeter => (DecigrayPerSquareCentimetersInOneGrayPerSquareMeter, DecigrayPerSquareCentimetersTolerance),
                DoseAreaProductUnit.DecigrayPerSquareDecimeter => (DecigrayPerSquareDecimetersInOneGrayPerSquareMeter, DecigrayPerSquareDecimetersTolerance),
                DoseAreaProductUnit.DecigrayPerSquareMeter => (DecigrayPerSquareMetersInOneGrayPerSquareMeter, DecigrayPerSquareMetersTolerance),
                DoseAreaProductUnit.DecigrayPerSquareMillimeter => (DecigrayPerSquareMillimetersInOneGrayPerSquareMeter, DecigrayPerSquareMillimetersTolerance),
                DoseAreaProductUnit.GrayPerSquareCentimeter => (GrayPerSquareCentimetersInOneGrayPerSquareMeter, GrayPerSquareCentimetersTolerance),
                DoseAreaProductUnit.GrayPerSquareDecimeter => (GrayPerSquareDecimetersInOneGrayPerSquareMeter, GrayPerSquareDecimetersTolerance),
                DoseAreaProductUnit.GrayPerSquareMeter => (GrayPerSquareMetersInOneGrayPerSquareMeter, GrayPerSquareMetersTolerance),
                DoseAreaProductUnit.GrayPerSquareMillimeter => (GrayPerSquareMillimetersInOneGrayPerSquareMeter, GrayPerSquareMillimetersTolerance),
                DoseAreaProductUnit.MicrograyPerSquareCentimeter => (MicrograyPerSquareCentimetersInOneGrayPerSquareMeter, MicrograyPerSquareCentimetersTolerance),
                DoseAreaProductUnit.MicrograyPerSquareDecimeter => (MicrograyPerSquareDecimetersInOneGrayPerSquareMeter, MicrograyPerSquareDecimetersTolerance),
                DoseAreaProductUnit.MicrograyPerSquareMeter => (MicrograyPerSquareMetersInOneGrayPerSquareMeter, MicrograyPerSquareMetersTolerance),
                DoseAreaProductUnit.MicrograyPerSquareMillimeter => (MicrograyPerSquareMillimetersInOneGrayPerSquareMeter, MicrograyPerSquareMillimetersTolerance),
                DoseAreaProductUnit.MilligrayPerSquareCentimeter => (MilligrayPerSquareCentimetersInOneGrayPerSquareMeter, MilligrayPerSquareCentimetersTolerance),
                DoseAreaProductUnit.MilligrayPerSquareDecimeter => (MilligrayPerSquareDecimetersInOneGrayPerSquareMeter, MilligrayPerSquareDecimetersTolerance),
                DoseAreaProductUnit.MilligrayPerSquareMeter => (MilligrayPerSquareMetersInOneGrayPerSquareMeter, MilligrayPerSquareMetersTolerance),
                DoseAreaProductUnit.MilligrayPerSquareMillimeter => (MilligrayPerSquareMillimetersInOneGrayPerSquareMeter, MilligrayPerSquareMillimetersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { DoseAreaProductUnit.CentigrayPerSquareCentimeter },
            new object[] { DoseAreaProductUnit.CentigrayPerSquareDecimeter },
            new object[] { DoseAreaProductUnit.CentigrayPerSquareMeter },
            new object[] { DoseAreaProductUnit.CentigrayPerSquareMillimeter },
            new object[] { DoseAreaProductUnit.DecigrayPerSquareCentimeter },
            new object[] { DoseAreaProductUnit.DecigrayPerSquareDecimeter },
            new object[] { DoseAreaProductUnit.DecigrayPerSquareMeter },
            new object[] { DoseAreaProductUnit.DecigrayPerSquareMillimeter },
            new object[] { DoseAreaProductUnit.GrayPerSquareCentimeter },
            new object[] { DoseAreaProductUnit.GrayPerSquareDecimeter },
            new object[] { DoseAreaProductUnit.GrayPerSquareMeter },
            new object[] { DoseAreaProductUnit.GrayPerSquareMillimeter },
            new object[] { DoseAreaProductUnit.MicrograyPerSquareCentimeter },
            new object[] { DoseAreaProductUnit.MicrograyPerSquareDecimeter },
            new object[] { DoseAreaProductUnit.MicrograyPerSquareMeter },
            new object[] { DoseAreaProductUnit.MicrograyPerSquareMillimeter },
            new object[] { DoseAreaProductUnit.MilligrayPerSquareCentimeter },
            new object[] { DoseAreaProductUnit.MilligrayPerSquareDecimeter },
            new object[] { DoseAreaProductUnit.MilligrayPerSquareMeter },
            new object[] { DoseAreaProductUnit.MilligrayPerSquareMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new DoseAreaProduct();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new DoseAreaProduct(double.PositiveInfinity, DoseAreaProductUnit.GrayPerSquareMeter));
            Assert.Throws<ArgumentException>(() => new DoseAreaProduct(double.NegativeInfinity, DoseAreaProductUnit.GrayPerSquareMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new DoseAreaProduct(double.NaN, DoseAreaProductUnit.GrayPerSquareMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new DoseAreaProduct(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new DoseAreaProduct(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (DoseAreaProduct) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void DoseAreaProduct_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareMeter);

            QuantityInfo<DoseAreaProductUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(DoseAreaProduct.Zero, quantityInfo.Zero);
            Assert.Equal("DoseAreaProduct", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<DoseAreaProductUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void GrayPerSquareMeterToDoseAreaProductUnits()
        {
            DoseAreaProduct graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            AssertEx.EqualTolerance(CentigrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.CentigrayPerSquareCentimeters, CentigrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(CentigrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.CentigrayPerSquareDecimeters, CentigrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(CentigrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.CentigrayPerSquareMeters, CentigrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(CentigrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.CentigrayPerSquareMillimeters, CentigrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.DecigrayPerSquareCentimeters, DecigrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.DecigrayPerSquareDecimeters, DecigrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.DecigrayPerSquareMeters, DecigrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.DecigrayPerSquareMillimeters, DecigrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.GrayPerSquareCentimeters, GrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.GrayPerSquareDecimeters, GrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.GrayPerSquareMillimeters, GrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.MicrograyPerSquareCentimeters, MicrograyPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.MicrograyPerSquareDecimeters, MicrograyPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.MicrograyPerSquareMeters, MicrograyPerSquareMetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.MicrograyPerSquareMillimeters, MicrograyPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.MilligrayPerSquareCentimeters, MilligrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.MilligrayPerSquareDecimeters, MilligrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.MilligrayPerSquareMeters, MilligrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.MilligrayPerSquareMillimeters, MilligrayPerSquareMillimetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigrayPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity00.CentigrayPerSquareCentimeters, CentigrayPerSquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, quantity00.Unit);

            var quantity01 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigrayPerSquareDecimeter);
            AssertEx.EqualTolerance(1, quantity01.CentigrayPerSquareDecimeters, CentigrayPerSquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, quantity01.Unit);

            var quantity02 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigrayPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity02.CentigrayPerSquareMeters, CentigrayPerSquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, quantity02.Unit);

            var quantity03 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigrayPerSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity03.CentigrayPerSquareMillimeters, CentigrayPerSquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, quantity03.Unit);

            var quantity04 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigrayPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity04.DecigrayPerSquareCentimeters, DecigrayPerSquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, quantity04.Unit);

            var quantity05 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigrayPerSquareDecimeter);
            AssertEx.EqualTolerance(1, quantity05.DecigrayPerSquareDecimeters, DecigrayPerSquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, quantity05.Unit);

            var quantity06 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigrayPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity06.DecigrayPerSquareMeters, DecigrayPerSquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, quantity06.Unit);

            var quantity07 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigrayPerSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity07.DecigrayPerSquareMillimeters, DecigrayPerSquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, quantity07.Unit);

            var quantity08 = DoseAreaProduct.From(1, DoseAreaProductUnit.GrayPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity08.GrayPerSquareCentimeters, GrayPerSquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, quantity08.Unit);

            var quantity09 = DoseAreaProduct.From(1, DoseAreaProductUnit.GrayPerSquareDecimeter);
            AssertEx.EqualTolerance(1, quantity09.GrayPerSquareDecimeters, GrayPerSquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, quantity09.Unit);

            var quantity10 = DoseAreaProduct.From(1, DoseAreaProductUnit.GrayPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity10.GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, quantity10.Unit);

            var quantity11 = DoseAreaProduct.From(1, DoseAreaProductUnit.GrayPerSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity11.GrayPerSquareMillimeters, GrayPerSquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, quantity11.Unit);

            var quantity12 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograyPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity12.MicrograyPerSquareCentimeters, MicrograyPerSquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, quantity12.Unit);

            var quantity13 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograyPerSquareDecimeter);
            AssertEx.EqualTolerance(1, quantity13.MicrograyPerSquareDecimeters, MicrograyPerSquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, quantity13.Unit);

            var quantity14 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograyPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity14.MicrograyPerSquareMeters, MicrograyPerSquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, quantity14.Unit);

            var quantity15 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograyPerSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity15.MicrograyPerSquareMillimeters, MicrograyPerSquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, quantity15.Unit);

            var quantity16 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligrayPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity16.MilligrayPerSquareCentimeters, MilligrayPerSquareCentimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, quantity16.Unit);

            var quantity17 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligrayPerSquareDecimeter);
            AssertEx.EqualTolerance(1, quantity17.MilligrayPerSquareDecimeters, MilligrayPerSquareDecimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, quantity17.Unit);

            var quantity18 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligrayPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity18.MilligrayPerSquareMeters, MilligrayPerSquareMetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, quantity18.Unit);

            var quantity19 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligrayPerSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity19.MilligrayPerSquareMillimeters, MilligrayPerSquareMillimetersTolerance);
            Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, quantity19.Unit);

        }

        [Fact]
        public void FromGrayPerSquareMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => DoseAreaProduct.FromGrayPerSquareMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => DoseAreaProduct.FromGrayPerSquareMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromGrayPerSquareMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => DoseAreaProduct.FromGrayPerSquareMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            AssertEx.EqualTolerance(CentigrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.CentigrayPerSquareCentimeter), CentigrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(CentigrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.CentigrayPerSquareDecimeter), CentigrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(CentigrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.CentigrayPerSquareMeter), CentigrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(CentigrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.CentigrayPerSquareMillimeter), CentigrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.DecigrayPerSquareCentimeter), DecigrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.DecigrayPerSquareDecimeter), DecigrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.DecigrayPerSquareMeter), DecigrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(DecigrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.DecigrayPerSquareMillimeter), DecigrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.GrayPerSquareCentimeter), GrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.GrayPerSquareDecimeter), GrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.GrayPerSquareMeter), GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(GrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.GrayPerSquareMillimeter), GrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MicrograyPerSquareCentimeter), MicrograyPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MicrograyPerSquareDecimeter), MicrograyPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MicrograyPerSquareMeter), MicrograyPerSquareMetersTolerance);
            AssertEx.EqualTolerance(MicrograyPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MicrograyPerSquareMillimeter), MicrograyPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareCentimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MilligrayPerSquareCentimeter), MilligrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareDecimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MilligrayPerSquareDecimeter), MilligrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareMetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MilligrayPerSquareMeter), MilligrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(MilligrayPerSquareMillimetersInOneGrayPerSquareMeter, graypersquaremeter.As(DoseAreaProductUnit.MilligrayPerSquareMillimeter), MilligrayPerSquareMillimetersTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareCentimeters, CentigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareCentimeters, CentigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareDecimeters, CentigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareDecimeters, CentigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMeters, CentigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMeters, CentigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 cGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMillimeters, CentigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMillimeters, CentigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareCentimeters, DecigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareCentimeters, DecigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareDecimeters, DecigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareDecimeters, DecigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMeters, DecigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMeters, DecigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 dGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMillimeters, DecigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMillimeters, DecigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareCentimeters, GrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareCentimeters, GrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareDecimeters, GrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareDecimeters, GrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMeters, GrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMeters, GrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Gy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMillimeters, GrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMillimeters, GrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareCentimeters, MicrograyPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareCentimeters, MicrograyPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareDecimeters, MicrograyPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareDecimeters, MicrograyPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMeters, MicrograyPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMeters, MicrograyPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 µGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMillimeters, MicrograyPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMillimeters, MicrograyPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareCentimeters, MilligrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareCentimeters, MilligrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareDecimeters, MilligrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareDecimeters, MilligrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMeters, MilligrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMeters, MilligrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 mGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMillimeters, MilligrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = DoseAreaProduct.Parse("1 мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMillimeters, MilligrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareCentimeters, CentigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareCentimeters, CentigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareDecimeters, CentigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareDecimeters, CentigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMeters, CentigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMeters, CentigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 cGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMillimeters, CentigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigrayPerSquareMillimeters, CentigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareCentimeters, DecigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareCentimeters, DecigrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareDecimeters, DecigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareDecimeters, DecigrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMeters, DecigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMeters, DecigrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 dGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMillimeters, DecigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigrayPerSquareMillimeters, DecigrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareCentimeters, GrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareCentimeters, GrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareDecimeters, GrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareDecimeters, GrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMeters, GrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMeters, GrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Gy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMillimeters, GrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GrayPerSquareMillimeters, GrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareCentimeters, MicrograyPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareCentimeters, MicrograyPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareDecimeters, MicrograyPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareDecimeters, MicrograyPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMeters, MicrograyPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMeters, MicrograyPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 µGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMillimeters, MicrograyPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrograyPerSquareMillimeters, MicrograyPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareCentimeters, MilligrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareCentimeters, MilligrayPerSquareCentimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareDecimeters, MilligrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareDecimeters, MilligrayPerSquareDecimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMeters, MilligrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMeters, MilligrayPerSquareMetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 mGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMillimeters, MilligrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(DoseAreaProduct.TryParse("1 мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligrayPerSquareMillimeters, MilligrayPerSquareMillimetersTolerance);
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("cGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("dGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Gy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("µGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·dm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("mGy·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = DoseAreaProduct.ParseUnit("мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("cGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("сГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.CentigrayPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("dGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("дГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.DecigrayPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Gy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("Гр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.GrayPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("µGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мкГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MicrograyPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·dm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·дм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareDecimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("mGy·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(DoseAreaProduct.TryParseUnit("мГр·мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DoseAreaProductUnit.MilligrayPerSquareMillimeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(DoseAreaProductUnit unit)
        {
            var inBaseUnits = DoseAreaProduct.From(1.0, DoseAreaProduct.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(DoseAreaProductUnit unit)
        {
            var quantity = DoseAreaProduct.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(DoseAreaProductUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = DoseAreaProduct.Units.First(u => u != DoseAreaProduct.BaseUnit);

            var quantity = DoseAreaProduct.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(DoseAreaProductUnit unit)
        {
            var quantity = default(DoseAreaProduct);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            DoseAreaProduct graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigrayPerSquareCentimeters(graypersquaremeter.CentigrayPerSquareCentimeters).GrayPerSquareMeters, CentigrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigrayPerSquareDecimeters(graypersquaremeter.CentigrayPerSquareDecimeters).GrayPerSquareMeters, CentigrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigrayPerSquareMeters(graypersquaremeter.CentigrayPerSquareMeters).GrayPerSquareMeters, CentigrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromCentigrayPerSquareMillimeters(graypersquaremeter.CentigrayPerSquareMillimeters).GrayPerSquareMeters, CentigrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigrayPerSquareCentimeters(graypersquaremeter.DecigrayPerSquareCentimeters).GrayPerSquareMeters, DecigrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigrayPerSquareDecimeters(graypersquaremeter.DecigrayPerSquareDecimeters).GrayPerSquareMeters, DecigrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigrayPerSquareMeters(graypersquaremeter.DecigrayPerSquareMeters).GrayPerSquareMeters, DecigrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromDecigrayPerSquareMillimeters(graypersquaremeter.DecigrayPerSquareMillimeters).GrayPerSquareMeters, DecigrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGrayPerSquareCentimeters(graypersquaremeter.GrayPerSquareCentimeters).GrayPerSquareMeters, GrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGrayPerSquareDecimeters(graypersquaremeter.GrayPerSquareDecimeters).GrayPerSquareMeters, GrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGrayPerSquareMeters(graypersquaremeter.GrayPerSquareMeters).GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromGrayPerSquareMillimeters(graypersquaremeter.GrayPerSquareMillimeters).GrayPerSquareMeters, GrayPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograyPerSquareCentimeters(graypersquaremeter.MicrograyPerSquareCentimeters).GrayPerSquareMeters, MicrograyPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograyPerSquareDecimeters(graypersquaremeter.MicrograyPerSquareDecimeters).GrayPerSquareMeters, MicrograyPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograyPerSquareMeters(graypersquaremeter.MicrograyPerSquareMeters).GrayPerSquareMeters, MicrograyPerSquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMicrograyPerSquareMillimeters(graypersquaremeter.MicrograyPerSquareMillimeters).GrayPerSquareMeters, MicrograyPerSquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligrayPerSquareCentimeters(graypersquaremeter.MilligrayPerSquareCentimeters).GrayPerSquareMeters, MilligrayPerSquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligrayPerSquareDecimeters(graypersquaremeter.MilligrayPerSquareDecimeters).GrayPerSquareMeters, MilligrayPerSquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligrayPerSquareMeters(graypersquaremeter.MilligrayPerSquareMeters).GrayPerSquareMeters, MilligrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(1, DoseAreaProduct.FromMilligrayPerSquareMillimeters(graypersquaremeter.MilligrayPerSquareMillimeters).GrayPerSquareMeters, MilligrayPerSquareMillimetersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            DoseAreaProduct v = DoseAreaProduct.FromGrayPerSquareMeters(1);
            AssertEx.EqualTolerance(-1, -v.GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(2, (DoseAreaProduct.FromGrayPerSquareMeters(3)-v).GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(2, (DoseAreaProduct.FromGrayPerSquareMeters(10)/5).GrayPerSquareMeters, GrayPerSquareMetersTolerance);
            AssertEx.EqualTolerance(2, DoseAreaProduct.FromGrayPerSquareMeters(10)/DoseAreaProduct.FromGrayPerSquareMeters(5), GrayPerSquareMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            DoseAreaProduct oneGrayPerSquareMeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            DoseAreaProduct twoGrayPerSquareMeters = DoseAreaProduct.FromGrayPerSquareMeters(2);

            Assert.True(oneGrayPerSquareMeter < twoGrayPerSquareMeters);
            Assert.True(oneGrayPerSquareMeter <= twoGrayPerSquareMeters);
            Assert.True(twoGrayPerSquareMeters > oneGrayPerSquareMeter);
            Assert.True(twoGrayPerSquareMeters >= oneGrayPerSquareMeter);

            Assert.False(oneGrayPerSquareMeter > twoGrayPerSquareMeters);
            Assert.False(oneGrayPerSquareMeter >= twoGrayPerSquareMeters);
            Assert.False(twoGrayPerSquareMeters < oneGrayPerSquareMeter);
            Assert.False(twoGrayPerSquareMeters <= oneGrayPerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            DoseAreaProduct graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            Assert.Equal(0, graypersquaremeter.CompareTo(graypersquaremeter));
            Assert.True(graypersquaremeter.CompareTo(DoseAreaProduct.Zero) > 0);
            Assert.True(DoseAreaProduct.Zero.CompareTo(graypersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            DoseAreaProduct graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            Assert.Throws<ArgumentException>(() => graypersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            DoseAreaProduct graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            Assert.Throws<ArgumentNullException>(() => graypersquaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, DoseAreaProductUnit.GrayPerSquareMeter, 1, DoseAreaProductUnit.GrayPerSquareMeter, true)]  // Same value and unit.
        [InlineData(1, DoseAreaProductUnit.GrayPerSquareMeter, 2, DoseAreaProductUnit.GrayPerSquareMeter, false)] // Different value.
        [InlineData(2, DoseAreaProductUnit.GrayPerSquareMeter, 1, DoseAreaProductUnit.CentigrayPerSquareCentimeter, false)] // Different value and unit.
        [InlineData(1, DoseAreaProductUnit.GrayPerSquareMeter, 1, DoseAreaProductUnit.CentigrayPerSquareCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, DoseAreaProductUnit unitA, double valueB, DoseAreaProductUnit unitB, bool expectEqual)
        {
            var a = new DoseAreaProduct(valueA, unitA);
            var b = new DoseAreaProduct(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = DoseAreaProduct.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = DoseAreaProduct.FromGrayPerSquareMeters(1);
            Assert.True(v.Equals(DoseAreaProduct.FromGrayPerSquareMeters(1), GrayPerSquareMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(DoseAreaProduct.Zero, GrayPerSquareMetersTolerance, ComparisonType.Relative));
            Assert.True(DoseAreaProduct.FromGrayPerSquareMeters(100).Equals(DoseAreaProduct.FromGrayPerSquareMeters(120), (double)0.3m, ComparisonType.Relative));
            Assert.False(DoseAreaProduct.FromGrayPerSquareMeters(100).Equals(DoseAreaProduct.FromGrayPerSquareMeters(120), (double)0.1m, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = DoseAreaProduct.FromGrayPerSquareMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(DoseAreaProduct.FromGrayPerSquareMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            DoseAreaProduct graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            Assert.False(graypersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            DoseAreaProduct graypersquaremeter = DoseAreaProduct.FromGrayPerSquareMeters(1);
            Assert.False(graypersquaremeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(DoseAreaProductUnit)).Cast<DoseAreaProductUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(DoseAreaProduct.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareCentimeter).ToString());
                Assert.Equal("1 cGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareDecimeter).ToString());
                Assert.Equal("1 cGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareMeter).ToString());
                Assert.Equal("1 cGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareMillimeter).ToString());
                Assert.Equal("1 dGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareCentimeter).ToString());
                Assert.Equal("1 dGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareDecimeter).ToString());
                Assert.Equal("1 dGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareMeter).ToString());
                Assert.Equal("1 dGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareMillimeter).ToString());
                Assert.Equal("1 Gy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareCentimeter).ToString());
                Assert.Equal("1 Gy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareDecimeter).ToString());
                Assert.Equal("1 Gy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareMeter).ToString());
                Assert.Equal("1 Gy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareMillimeter).ToString());
                Assert.Equal("1 µGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareCentimeter).ToString());
                Assert.Equal("1 µGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareDecimeter).ToString());
                Assert.Equal("1 µGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareMeter).ToString());
                Assert.Equal("1 µGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareMillimeter).ToString());
                Assert.Equal("1 mGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareCentimeter).ToString());
                Assert.Equal("1 mGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareDecimeter).ToString());
                Assert.Equal("1 mGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareMeter).ToString());
                Assert.Equal("1 mGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareMillimeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigrayPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigrayPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.GrayPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograyPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligrayPerSquareMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s1"));
                Assert.Equal("0.12 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s2"));
                Assert.Equal("0.123 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s3"));
                Assert.Equal("0.1235 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GrayPerSquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(DoseAreaProduct)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(DoseAreaProductUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal(DoseAreaProduct.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal(DoseAreaProduct.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(1.0);
            Assert.Equal(new {DoseAreaProduct.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = DoseAreaProduct.FromGrayPerSquareMeters(value);
            Assert.Equal(DoseAreaProduct.FromGrayPerSquareMeters(-value), -quantity);
        }
    }
}
