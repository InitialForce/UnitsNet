//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RadiationEquivalentDoseRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RadiationEquivalentDoseRateTestsBase : QuantityTestsBase
    {
        protected abstract double MicrosievertsPerHourInOneSievertPerHour { get; }
        protected abstract double MilliroentgensEquivalentManPerHourInOneSievertPerHour { get; }
        protected abstract double MillisievertsPerHourInOneSievertPerHour { get; }
        protected abstract double NanosievertsPerHourInOneSievertPerHour { get; }
        protected abstract double RoentgensEquivalentManPerHourInOneSievertPerHour { get; }
        protected abstract double SievertsPerHourInOneSievertPerHour { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double MicrosievertsPerHourTolerance { get { return 1e-5; } }
        protected virtual double MilliroentgensEquivalentManPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillisievertsPerHourTolerance { get { return 1e-5; } }
        protected virtual double NanosievertsPerHourTolerance { get { return 1e-5; } }
        protected virtual double RoentgensEquivalentManPerHourTolerance { get { return 1e-5; } }
        protected virtual double SievertsPerHourTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(RadiationEquivalentDoseRateUnit unit)
        {
            return unit switch
            {
                RadiationEquivalentDoseRateUnit.MicrosievertPerHour => (MicrosievertsPerHourInOneSievertPerHour, MicrosievertsPerHourTolerance),
                RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour => (MilliroentgensEquivalentManPerHourInOneSievertPerHour, MilliroentgensEquivalentManPerHourTolerance),
                RadiationEquivalentDoseRateUnit.MillisievertPerHour => (MillisievertsPerHourInOneSievertPerHour, MillisievertsPerHourTolerance),
                RadiationEquivalentDoseRateUnit.NanosievertPerHour => (NanosievertsPerHourInOneSievertPerHour, NanosievertsPerHourTolerance),
                RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour => (RoentgensEquivalentManPerHourInOneSievertPerHour, RoentgensEquivalentManPerHourTolerance),
                RadiationEquivalentDoseRateUnit.SievertPerHour => (SievertsPerHourInOneSievertPerHour, SievertsPerHourTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { RadiationEquivalentDoseRateUnit.MicrosievertPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.MillisievertPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.NanosievertPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.SievertPerHour },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RadiationEquivalentDoseRate();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RadiationEquivalentDoseRate(double.PositiveInfinity, RadiationEquivalentDoseRateUnit.SievertPerHour));
            Assert.Throws<ArgumentException>(() => new RadiationEquivalentDoseRate(double.NegativeInfinity, RadiationEquivalentDoseRateUnit.SievertPerHour));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RadiationEquivalentDoseRate(double.NaN, RadiationEquivalentDoseRateUnit.SievertPerHour));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RadiationEquivalentDoseRate(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new RadiationEquivalentDoseRate(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (RadiationEquivalentDoseRate) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void RadiationEquivalentDoseRate_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerHour);

            QuantityInfo<RadiationEquivalentDoseRateUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(RadiationEquivalentDoseRate.Zero, quantityInfo.Zero);
            Assert.Equal("RadiationEquivalentDoseRate", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<RadiationEquivalentDoseRateUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void SievertPerHourToRadiationEquivalentDoseRateUnits()
        {
            RadiationEquivalentDoseRate sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            AssertEx.EqualTolerance(MicrosievertsPerHourInOneSievertPerHour, sievertperhour.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
            AssertEx.EqualTolerance(MilliroentgensEquivalentManPerHourInOneSievertPerHour, sievertperhour.MilliroentgensEquivalentManPerHour, MilliroentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(MillisievertsPerHourInOneSievertPerHour, sievertperhour.MillisievertsPerHour, MillisievertsPerHourTolerance);
            AssertEx.EqualTolerance(NanosievertsPerHourInOneSievertPerHour, sievertperhour.NanosievertsPerHour, NanosievertsPerHourTolerance);
            AssertEx.EqualTolerance(RoentgensEquivalentManPerHourInOneSievertPerHour, sievertperhour.RoentgensEquivalentManPerHour, RoentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(SievertsPerHourInOneSievertPerHour, sievertperhour.SievertsPerHour, SievertsPerHourTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour);
            AssertEx.EqualTolerance(1, quantity00.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, quantity00.Unit);

            var quantity01 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour);
            AssertEx.EqualTolerance(1, quantity01.MilliroentgensEquivalentManPerHour, MilliroentgensEquivalentManPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, quantity01.Unit);

            var quantity02 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MillisievertPerHour);
            AssertEx.EqualTolerance(1, quantity02.MillisievertsPerHour, MillisievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, quantity02.Unit);

            var quantity03 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.NanosievertPerHour);
            AssertEx.EqualTolerance(1, quantity03.NanosievertsPerHour, NanosievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, quantity03.Unit);

            var quantity04 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour);
            AssertEx.EqualTolerance(1, quantity04.RoentgensEquivalentManPerHour, RoentgensEquivalentManPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, quantity04.Unit);

            var quantity05 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.SievertPerHour);
            AssertEx.EqualTolerance(1, quantity05.SievertsPerHour, SievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, quantity05.Unit);

        }

        [Fact]
        public void FromSievertsPerHour_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RadiationEquivalentDoseRate.FromSievertsPerHour(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => RadiationEquivalentDoseRate.FromSievertsPerHour(double.NegativeInfinity));
        }

        [Fact]
        public void FromSievertsPerHour_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RadiationEquivalentDoseRate.FromSievertsPerHour(double.NaN));
        }

        [Fact]
        public void As()
        {
            var sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            AssertEx.EqualTolerance(MicrosievertsPerHourInOneSievertPerHour, sievertperhour.As(RadiationEquivalentDoseRateUnit.MicrosievertPerHour), MicrosievertsPerHourTolerance);
            AssertEx.EqualTolerance(MilliroentgensEquivalentManPerHourInOneSievertPerHour, sievertperhour.As(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour), MilliroentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(MillisievertsPerHourInOneSievertPerHour, sievertperhour.As(RadiationEquivalentDoseRateUnit.MillisievertPerHour), MillisievertsPerHourTolerance);
            AssertEx.EqualTolerance(NanosievertsPerHourInOneSievertPerHour, sievertperhour.As(RadiationEquivalentDoseRateUnit.NanosievertPerHour), NanosievertsPerHourTolerance);
            AssertEx.EqualTolerance(RoentgensEquivalentManPerHourInOneSievertPerHour, sievertperhour.As(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour), RoentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(SievertsPerHourInOneSievertPerHour, sievertperhour.As(RadiationEquivalentDoseRateUnit.SievertPerHour), SievertsPerHourTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 µSv/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 мкЗв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 mrem/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliroentgensEquivalentManPerHour, MilliroentgensEquivalentManPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 mSv/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillisievertsPerHour, MillisievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 мЗв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillisievertsPerHour, MillisievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 nSv/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanosievertsPerHour, NanosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 нЗв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.NanosievertsPerHour, NanosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 rem/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.RoentgensEquivalentManPerHour, RoentgensEquivalentManPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 Sv/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SievertsPerHour, SievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = RadiationEquivalentDoseRate.Parse("1 Зв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.SievertsPerHour, SievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 µSv/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 мкЗв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 mrem/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilliroentgensEquivalentManPerHour, MilliroentgensEquivalentManPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 mSv/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillisievertsPerHour, MillisievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 мЗв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillisievertsPerHour, MillisievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 nSv/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanosievertsPerHour, NanosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 нЗв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanosievertsPerHour, NanosievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 rem/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.RoentgensEquivalentManPerHour, RoentgensEquivalentManPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 Sv/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SievertsPerHour, SievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsed.Unit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParse("1 Зв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SievertsPerHour, SievertsPerHourTolerance);
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("µSv/h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("мкЗв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("mrem/h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("mSv/h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("мЗв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("nSv/h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("нЗв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("rem/h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("Sv/h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = RadiationEquivalentDoseRate.ParseUnit("Зв/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("µSv/h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("мкЗв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("mrem/h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("mSv/h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("мЗв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("nSv/h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("нЗв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("rem/h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("Sv/h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsedUnit);
            }

            {
                Assert.True(RadiationEquivalentDoseRate.TryParseUnit("Зв/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(RadiationEquivalentDoseRateUnit unit)
        {
            var inBaseUnits = RadiationEquivalentDoseRate.From(1.0, RadiationEquivalentDoseRate.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(RadiationEquivalentDoseRateUnit unit)
        {
            var quantity = RadiationEquivalentDoseRate.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(RadiationEquivalentDoseRateUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = RadiationEquivalentDoseRate.Units.First(u => u != RadiationEquivalentDoseRate.BaseUnit);

            var quantity = RadiationEquivalentDoseRate.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(RadiationEquivalentDoseRateUnit unit)
        {
            var quantity = default(RadiationEquivalentDoseRate);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RadiationEquivalentDoseRate sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMicrosievertsPerHour(sievertperhour.MicrosievertsPerHour).SievertsPerHour, MicrosievertsPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMilliroentgensEquivalentManPerHour(sievertperhour.MilliroentgensEquivalentManPerHour).SievertsPerHour, MilliroentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMillisievertsPerHour(sievertperhour.MillisievertsPerHour).SievertsPerHour, MillisievertsPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromNanosievertsPerHour(sievertperhour.NanosievertsPerHour).SievertsPerHour, NanosievertsPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromRoentgensEquivalentManPerHour(sievertperhour.RoentgensEquivalentManPerHour).SievertsPerHour, RoentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromSievertsPerHour(sievertperhour.SievertsPerHour).SievertsPerHour, SievertsPerHourTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RadiationEquivalentDoseRate v = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            AssertEx.EqualTolerance(-1, -v.SievertsPerHour, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(2, (RadiationEquivalentDoseRate.FromSievertsPerHour(3)-v).SievertsPerHour, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(2, (v + v).SievertsPerHour, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(10, (v*10).SievertsPerHour, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(10, (10*v).SievertsPerHour, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(2, (RadiationEquivalentDoseRate.FromSievertsPerHour(10)/5).SievertsPerHour, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(2, RadiationEquivalentDoseRate.FromSievertsPerHour(10)/RadiationEquivalentDoseRate.FromSievertsPerHour(5), SievertsPerHourTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RadiationEquivalentDoseRate oneSievertPerHour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            RadiationEquivalentDoseRate twoSievertsPerHour = RadiationEquivalentDoseRate.FromSievertsPerHour(2);

            Assert.True(oneSievertPerHour < twoSievertsPerHour);
            Assert.True(oneSievertPerHour <= twoSievertsPerHour);
            Assert.True(twoSievertsPerHour > oneSievertPerHour);
            Assert.True(twoSievertsPerHour >= oneSievertPerHour);

            Assert.False(oneSievertPerHour > twoSievertsPerHour);
            Assert.False(oneSievertPerHour >= twoSievertsPerHour);
            Assert.False(twoSievertsPerHour < oneSievertPerHour);
            Assert.False(twoSievertsPerHour <= oneSievertPerHour);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RadiationEquivalentDoseRate sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            Assert.Equal(0, sievertperhour.CompareTo(sievertperhour));
            Assert.True(sievertperhour.CompareTo(RadiationEquivalentDoseRate.Zero) > 0);
            Assert.True(RadiationEquivalentDoseRate.Zero.CompareTo(sievertperhour) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RadiationEquivalentDoseRate sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            Assert.Throws<ArgumentException>(() => sievertperhour.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RadiationEquivalentDoseRate sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            Assert.Throws<ArgumentNullException>(() => sievertperhour.CompareTo(null));
        }

        [Theory]
        [InlineData(1, RadiationEquivalentDoseRateUnit.SievertPerHour, 1, RadiationEquivalentDoseRateUnit.SievertPerHour, true)]  // Same value and unit.
        [InlineData(1, RadiationEquivalentDoseRateUnit.SievertPerHour, 2, RadiationEquivalentDoseRateUnit.SievertPerHour, false)] // Different value.
        [InlineData(2, RadiationEquivalentDoseRateUnit.SievertPerHour, 1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour, false)] // Different value and unit.
        [InlineData(1, RadiationEquivalentDoseRateUnit.SievertPerHour, 1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, RadiationEquivalentDoseRateUnit unitA, double valueB, RadiationEquivalentDoseRateUnit unitB, bool expectEqual)
        {
            var a = new RadiationEquivalentDoseRate(valueA, unitA);
            var b = new RadiationEquivalentDoseRate(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = RadiationEquivalentDoseRate.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            Assert.True(v.Equals(RadiationEquivalentDoseRate.FromSievertsPerHour(1), SievertsPerHourTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RadiationEquivalentDoseRate.Zero, SievertsPerHourTolerance, ComparisonType.Relative));
            Assert.True(RadiationEquivalentDoseRate.FromSievertsPerHour(100).Equals(RadiationEquivalentDoseRate.FromSievertsPerHour(120), (double)0.3m, ComparisonType.Relative));
            Assert.False(RadiationEquivalentDoseRate.FromSievertsPerHour(100).Equals(RadiationEquivalentDoseRate.FromSievertsPerHour(120), (double)0.1m, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(RadiationEquivalentDoseRate.FromSievertsPerHour(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RadiationEquivalentDoseRate sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            Assert.False(sievertperhour.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RadiationEquivalentDoseRate sievertperhour = RadiationEquivalentDoseRate.FromSievertsPerHour(1);
            Assert.False(sievertperhour.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RadiationEquivalentDoseRateUnit)).Cast<RadiationEquivalentDoseRateUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RadiationEquivalentDoseRate.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 µSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour).ToString());
                Assert.Equal("1 mrem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour).ToString());
                Assert.Equal("1 mSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MillisievertPerHour).ToString());
                Assert.Equal("1 nSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.NanosievertPerHour).ToString());
                Assert.Equal("1 rem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour).ToString());
                Assert.Equal("1 Sv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 µSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour).ToString(swedishCulture));
            Assert.Equal("1 mrem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour).ToString(swedishCulture));
            Assert.Equal("1 mSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MillisievertPerHour).ToString(swedishCulture));
            Assert.Equal("1 nSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.NanosievertPerHour).ToString(swedishCulture));
            Assert.Equal("1 rem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour).ToString(swedishCulture));
            Assert.Equal("1 Sv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s1"));
                Assert.Equal("0.12 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s2"));
                Assert.Equal("0.123 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s3"));
                Assert.Equal("0.1235 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s1", culture));
            Assert.Equal("0.12 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s2", culture));
            Assert.Equal("0.123 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s3", culture));
            Assert.Equal("0.1235 Sv/h", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(RadiationEquivalentDoseRate)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(RadiationEquivalentDoseRateUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal(RadiationEquivalentDoseRate.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal(RadiationEquivalentDoseRate.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(1.0);
            Assert.Equal(new {RadiationEquivalentDoseRate.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerHour(value);
            Assert.Equal(RadiationEquivalentDoseRate.FromSievertsPerHour(-value), -quantity);
        }
    }
}
