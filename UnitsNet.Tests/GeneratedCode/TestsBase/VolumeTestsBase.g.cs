//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Volume.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class VolumeTestsBase : QuantityTestsBase
    {
        protected virtual double AcreFeetInOneCubicMeter { get; }
        protected virtual double AuTablespoonsInOneCubicMeter { get; }
        protected virtual double BarrelsInOneCubicMeter { get; }
        protected virtual double BillionCubicFeetsInOneCubicMeter { get; }
        protected virtual double BillionCubicMetersInOneCubicMeter { get; }
        protected virtual double BoardFeetInOneCubicMeter { get; }
        protected virtual double CentilitersInOneCubicMeter { get; }
        protected virtual double CubicCentimetersInOneCubicMeter { get; }
        protected virtual double CubicDecimetersInOneCubicMeter { get; }
        protected virtual double CubicFeetInOneCubicMeter { get; }
        protected virtual double CubicHectometersInOneCubicMeter { get; }
        protected virtual double CubicInchesInOneCubicMeter { get; }
        protected virtual double CubicKilometersInOneCubicMeter { get; }
        protected virtual double CubicMetersInOneCubicMeter { get; }
        protected virtual double CubicMicrometersInOneCubicMeter { get; }
        protected virtual double CubicMilesInOneCubicMeter { get; }
        protected virtual double CubicMillimetersInOneCubicMeter { get; }
        protected virtual double CubicYardsInOneCubicMeter { get; }
        protected virtual double DecausGallonsInOneCubicMeter { get; }
        protected virtual double DecilitersInOneCubicMeter { get; }
        protected virtual double DeciusGallonsInOneCubicMeter { get; }
        protected virtual double HectocubicFeetInOneCubicMeter { get; }
        protected virtual double HectocubicMetersInOneCubicMeter { get; }
        protected virtual double HectolitersInOneCubicMeter { get; }
        protected virtual double HectousGallonsInOneCubicMeter { get; }
        protected virtual double ImperialBeerBarrelsInOneCubicMeter { get; }
        protected virtual double ImperialGallonsInOneCubicMeter { get; }
        protected virtual double ImperialOuncesInOneCubicMeter { get; }
        protected virtual double ImperialPintsInOneCubicMeter { get; }
        protected virtual double KilocubicFeetInOneCubicMeter { get; }
        protected virtual double KilocubicMetersInOneCubicMeter { get; }
        protected virtual double KiloimperialGallonsInOneCubicMeter { get; }
        protected virtual double KilolitersInOneCubicMeter { get; }
        protected virtual double KilousGallonsInOneCubicMeter { get; }
        protected virtual double LitersInOneCubicMeter { get; }
        protected virtual double MegacubicFeetInOneCubicMeter { get; }
        protected virtual double MegaimperialGallonsInOneCubicMeter { get; }
        protected virtual double MegalitersInOneCubicMeter { get; }
        protected virtual double MegausGallonsInOneCubicMeter { get; }
        protected virtual double MetricCupsInOneCubicMeter { get; }
        protected virtual double MetricTeaspoonsInOneCubicMeter { get; }
        protected virtual double MicrolitersInOneCubicMeter { get; }
        protected virtual double MillilitersInOneCubicMeter { get; }
        protected virtual double MillionBarrelsInOneCubicMeter { get; }
        protected virtual double MillionCubicFeetsInOneCubicMeter { get; }
        protected virtual double MillionCubicMetersInOneCubicMeter { get; }
        protected virtual double MillionReservoirBarrelsInOneCubicMeter { get; }
        protected virtual double MillionStandardCubicFeetsInOneCubicMeter { get; }
        protected virtual double MillionUkGallonsInOneCubicMeter { get; }
        protected virtual double MillionUsGallonsInOneCubicMeter { get; }
        protected virtual double OilBarrelsInOneCubicMeter { get; }
        protected virtual double ReservoirBarrelsInOneCubicMeter { get; }
        protected virtual double ReservoirCubicFeetInOneCubicMeter { get; }
        protected virtual double StandardCubicFeetInOneCubicMeter { get; }
        protected virtual double StockTankBarrelsInOneCubicMeter { get; }
        protected virtual double ThousandBarrelsInOneCubicMeter { get; }
        protected virtual double ThousandCubicFeetsInOneCubicMeter { get; }
        protected virtual double ThousandReservoirBarrelsInOneCubicMeter { get; }
        protected virtual double ThousandStandardCubicFeetsInOneCubicMeter { get; }
        protected virtual double ThousandUkGallonsInOneCubicMeter { get; }
        protected virtual double ThousandUsGallonsInOneCubicMeter { get; }
        protected virtual double TrillionCubicFeetInOneCubicMeter { get; }
        protected virtual double UkGallonsInOneCubicMeter { get; }
        protected virtual double UkTablespoonsInOneCubicMeter { get; }
        protected virtual double UsBeerBarrelsInOneCubicMeter { get; }
        protected virtual double UsCustomaryCupsInOneCubicMeter { get; }
        protected virtual double UsGallonsInOneCubicMeter { get; }
        protected virtual double UsLegalCupsInOneCubicMeter { get; }
        protected virtual double UsOuncesInOneCubicMeter { get; }
        protected virtual double UsPintsInOneCubicMeter { get; }
        protected virtual double UsQuartsInOneCubicMeter { get; }
        protected virtual double UsTablespoonsInOneCubicMeter { get; }
        protected virtual double UsTeaspoonsInOneCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AcreFeetTolerance { get { return 1e-5; } }
        protected virtual double AuTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double BarrelsTolerance { get { return 1e-5; } }
        protected virtual double BillionCubicFeetsTolerance { get { return 1e-5; } }
        protected virtual double BillionCubicMetersTolerance { get { return 1e-5; } }
        protected virtual double BoardFeetTolerance { get { return 1e-5; } }
        protected virtual double CentilitersTolerance { get { return 1e-5; } }
        protected virtual double CubicCentimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicDecimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetTolerance { get { return 1e-5; } }
        protected virtual double CubicHectometersTolerance { get { return 1e-5; } }
        protected virtual double CubicInchesTolerance { get { return 1e-5; } }
        protected virtual double CubicKilometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersTolerance { get { return 1e-5; } }
        protected virtual double CubicMicrometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMilesTolerance { get { return 1e-5; } }
        protected virtual double CubicMillimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsTolerance { get { return 1e-5; } }
        protected virtual double DecausGallonsTolerance { get { return 1e-5; } }
        protected virtual double DecilitersTolerance { get { return 1e-5; } }
        protected virtual double DeciusGallonsTolerance { get { return 1e-5; } }
        protected virtual double HectocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double HectocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double HectolitersTolerance { get { return 1e-5; } }
        protected virtual double HectousGallonsTolerance { get { return 1e-5; } }
        protected virtual double ImperialBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ImperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double ImperialOuncesTolerance { get { return 1e-5; } }
        protected virtual double ImperialPintsTolerance { get { return 1e-5; } }
        protected virtual double KilocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double KilocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double KiloimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double KilolitersTolerance { get { return 1e-5; } }
        protected virtual double KilousGallonsTolerance { get { return 1e-5; } }
        protected virtual double LitersTolerance { get { return 1e-5; } }
        protected virtual double MegacubicFeetTolerance { get { return 1e-5; } }
        protected virtual double MegaimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double MegalitersTolerance { get { return 1e-5; } }
        protected virtual double MegausGallonsTolerance { get { return 1e-5; } }
        protected virtual double MetricCupsTolerance { get { return 1e-5; } }
        protected virtual double MetricTeaspoonsTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersTolerance { get { return 1e-5; } }
        protected virtual double MillilitersTolerance { get { return 1e-5; } }
        protected virtual double MillionBarrelsTolerance { get { return 1e-5; } }
        protected virtual double MillionCubicFeetsTolerance { get { return 1e-5; } }
        protected virtual double MillionCubicMetersTolerance { get { return 1e-5; } }
        protected virtual double MillionReservoirBarrelsTolerance { get { return 1e-5; } }
        protected virtual double MillionStandardCubicFeetsTolerance { get { return 1e-5; } }
        protected virtual double MillionUkGallonsTolerance { get { return 1e-5; } }
        protected virtual double MillionUsGallonsTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ReservoirBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ReservoirCubicFeetTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicFeetTolerance { get { return 1e-5; } }
        protected virtual double StockTankBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ThousandBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ThousandCubicFeetsTolerance { get { return 1e-5; } }
        protected virtual double ThousandReservoirBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ThousandStandardCubicFeetsTolerance { get { return 1e-5; } }
        protected virtual double ThousandUkGallonsTolerance { get { return 1e-5; } }
        protected virtual double ThousandUsGallonsTolerance { get { return 1e-5; } }
        protected virtual double TrillionCubicFeetTolerance { get { return 1e-5; } }
        protected virtual double UkGallonsTolerance { get { return 1e-5; } }
        protected virtual double UkTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double UsCustomaryCupsTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsTolerance { get { return 1e-5; } }
        protected virtual double UsLegalCupsTolerance { get { return 1e-5; } }
        protected virtual double UsOuncesTolerance { get { return 1e-5; } }
        protected virtual double UsPintsTolerance { get { return 1e-5; } }
        protected virtual double UsQuartsTolerance { get { return 1e-5; } }
        protected virtual double UsTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsTeaspoonsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume((double)0.0, VolumeUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Volume();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(VolumeUnit.CubicMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume(double.PositiveInfinity, VolumeUnit.CubicMeter));
            Assert.Throws<ArgumentException>(() => new Volume(double.NegativeInfinity, VolumeUnit.CubicMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume(double.NaN, VolumeUnit.CubicMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Volume(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Volume(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Volume) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Volume_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Volume(1, VolumeUnit.CubicMeter);

            QuantityInfo<VolumeUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Volume.Zero, quantityInfo.Zero);
            Assert.Equal("Volume", quantityInfo.Name);
            Assert.Equal(QuantityType.Volume, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<VolumeUnit>().Except(new[] {VolumeUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void CubicMeterToVolumeUnits()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.AcreFeet, AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.AuTablespoons, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(BarrelsInOneCubicMeter, cubicmeter.Barrels, BarrelsTolerance);
            AssertEx.EqualTolerance(BillionCubicFeetsInOneCubicMeter, cubicmeter.BillionCubicFeets, BillionCubicFeetsTolerance);
            AssertEx.EqualTolerance(BillionCubicMetersInOneCubicMeter, cubicmeter.BillionCubicMeters, BillionCubicMetersTolerance);
            AssertEx.EqualTolerance(BoardFeetInOneCubicMeter, cubicmeter.BoardFeet, BoardFeetTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.Centiliters, CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.CubicCentimeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.CubicDecimeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.CubicFeet, CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.CubicHectometers, CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.CubicInches, CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.CubicKilometers, CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.CubicMicrometers, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.CubicMiles, CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.CubicMillimeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.CubicYards, CubicYardsTolerance);
            AssertEx.EqualTolerance(DecausGallonsInOneCubicMeter, cubicmeter.DecausGallons, DecausGallonsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.Deciliters, DecilitersTolerance);
            AssertEx.EqualTolerance(DeciusGallonsInOneCubicMeter, cubicmeter.DeciusGallons, DeciusGallonsTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.HectocubicFeet, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.HectocubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.Hectoliters, HectolitersTolerance);
            AssertEx.EqualTolerance(HectousGallonsInOneCubicMeter, cubicmeter.HectousGallons, HectousGallonsTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.ImperialGallons, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.ImperialOunces, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.ImperialPints, ImperialPintsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.KilocubicFeet, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.KilocubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.KiloimperialGallons, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.Kiloliters, KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.KilousGallons, KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.Liters, LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.MegacubicFeet, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.MegaimperialGallons, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.Megaliters, MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.MegausGallons, MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.MetricCups, MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.MetricTeaspoons, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.Microliters, MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.Milliliters, MillilitersTolerance);
            AssertEx.EqualTolerance(MillionBarrelsInOneCubicMeter, cubicmeter.MillionBarrels, MillionBarrelsTolerance);
            AssertEx.EqualTolerance(MillionCubicFeetsInOneCubicMeter, cubicmeter.MillionCubicFeets, MillionCubicFeetsTolerance);
            AssertEx.EqualTolerance(MillionCubicMetersInOneCubicMeter, cubicmeter.MillionCubicMeters, MillionCubicMetersTolerance);
            AssertEx.EqualTolerance(MillionReservoirBarrelsInOneCubicMeter, cubicmeter.MillionReservoirBarrels, MillionReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(MillionStandardCubicFeetsInOneCubicMeter, cubicmeter.MillionStandardCubicFeets, MillionStandardCubicFeetsTolerance);
            AssertEx.EqualTolerance(MillionUkGallonsInOneCubicMeter, cubicmeter.MillionUkGallons, MillionUkGallonsTolerance);
            AssertEx.EqualTolerance(MillionUsGallonsInOneCubicMeter, cubicmeter.MillionUsGallons, MillionUsGallonsTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.OilBarrels, OilBarrelsTolerance);
            AssertEx.EqualTolerance(ReservoirBarrelsInOneCubicMeter, cubicmeter.ReservoirBarrels, ReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(ReservoirCubicFeetInOneCubicMeter, cubicmeter.ReservoirCubicFeet, ReservoirCubicFeetTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetInOneCubicMeter, cubicmeter.StandardCubicFeet, StandardCubicFeetTolerance);
            AssertEx.EqualTolerance(StockTankBarrelsInOneCubicMeter, cubicmeter.StockTankBarrels, StockTankBarrelsTolerance);
            AssertEx.EqualTolerance(ThousandBarrelsInOneCubicMeter, cubicmeter.ThousandBarrels, ThousandBarrelsTolerance);
            AssertEx.EqualTolerance(ThousandCubicFeetsInOneCubicMeter, cubicmeter.ThousandCubicFeets, ThousandCubicFeetsTolerance);
            AssertEx.EqualTolerance(ThousandReservoirBarrelsInOneCubicMeter, cubicmeter.ThousandReservoirBarrels, ThousandReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(ThousandStandardCubicFeetsInOneCubicMeter, cubicmeter.ThousandStandardCubicFeets, ThousandStandardCubicFeetsTolerance);
            AssertEx.EqualTolerance(ThousandUkGallonsInOneCubicMeter, cubicmeter.ThousandUkGallons, ThousandUkGallonsTolerance);
            AssertEx.EqualTolerance(ThousandUsGallonsInOneCubicMeter, cubicmeter.ThousandUsGallons, ThousandUsGallonsTolerance);
            AssertEx.EqualTolerance(TrillionCubicFeetInOneCubicMeter, cubicmeter.TrillionCubicFeet, TrillionCubicFeetTolerance);
            AssertEx.EqualTolerance(UkGallonsInOneCubicMeter, cubicmeter.UkGallons, UkGallonsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.UkTablespoons, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.UsBeerBarrels, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.UsCustomaryCups, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.UsGallons, UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.UsLegalCups, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.UsOunces, UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.UsPints, UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.UsQuarts, UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.UsTablespoons, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.UsTeaspoons, UsTeaspoonsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Volume.From(1, VolumeUnit.AcreFoot);
            AssertEx.EqualTolerance(1, quantity00.AcreFeet, AcreFeetTolerance);
            Assert.Equal(VolumeUnit.AcreFoot, quantity00.Unit);

            var quantity01 = Volume.From(1, VolumeUnit.AuTablespoon);
            AssertEx.EqualTolerance(1, quantity01.AuTablespoons, AuTablespoonsTolerance);
            Assert.Equal(VolumeUnit.AuTablespoon, quantity01.Unit);

            var quantity02 = Volume.From(1, VolumeUnit.Barrel);
            AssertEx.EqualTolerance(1, quantity02.Barrels, BarrelsTolerance);
            Assert.Equal(VolumeUnit.Barrel, quantity02.Unit);

            var quantity03 = Volume.From(1, VolumeUnit.BillionCubicFeet);
            AssertEx.EqualTolerance(1, quantity03.BillionCubicFeets, BillionCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.BillionCubicFeet, quantity03.Unit);

            var quantity04 = Volume.From(1, VolumeUnit.BillionCubicMeter);
            AssertEx.EqualTolerance(1, quantity04.BillionCubicMeters, BillionCubicMetersTolerance);
            Assert.Equal(VolumeUnit.BillionCubicMeter, quantity04.Unit);

            var quantity05 = Volume.From(1, VolumeUnit.BoardFoot);
            AssertEx.EqualTolerance(1, quantity05.BoardFeet, BoardFeetTolerance);
            Assert.Equal(VolumeUnit.BoardFoot, quantity05.Unit);

            var quantity06 = Volume.From(1, VolumeUnit.Centiliter);
            AssertEx.EqualTolerance(1, quantity06.Centiliters, CentilitersTolerance);
            Assert.Equal(VolumeUnit.Centiliter, quantity06.Unit);

            var quantity07 = Volume.From(1, VolumeUnit.CubicCentimeter);
            AssertEx.EqualTolerance(1, quantity07.CubicCentimeters, CubicCentimetersTolerance);
            Assert.Equal(VolumeUnit.CubicCentimeter, quantity07.Unit);

            var quantity08 = Volume.From(1, VolumeUnit.CubicDecimeter);
            AssertEx.EqualTolerance(1, quantity08.CubicDecimeters, CubicDecimetersTolerance);
            Assert.Equal(VolumeUnit.CubicDecimeter, quantity08.Unit);

            var quantity09 = Volume.From(1, VolumeUnit.CubicFoot);
            AssertEx.EqualTolerance(1, quantity09.CubicFeet, CubicFeetTolerance);
            Assert.Equal(VolumeUnit.CubicFoot, quantity09.Unit);

            var quantity10 = Volume.From(1, VolumeUnit.CubicHectometer);
            AssertEx.EqualTolerance(1, quantity10.CubicHectometers, CubicHectometersTolerance);
            Assert.Equal(VolumeUnit.CubicHectometer, quantity10.Unit);

            var quantity11 = Volume.From(1, VolumeUnit.CubicInch);
            AssertEx.EqualTolerance(1, quantity11.CubicInches, CubicInchesTolerance);
            Assert.Equal(VolumeUnit.CubicInch, quantity11.Unit);

            var quantity12 = Volume.From(1, VolumeUnit.CubicKilometer);
            AssertEx.EqualTolerance(1, quantity12.CubicKilometers, CubicKilometersTolerance);
            Assert.Equal(VolumeUnit.CubicKilometer, quantity12.Unit);

            var quantity13 = Volume.From(1, VolumeUnit.CubicMeter);
            AssertEx.EqualTolerance(1, quantity13.CubicMeters, CubicMetersTolerance);
            Assert.Equal(VolumeUnit.CubicMeter, quantity13.Unit);

            var quantity14 = Volume.From(1, VolumeUnit.CubicMicrometer);
            AssertEx.EqualTolerance(1, quantity14.CubicMicrometers, CubicMicrometersTolerance);
            Assert.Equal(VolumeUnit.CubicMicrometer, quantity14.Unit);

            var quantity15 = Volume.From(1, VolumeUnit.CubicMile);
            AssertEx.EqualTolerance(1, quantity15.CubicMiles, CubicMilesTolerance);
            Assert.Equal(VolumeUnit.CubicMile, quantity15.Unit);

            var quantity16 = Volume.From(1, VolumeUnit.CubicMillimeter);
            AssertEx.EqualTolerance(1, quantity16.CubicMillimeters, CubicMillimetersTolerance);
            Assert.Equal(VolumeUnit.CubicMillimeter, quantity16.Unit);

            var quantity17 = Volume.From(1, VolumeUnit.CubicYard);
            AssertEx.EqualTolerance(1, quantity17.CubicYards, CubicYardsTolerance);
            Assert.Equal(VolumeUnit.CubicYard, quantity17.Unit);

            var quantity18 = Volume.From(1, VolumeUnit.DecausGallon);
            AssertEx.EqualTolerance(1, quantity18.DecausGallons, DecausGallonsTolerance);
            Assert.Equal(VolumeUnit.DecausGallon, quantity18.Unit);

            var quantity19 = Volume.From(1, VolumeUnit.Deciliter);
            AssertEx.EqualTolerance(1, quantity19.Deciliters, DecilitersTolerance);
            Assert.Equal(VolumeUnit.Deciliter, quantity19.Unit);

            var quantity20 = Volume.From(1, VolumeUnit.DeciusGallon);
            AssertEx.EqualTolerance(1, quantity20.DeciusGallons, DeciusGallonsTolerance);
            Assert.Equal(VolumeUnit.DeciusGallon, quantity20.Unit);

            var quantity21 = Volume.From(1, VolumeUnit.HectocubicFoot);
            AssertEx.EqualTolerance(1, quantity21.HectocubicFeet, HectocubicFeetTolerance);
            Assert.Equal(VolumeUnit.HectocubicFoot, quantity21.Unit);

            var quantity22 = Volume.From(1, VolumeUnit.HectocubicMeter);
            AssertEx.EqualTolerance(1, quantity22.HectocubicMeters, HectocubicMetersTolerance);
            Assert.Equal(VolumeUnit.HectocubicMeter, quantity22.Unit);

            var quantity23 = Volume.From(1, VolumeUnit.Hectoliter);
            AssertEx.EqualTolerance(1, quantity23.Hectoliters, HectolitersTolerance);
            Assert.Equal(VolumeUnit.Hectoliter, quantity23.Unit);

            var quantity24 = Volume.From(1, VolumeUnit.HectousGallon);
            AssertEx.EqualTolerance(1, quantity24.HectousGallons, HectousGallonsTolerance);
            Assert.Equal(VolumeUnit.HectousGallon, quantity24.Unit);

            var quantity25 = Volume.From(1, VolumeUnit.ImperialBeerBarrel);
            AssertEx.EqualTolerance(1, quantity25.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.ImperialBeerBarrel, quantity25.Unit);

            var quantity26 = Volume.From(1, VolumeUnit.ImperialGallon);
            AssertEx.EqualTolerance(1, quantity26.ImperialGallons, ImperialGallonsTolerance);
            Assert.Equal(VolumeUnit.ImperialGallon, quantity26.Unit);

            var quantity27 = Volume.From(1, VolumeUnit.ImperialOunce);
            AssertEx.EqualTolerance(1, quantity27.ImperialOunces, ImperialOuncesTolerance);
            Assert.Equal(VolumeUnit.ImperialOunce, quantity27.Unit);

            var quantity28 = Volume.From(1, VolumeUnit.ImperialPint);
            AssertEx.EqualTolerance(1, quantity28.ImperialPints, ImperialPintsTolerance);
            Assert.Equal(VolumeUnit.ImperialPint, quantity28.Unit);

            var quantity29 = Volume.From(1, VolumeUnit.KilocubicFoot);
            AssertEx.EqualTolerance(1, quantity29.KilocubicFeet, KilocubicFeetTolerance);
            Assert.Equal(VolumeUnit.KilocubicFoot, quantity29.Unit);

            var quantity30 = Volume.From(1, VolumeUnit.KilocubicMeter);
            AssertEx.EqualTolerance(1, quantity30.KilocubicMeters, KilocubicMetersTolerance);
            Assert.Equal(VolumeUnit.KilocubicMeter, quantity30.Unit);

            var quantity31 = Volume.From(1, VolumeUnit.KiloimperialGallon);
            AssertEx.EqualTolerance(1, quantity31.KiloimperialGallons, KiloimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.KiloimperialGallon, quantity31.Unit);

            var quantity32 = Volume.From(1, VolumeUnit.Kiloliter);
            AssertEx.EqualTolerance(1, quantity32.Kiloliters, KilolitersTolerance);
            Assert.Equal(VolumeUnit.Kiloliter, quantity32.Unit);

            var quantity33 = Volume.From(1, VolumeUnit.KilousGallon);
            AssertEx.EqualTolerance(1, quantity33.KilousGallons, KilousGallonsTolerance);
            Assert.Equal(VolumeUnit.KilousGallon, quantity33.Unit);

            var quantity34 = Volume.From(1, VolumeUnit.Liter);
            AssertEx.EqualTolerance(1, quantity34.Liters, LitersTolerance);
            Assert.Equal(VolumeUnit.Liter, quantity34.Unit);

            var quantity35 = Volume.From(1, VolumeUnit.MegacubicFoot);
            AssertEx.EqualTolerance(1, quantity35.MegacubicFeet, MegacubicFeetTolerance);
            Assert.Equal(VolumeUnit.MegacubicFoot, quantity35.Unit);

            var quantity36 = Volume.From(1, VolumeUnit.MegaimperialGallon);
            AssertEx.EqualTolerance(1, quantity36.MegaimperialGallons, MegaimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.MegaimperialGallon, quantity36.Unit);

            var quantity37 = Volume.From(1, VolumeUnit.Megaliter);
            AssertEx.EqualTolerance(1, quantity37.Megaliters, MegalitersTolerance);
            Assert.Equal(VolumeUnit.Megaliter, quantity37.Unit);

            var quantity38 = Volume.From(1, VolumeUnit.MegausGallon);
            AssertEx.EqualTolerance(1, quantity38.MegausGallons, MegausGallonsTolerance);
            Assert.Equal(VolumeUnit.MegausGallon, quantity38.Unit);

            var quantity39 = Volume.From(1, VolumeUnit.MetricCup);
            AssertEx.EqualTolerance(1, quantity39.MetricCups, MetricCupsTolerance);
            Assert.Equal(VolumeUnit.MetricCup, quantity39.Unit);

            var quantity40 = Volume.From(1, VolumeUnit.MetricTeaspoon);
            AssertEx.EqualTolerance(1, quantity40.MetricTeaspoons, MetricTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.MetricTeaspoon, quantity40.Unit);

            var quantity41 = Volume.From(1, VolumeUnit.Microliter);
            AssertEx.EqualTolerance(1, quantity41.Microliters, MicrolitersTolerance);
            Assert.Equal(VolumeUnit.Microliter, quantity41.Unit);

            var quantity42 = Volume.From(1, VolumeUnit.Milliliter);
            AssertEx.EqualTolerance(1, quantity42.Milliliters, MillilitersTolerance);
            Assert.Equal(VolumeUnit.Milliliter, quantity42.Unit);

            var quantity43 = Volume.From(1, VolumeUnit.MillionBarrels);
            AssertEx.EqualTolerance(1, quantity43.MillionBarrels, MillionBarrelsTolerance);
            Assert.Equal(VolumeUnit.MillionBarrels, quantity43.Unit);

            var quantity44 = Volume.From(1, VolumeUnit.MillionCubicFeet);
            AssertEx.EqualTolerance(1, quantity44.MillionCubicFeets, MillionCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.MillionCubicFeet, quantity44.Unit);

            var quantity45 = Volume.From(1, VolumeUnit.MillionCubicMeter);
            AssertEx.EqualTolerance(1, quantity45.MillionCubicMeters, MillionCubicMetersTolerance);
            Assert.Equal(VolumeUnit.MillionCubicMeter, quantity45.Unit);

            var quantity46 = Volume.From(1, VolumeUnit.MillionReservoirBarrels);
            AssertEx.EqualTolerance(1, quantity46.MillionReservoirBarrels, MillionReservoirBarrelsTolerance);
            Assert.Equal(VolumeUnit.MillionReservoirBarrels, quantity46.Unit);

            var quantity47 = Volume.From(1, VolumeUnit.MillionStandardCubicFeet);
            AssertEx.EqualTolerance(1, quantity47.MillionStandardCubicFeets, MillionStandardCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.MillionStandardCubicFeet, quantity47.Unit);

            var quantity48 = Volume.From(1, VolumeUnit.MillionUkGallons);
            AssertEx.EqualTolerance(1, quantity48.MillionUkGallons, MillionUkGallonsTolerance);
            Assert.Equal(VolumeUnit.MillionUkGallons, quantity48.Unit);

            var quantity49 = Volume.From(1, VolumeUnit.MillionUsGallons);
            AssertEx.EqualTolerance(1, quantity49.MillionUsGallons, MillionUsGallonsTolerance);
            Assert.Equal(VolumeUnit.MillionUsGallons, quantity49.Unit);

            var quantity50 = Volume.From(1, VolumeUnit.OilBarrel);
            AssertEx.EqualTolerance(1, quantity50.OilBarrels, OilBarrelsTolerance);
            Assert.Equal(VolumeUnit.OilBarrel, quantity50.Unit);

            var quantity51 = Volume.From(1, VolumeUnit.ReservoirBarrel);
            AssertEx.EqualTolerance(1, quantity51.ReservoirBarrels, ReservoirBarrelsTolerance);
            Assert.Equal(VolumeUnit.ReservoirBarrel, quantity51.Unit);

            var quantity52 = Volume.From(1, VolumeUnit.ReservoirCubicFoot);
            AssertEx.EqualTolerance(1, quantity52.ReservoirCubicFeet, ReservoirCubicFeetTolerance);
            Assert.Equal(VolumeUnit.ReservoirCubicFoot, quantity52.Unit);

            var quantity53 = Volume.From(1, VolumeUnit.StandardCubicFoot);
            AssertEx.EqualTolerance(1, quantity53.StandardCubicFeet, StandardCubicFeetTolerance);
            Assert.Equal(VolumeUnit.StandardCubicFoot, quantity53.Unit);

            var quantity54 = Volume.From(1, VolumeUnit.StockTankBarrel);
            AssertEx.EqualTolerance(1, quantity54.StockTankBarrels, StockTankBarrelsTolerance);
            Assert.Equal(VolumeUnit.StockTankBarrel, quantity54.Unit);

            var quantity55 = Volume.From(1, VolumeUnit.ThousandBarrels);
            AssertEx.EqualTolerance(1, quantity55.ThousandBarrels, ThousandBarrelsTolerance);
            Assert.Equal(VolumeUnit.ThousandBarrels, quantity55.Unit);

            var quantity56 = Volume.From(1, VolumeUnit.ThousandCubicFeet);
            AssertEx.EqualTolerance(1, quantity56.ThousandCubicFeets, ThousandCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.ThousandCubicFeet, quantity56.Unit);

            var quantity57 = Volume.From(1, VolumeUnit.ThousandReservoirBarrels);
            AssertEx.EqualTolerance(1, quantity57.ThousandReservoirBarrels, ThousandReservoirBarrelsTolerance);
            Assert.Equal(VolumeUnit.ThousandReservoirBarrels, quantity57.Unit);

            var quantity58 = Volume.From(1, VolumeUnit.ThousandStandardCubicFeet);
            AssertEx.EqualTolerance(1, quantity58.ThousandStandardCubicFeets, ThousandStandardCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.ThousandStandardCubicFeet, quantity58.Unit);

            var quantity59 = Volume.From(1, VolumeUnit.ThousandUkGallons);
            AssertEx.EqualTolerance(1, quantity59.ThousandUkGallons, ThousandUkGallonsTolerance);
            Assert.Equal(VolumeUnit.ThousandUkGallons, quantity59.Unit);

            var quantity60 = Volume.From(1, VolumeUnit.ThousandUsGallons);
            AssertEx.EqualTolerance(1, quantity60.ThousandUsGallons, ThousandUsGallonsTolerance);
            Assert.Equal(VolumeUnit.ThousandUsGallons, quantity60.Unit);

            var quantity61 = Volume.From(1, VolumeUnit.TrillionCubicFoot);
            AssertEx.EqualTolerance(1, quantity61.TrillionCubicFeet, TrillionCubicFeetTolerance);
            Assert.Equal(VolumeUnit.TrillionCubicFoot, quantity61.Unit);

            var quantity62 = Volume.From(1, VolumeUnit.UkGallon);
            AssertEx.EqualTolerance(1, quantity62.UkGallons, UkGallonsTolerance);
            Assert.Equal(VolumeUnit.UkGallon, quantity62.Unit);

            var quantity63 = Volume.From(1, VolumeUnit.UkTablespoon);
            AssertEx.EqualTolerance(1, quantity63.UkTablespoons, UkTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UkTablespoon, quantity63.Unit);

            var quantity64 = Volume.From(1, VolumeUnit.UsBeerBarrel);
            AssertEx.EqualTolerance(1, quantity64.UsBeerBarrels, UsBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.UsBeerBarrel, quantity64.Unit);

            var quantity65 = Volume.From(1, VolumeUnit.UsCustomaryCup);
            AssertEx.EqualTolerance(1, quantity65.UsCustomaryCups, UsCustomaryCupsTolerance);
            Assert.Equal(VolumeUnit.UsCustomaryCup, quantity65.Unit);

            var quantity66 = Volume.From(1, VolumeUnit.UsGallon);
            AssertEx.EqualTolerance(1, quantity66.UsGallons, UsGallonsTolerance);
            Assert.Equal(VolumeUnit.UsGallon, quantity66.Unit);

            var quantity67 = Volume.From(1, VolumeUnit.UsLegalCup);
            AssertEx.EqualTolerance(1, quantity67.UsLegalCups, UsLegalCupsTolerance);
            Assert.Equal(VolumeUnit.UsLegalCup, quantity67.Unit);

            var quantity68 = Volume.From(1, VolumeUnit.UsOunce);
            AssertEx.EqualTolerance(1, quantity68.UsOunces, UsOuncesTolerance);
            Assert.Equal(VolumeUnit.UsOunce, quantity68.Unit);

            var quantity69 = Volume.From(1, VolumeUnit.UsPint);
            AssertEx.EqualTolerance(1, quantity69.UsPints, UsPintsTolerance);
            Assert.Equal(VolumeUnit.UsPint, quantity69.Unit);

            var quantity70 = Volume.From(1, VolumeUnit.UsQuart);
            AssertEx.EqualTolerance(1, quantity70.UsQuarts, UsQuartsTolerance);
            Assert.Equal(VolumeUnit.UsQuart, quantity70.Unit);

            var quantity71 = Volume.From(1, VolumeUnit.UsTablespoon);
            AssertEx.EqualTolerance(1, quantity71.UsTablespoons, UsTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UsTablespoon, quantity71.Unit);

            var quantity72 = Volume.From(1, VolumeUnit.UsTeaspoon);
            AssertEx.EqualTolerance(1, quantity72.UsTeaspoons, UsTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.UsTeaspoon, quantity72.Unit);

        }

        [Fact]
        public void FromCubicMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromCubicMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.AcreFoot), AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.AuTablespoon), AuTablespoonsTolerance);
            AssertEx.EqualTolerance(BarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.Barrel), BarrelsTolerance);
            AssertEx.EqualTolerance(BillionCubicFeetsInOneCubicMeter, cubicmeter.As(VolumeUnit.BillionCubicFeet), BillionCubicFeetsTolerance);
            AssertEx.EqualTolerance(BillionCubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.BillionCubicMeter), BillionCubicMetersTolerance);
            AssertEx.EqualTolerance(BoardFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.BoardFoot), BoardFeetTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Centiliter), CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicCentimeter), CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicDecimeter), CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicFoot), CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicHectometer), CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicInch), CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicKilometer), CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMeter), CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMicrometer), CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMile), CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMillimeter), CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicYard), CubicYardsTolerance);
            AssertEx.EqualTolerance(DecausGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.DecausGallon), DecausGallonsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Deciliter), DecilitersTolerance);
            AssertEx.EqualTolerance(DeciusGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.DeciusGallon), DeciusGallonsTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicFoot), HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicMeter), HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Hectoliter), HectolitersTolerance);
            AssertEx.EqualTolerance(HectousGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.HectousGallon), HectousGallonsTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialBeerBarrel), ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialGallon), ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialOunce), ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialPint), ImperialPintsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicFoot), KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicMeter), KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KiloimperialGallon), KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Kiloliter), KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KilousGallon), KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Liter), LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.MegacubicFoot), MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegaimperialGallon), MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Megaliter), MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegausGallon), MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricCup), MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricTeaspoon), MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Microliter), MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Milliliter), MillilitersTolerance);
            AssertEx.EqualTolerance(MillionBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.MillionBarrels), MillionBarrelsTolerance);
            AssertEx.EqualTolerance(MillionCubicFeetsInOneCubicMeter, cubicmeter.As(VolumeUnit.MillionCubicFeet), MillionCubicFeetsTolerance);
            AssertEx.EqualTolerance(MillionCubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.MillionCubicMeter), MillionCubicMetersTolerance);
            AssertEx.EqualTolerance(MillionReservoirBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.MillionReservoirBarrels), MillionReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(MillionStandardCubicFeetsInOneCubicMeter, cubicmeter.As(VolumeUnit.MillionStandardCubicFeet), MillionStandardCubicFeetsTolerance);
            AssertEx.EqualTolerance(MillionUkGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MillionUkGallons), MillionUkGallonsTolerance);
            AssertEx.EqualTolerance(MillionUsGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MillionUsGallons), MillionUsGallonsTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.OilBarrel), OilBarrelsTolerance);
            AssertEx.EqualTolerance(ReservoirBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.ReservoirBarrel), ReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(ReservoirCubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.ReservoirCubicFoot), ReservoirCubicFeetTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.StandardCubicFoot), StandardCubicFeetTolerance);
            AssertEx.EqualTolerance(StockTankBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.StockTankBarrel), StockTankBarrelsTolerance);
            AssertEx.EqualTolerance(ThousandBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.ThousandBarrels), ThousandBarrelsTolerance);
            AssertEx.EqualTolerance(ThousandCubicFeetsInOneCubicMeter, cubicmeter.As(VolumeUnit.ThousandCubicFeet), ThousandCubicFeetsTolerance);
            AssertEx.EqualTolerance(ThousandReservoirBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.ThousandReservoirBarrels), ThousandReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(ThousandStandardCubicFeetsInOneCubicMeter, cubicmeter.As(VolumeUnit.ThousandStandardCubicFeet), ThousandStandardCubicFeetsTolerance);
            AssertEx.EqualTolerance(ThousandUkGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.ThousandUkGallons), ThousandUkGallonsTolerance);
            AssertEx.EqualTolerance(ThousandUsGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.ThousandUsGallons), ThousandUsGallonsTolerance);
            AssertEx.EqualTolerance(TrillionCubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.TrillionCubicFoot), TrillionCubicFeetTolerance);
            AssertEx.EqualTolerance(UkGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UkGallon), UkGallonsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UkTablespoon), UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsBeerBarrel), UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsCustomaryCup), UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsGallon), UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsLegalCup), UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.UsOunce), UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsPint), UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsQuart), UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTablespoon), UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTeaspoon), UsTeaspoonsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var cubicmeter = Volume.FromCubicMeters(1);

            var acrefootQuantity = cubicmeter.ToUnit(VolumeUnit.AcreFoot);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, (double)acrefootQuantity.Value, AcreFeetTolerance);
            Assert.Equal(VolumeUnit.AcreFoot, acrefootQuantity.Unit);

            var autablespoonQuantity = cubicmeter.ToUnit(VolumeUnit.AuTablespoon);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, (double)autablespoonQuantity.Value, AuTablespoonsTolerance);
            Assert.Equal(VolumeUnit.AuTablespoon, autablespoonQuantity.Unit);

            var barrelQuantity = cubicmeter.ToUnit(VolumeUnit.Barrel);
            AssertEx.EqualTolerance(BarrelsInOneCubicMeter, (double)barrelQuantity.Value, BarrelsTolerance);
            Assert.Equal(VolumeUnit.Barrel, barrelQuantity.Unit);

            var billioncubicfeetQuantity = cubicmeter.ToUnit(VolumeUnit.BillionCubicFeet);
            AssertEx.EqualTolerance(BillionCubicFeetsInOneCubicMeter, (double)billioncubicfeetQuantity.Value, BillionCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.BillionCubicFeet, billioncubicfeetQuantity.Unit);

            var billioncubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.BillionCubicMeter);
            AssertEx.EqualTolerance(BillionCubicMetersInOneCubicMeter, (double)billioncubicmeterQuantity.Value, BillionCubicMetersTolerance);
            Assert.Equal(VolumeUnit.BillionCubicMeter, billioncubicmeterQuantity.Unit);

            var boardfootQuantity = cubicmeter.ToUnit(VolumeUnit.BoardFoot);
            AssertEx.EqualTolerance(BoardFeetInOneCubicMeter, (double)boardfootQuantity.Value, BoardFeetTolerance);
            Assert.Equal(VolumeUnit.BoardFoot, boardfootQuantity.Unit);

            var centiliterQuantity = cubicmeter.ToUnit(VolumeUnit.Centiliter);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, (double)centiliterQuantity.Value, CentilitersTolerance);
            Assert.Equal(VolumeUnit.Centiliter, centiliterQuantity.Unit);

            var cubiccentimeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicCentimeter);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, (double)cubiccentimeterQuantity.Value, CubicCentimetersTolerance);
            Assert.Equal(VolumeUnit.CubicCentimeter, cubiccentimeterQuantity.Unit);

            var cubicdecimeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicDecimeter);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, (double)cubicdecimeterQuantity.Value, CubicDecimetersTolerance);
            Assert.Equal(VolumeUnit.CubicDecimeter, cubicdecimeterQuantity.Unit);

            var cubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.CubicFoot);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, (double)cubicfootQuantity.Value, CubicFeetTolerance);
            Assert.Equal(VolumeUnit.CubicFoot, cubicfootQuantity.Unit);

            var cubichectometerQuantity = cubicmeter.ToUnit(VolumeUnit.CubicHectometer);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, (double)cubichectometerQuantity.Value, CubicHectometersTolerance);
            Assert.Equal(VolumeUnit.CubicHectometer, cubichectometerQuantity.Unit);

            var cubicinchQuantity = cubicmeter.ToUnit(VolumeUnit.CubicInch);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, (double)cubicinchQuantity.Value, CubicInchesTolerance);
            Assert.Equal(VolumeUnit.CubicInch, cubicinchQuantity.Unit);

            var cubickilometerQuantity = cubicmeter.ToUnit(VolumeUnit.CubicKilometer);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, (double)cubickilometerQuantity.Value, CubicKilometersTolerance);
            Assert.Equal(VolumeUnit.CubicKilometer, cubickilometerQuantity.Unit);

            var cubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMeter);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, (double)cubicmeterQuantity.Value, CubicMetersTolerance);
            Assert.Equal(VolumeUnit.CubicMeter, cubicmeterQuantity.Unit);

            var cubicmicrometerQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMicrometer);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, (double)cubicmicrometerQuantity.Value, CubicMicrometersTolerance);
            Assert.Equal(VolumeUnit.CubicMicrometer, cubicmicrometerQuantity.Unit);

            var cubicmileQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMile);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, (double)cubicmileQuantity.Value, CubicMilesTolerance);
            Assert.Equal(VolumeUnit.CubicMile, cubicmileQuantity.Unit);

            var cubicmillimeterQuantity = cubicmeter.ToUnit(VolumeUnit.CubicMillimeter);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, (double)cubicmillimeterQuantity.Value, CubicMillimetersTolerance);
            Assert.Equal(VolumeUnit.CubicMillimeter, cubicmillimeterQuantity.Unit);

            var cubicyardQuantity = cubicmeter.ToUnit(VolumeUnit.CubicYard);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, (double)cubicyardQuantity.Value, CubicYardsTolerance);
            Assert.Equal(VolumeUnit.CubicYard, cubicyardQuantity.Unit);

            var decausgallonQuantity = cubicmeter.ToUnit(VolumeUnit.DecausGallon);
            AssertEx.EqualTolerance(DecausGallonsInOneCubicMeter, (double)decausgallonQuantity.Value, DecausGallonsTolerance);
            Assert.Equal(VolumeUnit.DecausGallon, decausgallonQuantity.Unit);

            var deciliterQuantity = cubicmeter.ToUnit(VolumeUnit.Deciliter);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, (double)deciliterQuantity.Value, DecilitersTolerance);
            Assert.Equal(VolumeUnit.Deciliter, deciliterQuantity.Unit);

            var deciusgallonQuantity = cubicmeter.ToUnit(VolumeUnit.DeciusGallon);
            AssertEx.EqualTolerance(DeciusGallonsInOneCubicMeter, (double)deciusgallonQuantity.Value, DeciusGallonsTolerance);
            Assert.Equal(VolumeUnit.DeciusGallon, deciusgallonQuantity.Unit);

            var hectocubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.HectocubicFoot);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, (double)hectocubicfootQuantity.Value, HectocubicFeetTolerance);
            Assert.Equal(VolumeUnit.HectocubicFoot, hectocubicfootQuantity.Unit);

            var hectocubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.HectocubicMeter);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, (double)hectocubicmeterQuantity.Value, HectocubicMetersTolerance);
            Assert.Equal(VolumeUnit.HectocubicMeter, hectocubicmeterQuantity.Unit);

            var hectoliterQuantity = cubicmeter.ToUnit(VolumeUnit.Hectoliter);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, (double)hectoliterQuantity.Value, HectolitersTolerance);
            Assert.Equal(VolumeUnit.Hectoliter, hectoliterQuantity.Unit);

            var hectousgallonQuantity = cubicmeter.ToUnit(VolumeUnit.HectousGallon);
            AssertEx.EqualTolerance(HectousGallonsInOneCubicMeter, (double)hectousgallonQuantity.Value, HectousGallonsTolerance);
            Assert.Equal(VolumeUnit.HectousGallon, hectousgallonQuantity.Unit);

            var imperialbeerbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialBeerBarrel);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, (double)imperialbeerbarrelQuantity.Value, ImperialBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.ImperialBeerBarrel, imperialbeerbarrelQuantity.Unit);

            var imperialgallonQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialGallon);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, (double)imperialgallonQuantity.Value, ImperialGallonsTolerance);
            Assert.Equal(VolumeUnit.ImperialGallon, imperialgallonQuantity.Unit);

            var imperialounceQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialOunce);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, (double)imperialounceQuantity.Value, ImperialOuncesTolerance);
            Assert.Equal(VolumeUnit.ImperialOunce, imperialounceQuantity.Unit);

            var imperialpintQuantity = cubicmeter.ToUnit(VolumeUnit.ImperialPint);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, (double)imperialpintQuantity.Value, ImperialPintsTolerance);
            Assert.Equal(VolumeUnit.ImperialPint, imperialpintQuantity.Unit);

            var kilocubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.KilocubicFoot);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, (double)kilocubicfootQuantity.Value, KilocubicFeetTolerance);
            Assert.Equal(VolumeUnit.KilocubicFoot, kilocubicfootQuantity.Unit);

            var kilocubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.KilocubicMeter);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, (double)kilocubicmeterQuantity.Value, KilocubicMetersTolerance);
            Assert.Equal(VolumeUnit.KilocubicMeter, kilocubicmeterQuantity.Unit);

            var kiloimperialgallonQuantity = cubicmeter.ToUnit(VolumeUnit.KiloimperialGallon);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, (double)kiloimperialgallonQuantity.Value, KiloimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.KiloimperialGallon, kiloimperialgallonQuantity.Unit);

            var kiloliterQuantity = cubicmeter.ToUnit(VolumeUnit.Kiloliter);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, (double)kiloliterQuantity.Value, KilolitersTolerance);
            Assert.Equal(VolumeUnit.Kiloliter, kiloliterQuantity.Unit);

            var kilousgallonQuantity = cubicmeter.ToUnit(VolumeUnit.KilousGallon);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, (double)kilousgallonQuantity.Value, KilousGallonsTolerance);
            Assert.Equal(VolumeUnit.KilousGallon, kilousgallonQuantity.Unit);

            var literQuantity = cubicmeter.ToUnit(VolumeUnit.Liter);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, (double)literQuantity.Value, LitersTolerance);
            Assert.Equal(VolumeUnit.Liter, literQuantity.Unit);

            var megacubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.MegacubicFoot);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, (double)megacubicfootQuantity.Value, MegacubicFeetTolerance);
            Assert.Equal(VolumeUnit.MegacubicFoot, megacubicfootQuantity.Unit);

            var megaimperialgallonQuantity = cubicmeter.ToUnit(VolumeUnit.MegaimperialGallon);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, (double)megaimperialgallonQuantity.Value, MegaimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.MegaimperialGallon, megaimperialgallonQuantity.Unit);

            var megaliterQuantity = cubicmeter.ToUnit(VolumeUnit.Megaliter);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, (double)megaliterQuantity.Value, MegalitersTolerance);
            Assert.Equal(VolumeUnit.Megaliter, megaliterQuantity.Unit);

            var megausgallonQuantity = cubicmeter.ToUnit(VolumeUnit.MegausGallon);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, (double)megausgallonQuantity.Value, MegausGallonsTolerance);
            Assert.Equal(VolumeUnit.MegausGallon, megausgallonQuantity.Unit);

            var metriccupQuantity = cubicmeter.ToUnit(VolumeUnit.MetricCup);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, (double)metriccupQuantity.Value, MetricCupsTolerance);
            Assert.Equal(VolumeUnit.MetricCup, metriccupQuantity.Unit);

            var metricteaspoonQuantity = cubicmeter.ToUnit(VolumeUnit.MetricTeaspoon);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, (double)metricteaspoonQuantity.Value, MetricTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.MetricTeaspoon, metricteaspoonQuantity.Unit);

            var microliterQuantity = cubicmeter.ToUnit(VolumeUnit.Microliter);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, (double)microliterQuantity.Value, MicrolitersTolerance);
            Assert.Equal(VolumeUnit.Microliter, microliterQuantity.Unit);

            var milliliterQuantity = cubicmeter.ToUnit(VolumeUnit.Milliliter);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, (double)milliliterQuantity.Value, MillilitersTolerance);
            Assert.Equal(VolumeUnit.Milliliter, milliliterQuantity.Unit);

            var millionbarrelsQuantity = cubicmeter.ToUnit(VolumeUnit.MillionBarrels);
            AssertEx.EqualTolerance(MillionBarrelsInOneCubicMeter, (double)millionbarrelsQuantity.Value, MillionBarrelsTolerance);
            Assert.Equal(VolumeUnit.MillionBarrels, millionbarrelsQuantity.Unit);

            var millioncubicfeetQuantity = cubicmeter.ToUnit(VolumeUnit.MillionCubicFeet);
            AssertEx.EqualTolerance(MillionCubicFeetsInOneCubicMeter, (double)millioncubicfeetQuantity.Value, MillionCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.MillionCubicFeet, millioncubicfeetQuantity.Unit);

            var millioncubicmeterQuantity = cubicmeter.ToUnit(VolumeUnit.MillionCubicMeter);
            AssertEx.EqualTolerance(MillionCubicMetersInOneCubicMeter, (double)millioncubicmeterQuantity.Value, MillionCubicMetersTolerance);
            Assert.Equal(VolumeUnit.MillionCubicMeter, millioncubicmeterQuantity.Unit);

            var millionreservoirbarrelsQuantity = cubicmeter.ToUnit(VolumeUnit.MillionReservoirBarrels);
            AssertEx.EqualTolerance(MillionReservoirBarrelsInOneCubicMeter, (double)millionreservoirbarrelsQuantity.Value, MillionReservoirBarrelsTolerance);
            Assert.Equal(VolumeUnit.MillionReservoirBarrels, millionreservoirbarrelsQuantity.Unit);

            var millionstandardcubicfeetQuantity = cubicmeter.ToUnit(VolumeUnit.MillionStandardCubicFeet);
            AssertEx.EqualTolerance(MillionStandardCubicFeetsInOneCubicMeter, (double)millionstandardcubicfeetQuantity.Value, MillionStandardCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.MillionStandardCubicFeet, millionstandardcubicfeetQuantity.Unit);

            var millionukgallonsQuantity = cubicmeter.ToUnit(VolumeUnit.MillionUkGallons);
            AssertEx.EqualTolerance(MillionUkGallonsInOneCubicMeter, (double)millionukgallonsQuantity.Value, MillionUkGallonsTolerance);
            Assert.Equal(VolumeUnit.MillionUkGallons, millionukgallonsQuantity.Unit);

            var millionusgallonsQuantity = cubicmeter.ToUnit(VolumeUnit.MillionUsGallons);
            AssertEx.EqualTolerance(MillionUsGallonsInOneCubicMeter, (double)millionusgallonsQuantity.Value, MillionUsGallonsTolerance);
            Assert.Equal(VolumeUnit.MillionUsGallons, millionusgallonsQuantity.Unit);

            var oilbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.OilBarrel);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, (double)oilbarrelQuantity.Value, OilBarrelsTolerance);
            Assert.Equal(VolumeUnit.OilBarrel, oilbarrelQuantity.Unit);

            var reservoirbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.ReservoirBarrel);
            AssertEx.EqualTolerance(ReservoirBarrelsInOneCubicMeter, (double)reservoirbarrelQuantity.Value, ReservoirBarrelsTolerance);
            Assert.Equal(VolumeUnit.ReservoirBarrel, reservoirbarrelQuantity.Unit);

            var reservoircubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.ReservoirCubicFoot);
            AssertEx.EqualTolerance(ReservoirCubicFeetInOneCubicMeter, (double)reservoircubicfootQuantity.Value, ReservoirCubicFeetTolerance);
            Assert.Equal(VolumeUnit.ReservoirCubicFoot, reservoircubicfootQuantity.Unit);

            var standardcubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.StandardCubicFoot);
            AssertEx.EqualTolerance(StandardCubicFeetInOneCubicMeter, (double)standardcubicfootQuantity.Value, StandardCubicFeetTolerance);
            Assert.Equal(VolumeUnit.StandardCubicFoot, standardcubicfootQuantity.Unit);

            var stocktankbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.StockTankBarrel);
            AssertEx.EqualTolerance(StockTankBarrelsInOneCubicMeter, (double)stocktankbarrelQuantity.Value, StockTankBarrelsTolerance);
            Assert.Equal(VolumeUnit.StockTankBarrel, stocktankbarrelQuantity.Unit);

            var thousandbarrelsQuantity = cubicmeter.ToUnit(VolumeUnit.ThousandBarrels);
            AssertEx.EqualTolerance(ThousandBarrelsInOneCubicMeter, (double)thousandbarrelsQuantity.Value, ThousandBarrelsTolerance);
            Assert.Equal(VolumeUnit.ThousandBarrels, thousandbarrelsQuantity.Unit);

            var thousandcubicfeetQuantity = cubicmeter.ToUnit(VolumeUnit.ThousandCubicFeet);
            AssertEx.EqualTolerance(ThousandCubicFeetsInOneCubicMeter, (double)thousandcubicfeetQuantity.Value, ThousandCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.ThousandCubicFeet, thousandcubicfeetQuantity.Unit);

            var thousandreservoirbarrelsQuantity = cubicmeter.ToUnit(VolumeUnit.ThousandReservoirBarrels);
            AssertEx.EqualTolerance(ThousandReservoirBarrelsInOneCubicMeter, (double)thousandreservoirbarrelsQuantity.Value, ThousandReservoirBarrelsTolerance);
            Assert.Equal(VolumeUnit.ThousandReservoirBarrels, thousandreservoirbarrelsQuantity.Unit);

            var thousandstandardcubicfeetQuantity = cubicmeter.ToUnit(VolumeUnit.ThousandStandardCubicFeet);
            AssertEx.EqualTolerance(ThousandStandardCubicFeetsInOneCubicMeter, (double)thousandstandardcubicfeetQuantity.Value, ThousandStandardCubicFeetsTolerance);
            Assert.Equal(VolumeUnit.ThousandStandardCubicFeet, thousandstandardcubicfeetQuantity.Unit);

            var thousandukgallonsQuantity = cubicmeter.ToUnit(VolumeUnit.ThousandUkGallons);
            AssertEx.EqualTolerance(ThousandUkGallonsInOneCubicMeter, (double)thousandukgallonsQuantity.Value, ThousandUkGallonsTolerance);
            Assert.Equal(VolumeUnit.ThousandUkGallons, thousandukgallonsQuantity.Unit);

            var thousandusgallonsQuantity = cubicmeter.ToUnit(VolumeUnit.ThousandUsGallons);
            AssertEx.EqualTolerance(ThousandUsGallonsInOneCubicMeter, (double)thousandusgallonsQuantity.Value, ThousandUsGallonsTolerance);
            Assert.Equal(VolumeUnit.ThousandUsGallons, thousandusgallonsQuantity.Unit);

            var trillioncubicfootQuantity = cubicmeter.ToUnit(VolumeUnit.TrillionCubicFoot);
            AssertEx.EqualTolerance(TrillionCubicFeetInOneCubicMeter, (double)trillioncubicfootQuantity.Value, TrillionCubicFeetTolerance);
            Assert.Equal(VolumeUnit.TrillionCubicFoot, trillioncubicfootQuantity.Unit);

            var ukgallonQuantity = cubicmeter.ToUnit(VolumeUnit.UkGallon);
            AssertEx.EqualTolerance(UkGallonsInOneCubicMeter, (double)ukgallonQuantity.Value, UkGallonsTolerance);
            Assert.Equal(VolumeUnit.UkGallon, ukgallonQuantity.Unit);

            var uktablespoonQuantity = cubicmeter.ToUnit(VolumeUnit.UkTablespoon);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, (double)uktablespoonQuantity.Value, UkTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UkTablespoon, uktablespoonQuantity.Unit);

            var usbeerbarrelQuantity = cubicmeter.ToUnit(VolumeUnit.UsBeerBarrel);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, (double)usbeerbarrelQuantity.Value, UsBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.UsBeerBarrel, usbeerbarrelQuantity.Unit);

            var uscustomarycupQuantity = cubicmeter.ToUnit(VolumeUnit.UsCustomaryCup);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, (double)uscustomarycupQuantity.Value, UsCustomaryCupsTolerance);
            Assert.Equal(VolumeUnit.UsCustomaryCup, uscustomarycupQuantity.Unit);

            var usgallonQuantity = cubicmeter.ToUnit(VolumeUnit.UsGallon);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, (double)usgallonQuantity.Value, UsGallonsTolerance);
            Assert.Equal(VolumeUnit.UsGallon, usgallonQuantity.Unit);

            var uslegalcupQuantity = cubicmeter.ToUnit(VolumeUnit.UsLegalCup);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, (double)uslegalcupQuantity.Value, UsLegalCupsTolerance);
            Assert.Equal(VolumeUnit.UsLegalCup, uslegalcupQuantity.Unit);

            var usounceQuantity = cubicmeter.ToUnit(VolumeUnit.UsOunce);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, (double)usounceQuantity.Value, UsOuncesTolerance);
            Assert.Equal(VolumeUnit.UsOunce, usounceQuantity.Unit);

            var uspintQuantity = cubicmeter.ToUnit(VolumeUnit.UsPint);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, (double)uspintQuantity.Value, UsPintsTolerance);
            Assert.Equal(VolumeUnit.UsPint, uspintQuantity.Unit);

            var usquartQuantity = cubicmeter.ToUnit(VolumeUnit.UsQuart);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, (double)usquartQuantity.Value, UsQuartsTolerance);
            Assert.Equal(VolumeUnit.UsQuart, usquartQuantity.Unit);

            var ustablespoonQuantity = cubicmeter.ToUnit(VolumeUnit.UsTablespoon);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, (double)ustablespoonQuantity.Value, UsTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UsTablespoon, ustablespoonQuantity.Unit);

            var usteaspoonQuantity = cubicmeter.ToUnit(VolumeUnit.UsTeaspoon);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, (double)usteaspoonQuantity.Value, UsTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.UsTeaspoon, usteaspoonQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = Volume.FromCubicMeters(1).ToBaseUnit();
            Assert.Equal(Volume.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(1, Volume.FromAcreFeet(cubicmeter.AcreFeet).CubicMeters, AcreFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromAuTablespoons(cubicmeter.AuTablespoons).CubicMeters, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromBarrels(cubicmeter.Barrels).CubicMeters, BarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromBillionCubicFeets(cubicmeter.BillionCubicFeets).CubicMeters, BillionCubicFeetsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromBillionCubicMeters(cubicmeter.BillionCubicMeters).CubicMeters, BillionCubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromBoardFeet(cubicmeter.BoardFeet).CubicMeters, BoardFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCentiliters(cubicmeter.Centiliters).CubicMeters, CentilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicCentimeters(cubicmeter.CubicCentimeters).CubicMeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicDecimeters(cubicmeter.CubicDecimeters).CubicMeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicFeet(cubicmeter.CubicFeet).CubicMeters, CubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicHectometers(cubicmeter.CubicHectometers).CubicMeters, CubicHectometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicInches(cubicmeter.CubicInches).CubicMeters, CubicInchesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicKilometers(cubicmeter.CubicKilometers).CubicMeters, CubicKilometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMeters(cubicmeter.CubicMeters).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMicrometers(cubicmeter.CubicMicrometers).CubicMeters, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMiles(cubicmeter.CubicMiles).CubicMeters, CubicMilesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMillimeters(cubicmeter.CubicMillimeters).CubicMeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicYards(cubicmeter.CubicYards).CubicMeters, CubicYardsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDecausGallons(cubicmeter.DecausGallons).CubicMeters, DecausGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDeciliters(cubicmeter.Deciliters).CubicMeters, DecilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDeciusGallons(cubicmeter.DeciusGallons).CubicMeters, DeciusGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectocubicFeet(cubicmeter.HectocubicFeet).CubicMeters, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectocubicMeters(cubicmeter.HectocubicMeters).CubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectoliters(cubicmeter.Hectoliters).CubicMeters, HectolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectousGallons(cubicmeter.HectousGallons).CubicMeters, HectousGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialBeerBarrels(cubicmeter.ImperialBeerBarrels).CubicMeters, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialGallons(cubicmeter.ImperialGallons).CubicMeters, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialOunces(cubicmeter.ImperialOunces).CubicMeters, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialPints(cubicmeter.ImperialPints).CubicMeters, ImperialPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilocubicFeet(cubicmeter.KilocubicFeet).CubicMeters, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilocubicMeters(cubicmeter.KilocubicMeters).CubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKiloimperialGallons(cubicmeter.KiloimperialGallons).CubicMeters, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKiloliters(cubicmeter.Kiloliters).CubicMeters, KilolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilousGallons(cubicmeter.KilousGallons).CubicMeters, KilousGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromLiters(cubicmeter.Liters).CubicMeters, LitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegacubicFeet(cubicmeter.MegacubicFeet).CubicMeters, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegaimperialGallons(cubicmeter.MegaimperialGallons).CubicMeters, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegaliters(cubicmeter.Megaliters).CubicMeters, MegalitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegausGallons(cubicmeter.MegausGallons).CubicMeters, MegausGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMetricCups(cubicmeter.MetricCups).CubicMeters, MetricCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMetricTeaspoons(cubicmeter.MetricTeaspoons).CubicMeters, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMicroliters(cubicmeter.Microliters).CubicMeters, MicrolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMilliliters(cubicmeter.Milliliters).CubicMeters, MillilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMillionBarrels(cubicmeter.MillionBarrels).CubicMeters, MillionBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMillionCubicFeets(cubicmeter.MillionCubicFeets).CubicMeters, MillionCubicFeetsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMillionCubicMeters(cubicmeter.MillionCubicMeters).CubicMeters, MillionCubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMillionReservoirBarrels(cubicmeter.MillionReservoirBarrels).CubicMeters, MillionReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMillionStandardCubicFeets(cubicmeter.MillionStandardCubicFeets).CubicMeters, MillionStandardCubicFeetsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMillionUkGallons(cubicmeter.MillionUkGallons).CubicMeters, MillionUkGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMillionUsGallons(cubicmeter.MillionUsGallons).CubicMeters, MillionUsGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromOilBarrels(cubicmeter.OilBarrels).CubicMeters, OilBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromReservoirBarrels(cubicmeter.ReservoirBarrels).CubicMeters, ReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromReservoirCubicFeet(cubicmeter.ReservoirCubicFeet).CubicMeters, ReservoirCubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromStandardCubicFeet(cubicmeter.StandardCubicFeet).CubicMeters, StandardCubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromStockTankBarrels(cubicmeter.StockTankBarrels).CubicMeters, StockTankBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromThousandBarrels(cubicmeter.ThousandBarrels).CubicMeters, ThousandBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromThousandCubicFeets(cubicmeter.ThousandCubicFeets).CubicMeters, ThousandCubicFeetsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromThousandReservoirBarrels(cubicmeter.ThousandReservoirBarrels).CubicMeters, ThousandReservoirBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromThousandStandardCubicFeets(cubicmeter.ThousandStandardCubicFeets).CubicMeters, ThousandStandardCubicFeetsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromThousandUkGallons(cubicmeter.ThousandUkGallons).CubicMeters, ThousandUkGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromThousandUsGallons(cubicmeter.ThousandUsGallons).CubicMeters, ThousandUsGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromTrillionCubicFeet(cubicmeter.TrillionCubicFeet).CubicMeters, TrillionCubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUkGallons(cubicmeter.UkGallons).CubicMeters, UkGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUkTablespoons(cubicmeter.UkTablespoons).CubicMeters, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsBeerBarrels(cubicmeter.UsBeerBarrels).CubicMeters, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsCustomaryCups(cubicmeter.UsCustomaryCups).CubicMeters, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsGallons(cubicmeter.UsGallons).CubicMeters, UsGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsLegalCups(cubicmeter.UsLegalCups).CubicMeters, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsOunces(cubicmeter.UsOunces).CubicMeters, UsOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsPints(cubicmeter.UsPints).CubicMeters, UsPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsQuarts(cubicmeter.UsQuarts).CubicMeters, UsQuartsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsTablespoons(cubicmeter.UsTablespoons).CubicMeters, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsTeaspoons(cubicmeter.UsTeaspoons).CubicMeters, UsTeaspoonsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Volume v = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(-1, -v.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (Volume.FromCubicMeters(3)-v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (Volume.FromCubicMeters(10)/5).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, Volume.FromCubicMeters(10)/Volume.FromCubicMeters(5), CubicMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Volume oneCubicMeter = Volume.FromCubicMeters(1);
            Volume twoCubicMeters = Volume.FromCubicMeters(2);

            Assert.True(oneCubicMeter < twoCubicMeters);
            Assert.True(oneCubicMeter <= twoCubicMeters);
            Assert.True(twoCubicMeters > oneCubicMeter);
            Assert.True(twoCubicMeters >= oneCubicMeter);

            Assert.False(oneCubicMeter > twoCubicMeters);
            Assert.False(oneCubicMeter >= twoCubicMeters);
            Assert.False(twoCubicMeters < oneCubicMeter);
            Assert.False(twoCubicMeters <= oneCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Equal(0, cubicmeter.CompareTo(cubicmeter));
            Assert.True(cubicmeter.CompareTo(Volume.Zero) > 0);
            Assert.True(Volume.Zero.CompareTo(cubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentException>(() => cubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Volume.FromCubicMeters(1);
            var b = Volume.FromCubicMeters(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Volume.FromCubicMeters(1);
            var b = Volume.FromCubicMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Volume.FromCubicMeters(1);
            object b = Volume.FromCubicMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Volume.FromCubicMeters(1);
            Assert.True(v.Equals(Volume.FromCubicMeters(1), CubicMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Volume.Zero, CubicMetersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Volume.FromCubicMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(VolumeUnit.Undefined, Volume.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>();
            foreach(var unit in units)
            {
                if(unit == VolumeUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Volume.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 ac-ft", new Volume(1, VolumeUnit.AcreFoot).ToString());
                Assert.Equal("1 ", new Volume(1, VolumeUnit.AuTablespoon).ToString());
                Assert.Equal("1 bbl", new Volume(1, VolumeUnit.Barrel).ToString());
                Assert.Equal("1 BCF", new Volume(1, VolumeUnit.BillionCubicFeet).ToString());
                Assert.Equal("1 Gm3", new Volume(1, VolumeUnit.BillionCubicMeter).ToString());
                Assert.Equal("1 bf", new Volume(1, VolumeUnit.BoardFoot).ToString());
                Assert.Equal("1 cl", new Volume(1, VolumeUnit.Centiliter).ToString());
                Assert.Equal("1 cm³", new Volume(1, VolumeUnit.CubicCentimeter).ToString());
                Assert.Equal("1 dm³", new Volume(1, VolumeUnit.CubicDecimeter).ToString());
                Assert.Equal("1 ft³", new Volume(1, VolumeUnit.CubicFoot).ToString());
                Assert.Equal("1 hm³", new Volume(1, VolumeUnit.CubicHectometer).ToString());
                Assert.Equal("1 in³", new Volume(1, VolumeUnit.CubicInch).ToString());
                Assert.Equal("1 km³", new Volume(1, VolumeUnit.CubicKilometer).ToString());
                Assert.Equal("1 m³", new Volume(1, VolumeUnit.CubicMeter).ToString());
                Assert.Equal("1 µm³", new Volume(1, VolumeUnit.CubicMicrometer).ToString());
                Assert.Equal("1 mi³", new Volume(1, VolumeUnit.CubicMile).ToString());
                Assert.Equal("1 mm³", new Volume(1, VolumeUnit.CubicMillimeter).ToString());
                Assert.Equal("1 yd³", new Volume(1, VolumeUnit.CubicYard).ToString());
                Assert.Equal("1 dagal (U.S.)", new Volume(1, VolumeUnit.DecausGallon).ToString());
                Assert.Equal("1 dl", new Volume(1, VolumeUnit.Deciliter).ToString());
                Assert.Equal("1 dgal (U.S.)", new Volume(1, VolumeUnit.DeciusGallon).ToString());
                Assert.Equal("1 hft³", new Volume(1, VolumeUnit.HectocubicFoot).ToString());
                Assert.Equal("1 hm³", new Volume(1, VolumeUnit.HectocubicMeter).ToString());
                Assert.Equal("1 hl", new Volume(1, VolumeUnit.Hectoliter).ToString());
                Assert.Equal("1 hgal (U.S.)", new Volume(1, VolumeUnit.HectousGallon).ToString());
                Assert.Equal("1 bl (imp.)", new Volume(1, VolumeUnit.ImperialBeerBarrel).ToString());
                Assert.Equal("1 gal (imp.)", new Volume(1, VolumeUnit.ImperialGallon).ToString());
                Assert.Equal("1 oz (imp.)", new Volume(1, VolumeUnit.ImperialOunce).ToString());
                Assert.Equal("1 pt (imp.)", new Volume(1, VolumeUnit.ImperialPint).ToString());
                Assert.Equal("1 kft³", new Volume(1, VolumeUnit.KilocubicFoot).ToString());
                Assert.Equal("1 km³", new Volume(1, VolumeUnit.KilocubicMeter).ToString());
                Assert.Equal("1 kgal (imp.)", new Volume(1, VolumeUnit.KiloimperialGallon).ToString());
                Assert.Equal("1 kl", new Volume(1, VolumeUnit.Kiloliter).ToString());
                Assert.Equal("1 kgal (U.S.)", new Volume(1, VolumeUnit.KilousGallon).ToString());
                Assert.Equal("1 l", new Volume(1, VolumeUnit.Liter).ToString());
                Assert.Equal("1 Mft³", new Volume(1, VolumeUnit.MegacubicFoot).ToString());
                Assert.Equal("1 Mgal (imp.)", new Volume(1, VolumeUnit.MegaimperialGallon).ToString());
                Assert.Equal("1 Ml", new Volume(1, VolumeUnit.Megaliter).ToString());
                Assert.Equal("1 Mgal (U.S.)", new Volume(1, VolumeUnit.MegausGallon).ToString());
                Assert.Equal("1 ", new Volume(1, VolumeUnit.MetricCup).ToString());
                Assert.Equal("1 tsp", new Volume(1, VolumeUnit.MetricTeaspoon).ToString());
                Assert.Equal("1 µl", new Volume(1, VolumeUnit.Microliter).ToString());
                Assert.Equal("1 ml", new Volume(1, VolumeUnit.Milliliter).ToString());
                Assert.Equal("1 MMb", new Volume(1, VolumeUnit.MillionBarrels).ToString());
                Assert.Equal("1 MMft3", new Volume(1, VolumeUnit.MillionCubicFeet).ToString());
                Assert.Equal("1 Mm3", new Volume(1, VolumeUnit.MillionCubicMeter).ToString());
                Assert.Equal("1 MMrbbl", new Volume(1, VolumeUnit.MillionReservoirBarrels).ToString());
                Assert.Equal("1 MMscf", new Volume(1, VolumeUnit.MillionStandardCubicFeet).ToString());
                Assert.Equal("1 MMUKgal", new Volume(1, VolumeUnit.MillionUkGallons).ToString());
                Assert.Equal("1 MMUSgal", new Volume(1, VolumeUnit.MillionUsGallons).ToString());
                Assert.Equal("1 bbl", new Volume(1, VolumeUnit.OilBarrel).ToString());
                Assert.Equal("1 rbbl", new Volume(1, VolumeUnit.ReservoirBarrel).ToString());
                Assert.Equal("1 rft3", new Volume(1, VolumeUnit.ReservoirCubicFoot).ToString());
                Assert.Equal("1 scf", new Volume(1, VolumeUnit.StandardCubicFoot).ToString());
                Assert.Equal("1 stbbl", new Volume(1, VolumeUnit.StockTankBarrel).ToString());
                Assert.Equal("1 Mb", new Volume(1, VolumeUnit.ThousandBarrels).ToString());
                Assert.Equal("1 Mft3", new Volume(1, VolumeUnit.ThousandCubicFeet).ToString());
                Assert.Equal("1 Mrbbl", new Volume(1, VolumeUnit.ThousandReservoirBarrels).ToString());
                Assert.Equal("1 Mscf", new Volume(1, VolumeUnit.ThousandStandardCubicFeet).ToString());
                Assert.Equal("1 MUKgal", new Volume(1, VolumeUnit.ThousandUkGallons).ToString());
                Assert.Equal("1 MUSgal", new Volume(1, VolumeUnit.ThousandUsGallons).ToString());
                Assert.Equal("1 TCF", new Volume(1, VolumeUnit.TrillionCubicFoot).ToString());
                Assert.Equal("1 UKgal", new Volume(1, VolumeUnit.UkGallon).ToString());
                Assert.Equal("1 ", new Volume(1, VolumeUnit.UkTablespoon).ToString());
                Assert.Equal("1 bl (U.S.)", new Volume(1, VolumeUnit.UsBeerBarrel).ToString());
                Assert.Equal("1 ", new Volume(1, VolumeUnit.UsCustomaryCup).ToString());
                Assert.Equal("1 gal (U.S.)", new Volume(1, VolumeUnit.UsGallon).ToString());
                Assert.Equal("1 ", new Volume(1, VolumeUnit.UsLegalCup).ToString());
                Assert.Equal("1 oz (U.S.)", new Volume(1, VolumeUnit.UsOunce).ToString());
                Assert.Equal("1 pt (U.S.)", new Volume(1, VolumeUnit.UsPint).ToString());
                Assert.Equal("1 qt (U.S.)", new Volume(1, VolumeUnit.UsQuart).ToString());
                Assert.Equal("1 ", new Volume(1, VolumeUnit.UsTablespoon).ToString());
                Assert.Equal("1 ", new Volume(1, VolumeUnit.UsTeaspoon).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 ac-ft", new Volume(1, VolumeUnit.AcreFoot).ToString(swedishCulture));
            Assert.Equal("1 ", new Volume(1, VolumeUnit.AuTablespoon).ToString(swedishCulture));
            Assert.Equal("1 bbl", new Volume(1, VolumeUnit.Barrel).ToString(swedishCulture));
            Assert.Equal("1 BCF", new Volume(1, VolumeUnit.BillionCubicFeet).ToString(swedishCulture));
            Assert.Equal("1 Gm3", new Volume(1, VolumeUnit.BillionCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 bf", new Volume(1, VolumeUnit.BoardFoot).ToString(swedishCulture));
            Assert.Equal("1 cl", new Volume(1, VolumeUnit.Centiliter).ToString(swedishCulture));
            Assert.Equal("1 cm³", new Volume(1, VolumeUnit.CubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dm³", new Volume(1, VolumeUnit.CubicDecimeter).ToString(swedishCulture));
            Assert.Equal("1 ft³", new Volume(1, VolumeUnit.CubicFoot).ToString(swedishCulture));
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.CubicHectometer).ToString(swedishCulture));
            Assert.Equal("1 in³", new Volume(1, VolumeUnit.CubicInch).ToString(swedishCulture));
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.CubicKilometer).ToString(swedishCulture));
            Assert.Equal("1 m³", new Volume(1, VolumeUnit.CubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µm³", new Volume(1, VolumeUnit.CubicMicrometer).ToString(swedishCulture));
            Assert.Equal("1 mi³", new Volume(1, VolumeUnit.CubicMile).ToString(swedishCulture));
            Assert.Equal("1 mm³", new Volume(1, VolumeUnit.CubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 yd³", new Volume(1, VolumeUnit.CubicYard).ToString(swedishCulture));
            Assert.Equal("1 dagal (U.S.)", new Volume(1, VolumeUnit.DecausGallon).ToString(swedishCulture));
            Assert.Equal("1 dl", new Volume(1, VolumeUnit.Deciliter).ToString(swedishCulture));
            Assert.Equal("1 dgal (U.S.)", new Volume(1, VolumeUnit.DeciusGallon).ToString(swedishCulture));
            Assert.Equal("1 hft³", new Volume(1, VolumeUnit.HectocubicFoot).ToString(swedishCulture));
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.HectocubicMeter).ToString(swedishCulture));
            Assert.Equal("1 hl", new Volume(1, VolumeUnit.Hectoliter).ToString(swedishCulture));
            Assert.Equal("1 hgal (U.S.)", new Volume(1, VolumeUnit.HectousGallon).ToString(swedishCulture));
            Assert.Equal("1 bl (imp.)", new Volume(1, VolumeUnit.ImperialBeerBarrel).ToString(swedishCulture));
            Assert.Equal("1 gal (imp.)", new Volume(1, VolumeUnit.ImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 oz (imp.)", new Volume(1, VolumeUnit.ImperialOunce).ToString(swedishCulture));
            Assert.Equal("1 pt (imp.)", new Volume(1, VolumeUnit.ImperialPint).ToString(swedishCulture));
            Assert.Equal("1 kft³", new Volume(1, VolumeUnit.KilocubicFoot).ToString(swedishCulture));
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.KilocubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kgal (imp.)", new Volume(1, VolumeUnit.KiloimperialGallon).ToString(swedishCulture));
            Assert.Equal("1 kl", new Volume(1, VolumeUnit.Kiloliter).ToString(swedishCulture));
            Assert.Equal("1 kgal (U.S.)", new Volume(1, VolumeUnit.KilousGallon).ToString(swedishCulture));
            Assert.Equal("1 l", new Volume(1, VolumeUnit.Liter).ToString(swedishCulture));
            Assert.Equal("1 Mft³", new Volume(1, VolumeUnit.MegacubicFoot).ToString(swedishCulture));
            Assert.Equal("1 Mgal (imp.)", new Volume(1, VolumeUnit.MegaimperialGallon).ToString(swedishCulture));
            Assert.Equal("1 Ml", new Volume(1, VolumeUnit.Megaliter).ToString(swedishCulture));
            Assert.Equal("1 Mgal (U.S.)", new Volume(1, VolumeUnit.MegausGallon).ToString(swedishCulture));
            Assert.Equal("1 ", new Volume(1, VolumeUnit.MetricCup).ToString(swedishCulture));
            Assert.Equal("1 tsp", new Volume(1, VolumeUnit.MetricTeaspoon).ToString(swedishCulture));
            Assert.Equal("1 µl", new Volume(1, VolumeUnit.Microliter).ToString(swedishCulture));
            Assert.Equal("1 ml", new Volume(1, VolumeUnit.Milliliter).ToString(swedishCulture));
            Assert.Equal("1 MMb", new Volume(1, VolumeUnit.MillionBarrels).ToString(swedishCulture));
            Assert.Equal("1 MMft3", new Volume(1, VolumeUnit.MillionCubicFeet).ToString(swedishCulture));
            Assert.Equal("1 Mm3", new Volume(1, VolumeUnit.MillionCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 MMrbbl", new Volume(1, VolumeUnit.MillionReservoirBarrels).ToString(swedishCulture));
            Assert.Equal("1 MMscf", new Volume(1, VolumeUnit.MillionStandardCubicFeet).ToString(swedishCulture));
            Assert.Equal("1 MMUKgal", new Volume(1, VolumeUnit.MillionUkGallons).ToString(swedishCulture));
            Assert.Equal("1 MMUSgal", new Volume(1, VolumeUnit.MillionUsGallons).ToString(swedishCulture));
            Assert.Equal("1 bbl", new Volume(1, VolumeUnit.OilBarrel).ToString(swedishCulture));
            Assert.Equal("1 rbbl", new Volume(1, VolumeUnit.ReservoirBarrel).ToString(swedishCulture));
            Assert.Equal("1 rft3", new Volume(1, VolumeUnit.ReservoirCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 scf", new Volume(1, VolumeUnit.StandardCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 stbbl", new Volume(1, VolumeUnit.StockTankBarrel).ToString(swedishCulture));
            Assert.Equal("1 Mb", new Volume(1, VolumeUnit.ThousandBarrels).ToString(swedishCulture));
            Assert.Equal("1 Mft3", new Volume(1, VolumeUnit.ThousandCubicFeet).ToString(swedishCulture));
            Assert.Equal("1 Mrbbl", new Volume(1, VolumeUnit.ThousandReservoirBarrels).ToString(swedishCulture));
            Assert.Equal("1 Mscf", new Volume(1, VolumeUnit.ThousandStandardCubicFeet).ToString(swedishCulture));
            Assert.Equal("1 MUKgal", new Volume(1, VolumeUnit.ThousandUkGallons).ToString(swedishCulture));
            Assert.Equal("1 MUSgal", new Volume(1, VolumeUnit.ThousandUsGallons).ToString(swedishCulture));
            Assert.Equal("1 TCF", new Volume(1, VolumeUnit.TrillionCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 UKgal", new Volume(1, VolumeUnit.UkGallon).ToString(swedishCulture));
            Assert.Equal("1 ", new Volume(1, VolumeUnit.UkTablespoon).ToString(swedishCulture));
            Assert.Equal("1 bl (U.S.)", new Volume(1, VolumeUnit.UsBeerBarrel).ToString(swedishCulture));
            Assert.Equal("1 ", new Volume(1, VolumeUnit.UsCustomaryCup).ToString(swedishCulture));
            Assert.Equal("1 gal (U.S.)", new Volume(1, VolumeUnit.UsGallon).ToString(swedishCulture));
            Assert.Equal("1 ", new Volume(1, VolumeUnit.UsLegalCup).ToString(swedishCulture));
            Assert.Equal("1 oz (U.S.)", new Volume(1, VolumeUnit.UsOunce).ToString(swedishCulture));
            Assert.Equal("1 pt (U.S.)", new Volume(1, VolumeUnit.UsPint).ToString(swedishCulture));
            Assert.Equal("1 qt (U.S.)", new Volume(1, VolumeUnit.UsQuart).ToString(swedishCulture));
            Assert.Equal("1 ", new Volume(1, VolumeUnit.UsTablespoon).ToString(swedishCulture));
            Assert.Equal("1 ", new Volume(1, VolumeUnit.UsTeaspoon).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s1"));
                Assert.Equal("0.12 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s2"));
                Assert.Equal("0.123 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s3"));
                Assert.Equal("0.1235 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Volume)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(VolumeUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(QuantityType.Volume, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(Volume.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(Volume.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(new {Volume.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Volume.FromCubicMeters(value);
            Assert.Equal(Volume.FromCubicMeters(-value), -quantity);
        }
    }
}
