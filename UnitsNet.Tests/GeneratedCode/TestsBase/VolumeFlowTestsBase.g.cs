//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of VolumeFlow.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class VolumeFlowTestsBase : QuantityTestsBase
    {
        protected virtual double AcreFeetPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double AcreFeetPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double AcreFeetPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double AcreFeetPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double BarrelsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double BarrelsPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double BarrelsPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double CentilitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double CentilitersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double CentilitersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double CubicCentimetersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double CubicCentimetersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double CubicDecimetersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double CubicFeetPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double CubicFeetPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double CubicFeetPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double CubicFeetPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double CubicInchesPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double CubicMetersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double CubicMetersPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double CubicMetersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double CubicMetersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double CubicMillimetersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double CubicYardsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double CubicYardsPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double CubicYardsPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double CubicYardsPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double DecilitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double DecilitersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double DecilitersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double GallonsPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double KilolitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double KilolitersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double KilolitersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double KilousGallonsPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double LitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double LitersPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double LitersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double LitersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double MegalitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double MegaukGallonsPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double MicrolitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double MicrolitersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double MicrolitersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double MillilitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double MillilitersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double MillilitersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double MillionCubicFeetPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double MillionCubicMetersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double MillionStandardCubicFeetsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double MillionUsGallonsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double NanolitersPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double NanolitersPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double NanolitersPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double OilBarrelsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double OilBarrelsPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double OilBarrelsPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double OilBarrelsPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double ReservoirBarrelsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double ThousandBarrelsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double ThousandCubicFeetPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double ThousandReservoirBarrelsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double ThousandStandardCubicFeetsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double UkGallonsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double UkGallonsPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double UkGallonsPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double UkGallonsPerSecondInOneCubicMeterPerSecond { get; }
        protected virtual double UsGallonsPerDayInOneCubicMeterPerSecond { get; }
        protected virtual double UsGallonsPerHourInOneCubicMeterPerSecond { get; }
        protected virtual double UsGallonsPerMinuteInOneCubicMeterPerSecond { get; }
        protected virtual double UsGallonsPerSecondInOneCubicMeterPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AcreFeetPerDayTolerance { get { return 1e-5; } }
        protected virtual double AcreFeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double AcreFeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double AcreFeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double BarrelsPerDayTolerance { get { return 1e-5; } }
        protected virtual double BarrelsPerHourTolerance { get { return 1e-5; } }
        protected virtual double BarrelsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CentilitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double CentilitersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CentilitersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CubicCentimetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CubicCentimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CubicDecimetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetPerDayTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CubicInchesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersPerDayTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CubicMillimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsPerDayTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsPerHourTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecilitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double DecilitersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DecilitersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GallonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilolitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double KilolitersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilolitersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilousGallonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double LitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double LitersPerHourTolerance { get { return 1e-5; } }
        protected virtual double LitersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double LitersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegalitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double MegaukGallonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillilitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double MillilitersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MillilitersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillionCubicFeetPerDayTolerance { get { return 1e-5; } }
        protected virtual double MillionCubicMetersPerDayTolerance { get { return 1e-5; } }
        protected virtual double MillionStandardCubicFeetsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MillionUsGallonsPerDayTolerance { get { return 1e-5; } }
        protected virtual double NanolitersPerDayTolerance { get { return 1e-5; } }
        protected virtual double NanolitersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double NanolitersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsPerDayTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsPerHourTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ReservoirBarrelsPerDayTolerance { get { return 1e-5; } }
        protected virtual double ThousandBarrelsPerDayTolerance { get { return 1e-5; } }
        protected virtual double ThousandCubicFeetPerDayTolerance { get { return 1e-5; } }
        protected virtual double ThousandReservoirBarrelsPerDayTolerance { get { return 1e-5; } }
        protected virtual double ThousandStandardCubicFeetsPerDayTolerance { get { return 1e-5; } }
        protected virtual double UkGallonsPerDayTolerance { get { return 1e-5; } }
        protected virtual double UkGallonsPerHourTolerance { get { return 1e-5; } }
        protected virtual double UkGallonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double UkGallonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsPerDayTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsPerHourTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new VolumeFlow((double)0.0, VolumeFlowUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new VolumeFlow();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerSecond, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new VolumeFlow(double.PositiveInfinity, VolumeFlowUnit.CubicMeterPerSecond));
            Assert.Throws<ArgumentException>(() => new VolumeFlow(double.NegativeInfinity, VolumeFlowUnit.CubicMeterPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new VolumeFlow(double.NaN, VolumeFlowUnit.CubicMeterPerSecond));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new VolumeFlow(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new VolumeFlow(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (VolumeFlow) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void VolumeFlow_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerSecond);

            QuantityInfo<VolumeFlowUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(VolumeFlow.Zero, quantityInfo.Zero);
            Assert.Equal("VolumeFlow", quantityInfo.Name);
            Assert.Equal(QuantityType.VolumeFlow, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<VolumeFlowUnit>().Except(new[] {VolumeFlowUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void CubicMeterPerSecondToVolumeFlowUnits()
        {
            VolumeFlow cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(AcreFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.AcreFeetPerDay, AcreFeetPerDayTolerance);
            AssertEx.EqualTolerance(AcreFeetPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.AcreFeetPerHour, AcreFeetPerHourTolerance);
            AssertEx.EqualTolerance(AcreFeetPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.AcreFeetPerMinute, AcreFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(AcreFeetPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.AcreFeetPerSecond, AcreFeetPerSecondTolerance);
            AssertEx.EqualTolerance(BarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.BarrelsPerDay, BarrelsPerDayTolerance);
            AssertEx.EqualTolerance(BarrelsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.BarrelsPerHour, BarrelsPerHourTolerance);
            AssertEx.EqualTolerance(BarrelsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.BarrelsPerMinute, BarrelsPerMinuteTolerance);
            AssertEx.EqualTolerance(CentilitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.CentilitersPerDay, CentilitersPerDayTolerance);
            AssertEx.EqualTolerance(CentilitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.CentilitersPerMinute, CentilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(CentilitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.CentilitersPerSecond, CentilitersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicCentimetersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.CubicCentimetersPerMinute, CubicCentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicCentimetersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.CubicCentimetersPerSecond, CubicCentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicDecimetersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.CubicDecimetersPerMinute, CubicDecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.CubicFeetPerDay, CubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(CubicFeetPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.CubicFeetPerHour, CubicFeetPerHourTolerance);
            AssertEx.EqualTolerance(CubicFeetPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.CubicFeetPerMinute, CubicFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicFeetPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.CubicFeetPerSecond, CubicFeetPerSecondTolerance);
            AssertEx.EqualTolerance(CubicInchesPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.CubicInchesPerSecond, CubicInchesPerSecondTolerance);
            AssertEx.EqualTolerance(CubicMetersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(CubicMetersPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.CubicMetersPerHour, CubicMetersPerHourTolerance);
            AssertEx.EqualTolerance(CubicMetersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.CubicMetersPerMinute, CubicMetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicMetersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicMillimetersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.CubicMillimetersPerSecond, CubicMillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicYardsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.CubicYardsPerDay, CubicYardsPerDayTolerance);
            AssertEx.EqualTolerance(CubicYardsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.CubicYardsPerHour, CubicYardsPerHourTolerance);
            AssertEx.EqualTolerance(CubicYardsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.CubicYardsPerMinute, CubicYardsPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicYardsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.CubicYardsPerSecond, CubicYardsPerSecondTolerance);
            AssertEx.EqualTolerance(DecilitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.DecilitersPerDay, DecilitersPerDayTolerance);
            AssertEx.EqualTolerance(DecilitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.DecilitersPerMinute, DecilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(DecilitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.DecilitersPerSecond, DecilitersPerSecondTolerance);
            AssertEx.EqualTolerance(GallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.GallonsPerMinute, GallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilolitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.KilolitersPerDay, KilolitersPerDayTolerance);
            AssertEx.EqualTolerance(KilolitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.KilolitersPerMinute, KilolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(KilolitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.KilolitersPerSecond, KilolitersPerSecondTolerance);
            AssertEx.EqualTolerance(KilousGallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.KilousGallonsPerMinute, KilousGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(LitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.LitersPerDay, LitersPerDayTolerance);
            AssertEx.EqualTolerance(LitersPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.LitersPerHour, LitersPerHourTolerance);
            AssertEx.EqualTolerance(LitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.LitersPerMinute, LitersPerMinuteTolerance);
            AssertEx.EqualTolerance(LitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.LitersPerSecond, LitersPerSecondTolerance);
            AssertEx.EqualTolerance(MegalitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.MegalitersPerDay, MegalitersPerDayTolerance);
            AssertEx.EqualTolerance(MegaukGallonsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.MegaukGallonsPerSecond, MegaukGallonsPerSecondTolerance);
            AssertEx.EqualTolerance(MicrolitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.MicrolitersPerDay, MicrolitersPerDayTolerance);
            AssertEx.EqualTolerance(MicrolitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.MicrolitersPerMinute, MicrolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(MicrolitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.MicrolitersPerSecond, MicrolitersPerSecondTolerance);
            AssertEx.EqualTolerance(MillilitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.MillilitersPerDay, MillilitersPerDayTolerance);
            AssertEx.EqualTolerance(MillilitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.MillilitersPerMinute, MillilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(MillilitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.MillilitersPerSecond, MillilitersPerSecondTolerance);
            AssertEx.EqualTolerance(MillionCubicFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.MillionCubicFeetPerDay, MillionCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(MillionCubicMetersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.MillionCubicMetersPerDay, MillionCubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(MillionStandardCubicFeetsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.MillionStandardCubicFeetsPerDay, MillionStandardCubicFeetsPerDayTolerance);
            AssertEx.EqualTolerance(MillionUsGallonsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.MillionUsGallonsPerDay, MillionUsGallonsPerDayTolerance);
            AssertEx.EqualTolerance(NanolitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.NanolitersPerDay, NanolitersPerDayTolerance);
            AssertEx.EqualTolerance(NanolitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.NanolitersPerMinute, NanolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(NanolitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.NanolitersPerSecond, NanolitersPerSecondTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.OilBarrelsPerDay, OilBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.OilBarrelsPerHour, OilBarrelsPerHourTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.OilBarrelsPerMinute, OilBarrelsPerMinuteTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.OilBarrelsPerSecond, OilBarrelsPerSecondTolerance);
            AssertEx.EqualTolerance(ReservoirBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.ReservoirBarrelsPerDay, ReservoirBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(ThousandBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.ThousandBarrelsPerDay, ThousandBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(ThousandCubicFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.ThousandCubicFeetPerDay, ThousandCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(ThousandReservoirBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.ThousandReservoirBarrelsPerDay, ThousandReservoirBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(ThousandStandardCubicFeetsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.ThousandStandardCubicFeetsPerDay, ThousandStandardCubicFeetsPerDayTolerance);
            AssertEx.EqualTolerance(UkGallonsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.UkGallonsPerDay, UkGallonsPerDayTolerance);
            AssertEx.EqualTolerance(UkGallonsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.UkGallonsPerHour, UkGallonsPerHourTolerance);
            AssertEx.EqualTolerance(UkGallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.UkGallonsPerMinute, UkGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(UkGallonsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.UkGallonsPerSecond, UkGallonsPerSecondTolerance);
            AssertEx.EqualTolerance(UsGallonsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.UsGallonsPerDay, UsGallonsPerDayTolerance);
            AssertEx.EqualTolerance(UsGallonsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.UsGallonsPerHour, UsGallonsPerHourTolerance);
            AssertEx.EqualTolerance(UsGallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.UsGallonsPerMinute, UsGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(UsGallonsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.UsGallonsPerSecond, UsGallonsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = VolumeFlow.From(1, VolumeFlowUnit.AcreFootPerDay);
            AssertEx.EqualTolerance(1, quantity00.AcreFeetPerDay, AcreFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerDay, quantity00.Unit);

            var quantity01 = VolumeFlow.From(1, VolumeFlowUnit.AcreFootPerHour);
            AssertEx.EqualTolerance(1, quantity01.AcreFeetPerHour, AcreFeetPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerHour, quantity01.Unit);

            var quantity02 = VolumeFlow.From(1, VolumeFlowUnit.AcreFootPerMinute);
            AssertEx.EqualTolerance(1, quantity02.AcreFeetPerMinute, AcreFeetPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerMinute, quantity02.Unit);

            var quantity03 = VolumeFlow.From(1, VolumeFlowUnit.AcreFootPerSecond);
            AssertEx.EqualTolerance(1, quantity03.AcreFeetPerSecond, AcreFeetPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerSecond, quantity03.Unit);

            var quantity04 = VolumeFlow.From(1, VolumeFlowUnit.BarrelPerDay);
            AssertEx.EqualTolerance(1, quantity04.BarrelsPerDay, BarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.BarrelPerDay, quantity04.Unit);

            var quantity05 = VolumeFlow.From(1, VolumeFlowUnit.BarrelPerHour);
            AssertEx.EqualTolerance(1, quantity05.BarrelsPerHour, BarrelsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.BarrelPerHour, quantity05.Unit);

            var quantity06 = VolumeFlow.From(1, VolumeFlowUnit.BarrelPerMinute);
            AssertEx.EqualTolerance(1, quantity06.BarrelsPerMinute, BarrelsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.BarrelPerMinute, quantity06.Unit);

            var quantity07 = VolumeFlow.From(1, VolumeFlowUnit.CentiliterPerDay);
            AssertEx.EqualTolerance(1, quantity07.CentilitersPerDay, CentilitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CentiliterPerDay, quantity07.Unit);

            var quantity08 = VolumeFlow.From(1, VolumeFlowUnit.CentiliterPerMinute);
            AssertEx.EqualTolerance(1, quantity08.CentilitersPerMinute, CentilitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CentiliterPerMinute, quantity08.Unit);

            var quantity09 = VolumeFlow.From(1, VolumeFlowUnit.CentiliterPerSecond);
            AssertEx.EqualTolerance(1, quantity09.CentilitersPerSecond, CentilitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CentiliterPerSecond, quantity09.Unit);

            var quantity10 = VolumeFlow.From(1, VolumeFlowUnit.CubicCentimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity10.CubicCentimetersPerMinute, CubicCentimetersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicCentimeterPerMinute, quantity10.Unit);

            var quantity11 = VolumeFlow.From(1, VolumeFlowUnit.CubicCentimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity11.CubicCentimetersPerSecond, CubicCentimetersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicCentimeterPerSecond, quantity11.Unit);

            var quantity12 = VolumeFlow.From(1, VolumeFlowUnit.CubicDecimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity12.CubicDecimetersPerMinute, CubicDecimetersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicDecimeterPerMinute, quantity12.Unit);

            var quantity13 = VolumeFlow.From(1, VolumeFlowUnit.CubicFootPerDay);
            AssertEx.EqualTolerance(1, quantity13.CubicFeetPerDay, CubicFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerDay, quantity13.Unit);

            var quantity14 = VolumeFlow.From(1, VolumeFlowUnit.CubicFootPerHour);
            AssertEx.EqualTolerance(1, quantity14.CubicFeetPerHour, CubicFeetPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerHour, quantity14.Unit);

            var quantity15 = VolumeFlow.From(1, VolumeFlowUnit.CubicFootPerMinute);
            AssertEx.EqualTolerance(1, quantity15.CubicFeetPerMinute, CubicFeetPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerMinute, quantity15.Unit);

            var quantity16 = VolumeFlow.From(1, VolumeFlowUnit.CubicFootPerSecond);
            AssertEx.EqualTolerance(1, quantity16.CubicFeetPerSecond, CubicFeetPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerSecond, quantity16.Unit);

            var quantity17 = VolumeFlow.From(1, VolumeFlowUnit.CubicInchPerSecond);
            AssertEx.EqualTolerance(1, quantity17.CubicInchesPerSecond, CubicInchesPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicInchPerSecond, quantity17.Unit);

            var quantity18 = VolumeFlow.From(1, VolumeFlowUnit.CubicMeterPerDay);
            AssertEx.EqualTolerance(1, quantity18.CubicMetersPerDay, CubicMetersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerDay, quantity18.Unit);

            var quantity19 = VolumeFlow.From(1, VolumeFlowUnit.CubicMeterPerHour);
            AssertEx.EqualTolerance(1, quantity19.CubicMetersPerHour, CubicMetersPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerHour, quantity19.Unit);

            var quantity20 = VolumeFlow.From(1, VolumeFlowUnit.CubicMeterPerMinute);
            AssertEx.EqualTolerance(1, quantity20.CubicMetersPerMinute, CubicMetersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerMinute, quantity20.Unit);

            var quantity21 = VolumeFlow.From(1, VolumeFlowUnit.CubicMeterPerSecond);
            AssertEx.EqualTolerance(1, quantity21.CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerSecond, quantity21.Unit);

            var quantity22 = VolumeFlow.From(1, VolumeFlowUnit.CubicMillimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity22.CubicMillimetersPerSecond, CubicMillimetersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMillimeterPerSecond, quantity22.Unit);

            var quantity23 = VolumeFlow.From(1, VolumeFlowUnit.CubicYardPerDay);
            AssertEx.EqualTolerance(1, quantity23.CubicYardsPerDay, CubicYardsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerDay, quantity23.Unit);

            var quantity24 = VolumeFlow.From(1, VolumeFlowUnit.CubicYardPerHour);
            AssertEx.EqualTolerance(1, quantity24.CubicYardsPerHour, CubicYardsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerHour, quantity24.Unit);

            var quantity25 = VolumeFlow.From(1, VolumeFlowUnit.CubicYardPerMinute);
            AssertEx.EqualTolerance(1, quantity25.CubicYardsPerMinute, CubicYardsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerMinute, quantity25.Unit);

            var quantity26 = VolumeFlow.From(1, VolumeFlowUnit.CubicYardPerSecond);
            AssertEx.EqualTolerance(1, quantity26.CubicYardsPerSecond, CubicYardsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerSecond, quantity26.Unit);

            var quantity27 = VolumeFlow.From(1, VolumeFlowUnit.DeciliterPerDay);
            AssertEx.EqualTolerance(1, quantity27.DecilitersPerDay, DecilitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.DeciliterPerDay, quantity27.Unit);

            var quantity28 = VolumeFlow.From(1, VolumeFlowUnit.DeciliterPerMinute);
            AssertEx.EqualTolerance(1, quantity28.DecilitersPerMinute, DecilitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.DeciliterPerMinute, quantity28.Unit);

            var quantity29 = VolumeFlow.From(1, VolumeFlowUnit.DeciliterPerSecond);
            AssertEx.EqualTolerance(1, quantity29.DecilitersPerSecond, DecilitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.DeciliterPerSecond, quantity29.Unit);

            var quantity30 = VolumeFlow.From(1, VolumeFlowUnit.GallonPerMinute);
            AssertEx.EqualTolerance(1, quantity30.GallonsPerMinute, GallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.GallonPerMinute, quantity30.Unit);

            var quantity31 = VolumeFlow.From(1, VolumeFlowUnit.KiloliterPerDay);
            AssertEx.EqualTolerance(1, quantity31.KilolitersPerDay, KilolitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.KiloliterPerDay, quantity31.Unit);

            var quantity32 = VolumeFlow.From(1, VolumeFlowUnit.KiloliterPerMinute);
            AssertEx.EqualTolerance(1, quantity32.KilolitersPerMinute, KilolitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.KiloliterPerMinute, quantity32.Unit);

            var quantity33 = VolumeFlow.From(1, VolumeFlowUnit.KiloliterPerSecond);
            AssertEx.EqualTolerance(1, quantity33.KilolitersPerSecond, KilolitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.KiloliterPerSecond, quantity33.Unit);

            var quantity34 = VolumeFlow.From(1, VolumeFlowUnit.KilousGallonPerMinute);
            AssertEx.EqualTolerance(1, quantity34.KilousGallonsPerMinute, KilousGallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.KilousGallonPerMinute, quantity34.Unit);

            var quantity35 = VolumeFlow.From(1, VolumeFlowUnit.LiterPerDay);
            AssertEx.EqualTolerance(1, quantity35.LitersPerDay, LitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerDay, quantity35.Unit);

            var quantity36 = VolumeFlow.From(1, VolumeFlowUnit.LiterPerHour);
            AssertEx.EqualTolerance(1, quantity36.LitersPerHour, LitersPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerHour, quantity36.Unit);

            var quantity37 = VolumeFlow.From(1, VolumeFlowUnit.LiterPerMinute);
            AssertEx.EqualTolerance(1, quantity37.LitersPerMinute, LitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerMinute, quantity37.Unit);

            var quantity38 = VolumeFlow.From(1, VolumeFlowUnit.LiterPerSecond);
            AssertEx.EqualTolerance(1, quantity38.LitersPerSecond, LitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerSecond, quantity38.Unit);

            var quantity39 = VolumeFlow.From(1, VolumeFlowUnit.MegaliterPerDay);
            AssertEx.EqualTolerance(1, quantity39.MegalitersPerDay, MegalitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MegaliterPerDay, quantity39.Unit);

            var quantity40 = VolumeFlow.From(1, VolumeFlowUnit.MegaukGallonPerSecond);
            AssertEx.EqualTolerance(1, quantity40.MegaukGallonsPerSecond, MegaukGallonsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.MegaukGallonPerSecond, quantity40.Unit);

            var quantity41 = VolumeFlow.From(1, VolumeFlowUnit.MicroliterPerDay);
            AssertEx.EqualTolerance(1, quantity41.MicrolitersPerDay, MicrolitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MicroliterPerDay, quantity41.Unit);

            var quantity42 = VolumeFlow.From(1, VolumeFlowUnit.MicroliterPerMinute);
            AssertEx.EqualTolerance(1, quantity42.MicrolitersPerMinute, MicrolitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.MicroliterPerMinute, quantity42.Unit);

            var quantity43 = VolumeFlow.From(1, VolumeFlowUnit.MicroliterPerSecond);
            AssertEx.EqualTolerance(1, quantity43.MicrolitersPerSecond, MicrolitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.MicroliterPerSecond, quantity43.Unit);

            var quantity44 = VolumeFlow.From(1, VolumeFlowUnit.MilliliterPerDay);
            AssertEx.EqualTolerance(1, quantity44.MillilitersPerDay, MillilitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MilliliterPerDay, quantity44.Unit);

            var quantity45 = VolumeFlow.From(1, VolumeFlowUnit.MilliliterPerMinute);
            AssertEx.EqualTolerance(1, quantity45.MillilitersPerMinute, MillilitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.MilliliterPerMinute, quantity45.Unit);

            var quantity46 = VolumeFlow.From(1, VolumeFlowUnit.MilliliterPerSecond);
            AssertEx.EqualTolerance(1, quantity46.MillilitersPerSecond, MillilitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.MilliliterPerSecond, quantity46.Unit);

            var quantity47 = VolumeFlow.From(1, VolumeFlowUnit.MillionCubicFootPerDay);
            AssertEx.EqualTolerance(1, quantity47.MillionCubicFeetPerDay, MillionCubicFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionCubicFootPerDay, quantity47.Unit);

            var quantity48 = VolumeFlow.From(1, VolumeFlowUnit.MillionCubicMeterPerDay);
            AssertEx.EqualTolerance(1, quantity48.MillionCubicMetersPerDay, MillionCubicMetersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionCubicMeterPerDay, quantity48.Unit);

            var quantity49 = VolumeFlow.From(1, VolumeFlowUnit.MillionStandardCubicFeetPerDay);
            AssertEx.EqualTolerance(1, quantity49.MillionStandardCubicFeetsPerDay, MillionStandardCubicFeetsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionStandardCubicFeetPerDay, quantity49.Unit);

            var quantity50 = VolumeFlow.From(1, VolumeFlowUnit.MillionUsGallonsPerDay);
            AssertEx.EqualTolerance(1, quantity50.MillionUsGallonsPerDay, MillionUsGallonsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionUsGallonsPerDay, quantity50.Unit);

            var quantity51 = VolumeFlow.From(1, VolumeFlowUnit.NanoliterPerDay);
            AssertEx.EqualTolerance(1, quantity51.NanolitersPerDay, NanolitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.NanoliterPerDay, quantity51.Unit);

            var quantity52 = VolumeFlow.From(1, VolumeFlowUnit.NanoliterPerMinute);
            AssertEx.EqualTolerance(1, quantity52.NanolitersPerMinute, NanolitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.NanoliterPerMinute, quantity52.Unit);

            var quantity53 = VolumeFlow.From(1, VolumeFlowUnit.NanoliterPerSecond);
            AssertEx.EqualTolerance(1, quantity53.NanolitersPerSecond, NanolitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.NanoliterPerSecond, quantity53.Unit);

            var quantity54 = VolumeFlow.From(1, VolumeFlowUnit.OilBarrelPerDay);
            AssertEx.EqualTolerance(1, quantity54.OilBarrelsPerDay, OilBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerDay, quantity54.Unit);

            var quantity55 = VolumeFlow.From(1, VolumeFlowUnit.OilBarrelPerHour);
            AssertEx.EqualTolerance(1, quantity55.OilBarrelsPerHour, OilBarrelsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerHour, quantity55.Unit);

            var quantity56 = VolumeFlow.From(1, VolumeFlowUnit.OilBarrelPerMinute);
            AssertEx.EqualTolerance(1, quantity56.OilBarrelsPerMinute, OilBarrelsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerMinute, quantity56.Unit);

            var quantity57 = VolumeFlow.From(1, VolumeFlowUnit.OilBarrelPerSecond);
            AssertEx.EqualTolerance(1, quantity57.OilBarrelsPerSecond, OilBarrelsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerSecond, quantity57.Unit);

            var quantity58 = VolumeFlow.From(1, VolumeFlowUnit.ReservoirBarrelPerDay);
            AssertEx.EqualTolerance(1, quantity58.ReservoirBarrelsPerDay, ReservoirBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ReservoirBarrelPerDay, quantity58.Unit);

            var quantity59 = VolumeFlow.From(1, VolumeFlowUnit.ThousandBarrelPerDay);
            AssertEx.EqualTolerance(1, quantity59.ThousandBarrelsPerDay, ThousandBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandBarrelPerDay, quantity59.Unit);

            var quantity60 = VolumeFlow.From(1, VolumeFlowUnit.ThousandCubicFootPerDay);
            AssertEx.EqualTolerance(1, quantity60.ThousandCubicFeetPerDay, ThousandCubicFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandCubicFootPerDay, quantity60.Unit);

            var quantity61 = VolumeFlow.From(1, VolumeFlowUnit.ThousandReservoirBarrelPerDay);
            AssertEx.EqualTolerance(1, quantity61.ThousandReservoirBarrelsPerDay, ThousandReservoirBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandReservoirBarrelPerDay, quantity61.Unit);

            var quantity62 = VolumeFlow.From(1, VolumeFlowUnit.ThousandStandardCubicFeetPerDay);
            AssertEx.EqualTolerance(1, quantity62.ThousandStandardCubicFeetsPerDay, ThousandStandardCubicFeetsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandStandardCubicFeetPerDay, quantity62.Unit);

            var quantity63 = VolumeFlow.From(1, VolumeFlowUnit.UkGallonPerDay);
            AssertEx.EqualTolerance(1, quantity63.UkGallonsPerDay, UkGallonsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerDay, quantity63.Unit);

            var quantity64 = VolumeFlow.From(1, VolumeFlowUnit.UkGallonPerHour);
            AssertEx.EqualTolerance(1, quantity64.UkGallonsPerHour, UkGallonsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerHour, quantity64.Unit);

            var quantity65 = VolumeFlow.From(1, VolumeFlowUnit.UkGallonPerMinute);
            AssertEx.EqualTolerance(1, quantity65.UkGallonsPerMinute, UkGallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerMinute, quantity65.Unit);

            var quantity66 = VolumeFlow.From(1, VolumeFlowUnit.UkGallonPerSecond);
            AssertEx.EqualTolerance(1, quantity66.UkGallonsPerSecond, UkGallonsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerSecond, quantity66.Unit);

            var quantity67 = VolumeFlow.From(1, VolumeFlowUnit.UsGallonPerDay);
            AssertEx.EqualTolerance(1, quantity67.UsGallonsPerDay, UsGallonsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerDay, quantity67.Unit);

            var quantity68 = VolumeFlow.From(1, VolumeFlowUnit.UsGallonPerHour);
            AssertEx.EqualTolerance(1, quantity68.UsGallonsPerHour, UsGallonsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerHour, quantity68.Unit);

            var quantity69 = VolumeFlow.From(1, VolumeFlowUnit.UsGallonPerMinute);
            AssertEx.EqualTolerance(1, quantity69.UsGallonsPerMinute, UsGallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerMinute, quantity69.Unit);

            var quantity70 = VolumeFlow.From(1, VolumeFlowUnit.UsGallonPerSecond);
            AssertEx.EqualTolerance(1, quantity70.UsGallonsPerSecond, UsGallonsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerSecond, quantity70.Unit);

        }

        [Fact]
        public void FromCubicMetersPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => VolumeFlow.FromCubicMetersPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => VolumeFlow.FromCubicMetersPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromCubicMetersPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => VolumeFlow.FromCubicMetersPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(AcreFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.AcreFootPerDay), AcreFeetPerDayTolerance);
            AssertEx.EqualTolerance(AcreFeetPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.AcreFootPerHour), AcreFeetPerHourTolerance);
            AssertEx.EqualTolerance(AcreFeetPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.AcreFootPerMinute), AcreFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(AcreFeetPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.AcreFootPerSecond), AcreFeetPerSecondTolerance);
            AssertEx.EqualTolerance(BarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.BarrelPerDay), BarrelsPerDayTolerance);
            AssertEx.EqualTolerance(BarrelsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.BarrelPerHour), BarrelsPerHourTolerance);
            AssertEx.EqualTolerance(BarrelsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.BarrelPerMinute), BarrelsPerMinuteTolerance);
            AssertEx.EqualTolerance(CentilitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CentiliterPerDay), CentilitersPerDayTolerance);
            AssertEx.EqualTolerance(CentilitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CentiliterPerMinute), CentilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(CentilitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CentiliterPerSecond), CentilitersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicCentimetersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicCentimeterPerMinute), CubicCentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicCentimetersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicCentimeterPerSecond), CubicCentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicDecimetersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicDecimeterPerMinute), CubicDecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicFootPerDay), CubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(CubicFeetPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicFootPerHour), CubicFeetPerHourTolerance);
            AssertEx.EqualTolerance(CubicFeetPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicFootPerMinute), CubicFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicFeetPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicFootPerSecond), CubicFeetPerSecondTolerance);
            AssertEx.EqualTolerance(CubicInchesPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicInchPerSecond), CubicInchesPerSecondTolerance);
            AssertEx.EqualTolerance(CubicMetersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicMeterPerDay), CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(CubicMetersPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicMeterPerHour), CubicMetersPerHourTolerance);
            AssertEx.EqualTolerance(CubicMetersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicMeterPerMinute), CubicMetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicMetersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicMeterPerSecond), CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicMillimetersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicMillimeterPerSecond), CubicMillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(CubicYardsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicYardPerDay), CubicYardsPerDayTolerance);
            AssertEx.EqualTolerance(CubicYardsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicYardPerHour), CubicYardsPerHourTolerance);
            AssertEx.EqualTolerance(CubicYardsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicYardPerMinute), CubicYardsPerMinuteTolerance);
            AssertEx.EqualTolerance(CubicYardsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.CubicYardPerSecond), CubicYardsPerSecondTolerance);
            AssertEx.EqualTolerance(DecilitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.DeciliterPerDay), DecilitersPerDayTolerance);
            AssertEx.EqualTolerance(DecilitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.DeciliterPerMinute), DecilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(DecilitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.DeciliterPerSecond), DecilitersPerSecondTolerance);
            AssertEx.EqualTolerance(GallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.GallonPerMinute), GallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilolitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.KiloliterPerDay), KilolitersPerDayTolerance);
            AssertEx.EqualTolerance(KilolitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.KiloliterPerMinute), KilolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(KilolitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.KiloliterPerSecond), KilolitersPerSecondTolerance);
            AssertEx.EqualTolerance(KilousGallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.KilousGallonPerMinute), KilousGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(LitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.LiterPerDay), LitersPerDayTolerance);
            AssertEx.EqualTolerance(LitersPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.LiterPerHour), LitersPerHourTolerance);
            AssertEx.EqualTolerance(LitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.LiterPerMinute), LitersPerMinuteTolerance);
            AssertEx.EqualTolerance(LitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.LiterPerSecond), LitersPerSecondTolerance);
            AssertEx.EqualTolerance(MegalitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MegaliterPerDay), MegalitersPerDayTolerance);
            AssertEx.EqualTolerance(MegaukGallonsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MegaukGallonPerSecond), MegaukGallonsPerSecondTolerance);
            AssertEx.EqualTolerance(MicrolitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MicroliterPerDay), MicrolitersPerDayTolerance);
            AssertEx.EqualTolerance(MicrolitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MicroliterPerMinute), MicrolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(MicrolitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MicroliterPerSecond), MicrolitersPerSecondTolerance);
            AssertEx.EqualTolerance(MillilitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MilliliterPerDay), MillilitersPerDayTolerance);
            AssertEx.EqualTolerance(MillilitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MilliliterPerMinute), MillilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(MillilitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MilliliterPerSecond), MillilitersPerSecondTolerance);
            AssertEx.EqualTolerance(MillionCubicFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MillionCubicFootPerDay), MillionCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(MillionCubicMetersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MillionCubicMeterPerDay), MillionCubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(MillionStandardCubicFeetsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MillionStandardCubicFeetPerDay), MillionStandardCubicFeetsPerDayTolerance);
            AssertEx.EqualTolerance(MillionUsGallonsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.MillionUsGallonsPerDay), MillionUsGallonsPerDayTolerance);
            AssertEx.EqualTolerance(NanolitersPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.NanoliterPerDay), NanolitersPerDayTolerance);
            AssertEx.EqualTolerance(NanolitersPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.NanoliterPerMinute), NanolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(NanolitersPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.NanoliterPerSecond), NanolitersPerSecondTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.OilBarrelPerDay), OilBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.OilBarrelPerHour), OilBarrelsPerHourTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.OilBarrelPerMinute), OilBarrelsPerMinuteTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.OilBarrelPerSecond), OilBarrelsPerSecondTolerance);
            AssertEx.EqualTolerance(ReservoirBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.ReservoirBarrelPerDay), ReservoirBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(ThousandBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.ThousandBarrelPerDay), ThousandBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(ThousandCubicFeetPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.ThousandCubicFootPerDay), ThousandCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(ThousandReservoirBarrelsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.ThousandReservoirBarrelPerDay), ThousandReservoirBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(ThousandStandardCubicFeetsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.ThousandStandardCubicFeetPerDay), ThousandStandardCubicFeetsPerDayTolerance);
            AssertEx.EqualTolerance(UkGallonsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UkGallonPerDay), UkGallonsPerDayTolerance);
            AssertEx.EqualTolerance(UkGallonsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UkGallonPerHour), UkGallonsPerHourTolerance);
            AssertEx.EqualTolerance(UkGallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UkGallonPerMinute), UkGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(UkGallonsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UkGallonPerSecond), UkGallonsPerSecondTolerance);
            AssertEx.EqualTolerance(UsGallonsPerDayInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UsGallonPerDay), UsGallonsPerDayTolerance);
            AssertEx.EqualTolerance(UsGallonsPerHourInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UsGallonPerHour), UsGallonsPerHourTolerance);
            AssertEx.EqualTolerance(UsGallonsPerMinuteInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UsGallonPerMinute), UsGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(UsGallonsPerSecondInOneCubicMeterPerSecond, cubicmeterpersecond.As(VolumeFlowUnit.UsGallonPerSecond), UsGallonsPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new VolumeFlow(value: 1, unit: VolumeFlow.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);

            var acrefootperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.AcreFootPerDay);
            AssertEx.EqualTolerance(AcreFeetPerDayInOneCubicMeterPerSecond, (double)acrefootperdayQuantity.Value, AcreFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerDay, acrefootperdayQuantity.Unit);

            var acrefootperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.AcreFootPerHour);
            AssertEx.EqualTolerance(AcreFeetPerHourInOneCubicMeterPerSecond, (double)acrefootperhourQuantity.Value, AcreFeetPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerHour, acrefootperhourQuantity.Unit);

            var acrefootperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.AcreFootPerMinute);
            AssertEx.EqualTolerance(AcreFeetPerMinuteInOneCubicMeterPerSecond, (double)acrefootperminuteQuantity.Value, AcreFeetPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerMinute, acrefootperminuteQuantity.Unit);

            var acrefootpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.AcreFootPerSecond);
            AssertEx.EqualTolerance(AcreFeetPerSecondInOneCubicMeterPerSecond, (double)acrefootpersecondQuantity.Value, AcreFeetPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.AcreFootPerSecond, acrefootpersecondQuantity.Unit);

            var barrelperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.BarrelPerDay);
            AssertEx.EqualTolerance(BarrelsPerDayInOneCubicMeterPerSecond, (double)barrelperdayQuantity.Value, BarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.BarrelPerDay, barrelperdayQuantity.Unit);

            var barrelperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.BarrelPerHour);
            AssertEx.EqualTolerance(BarrelsPerHourInOneCubicMeterPerSecond, (double)barrelperhourQuantity.Value, BarrelsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.BarrelPerHour, barrelperhourQuantity.Unit);

            var barrelperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.BarrelPerMinute);
            AssertEx.EqualTolerance(BarrelsPerMinuteInOneCubicMeterPerSecond, (double)barrelperminuteQuantity.Value, BarrelsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.BarrelPerMinute, barrelperminuteQuantity.Unit);

            var centiliterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CentiliterPerDay);
            AssertEx.EqualTolerance(CentilitersPerDayInOneCubicMeterPerSecond, (double)centiliterperdayQuantity.Value, CentilitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CentiliterPerDay, centiliterperdayQuantity.Unit);

            var centiliterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CentiliterPerMinute);
            AssertEx.EqualTolerance(CentilitersPerMinuteInOneCubicMeterPerSecond, (double)centiliterperminuteQuantity.Value, CentilitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CentiliterPerMinute, centiliterperminuteQuantity.Unit);

            var centiliterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CentiliterPerSecond);
            AssertEx.EqualTolerance(CentilitersPerSecondInOneCubicMeterPerSecond, (double)centiliterpersecondQuantity.Value, CentilitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CentiliterPerSecond, centiliterpersecondQuantity.Unit);

            var cubiccentimeterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicCentimeterPerMinute);
            AssertEx.EqualTolerance(CubicCentimetersPerMinuteInOneCubicMeterPerSecond, (double)cubiccentimeterperminuteQuantity.Value, CubicCentimetersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicCentimeterPerMinute, cubiccentimeterperminuteQuantity.Unit);

            var cubiccentimeterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicCentimeterPerSecond);
            AssertEx.EqualTolerance(CubicCentimetersPerSecondInOneCubicMeterPerSecond, (double)cubiccentimeterpersecondQuantity.Value, CubicCentimetersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicCentimeterPerSecond, cubiccentimeterpersecondQuantity.Unit);

            var cubicdecimeterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicDecimeterPerMinute);
            AssertEx.EqualTolerance(CubicDecimetersPerMinuteInOneCubicMeterPerSecond, (double)cubicdecimeterperminuteQuantity.Value, CubicDecimetersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicDecimeterPerMinute, cubicdecimeterperminuteQuantity.Unit);

            var cubicfootperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicFootPerDay);
            AssertEx.EqualTolerance(CubicFeetPerDayInOneCubicMeterPerSecond, (double)cubicfootperdayQuantity.Value, CubicFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerDay, cubicfootperdayQuantity.Unit);

            var cubicfootperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicFootPerHour);
            AssertEx.EqualTolerance(CubicFeetPerHourInOneCubicMeterPerSecond, (double)cubicfootperhourQuantity.Value, CubicFeetPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerHour, cubicfootperhourQuantity.Unit);

            var cubicfootperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicFootPerMinute);
            AssertEx.EqualTolerance(CubicFeetPerMinuteInOneCubicMeterPerSecond, (double)cubicfootperminuteQuantity.Value, CubicFeetPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerMinute, cubicfootperminuteQuantity.Unit);

            var cubicfootpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicFootPerSecond);
            AssertEx.EqualTolerance(CubicFeetPerSecondInOneCubicMeterPerSecond, (double)cubicfootpersecondQuantity.Value, CubicFeetPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicFootPerSecond, cubicfootpersecondQuantity.Unit);

            var cubicinchpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicInchPerSecond);
            AssertEx.EqualTolerance(CubicInchesPerSecondInOneCubicMeterPerSecond, (double)cubicinchpersecondQuantity.Value, CubicInchesPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicInchPerSecond, cubicinchpersecondQuantity.Unit);

            var cubicmeterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicMeterPerDay);
            AssertEx.EqualTolerance(CubicMetersPerDayInOneCubicMeterPerSecond, (double)cubicmeterperdayQuantity.Value, CubicMetersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerDay, cubicmeterperdayQuantity.Unit);

            var cubicmeterperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicMeterPerHour);
            AssertEx.EqualTolerance(CubicMetersPerHourInOneCubicMeterPerSecond, (double)cubicmeterperhourQuantity.Value, CubicMetersPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerHour, cubicmeterperhourQuantity.Unit);

            var cubicmeterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicMeterPerMinute);
            AssertEx.EqualTolerance(CubicMetersPerMinuteInOneCubicMeterPerSecond, (double)cubicmeterperminuteQuantity.Value, CubicMetersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerMinute, cubicmeterperminuteQuantity.Unit);

            var cubicmeterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicMeterPerSecond);
            AssertEx.EqualTolerance(CubicMetersPerSecondInOneCubicMeterPerSecond, (double)cubicmeterpersecondQuantity.Value, CubicMetersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMeterPerSecond, cubicmeterpersecondQuantity.Unit);

            var cubicmillimeterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicMillimeterPerSecond);
            AssertEx.EqualTolerance(CubicMillimetersPerSecondInOneCubicMeterPerSecond, (double)cubicmillimeterpersecondQuantity.Value, CubicMillimetersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicMillimeterPerSecond, cubicmillimeterpersecondQuantity.Unit);

            var cubicyardperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicYardPerDay);
            AssertEx.EqualTolerance(CubicYardsPerDayInOneCubicMeterPerSecond, (double)cubicyardperdayQuantity.Value, CubicYardsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerDay, cubicyardperdayQuantity.Unit);

            var cubicyardperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicYardPerHour);
            AssertEx.EqualTolerance(CubicYardsPerHourInOneCubicMeterPerSecond, (double)cubicyardperhourQuantity.Value, CubicYardsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerHour, cubicyardperhourQuantity.Unit);

            var cubicyardperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicYardPerMinute);
            AssertEx.EqualTolerance(CubicYardsPerMinuteInOneCubicMeterPerSecond, (double)cubicyardperminuteQuantity.Value, CubicYardsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerMinute, cubicyardperminuteQuantity.Unit);

            var cubicyardpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.CubicYardPerSecond);
            AssertEx.EqualTolerance(CubicYardsPerSecondInOneCubicMeterPerSecond, (double)cubicyardpersecondQuantity.Value, CubicYardsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.CubicYardPerSecond, cubicyardpersecondQuantity.Unit);

            var deciliterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.DeciliterPerDay);
            AssertEx.EqualTolerance(DecilitersPerDayInOneCubicMeterPerSecond, (double)deciliterperdayQuantity.Value, DecilitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.DeciliterPerDay, deciliterperdayQuantity.Unit);

            var deciliterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.DeciliterPerMinute);
            AssertEx.EqualTolerance(DecilitersPerMinuteInOneCubicMeterPerSecond, (double)deciliterperminuteQuantity.Value, DecilitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.DeciliterPerMinute, deciliterperminuteQuantity.Unit);

            var deciliterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.DeciliterPerSecond);
            AssertEx.EqualTolerance(DecilitersPerSecondInOneCubicMeterPerSecond, (double)deciliterpersecondQuantity.Value, DecilitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.DeciliterPerSecond, deciliterpersecondQuantity.Unit);

            var gallonperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.GallonPerMinute);
            AssertEx.EqualTolerance(GallonsPerMinuteInOneCubicMeterPerSecond, (double)gallonperminuteQuantity.Value, GallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.GallonPerMinute, gallonperminuteQuantity.Unit);

            var kiloliterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.KiloliterPerDay);
            AssertEx.EqualTolerance(KilolitersPerDayInOneCubicMeterPerSecond, (double)kiloliterperdayQuantity.Value, KilolitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.KiloliterPerDay, kiloliterperdayQuantity.Unit);

            var kiloliterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.KiloliterPerMinute);
            AssertEx.EqualTolerance(KilolitersPerMinuteInOneCubicMeterPerSecond, (double)kiloliterperminuteQuantity.Value, KilolitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.KiloliterPerMinute, kiloliterperminuteQuantity.Unit);

            var kiloliterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.KiloliterPerSecond);
            AssertEx.EqualTolerance(KilolitersPerSecondInOneCubicMeterPerSecond, (double)kiloliterpersecondQuantity.Value, KilolitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.KiloliterPerSecond, kiloliterpersecondQuantity.Unit);

            var kilousgallonperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.KilousGallonPerMinute);
            AssertEx.EqualTolerance(KilousGallonsPerMinuteInOneCubicMeterPerSecond, (double)kilousgallonperminuteQuantity.Value, KilousGallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.KilousGallonPerMinute, kilousgallonperminuteQuantity.Unit);

            var literperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.LiterPerDay);
            AssertEx.EqualTolerance(LitersPerDayInOneCubicMeterPerSecond, (double)literperdayQuantity.Value, LitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerDay, literperdayQuantity.Unit);

            var literperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.LiterPerHour);
            AssertEx.EqualTolerance(LitersPerHourInOneCubicMeterPerSecond, (double)literperhourQuantity.Value, LitersPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerHour, literperhourQuantity.Unit);

            var literperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.LiterPerMinute);
            AssertEx.EqualTolerance(LitersPerMinuteInOneCubicMeterPerSecond, (double)literperminuteQuantity.Value, LitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerMinute, literperminuteQuantity.Unit);

            var literpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.LiterPerSecond);
            AssertEx.EqualTolerance(LitersPerSecondInOneCubicMeterPerSecond, (double)literpersecondQuantity.Value, LitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.LiterPerSecond, literpersecondQuantity.Unit);

            var megaliterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MegaliterPerDay);
            AssertEx.EqualTolerance(MegalitersPerDayInOneCubicMeterPerSecond, (double)megaliterperdayQuantity.Value, MegalitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MegaliterPerDay, megaliterperdayQuantity.Unit);

            var megaukgallonpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MegaukGallonPerSecond);
            AssertEx.EqualTolerance(MegaukGallonsPerSecondInOneCubicMeterPerSecond, (double)megaukgallonpersecondQuantity.Value, MegaukGallonsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.MegaukGallonPerSecond, megaukgallonpersecondQuantity.Unit);

            var microliterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MicroliterPerDay);
            AssertEx.EqualTolerance(MicrolitersPerDayInOneCubicMeterPerSecond, (double)microliterperdayQuantity.Value, MicrolitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MicroliterPerDay, microliterperdayQuantity.Unit);

            var microliterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MicroliterPerMinute);
            AssertEx.EqualTolerance(MicrolitersPerMinuteInOneCubicMeterPerSecond, (double)microliterperminuteQuantity.Value, MicrolitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.MicroliterPerMinute, microliterperminuteQuantity.Unit);

            var microliterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MicroliterPerSecond);
            AssertEx.EqualTolerance(MicrolitersPerSecondInOneCubicMeterPerSecond, (double)microliterpersecondQuantity.Value, MicrolitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.MicroliterPerSecond, microliterpersecondQuantity.Unit);

            var milliliterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MilliliterPerDay);
            AssertEx.EqualTolerance(MillilitersPerDayInOneCubicMeterPerSecond, (double)milliliterperdayQuantity.Value, MillilitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MilliliterPerDay, milliliterperdayQuantity.Unit);

            var milliliterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MilliliterPerMinute);
            AssertEx.EqualTolerance(MillilitersPerMinuteInOneCubicMeterPerSecond, (double)milliliterperminuteQuantity.Value, MillilitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.MilliliterPerMinute, milliliterperminuteQuantity.Unit);

            var milliliterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MilliliterPerSecond);
            AssertEx.EqualTolerance(MillilitersPerSecondInOneCubicMeterPerSecond, (double)milliliterpersecondQuantity.Value, MillilitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.MilliliterPerSecond, milliliterpersecondQuantity.Unit);

            var millioncubicfootperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MillionCubicFootPerDay);
            AssertEx.EqualTolerance(MillionCubicFeetPerDayInOneCubicMeterPerSecond, (double)millioncubicfootperdayQuantity.Value, MillionCubicFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionCubicFootPerDay, millioncubicfootperdayQuantity.Unit);

            var millioncubicmeterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MillionCubicMeterPerDay);
            AssertEx.EqualTolerance(MillionCubicMetersPerDayInOneCubicMeterPerSecond, (double)millioncubicmeterperdayQuantity.Value, MillionCubicMetersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionCubicMeterPerDay, millioncubicmeterperdayQuantity.Unit);

            var millionstandardcubicfeetperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MillionStandardCubicFeetPerDay);
            AssertEx.EqualTolerance(MillionStandardCubicFeetsPerDayInOneCubicMeterPerSecond, (double)millionstandardcubicfeetperdayQuantity.Value, MillionStandardCubicFeetsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionStandardCubicFeetPerDay, millionstandardcubicfeetperdayQuantity.Unit);

            var millionusgallonsperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.MillionUsGallonsPerDay);
            AssertEx.EqualTolerance(MillionUsGallonsPerDayInOneCubicMeterPerSecond, (double)millionusgallonsperdayQuantity.Value, MillionUsGallonsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.MillionUsGallonsPerDay, millionusgallonsperdayQuantity.Unit);

            var nanoliterperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.NanoliterPerDay);
            AssertEx.EqualTolerance(NanolitersPerDayInOneCubicMeterPerSecond, (double)nanoliterperdayQuantity.Value, NanolitersPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.NanoliterPerDay, nanoliterperdayQuantity.Unit);

            var nanoliterperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.NanoliterPerMinute);
            AssertEx.EqualTolerance(NanolitersPerMinuteInOneCubicMeterPerSecond, (double)nanoliterperminuteQuantity.Value, NanolitersPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.NanoliterPerMinute, nanoliterperminuteQuantity.Unit);

            var nanoliterpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.NanoliterPerSecond);
            AssertEx.EqualTolerance(NanolitersPerSecondInOneCubicMeterPerSecond, (double)nanoliterpersecondQuantity.Value, NanolitersPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.NanoliterPerSecond, nanoliterpersecondQuantity.Unit);

            var oilbarrelperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.OilBarrelPerDay);
            AssertEx.EqualTolerance(OilBarrelsPerDayInOneCubicMeterPerSecond, (double)oilbarrelperdayQuantity.Value, OilBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerDay, oilbarrelperdayQuantity.Unit);

            var oilbarrelperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.OilBarrelPerHour);
            AssertEx.EqualTolerance(OilBarrelsPerHourInOneCubicMeterPerSecond, (double)oilbarrelperhourQuantity.Value, OilBarrelsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerHour, oilbarrelperhourQuantity.Unit);

            var oilbarrelperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.OilBarrelPerMinute);
            AssertEx.EqualTolerance(OilBarrelsPerMinuteInOneCubicMeterPerSecond, (double)oilbarrelperminuteQuantity.Value, OilBarrelsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerMinute, oilbarrelperminuteQuantity.Unit);

            var oilbarrelpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.OilBarrelPerSecond);
            AssertEx.EqualTolerance(OilBarrelsPerSecondInOneCubicMeterPerSecond, (double)oilbarrelpersecondQuantity.Value, OilBarrelsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.OilBarrelPerSecond, oilbarrelpersecondQuantity.Unit);

            var reservoirbarrelperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.ReservoirBarrelPerDay);
            AssertEx.EqualTolerance(ReservoirBarrelsPerDayInOneCubicMeterPerSecond, (double)reservoirbarrelperdayQuantity.Value, ReservoirBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ReservoirBarrelPerDay, reservoirbarrelperdayQuantity.Unit);

            var thousandbarrelperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.ThousandBarrelPerDay);
            AssertEx.EqualTolerance(ThousandBarrelsPerDayInOneCubicMeterPerSecond, (double)thousandbarrelperdayQuantity.Value, ThousandBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandBarrelPerDay, thousandbarrelperdayQuantity.Unit);

            var thousandcubicfootperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.ThousandCubicFootPerDay);
            AssertEx.EqualTolerance(ThousandCubicFeetPerDayInOneCubicMeterPerSecond, (double)thousandcubicfootperdayQuantity.Value, ThousandCubicFeetPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandCubicFootPerDay, thousandcubicfootperdayQuantity.Unit);

            var thousandreservoirbarrelperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.ThousandReservoirBarrelPerDay);
            AssertEx.EqualTolerance(ThousandReservoirBarrelsPerDayInOneCubicMeterPerSecond, (double)thousandreservoirbarrelperdayQuantity.Value, ThousandReservoirBarrelsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandReservoirBarrelPerDay, thousandreservoirbarrelperdayQuantity.Unit);

            var thousandstandardcubicfeetperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.ThousandStandardCubicFeetPerDay);
            AssertEx.EqualTolerance(ThousandStandardCubicFeetsPerDayInOneCubicMeterPerSecond, (double)thousandstandardcubicfeetperdayQuantity.Value, ThousandStandardCubicFeetsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.ThousandStandardCubicFeetPerDay, thousandstandardcubicfeetperdayQuantity.Unit);

            var ukgallonperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UkGallonPerDay);
            AssertEx.EqualTolerance(UkGallonsPerDayInOneCubicMeterPerSecond, (double)ukgallonperdayQuantity.Value, UkGallonsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerDay, ukgallonperdayQuantity.Unit);

            var ukgallonperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UkGallonPerHour);
            AssertEx.EqualTolerance(UkGallonsPerHourInOneCubicMeterPerSecond, (double)ukgallonperhourQuantity.Value, UkGallonsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerHour, ukgallonperhourQuantity.Unit);

            var ukgallonperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UkGallonPerMinute);
            AssertEx.EqualTolerance(UkGallonsPerMinuteInOneCubicMeterPerSecond, (double)ukgallonperminuteQuantity.Value, UkGallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerMinute, ukgallonperminuteQuantity.Unit);

            var ukgallonpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UkGallonPerSecond);
            AssertEx.EqualTolerance(UkGallonsPerSecondInOneCubicMeterPerSecond, (double)ukgallonpersecondQuantity.Value, UkGallonsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.UkGallonPerSecond, ukgallonpersecondQuantity.Unit);

            var usgallonperdayQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UsGallonPerDay);
            AssertEx.EqualTolerance(UsGallonsPerDayInOneCubicMeterPerSecond, (double)usgallonperdayQuantity.Value, UsGallonsPerDayTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerDay, usgallonperdayQuantity.Unit);

            var usgallonperhourQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UsGallonPerHour);
            AssertEx.EqualTolerance(UsGallonsPerHourInOneCubicMeterPerSecond, (double)usgallonperhourQuantity.Value, UsGallonsPerHourTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerHour, usgallonperhourQuantity.Unit);

            var usgallonperminuteQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UsGallonPerMinute);
            AssertEx.EqualTolerance(UsGallonsPerMinuteInOneCubicMeterPerSecond, (double)usgallonperminuteQuantity.Value, UsGallonsPerMinuteTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerMinute, usgallonperminuteQuantity.Unit);

            var usgallonpersecondQuantity = cubicmeterpersecond.ToUnit(VolumeFlowUnit.UsGallonPerSecond);
            AssertEx.EqualTolerance(UsGallonsPerSecondInOneCubicMeterPerSecond, (double)usgallonpersecondQuantity.Value, UsGallonsPerSecondTolerance);
            Assert.Equal(VolumeFlowUnit.UsGallonPerSecond, usgallonpersecondQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = VolumeFlow.FromCubicMetersPerSecond(1).ToBaseUnit();
            Assert.Equal(VolumeFlow.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            VolumeFlow cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(1, VolumeFlow.FromAcreFeetPerDay(cubicmeterpersecond.AcreFeetPerDay).CubicMetersPerSecond, AcreFeetPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromAcreFeetPerHour(cubicmeterpersecond.AcreFeetPerHour).CubicMetersPerSecond, AcreFeetPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromAcreFeetPerMinute(cubicmeterpersecond.AcreFeetPerMinute).CubicMetersPerSecond, AcreFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromAcreFeetPerSecond(cubicmeterpersecond.AcreFeetPerSecond).CubicMetersPerSecond, AcreFeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromBarrelsPerDay(cubicmeterpersecond.BarrelsPerDay).CubicMetersPerSecond, BarrelsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromBarrelsPerHour(cubicmeterpersecond.BarrelsPerHour).CubicMetersPerSecond, BarrelsPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromBarrelsPerMinute(cubicmeterpersecond.BarrelsPerMinute).CubicMetersPerSecond, BarrelsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCentilitersPerDay(cubicmeterpersecond.CentilitersPerDay).CubicMetersPerSecond, CentilitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCentilitersPerMinute(cubicmeterpersecond.CentilitersPerMinute).CubicMetersPerSecond, CentilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCentilitersPerSecond(cubicmeterpersecond.CentilitersPerSecond).CubicMetersPerSecond, CentilitersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicCentimetersPerMinute(cubicmeterpersecond.CubicCentimetersPerMinute).CubicMetersPerSecond, CubicCentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicCentimetersPerSecond(cubicmeterpersecond.CubicCentimetersPerSecond).CubicMetersPerSecond, CubicCentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicDecimetersPerMinute(cubicmeterpersecond.CubicDecimetersPerMinute).CubicMetersPerSecond, CubicDecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicFeetPerDay(cubicmeterpersecond.CubicFeetPerDay).CubicMetersPerSecond, CubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicFeetPerHour(cubicmeterpersecond.CubicFeetPerHour).CubicMetersPerSecond, CubicFeetPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicFeetPerMinute(cubicmeterpersecond.CubicFeetPerMinute).CubicMetersPerSecond, CubicFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicFeetPerSecond(cubicmeterpersecond.CubicFeetPerSecond).CubicMetersPerSecond, CubicFeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicInchesPerSecond(cubicmeterpersecond.CubicInchesPerSecond).CubicMetersPerSecond, CubicInchesPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicMetersPerDay(cubicmeterpersecond.CubicMetersPerDay).CubicMetersPerSecond, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicMetersPerHour(cubicmeterpersecond.CubicMetersPerHour).CubicMetersPerSecond, CubicMetersPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicMetersPerMinute(cubicmeterpersecond.CubicMetersPerMinute).CubicMetersPerSecond, CubicMetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicMetersPerSecond(cubicmeterpersecond.CubicMetersPerSecond).CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicMillimetersPerSecond(cubicmeterpersecond.CubicMillimetersPerSecond).CubicMetersPerSecond, CubicMillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicYardsPerDay(cubicmeterpersecond.CubicYardsPerDay).CubicMetersPerSecond, CubicYardsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicYardsPerHour(cubicmeterpersecond.CubicYardsPerHour).CubicMetersPerSecond, CubicYardsPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicYardsPerMinute(cubicmeterpersecond.CubicYardsPerMinute).CubicMetersPerSecond, CubicYardsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromCubicYardsPerSecond(cubicmeterpersecond.CubicYardsPerSecond).CubicMetersPerSecond, CubicYardsPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromDecilitersPerDay(cubicmeterpersecond.DecilitersPerDay).CubicMetersPerSecond, DecilitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromDecilitersPerMinute(cubicmeterpersecond.DecilitersPerMinute).CubicMetersPerSecond, DecilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromDecilitersPerSecond(cubicmeterpersecond.DecilitersPerSecond).CubicMetersPerSecond, DecilitersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromGallonsPerMinute(cubicmeterpersecond.GallonsPerMinute).CubicMetersPerSecond, GallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromKilolitersPerDay(cubicmeterpersecond.KilolitersPerDay).CubicMetersPerSecond, KilolitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromKilolitersPerMinute(cubicmeterpersecond.KilolitersPerMinute).CubicMetersPerSecond, KilolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromKilolitersPerSecond(cubicmeterpersecond.KilolitersPerSecond).CubicMetersPerSecond, KilolitersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromKilousGallonsPerMinute(cubicmeterpersecond.KilousGallonsPerMinute).CubicMetersPerSecond, KilousGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromLitersPerDay(cubicmeterpersecond.LitersPerDay).CubicMetersPerSecond, LitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromLitersPerHour(cubicmeterpersecond.LitersPerHour).CubicMetersPerSecond, LitersPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromLitersPerMinute(cubicmeterpersecond.LitersPerMinute).CubicMetersPerSecond, LitersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromLitersPerSecond(cubicmeterpersecond.LitersPerSecond).CubicMetersPerSecond, LitersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMegalitersPerDay(cubicmeterpersecond.MegalitersPerDay).CubicMetersPerSecond, MegalitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMegaukGallonsPerSecond(cubicmeterpersecond.MegaukGallonsPerSecond).CubicMetersPerSecond, MegaukGallonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMicrolitersPerDay(cubicmeterpersecond.MicrolitersPerDay).CubicMetersPerSecond, MicrolitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMicrolitersPerMinute(cubicmeterpersecond.MicrolitersPerMinute).CubicMetersPerSecond, MicrolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMicrolitersPerSecond(cubicmeterpersecond.MicrolitersPerSecond).CubicMetersPerSecond, MicrolitersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMillilitersPerDay(cubicmeterpersecond.MillilitersPerDay).CubicMetersPerSecond, MillilitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMillilitersPerMinute(cubicmeterpersecond.MillilitersPerMinute).CubicMetersPerSecond, MillilitersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMillilitersPerSecond(cubicmeterpersecond.MillilitersPerSecond).CubicMetersPerSecond, MillilitersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMillionCubicFeetPerDay(cubicmeterpersecond.MillionCubicFeetPerDay).CubicMetersPerSecond, MillionCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMillionCubicMetersPerDay(cubicmeterpersecond.MillionCubicMetersPerDay).CubicMetersPerSecond, MillionCubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMillionStandardCubicFeetsPerDay(cubicmeterpersecond.MillionStandardCubicFeetsPerDay).CubicMetersPerSecond, MillionStandardCubicFeetsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromMillionUsGallonsPerDay(cubicmeterpersecond.MillionUsGallonsPerDay).CubicMetersPerSecond, MillionUsGallonsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromNanolitersPerDay(cubicmeterpersecond.NanolitersPerDay).CubicMetersPerSecond, NanolitersPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromNanolitersPerMinute(cubicmeterpersecond.NanolitersPerMinute).CubicMetersPerSecond, NanolitersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromNanolitersPerSecond(cubicmeterpersecond.NanolitersPerSecond).CubicMetersPerSecond, NanolitersPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromOilBarrelsPerDay(cubicmeterpersecond.OilBarrelsPerDay).CubicMetersPerSecond, OilBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromOilBarrelsPerHour(cubicmeterpersecond.OilBarrelsPerHour).CubicMetersPerSecond, OilBarrelsPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromOilBarrelsPerMinute(cubicmeterpersecond.OilBarrelsPerMinute).CubicMetersPerSecond, OilBarrelsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromOilBarrelsPerSecond(cubicmeterpersecond.OilBarrelsPerSecond).CubicMetersPerSecond, OilBarrelsPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromReservoirBarrelsPerDay(cubicmeterpersecond.ReservoirBarrelsPerDay).CubicMetersPerSecond, ReservoirBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromThousandBarrelsPerDay(cubicmeterpersecond.ThousandBarrelsPerDay).CubicMetersPerSecond, ThousandBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromThousandCubicFeetPerDay(cubicmeterpersecond.ThousandCubicFeetPerDay).CubicMetersPerSecond, ThousandCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromThousandReservoirBarrelsPerDay(cubicmeterpersecond.ThousandReservoirBarrelsPerDay).CubicMetersPerSecond, ThousandReservoirBarrelsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromThousandStandardCubicFeetsPerDay(cubicmeterpersecond.ThousandStandardCubicFeetsPerDay).CubicMetersPerSecond, ThousandStandardCubicFeetsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUkGallonsPerDay(cubicmeterpersecond.UkGallonsPerDay).CubicMetersPerSecond, UkGallonsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUkGallonsPerHour(cubicmeterpersecond.UkGallonsPerHour).CubicMetersPerSecond, UkGallonsPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUkGallonsPerMinute(cubicmeterpersecond.UkGallonsPerMinute).CubicMetersPerSecond, UkGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUkGallonsPerSecond(cubicmeterpersecond.UkGallonsPerSecond).CubicMetersPerSecond, UkGallonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUsGallonsPerDay(cubicmeterpersecond.UsGallonsPerDay).CubicMetersPerSecond, UsGallonsPerDayTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUsGallonsPerHour(cubicmeterpersecond.UsGallonsPerHour).CubicMetersPerSecond, UsGallonsPerHourTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUsGallonsPerMinute(cubicmeterpersecond.UsGallonsPerMinute).CubicMetersPerSecond, UsGallonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, VolumeFlow.FromUsGallonsPerSecond(cubicmeterpersecond.UsGallonsPerSecond).CubicMetersPerSecond, UsGallonsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            VolumeFlow v = VolumeFlow.FromCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (VolumeFlow.FromCubicMetersPerSecond(3)-v).CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (VolumeFlow.FromCubicMetersPerSecond(10)/5).CubicMetersPerSecond, CubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, VolumeFlow.FromCubicMetersPerSecond(10)/VolumeFlow.FromCubicMetersPerSecond(5), CubicMetersPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            VolumeFlow oneCubicMeterPerSecond = VolumeFlow.FromCubicMetersPerSecond(1);
            VolumeFlow twoCubicMetersPerSecond = VolumeFlow.FromCubicMetersPerSecond(2);

            Assert.True(oneCubicMeterPerSecond < twoCubicMetersPerSecond);
            Assert.True(oneCubicMeterPerSecond <= twoCubicMetersPerSecond);
            Assert.True(twoCubicMetersPerSecond > oneCubicMeterPerSecond);
            Assert.True(twoCubicMetersPerSecond >= oneCubicMeterPerSecond);

            Assert.False(oneCubicMeterPerSecond > twoCubicMetersPerSecond);
            Assert.False(oneCubicMeterPerSecond >= twoCubicMetersPerSecond);
            Assert.False(twoCubicMetersPerSecond < oneCubicMeterPerSecond);
            Assert.False(twoCubicMetersPerSecond <= oneCubicMeterPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            VolumeFlow cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            Assert.Equal(0, cubicmeterpersecond.CompareTo(cubicmeterpersecond));
            Assert.True(cubicmeterpersecond.CompareTo(VolumeFlow.Zero) > 0);
            Assert.True(VolumeFlow.Zero.CompareTo(cubicmeterpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            VolumeFlow cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            Assert.Throws<ArgumentException>(() => cubicmeterpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            VolumeFlow cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeterpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = VolumeFlow.FromCubicMetersPerSecond(1);
            var b = VolumeFlow.FromCubicMetersPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = VolumeFlow.FromCubicMetersPerSecond(1);
            var b = VolumeFlow.FromCubicMetersPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = VolumeFlow.FromCubicMetersPerSecond(1);
            object b = VolumeFlow.FromCubicMetersPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = VolumeFlow.FromCubicMetersPerSecond(1);
            Assert.True(v.Equals(VolumeFlow.FromCubicMetersPerSecond(1), CubicMetersPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(VolumeFlow.Zero, CubicMetersPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = VolumeFlow.FromCubicMetersPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(VolumeFlow.FromCubicMetersPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            VolumeFlow cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            Assert.False(cubicmeterpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            VolumeFlow cubicmeterpersecond = VolumeFlow.FromCubicMetersPerSecond(1);
            Assert.False(cubicmeterpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(VolumeFlowUnit.Undefined, VolumeFlow.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(VolumeFlowUnit)).Cast<VolumeFlowUnit>();
            foreach(var unit in units)
            {
                if(unit == VolumeFlowUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(VolumeFlow.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 af/d", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerDay).ToString());
                Assert.Equal("1 af/h", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerHour).ToString());
                Assert.Equal("1 af/m", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerMinute).ToString());
                Assert.Equal("1 af/s", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerSecond).ToString());
                Assert.Equal("1 bbl/day", new VolumeFlow(1, VolumeFlowUnit.BarrelPerDay).ToString());
                Assert.Equal("1 bbl/h", new VolumeFlow(1, VolumeFlowUnit.BarrelPerHour).ToString());
                Assert.Equal("1 bbl/min", new VolumeFlow(1, VolumeFlowUnit.BarrelPerMinute).ToString());
                Assert.Equal("1 cl/day", new VolumeFlow(1, VolumeFlowUnit.CentiliterPerDay).ToString());
                Assert.Equal("1 cL/min", new VolumeFlow(1, VolumeFlowUnit.CentiliterPerMinute).ToString());
                Assert.Equal("1 cL/s", new VolumeFlow(1, VolumeFlowUnit.CentiliterPerSecond).ToString());
                Assert.Equal("1 cm³/min", new VolumeFlow(1, VolumeFlowUnit.CubicCentimeterPerMinute).ToString());
                Assert.Equal("1 cc/s", new VolumeFlow(1, VolumeFlowUnit.CubicCentimeterPerSecond).ToString());
                Assert.Equal("1 dm³/min", new VolumeFlow(1, VolumeFlowUnit.CubicDecimeterPerMinute).ToString());
                Assert.Equal("1 ft3/day", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerDay).ToString());
                Assert.Equal("1 ft³/h", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerHour).ToString());
                Assert.Equal("1 ft³/min", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerMinute).ToString());
                Assert.Equal("1 ft³/s", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerSecond).ToString());
                Assert.Equal("1 ci/s", new VolumeFlow(1, VolumeFlowUnit.CubicInchPerSecond).ToString());
                Assert.Equal("1 m³/d", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerDay).ToString());
                Assert.Equal("1 m³/h", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerHour).ToString());
                Assert.Equal("1 m³/min", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerMinute).ToString());
                Assert.Equal("1 m³/s", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerSecond).ToString());
                Assert.Equal("1 mm³/s", new VolumeFlow(1, VolumeFlowUnit.CubicMillimeterPerSecond).ToString());
                Assert.Equal("1 cy/day", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerDay).ToString());
                Assert.Equal("1 yd³/h", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerHour).ToString());
                Assert.Equal("1 yd³/min", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerMinute).ToString());
                Assert.Equal("1 yd³/s", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerSecond).ToString());
                Assert.Equal("1 dl/day", new VolumeFlow(1, VolumeFlowUnit.DeciliterPerDay).ToString());
                Assert.Equal("1 dL/min", new VolumeFlow(1, VolumeFlowUnit.DeciliterPerMinute).ToString());
                Assert.Equal("1 dL/s", new VolumeFlow(1, VolumeFlowUnit.DeciliterPerSecond).ToString());
                Assert.Equal("1 gal/min", new VolumeFlow(1, VolumeFlowUnit.GallonPerMinute).ToString());
                Assert.Equal("1 kl/day", new VolumeFlow(1, VolumeFlowUnit.KiloliterPerDay).ToString());
                Assert.Equal("1 kL/min", new VolumeFlow(1, VolumeFlowUnit.KiloliterPerMinute).ToString());
                Assert.Equal("1 kL/s", new VolumeFlow(1, VolumeFlowUnit.KiloliterPerSecond).ToString());
                Assert.Equal("1 kgal (U.S.)/min", new VolumeFlow(1, VolumeFlowUnit.KilousGallonPerMinute).ToString());
                Assert.Equal("1 l/day", new VolumeFlow(1, VolumeFlowUnit.LiterPerDay).ToString());
                Assert.Equal("1 L/h", new VolumeFlow(1, VolumeFlowUnit.LiterPerHour).ToString());
                Assert.Equal("1 L/min", new VolumeFlow(1, VolumeFlowUnit.LiterPerMinute).ToString());
                Assert.Equal("1 L/s", new VolumeFlow(1, VolumeFlowUnit.LiterPerSecond).ToString());
                Assert.Equal("1 Ml/day", new VolumeFlow(1, VolumeFlowUnit.MegaliterPerDay).ToString());
                Assert.Equal("1 Mgal (imp.)/s", new VolumeFlow(1, VolumeFlowUnit.MegaukGallonPerSecond).ToString());
                Assert.Equal("1 µl/day", new VolumeFlow(1, VolumeFlowUnit.MicroliterPerDay).ToString());
                Assert.Equal("1 µL/min", new VolumeFlow(1, VolumeFlowUnit.MicroliterPerMinute).ToString());
                Assert.Equal("1 µL/s", new VolumeFlow(1, VolumeFlowUnit.MicroliterPerSecond).ToString());
                Assert.Equal("1 ml/day", new VolumeFlow(1, VolumeFlowUnit.MilliliterPerDay).ToString());
                Assert.Equal("1 mL/min", new VolumeFlow(1, VolumeFlowUnit.MilliliterPerMinute).ToString());
                Assert.Equal("1 mL/s", new VolumeFlow(1, VolumeFlowUnit.MilliliterPerSecond).ToString());
                Assert.Equal("1 MMcf/day", new VolumeFlow(1, VolumeFlowUnit.MillionCubicFootPerDay).ToString());
                Assert.Equal("1 Mm3/d", new VolumeFlow(1, VolumeFlowUnit.MillionCubicMeterPerDay).ToString());
                Assert.Equal("1 MMscf/day", new VolumeFlow(1, VolumeFlowUnit.MillionStandardCubicFeetPerDay).ToString());
                Assert.Equal("1 MGD", new VolumeFlow(1, VolumeFlowUnit.MillionUsGallonsPerDay).ToString());
                Assert.Equal("1 nl/day", new VolumeFlow(1, VolumeFlowUnit.NanoliterPerDay).ToString());
                Assert.Equal("1 nL/min", new VolumeFlow(1, VolumeFlowUnit.NanoliterPerMinute).ToString());
                Assert.Equal("1 nL/s", new VolumeFlow(1, VolumeFlowUnit.NanoliterPerSecond).ToString());
                Assert.Equal("1 bbl/d", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerDay).ToString());
                Assert.Equal("1 bbl/hr", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerHour).ToString());
                Assert.Equal("1 bbl/min", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerMinute).ToString());
                Assert.Equal("1 bbl/s", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerSecond).ToString());
                Assert.Equal("1 rb/day", new VolumeFlow(1, VolumeFlowUnit.ReservoirBarrelPerDay).ToString());
                Assert.Equal("1 Mbbl/day", new VolumeFlow(1, VolumeFlowUnit.ThousandBarrelPerDay).ToString());
                Assert.Equal("1 Mcf/day", new VolumeFlow(1, VolumeFlowUnit.ThousandCubicFootPerDay).ToString());
                Assert.Equal("1 Mrb/day", new VolumeFlow(1, VolumeFlowUnit.ThousandReservoirBarrelPerDay).ToString());
                Assert.Equal("1 Mscf/day", new VolumeFlow(1, VolumeFlowUnit.ThousandStandardCubicFeetPerDay).ToString());
                Assert.Equal("1 gal (U. K.)/d", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerDay).ToString());
                Assert.Equal("1 gal (imp.)/h", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerHour).ToString());
                Assert.Equal("1 gal (imp.)/min", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerMinute).ToString());
                Assert.Equal("1 gal (imp.)/s", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerSecond).ToString());
                Assert.Equal("1 gpd", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerDay).ToString());
                Assert.Equal("1 gal (U.S.)/h", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerHour).ToString());
                Assert.Equal("1 gal (U.S.)/min", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerMinute).ToString());
                Assert.Equal("1 gal (U.S.)/s", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 af/d", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerDay).ToString(swedishCulture));
            Assert.Equal("1 af/h", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerHour).ToString(swedishCulture));
            Assert.Equal("1 af/m", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerMinute).ToString(swedishCulture));
            Assert.Equal("1 af/s", new VolumeFlow(1, VolumeFlowUnit.AcreFootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 bbl/day", new VolumeFlow(1, VolumeFlowUnit.BarrelPerDay).ToString(swedishCulture));
            Assert.Equal("1 bbl/h", new VolumeFlow(1, VolumeFlowUnit.BarrelPerHour).ToString(swedishCulture));
            Assert.Equal("1 bbl/min", new VolumeFlow(1, VolumeFlowUnit.BarrelPerMinute).ToString(swedishCulture));
            Assert.Equal("1 cl/day", new VolumeFlow(1, VolumeFlowUnit.CentiliterPerDay).ToString(swedishCulture));
            Assert.Equal("1 cL/min", new VolumeFlow(1, VolumeFlowUnit.CentiliterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 cL/s", new VolumeFlow(1, VolumeFlowUnit.CentiliterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 cm³/min", new VolumeFlow(1, VolumeFlowUnit.CubicCentimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 cc/s", new VolumeFlow(1, VolumeFlowUnit.CubicCentimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 dm³/min", new VolumeFlow(1, VolumeFlowUnit.CubicDecimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 ft3/day", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerDay).ToString(swedishCulture));
            Assert.Equal("1 ft³/h", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerHour).ToString(swedishCulture));
            Assert.Equal("1 ft³/min", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerMinute).ToString(swedishCulture));
            Assert.Equal("1 ft³/s", new VolumeFlow(1, VolumeFlowUnit.CubicFootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ci/s", new VolumeFlow(1, VolumeFlowUnit.CubicInchPerSecond).ToString(swedishCulture));
            Assert.Equal("1 m³/d", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerDay).ToString(swedishCulture));
            Assert.Equal("1 m³/h", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 m³/min", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 m³/s", new VolumeFlow(1, VolumeFlowUnit.CubicMeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mm³/s", new VolumeFlow(1, VolumeFlowUnit.CubicMillimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 cy/day", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerDay).ToString(swedishCulture));
            Assert.Equal("1 yd³/h", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerHour).ToString(swedishCulture));
            Assert.Equal("1 yd³/min", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerMinute).ToString(swedishCulture));
            Assert.Equal("1 yd³/s", new VolumeFlow(1, VolumeFlowUnit.CubicYardPerSecond).ToString(swedishCulture));
            Assert.Equal("1 dl/day", new VolumeFlow(1, VolumeFlowUnit.DeciliterPerDay).ToString(swedishCulture));
            Assert.Equal("1 dL/min", new VolumeFlow(1, VolumeFlowUnit.DeciliterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 dL/s", new VolumeFlow(1, VolumeFlowUnit.DeciliterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 gal/min", new VolumeFlow(1, VolumeFlowUnit.GallonPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kl/day", new VolumeFlow(1, VolumeFlowUnit.KiloliterPerDay).ToString(swedishCulture));
            Assert.Equal("1 kL/min", new VolumeFlow(1, VolumeFlowUnit.KiloliterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kL/s", new VolumeFlow(1, VolumeFlowUnit.KiloliterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kgal (U.S.)/min", new VolumeFlow(1, VolumeFlowUnit.KilousGallonPerMinute).ToString(swedishCulture));
            Assert.Equal("1 l/day", new VolumeFlow(1, VolumeFlowUnit.LiterPerDay).ToString(swedishCulture));
            Assert.Equal("1 L/h", new VolumeFlow(1, VolumeFlowUnit.LiterPerHour).ToString(swedishCulture));
            Assert.Equal("1 L/min", new VolumeFlow(1, VolumeFlowUnit.LiterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 L/s", new VolumeFlow(1, VolumeFlowUnit.LiterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Ml/day", new VolumeFlow(1, VolumeFlowUnit.MegaliterPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mgal (imp.)/s", new VolumeFlow(1, VolumeFlowUnit.MegaukGallonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 µl/day", new VolumeFlow(1, VolumeFlowUnit.MicroliterPerDay).ToString(swedishCulture));
            Assert.Equal("1 µL/min", new VolumeFlow(1, VolumeFlowUnit.MicroliterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 µL/s", new VolumeFlow(1, VolumeFlowUnit.MicroliterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ml/day", new VolumeFlow(1, VolumeFlowUnit.MilliliterPerDay).ToString(swedishCulture));
            Assert.Equal("1 mL/min", new VolumeFlow(1, VolumeFlowUnit.MilliliterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 mL/s", new VolumeFlow(1, VolumeFlowUnit.MilliliterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 MMcf/day", new VolumeFlow(1, VolumeFlowUnit.MillionCubicFootPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mm3/d", new VolumeFlow(1, VolumeFlowUnit.MillionCubicMeterPerDay).ToString(swedishCulture));
            Assert.Equal("1 MMscf/day", new VolumeFlow(1, VolumeFlowUnit.MillionStandardCubicFeetPerDay).ToString(swedishCulture));
            Assert.Equal("1 MGD", new VolumeFlow(1, VolumeFlowUnit.MillionUsGallonsPerDay).ToString(swedishCulture));
            Assert.Equal("1 nl/day", new VolumeFlow(1, VolumeFlowUnit.NanoliterPerDay).ToString(swedishCulture));
            Assert.Equal("1 nL/min", new VolumeFlow(1, VolumeFlowUnit.NanoliterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 nL/s", new VolumeFlow(1, VolumeFlowUnit.NanoliterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 bbl/d", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerDay).ToString(swedishCulture));
            Assert.Equal("1 bbl/hr", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerHour).ToString(swedishCulture));
            Assert.Equal("1 bbl/min", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerMinute).ToString(swedishCulture));
            Assert.Equal("1 bbl/s", new VolumeFlow(1, VolumeFlowUnit.OilBarrelPerSecond).ToString(swedishCulture));
            Assert.Equal("1 rb/day", new VolumeFlow(1, VolumeFlowUnit.ReservoirBarrelPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mbbl/day", new VolumeFlow(1, VolumeFlowUnit.ThousandBarrelPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mcf/day", new VolumeFlow(1, VolumeFlowUnit.ThousandCubicFootPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mrb/day", new VolumeFlow(1, VolumeFlowUnit.ThousandReservoirBarrelPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mscf/day", new VolumeFlow(1, VolumeFlowUnit.ThousandStandardCubicFeetPerDay).ToString(swedishCulture));
            Assert.Equal("1 gal (U. K.)/d", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerDay).ToString(swedishCulture));
            Assert.Equal("1 gal (imp.)/h", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerHour).ToString(swedishCulture));
            Assert.Equal("1 gal (imp.)/min", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerMinute).ToString(swedishCulture));
            Assert.Equal("1 gal (imp.)/s", new VolumeFlow(1, VolumeFlowUnit.UkGallonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 gpd", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerDay).ToString(swedishCulture));
            Assert.Equal("1 gal (U.S.)/h", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerHour).ToString(swedishCulture));
            Assert.Equal("1 gal (U.S.)/min", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerMinute).ToString(swedishCulture));
            Assert.Equal("1 gal (U.S.)/s", new VolumeFlow(1, VolumeFlowUnit.UsGallonPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s1"));
                Assert.Equal("0.12 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s2"));
                Assert.Equal("0.123 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s3"));
                Assert.Equal("0.1235 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 m³/s", new VolumeFlow(0.123456, VolumeFlowUnit.CubicMeterPerSecond).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(VolumeFlow)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(VolumeFlowUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(QuantityType.VolumeFlow, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(VolumeFlow.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(VolumeFlow.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(1.0);
            Assert.Equal(new {VolumeFlow.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = VolumeFlow.FromCubicMetersPerSecond(value);
            Assert.Equal(VolumeFlow.FromCubicMetersPerSecond(-value), -quantity);
        }
    }
}
