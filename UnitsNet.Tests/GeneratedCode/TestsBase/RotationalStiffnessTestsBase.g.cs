//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RotationalStiffness.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RotationalStiffnessTestsBase
    {
        protected abstract double CentinewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double CentinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double CentinewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double DecanewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double DecanewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double DecanewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double DecinewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double DecinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double DecinewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double KilonewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double KilonewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double KilonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double KilonewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double KilopoundForceFeetPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double MeganewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double MeganewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double MeganewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double MeganewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double MicronewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double MicronewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double MicronewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double MillinewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double MillinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double MillinewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double NanonewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double NanonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double NanonewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double NewtonMeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double NewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double NewtonMillimeterPerDegreesInOneNewtonMeterPerRadian { get; }
        protected abstract double NewtonMillimeterPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double PoundForceFeetPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double PoundForceFeetPerDegreesInOneNewtonMeterPerRadian { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentinewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double CentinewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double CentinewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceFeetPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double NewtonMeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double NewtonMillimeterPerDegreesTolerance { get { return 1e-5; } }
        protected virtual double NewtonMillimeterPerRadianTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetPerRadianTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetPerDegreesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffness((double)0.0, RotationalStiffnessUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RotationalStiffness();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RotationalStiffnessUnit.NewtonMeterPerRadian, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffness(double.PositiveInfinity, RotationalStiffnessUnit.NewtonMeterPerRadian));
            Assert.Throws<ArgumentException>(() => new RotationalStiffness(double.NegativeInfinity, RotationalStiffnessUnit.NewtonMeterPerRadian));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffness(double.NaN, RotationalStiffnessUnit.NewtonMeterPerRadian));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RotationalStiffness(value: 1.0, unitSystem: null));
        }

        [Fact]
        public void RotationalStiffness_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMeterPerRadian);

            QuantityInfo<RotationalStiffnessUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(RotationalStiffness.Zero, quantityInfo.Zero);
            Assert.Equal("RotationalStiffness", quantityInfo.Name);
            Assert.Equal(QuantityType.RotationalStiffness, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<RotationalStiffnessUnit>().Except(new[] {RotationalStiffnessUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
#pragma warning disable 618
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
#pragma warning restore 618
        }

        [Fact]
        public void NewtonMeterPerRadianToRotationalStiffnessUnits()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(CentinewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.CentinewtonMeterPerDegrees, CentinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(CentinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.CentinewtonMillimeterPerDegrees, CentinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(CentinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.CentinewtonMillimeterPerRadian, CentinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(DecanewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.DecanewtonMeterPerDegrees, DecanewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecanewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.DecanewtonMillimeterPerDegrees, DecanewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecanewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.DecanewtonMillimeterPerRadian, DecanewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(DecinewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.DecinewtonMeterPerDegrees, DecinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.DecinewtonMillimeterPerDegrees, DecinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.DecinewtonMillimeterPerRadian, DecinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(KilonewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.KilonewtonMeterPerDegrees, KilonewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.KilonewtonMetersPerRadian, KilonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.KilonewtonMillimeterPerDegrees, KilonewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.KilonewtonMillimeterPerRadian, KilonewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.KilopoundForceFeetPerDegrees, KilopoundForceFeetPerDegreesTolerance);
            AssertEx.EqualTolerance(MeganewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.MeganewtonMeterPerDegrees, MeganewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.MeganewtonMetersPerRadian, MeganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.MeganewtonMillimeterPerDegrees, MeganewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.MeganewtonMillimeterPerRadian, MeganewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(MicronewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.MicronewtonMeterPerDegrees, MicronewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MicronewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.MicronewtonMillimeterPerDegrees, MicronewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MicronewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.MicronewtonMillimeterPerRadian, MicronewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(MillinewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.MillinewtonMeterPerDegrees, MillinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MillinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.MillinewtonMillimeterPerDegrees, MillinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MillinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.MillinewtonMillimeterPerRadian, MillinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(NanonewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.NanonewtonMeterPerDegrees, NanonewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NanonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.NanonewtonMillimeterPerDegrees, NanonewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NanonewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.NanonewtonMillimeterPerRadian, NanonewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(NewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.NewtonMeterPerDegrees, NewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(NewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.NewtonMillimeterPerDegrees, NewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.NewtonMillimeterPerRadian, NewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.PoundForceFeetPerRadian, PoundForceFeetPerRadianTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.PoundForceFeetPerDegrees, PoundForceFeetPerDegreesTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = RotationalStiffness.From(1, RotationalStiffnessUnit.CentinewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity00.CentinewtonMeterPerDegrees, CentinewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.CentinewtonMeterPerDegrees, quantity00.Unit);

            var quantity01 = RotationalStiffness.From(1, RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity01.CentinewtonMillimeterPerDegrees, CentinewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees, quantity01.Unit);

            var quantity02 = RotationalStiffness.From(1, RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity02.CentinewtonMillimeterPerRadian, CentinewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian, quantity02.Unit);

            var quantity03 = RotationalStiffness.From(1, RotationalStiffnessUnit.DecanewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity03.DecanewtonMeterPerDegrees, DecanewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecanewtonMeterPerDegrees, quantity03.Unit);

            var quantity04 = RotationalStiffness.From(1, RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity04.DecanewtonMillimeterPerDegrees, DecanewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees, quantity04.Unit);

            var quantity05 = RotationalStiffness.From(1, RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity05.DecanewtonMillimeterPerRadian, DecanewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian, quantity05.Unit);

            var quantity06 = RotationalStiffness.From(1, RotationalStiffnessUnit.DecinewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity06.DecinewtonMeterPerDegrees, DecinewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecinewtonMeterPerDegrees, quantity06.Unit);

            var quantity07 = RotationalStiffness.From(1, RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity07.DecinewtonMillimeterPerDegrees, DecinewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees, quantity07.Unit);

            var quantity08 = RotationalStiffness.From(1, RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity08.DecinewtonMillimeterPerRadian, DecinewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian, quantity08.Unit);

            var quantity09 = RotationalStiffness.From(1, RotationalStiffnessUnit.KilonewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity09.KilonewtonMeterPerDegrees, KilonewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMeterPerDegrees, quantity09.Unit);

            var quantity10 = RotationalStiffness.From(1, RotationalStiffnessUnit.KilonewtonMeterPerRadian);
            AssertEx.EqualTolerance(1, quantity10.KilonewtonMetersPerRadian, KilonewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMeterPerRadian, quantity10.Unit);

            var quantity11 = RotationalStiffness.From(1, RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity11.KilonewtonMillimeterPerDegrees, KilonewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees, quantity11.Unit);

            var quantity12 = RotationalStiffness.From(1, RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity12.KilonewtonMillimeterPerRadian, KilonewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian, quantity12.Unit);

            var quantity13 = RotationalStiffness.From(1, RotationalStiffnessUnit.KilopoundForceFootPerDegrees);
            AssertEx.EqualTolerance(1, quantity13.KilopoundForceFeetPerDegrees, KilopoundForceFeetPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilopoundForceFootPerDegrees, quantity13.Unit);

            var quantity14 = RotationalStiffness.From(1, RotationalStiffnessUnit.MeganewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity14.MeganewtonMeterPerDegrees, MeganewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMeterPerDegrees, quantity14.Unit);

            var quantity15 = RotationalStiffness.From(1, RotationalStiffnessUnit.MeganewtonMeterPerRadian);
            AssertEx.EqualTolerance(1, quantity15.MeganewtonMetersPerRadian, MeganewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMeterPerRadian, quantity15.Unit);

            var quantity16 = RotationalStiffness.From(1, RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity16.MeganewtonMillimeterPerDegrees, MeganewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees, quantity16.Unit);

            var quantity17 = RotationalStiffness.From(1, RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity17.MeganewtonMillimeterPerRadian, MeganewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian, quantity17.Unit);

            var quantity18 = RotationalStiffness.From(1, RotationalStiffnessUnit.MicronewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity18.MicronewtonMeterPerDegrees, MicronewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MicronewtonMeterPerDegrees, quantity18.Unit);

            var quantity19 = RotationalStiffness.From(1, RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity19.MicronewtonMillimeterPerDegrees, MicronewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees, quantity19.Unit);

            var quantity20 = RotationalStiffness.From(1, RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity20.MicronewtonMillimeterPerRadian, MicronewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian, quantity20.Unit);

            var quantity21 = RotationalStiffness.From(1, RotationalStiffnessUnit.MillinewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity21.MillinewtonMeterPerDegrees, MillinewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MillinewtonMeterPerDegrees, quantity21.Unit);

            var quantity22 = RotationalStiffness.From(1, RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity22.MillinewtonMillimeterPerDegrees, MillinewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees, quantity22.Unit);

            var quantity23 = RotationalStiffness.From(1, RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity23.MillinewtonMillimeterPerRadian, MillinewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian, quantity23.Unit);

            var quantity24 = RotationalStiffness.From(1, RotationalStiffnessUnit.NanonewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity24.NanonewtonMeterPerDegrees, NanonewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NanonewtonMeterPerDegrees, quantity24.Unit);

            var quantity25 = RotationalStiffness.From(1, RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity25.NanonewtonMillimeterPerDegrees, NanonewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees, quantity25.Unit);

            var quantity26 = RotationalStiffness.From(1, RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity26.NanonewtonMillimeterPerRadian, NanonewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian, quantity26.Unit);

            var quantity27 = RotationalStiffness.From(1, RotationalStiffnessUnit.NewtonMeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity27.NewtonMeterPerDegrees, NewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMeterPerDegrees, quantity27.Unit);

            var quantity28 = RotationalStiffness.From(1, RotationalStiffnessUnit.NewtonMeterPerRadian);
            AssertEx.EqualTolerance(1, quantity28.NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMeterPerRadian, quantity28.Unit);

            var quantity29 = RotationalStiffness.From(1, RotationalStiffnessUnit.NewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(1, quantity29.NewtonMillimeterPerDegrees, NewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMillimeterPerDegrees, quantity29.Unit);

            var quantity30 = RotationalStiffness.From(1, RotationalStiffnessUnit.NewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(1, quantity30.NewtonMillimeterPerRadian, NewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMillimeterPerRadian, quantity30.Unit);

            var quantity31 = RotationalStiffness.From(1, RotationalStiffnessUnit.PoundForceFeetPerRadian);
            AssertEx.EqualTolerance(1, quantity31.PoundForceFeetPerRadian, PoundForceFeetPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.PoundForceFeetPerRadian, quantity31.Unit);

            var quantity32 = RotationalStiffness.From(1, RotationalStiffnessUnit.PoundForceFootPerDegrees);
            AssertEx.EqualTolerance(1, quantity32.PoundForceFeetPerDegrees, PoundForceFeetPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.PoundForceFootPerDegrees, quantity32.Unit);

        }

        [Fact]
        public void FromNewtonMetersPerRadian_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalStiffness.FromNewtonMetersPerRadian(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => RotationalStiffness.FromNewtonMetersPerRadian(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonMetersPerRadian_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalStiffness.FromNewtonMetersPerRadian(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(CentinewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.CentinewtonMeterPerDegrees), CentinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(CentinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees), CentinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(CentinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian), CentinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(DecanewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecanewtonMeterPerDegrees), DecanewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecanewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees), DecanewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecanewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian), DecanewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(DecinewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecinewtonMeterPerDegrees), DecinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees), DecinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(DecinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian), DecinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(KilonewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.KilonewtonMeterPerDegrees), KilonewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.KilonewtonMeterPerRadian), KilonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees), KilonewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian), KilonewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.KilopoundForceFootPerDegrees), KilopoundForceFeetPerDegreesTolerance);
            AssertEx.EqualTolerance(MeganewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MeganewtonMeterPerDegrees), MeganewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MeganewtonMeterPerRadian), MeganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees), MeganewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian), MeganewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(MicronewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MicronewtonMeterPerDegrees), MicronewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MicronewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees), MicronewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MicronewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian), MicronewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(MillinewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MillinewtonMeterPerDegrees), MillinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MillinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees), MillinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(MillinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian), MillinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(NanonewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NanonewtonMeterPerDegrees), NanonewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NanonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees), NanonewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NanonewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian), NanonewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(NewtonMeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NewtonMeterPerDegrees), NewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NewtonMeterPerRadian), NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(NewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NewtonMillimeterPerDegrees), NewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(NewtonMillimeterPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NewtonMillimeterPerRadian), NewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.PoundForceFeetPerRadian), PoundForceFeetPerRadianTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerDegreesInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.PoundForceFootPerDegrees), PoundForceFeetPerDegreesTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);

            var centinewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.CentinewtonMeterPerDegrees);
            AssertEx.EqualTolerance(CentinewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)centinewtonmeterperdegreesQuantity.Value, CentinewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.CentinewtonMeterPerDegrees, centinewtonmeterperdegreesQuantity.Unit);

            var centinewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(CentinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)centinewtonmillimeterperdegreesQuantity.Value, CentinewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees, centinewtonmillimeterperdegreesQuantity.Unit);

            var centinewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(CentinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)centinewtonmillimeterperradianQuantity.Value, CentinewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian, centinewtonmillimeterperradianQuantity.Unit);

            var decanewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecanewtonMeterPerDegrees);
            AssertEx.EqualTolerance(DecanewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)decanewtonmeterperdegreesQuantity.Value, DecanewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecanewtonMeterPerDegrees, decanewtonmeterperdegreesQuantity.Unit);

            var decanewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(DecanewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)decanewtonmillimeterperdegreesQuantity.Value, DecanewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees, decanewtonmillimeterperdegreesQuantity.Unit);

            var decanewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(DecanewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)decanewtonmillimeterperradianQuantity.Value, DecanewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian, decanewtonmillimeterperradianQuantity.Unit);

            var decinewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecinewtonMeterPerDegrees);
            AssertEx.EqualTolerance(DecinewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)decinewtonmeterperdegreesQuantity.Value, DecinewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecinewtonMeterPerDegrees, decinewtonmeterperdegreesQuantity.Unit);

            var decinewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(DecinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)decinewtonmillimeterperdegreesQuantity.Value, DecinewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees, decinewtonmillimeterperdegreesQuantity.Unit);

            var decinewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(DecinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)decinewtonmillimeterperradianQuantity.Value, DecinewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian, decinewtonmillimeterperradianQuantity.Unit);

            var kilonewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.KilonewtonMeterPerDegrees);
            AssertEx.EqualTolerance(KilonewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)kilonewtonmeterperdegreesQuantity.Value, KilonewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMeterPerDegrees, kilonewtonmeterperdegreesQuantity.Unit);

            var kilonewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.KilonewtonMeterPerRadian);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)kilonewtonmeterperradianQuantity.Value, KilonewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMeterPerRadian, kilonewtonmeterperradianQuantity.Unit);

            var kilonewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(KilonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)kilonewtonmillimeterperdegreesQuantity.Value, KilonewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees, kilonewtonmillimeterperdegreesQuantity.Unit);

            var kilonewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(KilonewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)kilonewtonmillimeterperradianQuantity.Value, KilonewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian, kilonewtonmillimeterperradianQuantity.Unit);

            var kilopoundforcefootperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.KilopoundForceFootPerDegrees);
            AssertEx.EqualTolerance(KilopoundForceFeetPerDegreesInOneNewtonMeterPerRadian, (double)kilopoundforcefootperdegreesQuantity.Value, KilopoundForceFeetPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilopoundForceFootPerDegrees, kilopoundforcefootperdegreesQuantity.Unit);

            var meganewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MeganewtonMeterPerDegrees);
            AssertEx.EqualTolerance(MeganewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)meganewtonmeterperdegreesQuantity.Value, MeganewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMeterPerDegrees, meganewtonmeterperdegreesQuantity.Unit);

            var meganewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MeganewtonMeterPerRadian);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)meganewtonmeterperradianQuantity.Value, MeganewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMeterPerRadian, meganewtonmeterperradianQuantity.Unit);

            var meganewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(MeganewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)meganewtonmillimeterperdegreesQuantity.Value, MeganewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees, meganewtonmillimeterperdegreesQuantity.Unit);

            var meganewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(MeganewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)meganewtonmillimeterperradianQuantity.Value, MeganewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian, meganewtonmillimeterperradianQuantity.Unit);

            var micronewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MicronewtonMeterPerDegrees);
            AssertEx.EqualTolerance(MicronewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)micronewtonmeterperdegreesQuantity.Value, MicronewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MicronewtonMeterPerDegrees, micronewtonmeterperdegreesQuantity.Unit);

            var micronewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(MicronewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)micronewtonmillimeterperdegreesQuantity.Value, MicronewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees, micronewtonmillimeterperdegreesQuantity.Unit);

            var micronewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(MicronewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)micronewtonmillimeterperradianQuantity.Value, MicronewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian, micronewtonmillimeterperradianQuantity.Unit);

            var millinewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MillinewtonMeterPerDegrees);
            AssertEx.EqualTolerance(MillinewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)millinewtonmeterperdegreesQuantity.Value, MillinewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MillinewtonMeterPerDegrees, millinewtonmeterperdegreesQuantity.Unit);

            var millinewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(MillinewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)millinewtonmillimeterperdegreesQuantity.Value, MillinewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees, millinewtonmillimeterperdegreesQuantity.Unit);

            var millinewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(MillinewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)millinewtonmillimeterperradianQuantity.Value, MillinewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian, millinewtonmillimeterperradianQuantity.Unit);

            var nanonewtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NanonewtonMeterPerDegrees);
            AssertEx.EqualTolerance(NanonewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)nanonewtonmeterperdegreesQuantity.Value, NanonewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NanonewtonMeterPerDegrees, nanonewtonmeterperdegreesQuantity.Unit);

            var nanonewtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(NanonewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)nanonewtonmillimeterperdegreesQuantity.Value, NanonewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees, nanonewtonmillimeterperdegreesQuantity.Unit);

            var nanonewtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(NanonewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)nanonewtonmillimeterperradianQuantity.Value, NanonewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian, nanonewtonmillimeterperradianQuantity.Unit);

            var newtonmeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NewtonMeterPerDegrees);
            AssertEx.EqualTolerance(NewtonMeterPerDegreesInOneNewtonMeterPerRadian, (double)newtonmeterperdegreesQuantity.Value, NewtonMeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMeterPerDegrees, newtonmeterperdegreesQuantity.Unit);

            var newtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NewtonMeterPerRadian);
            AssertEx.EqualTolerance(NewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)newtonmeterperradianQuantity.Value, NewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMeterPerRadian, newtonmeterperradianQuantity.Unit);

            var newtonmillimeterperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NewtonMillimeterPerDegrees);
            AssertEx.EqualTolerance(NewtonMillimeterPerDegreesInOneNewtonMeterPerRadian, (double)newtonmillimeterperdegreesQuantity.Value, NewtonMillimeterPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMillimeterPerDegrees, newtonmillimeterperdegreesQuantity.Unit);

            var newtonmillimeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NewtonMillimeterPerRadian);
            AssertEx.EqualTolerance(NewtonMillimeterPerRadianInOneNewtonMeterPerRadian, (double)newtonmillimeterperradianQuantity.Value, NewtonMillimeterPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMillimeterPerRadian, newtonmillimeterperradianQuantity.Unit);

            var poundforcefeetperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.PoundForceFeetPerRadian);
            AssertEx.EqualTolerance(PoundForceFeetPerRadianInOneNewtonMeterPerRadian, (double)poundforcefeetperradianQuantity.Value, PoundForceFeetPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.PoundForceFeetPerRadian, poundforcefeetperradianQuantity.Unit);

            var poundforcefootperdegreesQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.PoundForceFootPerDegrees);
            AssertEx.EqualTolerance(PoundForceFeetPerDegreesInOneNewtonMeterPerRadian, (double)poundforcefootperdegreesQuantity.Value, PoundForceFeetPerDegreesTolerance);
            Assert.Equal(RotationalStiffnessUnit.PoundForceFootPerDegrees, poundforcefootperdegreesQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromCentinewtonMeterPerDegrees(newtonmeterperradian.CentinewtonMeterPerDegrees).NewtonMetersPerRadian, CentinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromCentinewtonMillimeterPerDegrees(newtonmeterperradian.CentinewtonMillimeterPerDegrees).NewtonMetersPerRadian, CentinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromCentinewtonMillimeterPerRadian(newtonmeterperradian.CentinewtonMillimeterPerRadian).NewtonMetersPerRadian, CentinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecanewtonMeterPerDegrees(newtonmeterperradian.DecanewtonMeterPerDegrees).NewtonMetersPerRadian, DecanewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecanewtonMillimeterPerDegrees(newtonmeterperradian.DecanewtonMillimeterPerDegrees).NewtonMetersPerRadian, DecanewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecanewtonMillimeterPerRadian(newtonmeterperradian.DecanewtonMillimeterPerRadian).NewtonMetersPerRadian, DecanewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecinewtonMeterPerDegrees(newtonmeterperradian.DecinewtonMeterPerDegrees).NewtonMetersPerRadian, DecinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecinewtonMillimeterPerDegrees(newtonmeterperradian.DecinewtonMillimeterPerDegrees).NewtonMetersPerRadian, DecinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecinewtonMillimeterPerRadian(newtonmeterperradian.DecinewtonMillimeterPerRadian).NewtonMetersPerRadian, DecinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromKilonewtonMeterPerDegrees(newtonmeterperradian.KilonewtonMeterPerDegrees).NewtonMetersPerRadian, KilonewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromKilonewtonMetersPerRadian(newtonmeterperradian.KilonewtonMetersPerRadian).NewtonMetersPerRadian, KilonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromKilonewtonMillimeterPerDegrees(newtonmeterperradian.KilonewtonMillimeterPerDegrees).NewtonMetersPerRadian, KilonewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromKilonewtonMillimeterPerRadian(newtonmeterperradian.KilonewtonMillimeterPerRadian).NewtonMetersPerRadian, KilonewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromKilopoundForceFeetPerDegrees(newtonmeterperradian.KilopoundForceFeetPerDegrees).NewtonMetersPerRadian, KilopoundForceFeetPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMeganewtonMeterPerDegrees(newtonmeterperradian.MeganewtonMeterPerDegrees).NewtonMetersPerRadian, MeganewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMeganewtonMetersPerRadian(newtonmeterperradian.MeganewtonMetersPerRadian).NewtonMetersPerRadian, MeganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMeganewtonMillimeterPerDegrees(newtonmeterperradian.MeganewtonMillimeterPerDegrees).NewtonMetersPerRadian, MeganewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMeganewtonMillimeterPerRadian(newtonmeterperradian.MeganewtonMillimeterPerRadian).NewtonMetersPerRadian, MeganewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMicronewtonMeterPerDegrees(newtonmeterperradian.MicronewtonMeterPerDegrees).NewtonMetersPerRadian, MicronewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMicronewtonMillimeterPerDegrees(newtonmeterperradian.MicronewtonMillimeterPerDegrees).NewtonMetersPerRadian, MicronewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMicronewtonMillimeterPerRadian(newtonmeterperradian.MicronewtonMillimeterPerRadian).NewtonMetersPerRadian, MicronewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMillinewtonMeterPerDegrees(newtonmeterperradian.MillinewtonMeterPerDegrees).NewtonMetersPerRadian, MillinewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMillinewtonMillimeterPerDegrees(newtonmeterperradian.MillinewtonMillimeterPerDegrees).NewtonMetersPerRadian, MillinewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMillinewtonMillimeterPerRadian(newtonmeterperradian.MillinewtonMillimeterPerRadian).NewtonMetersPerRadian, MillinewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNanonewtonMeterPerDegrees(newtonmeterperradian.NanonewtonMeterPerDegrees).NewtonMetersPerRadian, NanonewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNanonewtonMillimeterPerDegrees(newtonmeterperradian.NanonewtonMillimeterPerDegrees).NewtonMetersPerRadian, NanonewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNanonewtonMillimeterPerRadian(newtonmeterperradian.NanonewtonMillimeterPerRadian).NewtonMetersPerRadian, NanonewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNewtonMeterPerDegrees(newtonmeterperradian.NewtonMeterPerDegrees).NewtonMetersPerRadian, NewtonMeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNewtonMetersPerRadian(newtonmeterperradian.NewtonMetersPerRadian).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNewtonMillimeterPerDegrees(newtonmeterperradian.NewtonMillimeterPerDegrees).NewtonMetersPerRadian, NewtonMillimeterPerDegreesTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNewtonMillimeterPerRadian(newtonmeterperradian.NewtonMillimeterPerRadian).NewtonMetersPerRadian, NewtonMillimeterPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromPoundForceFeetPerRadian(newtonmeterperradian.PoundForceFeetPerRadian).NewtonMetersPerRadian, PoundForceFeetPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromPoundForceFeetPerDegrees(newtonmeterperradian.PoundForceFeetPerDegrees).NewtonMetersPerRadian, PoundForceFeetPerDegreesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RotationalStiffness v = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(-1, -v.NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, (RotationalStiffness.FromNewtonMetersPerRadian(3)-v).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, (RotationalStiffness.FromNewtonMetersPerRadian(10)/5).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, RotationalStiffness.FromNewtonMetersPerRadian(10)/RotationalStiffness.FromNewtonMetersPerRadian(5), NewtonMetersPerRadianTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RotationalStiffness oneNewtonMeterPerRadian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            RotationalStiffness twoNewtonMetersPerRadian = RotationalStiffness.FromNewtonMetersPerRadian(2);

            Assert.True(oneNewtonMeterPerRadian < twoNewtonMetersPerRadian);
            Assert.True(oneNewtonMeterPerRadian <= twoNewtonMetersPerRadian);
            Assert.True(twoNewtonMetersPerRadian > oneNewtonMeterPerRadian);
            Assert.True(twoNewtonMetersPerRadian >= oneNewtonMeterPerRadian);

            Assert.False(oneNewtonMeterPerRadian > twoNewtonMetersPerRadian);
            Assert.False(oneNewtonMeterPerRadian >= twoNewtonMetersPerRadian);
            Assert.False(twoNewtonMetersPerRadian < oneNewtonMeterPerRadian);
            Assert.False(twoNewtonMetersPerRadian <= oneNewtonMeterPerRadian);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.Equal(0, newtonmeterperradian.CompareTo(newtonmeterperradian));
            Assert.True(newtonmeterperradian.CompareTo(RotationalStiffness.Zero) > 0);
            Assert.True(RotationalStiffness.Zero.CompareTo(newtonmeterperradian) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.Throws<ArgumentException>(() => newtonmeterperradian.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.Throws<ArgumentNullException>(() => newtonmeterperradian.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = RotationalStiffness.FromNewtonMetersPerRadian(1);
            var b = RotationalStiffness.FromNewtonMetersPerRadian(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = RotationalStiffness.FromNewtonMetersPerRadian(1);
            var b = RotationalStiffness.FromNewtonMetersPerRadian(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.True(v.Equals(RotationalStiffness.FromNewtonMetersPerRadian(1), NewtonMetersPerRadianTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RotationalStiffness.Zero, NewtonMetersPerRadianTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.False(newtonmeterperradian.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.False(newtonmeterperradian.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(RotationalStiffnessUnit.Undefined, RotationalStiffness.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RotationalStiffnessUnit)).Cast<RotationalStiffnessUnit>();
            foreach(var unit in units)
            {
                if(unit == RotationalStiffnessUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RotationalStiffness.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.CentinewtonMeterPerDegrees).ToString());
                Assert.Equal("1 cN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 cN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.CentinewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 daN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecanewtonMeterPerDegrees).ToString());
                Assert.Equal("1 daN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 daN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.DecanewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 dN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecinewtonMeterPerDegrees).ToString());
                Assert.Equal("1 dN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 dN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.DecinewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 kN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMeterPerDegrees).ToString());
                Assert.Equal("1 kN·m/rad", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMeterPerRadian).ToString());
                Assert.Equal("1 kN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 kN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 kipf·ft/°", new RotationalStiffness(1, RotationalStiffnessUnit.KilopoundForceFootPerDegrees).ToString());
                Assert.Equal("1 MN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMeterPerDegrees).ToString());
                Assert.Equal("1 MN·m/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMeterPerRadian).ToString());
                Assert.Equal("1 MN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 MN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 µN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MicronewtonMeterPerDegrees).ToString());
                Assert.Equal("1 µN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 µN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MicronewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 mN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MillinewtonMeterPerDegrees).ToString());
                Assert.Equal("1 mN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 mN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MillinewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 nN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NanonewtonMeterPerDegrees).ToString());
                Assert.Equal("1 nN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 nN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.NanonewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 N·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMeterPerDegrees).ToString());
                Assert.Equal("1 N·m/rad", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString());
                Assert.Equal("1 N·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMillimeterPerDegrees).ToString());
                Assert.Equal("1 N·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMillimeterPerRadian).ToString());
                Assert.Equal("1 lbf·ft/rad", new RotationalStiffness(1, RotationalStiffnessUnit.PoundForceFeetPerRadian).ToString());
                Assert.Equal("1 lbf·ft/deg", new RotationalStiffness(1, RotationalStiffnessUnit.PoundForceFootPerDegrees).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.CentinewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 cN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.CentinewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 cN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.CentinewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 daN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecanewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 daN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecanewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 daN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.DecanewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 dN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecinewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 dN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.DecinewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 dN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.DecinewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 kN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 kN·m/rad", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 kN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 kN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.KilonewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 kipf·ft/°", new RotationalStiffness(1, RotationalStiffnessUnit.KilopoundForceFootPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 MN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 MN·m/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 MN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 MN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MeganewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 µN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MicronewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 µN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MicronewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 µN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MicronewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 mN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MillinewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 mN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.MillinewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 mN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.MillinewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 nN·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NanonewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 nN·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NanonewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 nN·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.NanonewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 N·m/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 N·m/rad", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 N·mm/deg", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMillimeterPerDegrees).ToString(swedishCulture));
            Assert.Equal("1 N·mm/rad", new RotationalStiffness(1, RotationalStiffnessUnit.NewtonMillimeterPerRadian).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft/rad", new RotationalStiffness(1, RotationalStiffnessUnit.PoundForceFeetPerRadian).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft/deg", new RotationalStiffness(1, RotationalStiffnessUnit.PoundForceFootPerDegrees).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s1"));
                Assert.Equal("0.12 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s2"));
                Assert.Equal("0.123 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s3"));
                Assert.Equal("0.1235 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s1", culture));
            Assert.Equal("0.12 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s2", culture));
            Assert.Equal("0.123 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s3", culture));
            Assert.Equal("0.1235 N·m/rad", new RotationalStiffness(0.123456, RotationalStiffnessUnit.NewtonMeterPerRadian).ToString("s4", culture));
        }
    }
}
