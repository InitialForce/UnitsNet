//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricRatio.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricRatioTestsBase
    {
        protected abstract double MicrovoltsPerVoltInOneVoltPerVolt { get; }
        protected abstract double MillivoltsPerVoltInOneVoltPerVolt { get; }
        protected abstract double VoltsPerVoltInOneVoltPerVolt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double MicrovoltsPerVoltTolerance { get { return 1e-5; } }
        protected virtual double MillivoltsPerVoltTolerance { get { return 1e-5; } }
        protected virtual double VoltsPerVoltTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricRatio((double)0.0, ElectricRatioUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricRatio(double.PositiveInfinity, ElectricRatioUnit.VoltPerVolt));
            Assert.Throws<ArgumentException>(() => new ElectricRatio(double.NegativeInfinity, ElectricRatioUnit.VoltPerVolt));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ElectricRatio(double.NaN, ElectricRatioUnit.VoltPerVolt));
        }

        [Fact]
        public void VoltPerVoltToElectricRatioUnits()
        {
            ElectricRatio voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            AssertEx.EqualTolerance(MicrovoltsPerVoltInOneVoltPerVolt, voltpervolt.MicrovoltsPerVolt, MicrovoltsPerVoltTolerance);
            AssertEx.EqualTolerance(MillivoltsPerVoltInOneVoltPerVolt, voltpervolt.MillivoltsPerVolt, MillivoltsPerVoltTolerance);
            AssertEx.EqualTolerance(VoltsPerVoltInOneVoltPerVolt, voltpervolt.VoltsPerVolt, VoltsPerVoltTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ElectricRatio.From(1, ElectricRatioUnit.MicrovoltPerVolt).MicrovoltsPerVolt, MicrovoltsPerVoltTolerance);
            AssertEx.EqualTolerance(1, ElectricRatio.From(1, ElectricRatioUnit.MillivoltPerVolt).MillivoltsPerVolt, MillivoltsPerVoltTolerance);
            AssertEx.EqualTolerance(1, ElectricRatio.From(1, ElectricRatioUnit.VoltPerVolt).VoltsPerVolt, VoltsPerVoltTolerance);
        }

        [Fact]
        public void FromVoltsPerVolt_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ElectricRatio.FromVoltsPerVolt(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ElectricRatio.FromVoltsPerVolt(double.NegativeInfinity));
        }

        [Fact]
        public void FromVoltsPerVolt_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ElectricRatio.FromVoltsPerVolt(double.NaN));
        }

        [Fact]
        public void As()
        {
            var voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            AssertEx.EqualTolerance(MicrovoltsPerVoltInOneVoltPerVolt, voltpervolt.As(ElectricRatioUnit.MicrovoltPerVolt), MicrovoltsPerVoltTolerance);
            AssertEx.EqualTolerance(MillivoltsPerVoltInOneVoltPerVolt, voltpervolt.As(ElectricRatioUnit.MillivoltPerVolt), MillivoltsPerVoltTolerance);
            AssertEx.EqualTolerance(VoltsPerVoltInOneVoltPerVolt, voltpervolt.As(ElectricRatioUnit.VoltPerVolt), VoltsPerVoltTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var voltpervolt = ElectricRatio.FromVoltsPerVolt(1);

            var microvoltpervoltQuantity = voltpervolt.ToUnit(ElectricRatioUnit.MicrovoltPerVolt);
            AssertEx.EqualTolerance(MicrovoltsPerVoltInOneVoltPerVolt, (double)microvoltpervoltQuantity.Value, MicrovoltsPerVoltTolerance);
            Assert.Equal(ElectricRatioUnit.MicrovoltPerVolt, microvoltpervoltQuantity.Unit);

            var millivoltpervoltQuantity = voltpervolt.ToUnit(ElectricRatioUnit.MillivoltPerVolt);
            AssertEx.EqualTolerance(MillivoltsPerVoltInOneVoltPerVolt, (double)millivoltpervoltQuantity.Value, MillivoltsPerVoltTolerance);
            Assert.Equal(ElectricRatioUnit.MillivoltPerVolt, millivoltpervoltQuantity.Unit);

            var voltpervoltQuantity = voltpervolt.ToUnit(ElectricRatioUnit.VoltPerVolt);
            AssertEx.EqualTolerance(VoltsPerVoltInOneVoltPerVolt, (double)voltpervoltQuantity.Value, VoltsPerVoltTolerance);
            Assert.Equal(ElectricRatioUnit.VoltPerVolt, voltpervoltQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricRatio voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            AssertEx.EqualTolerance(1, ElectricRatio.FromMicrovoltsPerVolt(voltpervolt.MicrovoltsPerVolt).VoltsPerVolt, MicrovoltsPerVoltTolerance);
            AssertEx.EqualTolerance(1, ElectricRatio.FromMillivoltsPerVolt(voltpervolt.MillivoltsPerVolt).VoltsPerVolt, MillivoltsPerVoltTolerance);
            AssertEx.EqualTolerance(1, ElectricRatio.FromVoltsPerVolt(voltpervolt.VoltsPerVolt).VoltsPerVolt, VoltsPerVoltTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricRatio v = ElectricRatio.FromVoltsPerVolt(1);
            AssertEx.EqualTolerance(-1, -v.VoltsPerVolt, VoltsPerVoltTolerance);
            AssertEx.EqualTolerance(2, (ElectricRatio.FromVoltsPerVolt(3)-v).VoltsPerVolt, VoltsPerVoltTolerance);
            AssertEx.EqualTolerance(2, (v + v).VoltsPerVolt, VoltsPerVoltTolerance);
            AssertEx.EqualTolerance(10, (v*10).VoltsPerVolt, VoltsPerVoltTolerance);
            AssertEx.EqualTolerance(10, (10*v).VoltsPerVolt, VoltsPerVoltTolerance);
            AssertEx.EqualTolerance(2, (ElectricRatio.FromVoltsPerVolt(10)/5).VoltsPerVolt, VoltsPerVoltTolerance);
            AssertEx.EqualTolerance(2, ElectricRatio.FromVoltsPerVolt(10)/ElectricRatio.FromVoltsPerVolt(5), VoltsPerVoltTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricRatio oneVoltPerVolt = ElectricRatio.FromVoltsPerVolt(1);
            ElectricRatio twoVoltsPerVolt = ElectricRatio.FromVoltsPerVolt(2);

            Assert.True(oneVoltPerVolt < twoVoltsPerVolt);
            Assert.True(oneVoltPerVolt <= twoVoltsPerVolt);
            Assert.True(twoVoltsPerVolt > oneVoltPerVolt);
            Assert.True(twoVoltsPerVolt >= oneVoltPerVolt);

            Assert.False(oneVoltPerVolt > twoVoltsPerVolt);
            Assert.False(oneVoltPerVolt >= twoVoltsPerVolt);
            Assert.False(twoVoltsPerVolt < oneVoltPerVolt);
            Assert.False(twoVoltsPerVolt <= oneVoltPerVolt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricRatio voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            Assert.Equal(0, voltpervolt.CompareTo(voltpervolt));
            Assert.True(voltpervolt.CompareTo(ElectricRatio.Zero) > 0);
            Assert.True(ElectricRatio.Zero.CompareTo(voltpervolt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricRatio voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            Assert.Throws<ArgumentException>(() => voltpervolt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricRatio voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            Assert.Throws<ArgumentNullException>(() => voltpervolt.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ElectricRatio.FromVoltsPerVolt(1);
            var b = ElectricRatio.FromVoltsPerVolt(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = ElectricRatio.FromVoltsPerVolt(1);
            var b = ElectricRatio.FromVoltsPerVolt(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = ElectricRatio.FromVoltsPerVolt(1);
            Assert.True(v.Equals(ElectricRatio.FromVoltsPerVolt(1), VoltsPerVoltTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ElectricRatio.Zero, VoltsPerVoltTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricRatio voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            Assert.False(voltpervolt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricRatio voltpervolt = ElectricRatio.FromVoltsPerVolt(1);
            Assert.False(voltpervolt.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ElectricRatioUnit.Undefined, ElectricRatio.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ElectricRatioUnit)).Cast<ElectricRatioUnit>();
            foreach(var unit in units)
            {
                if(unit == ElectricRatioUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricRatio.BaseDimensions is null);
        }
    }
}
