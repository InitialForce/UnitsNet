//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricCurrentDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricCurrentDensityTestsBase
    {
        protected abstract double AmperesPerSquareMeterInOneAmperePerSquareMeter { get; }
        protected abstract double KiloamperesPerSquareMeterInOneAmperePerSquareMeter { get; }
        protected abstract double MegaamperesPerSquareMeterInOneAmperePerSquareMeter { get; }
        protected abstract double MicroamperesPerSquareMeterInOneAmperePerSquareMeter { get; }
        protected abstract double MilliamperesPerSquareMeterInOneAmperePerSquareMeter { get; }
        protected abstract double NanoamperesPerSquareMeterInOneAmperePerSquareMeter { get; }
        protected abstract double PicoamperesPerSquareMeterInOneAmperePerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AmperesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KiloamperesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MegaamperesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MicroamperesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliamperesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NanoamperesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double PicoamperesPerSquareMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void AmperePerSquareMeterToElectricCurrentDensityUnits()
        {
            ElectricCurrentDensity amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            AssertEx.EqualTolerance(AmperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KiloamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.KiloamperesPerSquareMeter, KiloamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegaamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.MegaamperesPerSquareMeter, MegaamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicroamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.MicroamperesPerSquareMeter, MicroamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.MilliamperesPerSquareMeter, MilliamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanoamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.NanoamperesPerSquareMeter, NanoamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicoamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.PicoamperesPerSquareMeter, PicoamperesPerSquareMeterTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.From(1, ElectricCurrentDensityUnit.AmperePerSquareMeter).AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.From(1, ElectricCurrentDensityUnit.KiloamperePerSquareMeter).KiloamperesPerSquareMeter, KiloamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.From(1, ElectricCurrentDensityUnit.MegaamperePerSquareMeter).MegaamperesPerSquareMeter, MegaamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.From(1, ElectricCurrentDensityUnit.MicroamperePerSquareMeter).MicroamperesPerSquareMeter, MicroamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.From(1, ElectricCurrentDensityUnit.MilliamperePerSquareMeter).MilliamperesPerSquareMeter, MilliamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.From(1, ElectricCurrentDensityUnit.NanoamperePerSquareMeter).NanoamperesPerSquareMeter, NanoamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.From(1, ElectricCurrentDensityUnit.PicoamperePerSquareMeter).PicoamperesPerSquareMeter, PicoamperesPerSquareMeterTolerance);
        }

        [Fact]
        public void As()
        {
            var amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            AssertEx.EqualTolerance(AmperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.As(ElectricCurrentDensityUnit.AmperePerSquareMeter), AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KiloamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.As(ElectricCurrentDensityUnit.KiloamperePerSquareMeter), KiloamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegaamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.As(ElectricCurrentDensityUnit.MegaamperePerSquareMeter), MegaamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicroamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.As(ElectricCurrentDensityUnit.MicroamperePerSquareMeter), MicroamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.As(ElectricCurrentDensityUnit.MilliamperePerSquareMeter), MilliamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanoamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.As(ElectricCurrentDensityUnit.NanoamperePerSquareMeter), NanoamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicoamperesPerSquareMeterInOneAmperePerSquareMeter, amperepersquaremeter.As(ElectricCurrentDensityUnit.PicoamperePerSquareMeter), PicoamperesPerSquareMeterTolerance);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricCurrentDensity amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.FromAmperesPerSquareMeter(amperepersquaremeter.AmperesPerSquareMeter).AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.FromKiloamperesPerSquareMeter(amperepersquaremeter.KiloamperesPerSquareMeter).AmperesPerSquareMeter, KiloamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.FromMegaamperesPerSquareMeter(amperepersquaremeter.MegaamperesPerSquareMeter).AmperesPerSquareMeter, MegaamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.FromMicroamperesPerSquareMeter(amperepersquaremeter.MicroamperesPerSquareMeter).AmperesPerSquareMeter, MicroamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.FromMilliamperesPerSquareMeter(amperepersquaremeter.MilliamperesPerSquareMeter).AmperesPerSquareMeter, MilliamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.FromNanoamperesPerSquareMeter(amperepersquaremeter.NanoamperesPerSquareMeter).AmperesPerSquareMeter, NanoamperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, ElectricCurrentDensity.FromPicoamperesPerSquareMeter(amperepersquaremeter.PicoamperesPerSquareMeter).AmperesPerSquareMeter, PicoamperesPerSquareMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricCurrentDensity v = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            AssertEx.EqualTolerance(-1, -v.AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricCurrentDensity.FromAmperesPerSquareMeter(3)-v).AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (ElectricCurrentDensity.FromAmperesPerSquareMeter(10)/5).AmperesPerSquareMeter, AmperesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, ElectricCurrentDensity.FromAmperesPerSquareMeter(10)/ElectricCurrentDensity.FromAmperesPerSquareMeter(5), AmperesPerSquareMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricCurrentDensity oneAmperePerSquareMeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            ElectricCurrentDensity twoAmperesPerSquareMeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(2);

            Assert.True(oneAmperePerSquareMeter < twoAmperesPerSquareMeter);
            Assert.True(oneAmperePerSquareMeter <= twoAmperesPerSquareMeter);
            Assert.True(twoAmperesPerSquareMeter > oneAmperePerSquareMeter);
            Assert.True(twoAmperesPerSquareMeter >= oneAmperePerSquareMeter);

            Assert.False(oneAmperePerSquareMeter > twoAmperesPerSquareMeter);
            Assert.False(oneAmperePerSquareMeter >= twoAmperesPerSquareMeter);
            Assert.False(twoAmperesPerSquareMeter < oneAmperePerSquareMeter);
            Assert.False(twoAmperesPerSquareMeter <= oneAmperePerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricCurrentDensity amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            Assert.Equal(0, amperepersquaremeter.CompareTo(amperepersquaremeter));
            Assert.True(amperepersquaremeter.CompareTo(ElectricCurrentDensity.Zero) > 0);
            Assert.True(ElectricCurrentDensity.Zero.CompareTo(amperepersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricCurrentDensity amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            Assert.Throws<ArgumentException>(() => amperepersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricCurrentDensity amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            Assert.Throws<ArgumentNullException>(() => amperepersquaremeter.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            ElectricCurrentDensity a = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            ElectricCurrentDensity b = ElectricCurrentDensity.FromAmperesPerSquareMeter(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            ElectricCurrentDensity v = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            Assert.True(v.Equals(ElectricCurrentDensity.FromAmperesPerSquareMeter(1), ElectricCurrentDensity.FromAmperesPerSquareMeter(AmperesPerSquareMeterTolerance)));
            Assert.False(v.Equals(ElectricCurrentDensity.Zero, ElectricCurrentDensity.FromAmperesPerSquareMeter(AmperesPerSquareMeterTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricCurrentDensity amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            Assert.False(amperepersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricCurrentDensity amperepersquaremeter = ElectricCurrentDensity.FromAmperesPerSquareMeter(1);
            Assert.False(amperepersquaremeter.Equals(null));
        }
    }
}
