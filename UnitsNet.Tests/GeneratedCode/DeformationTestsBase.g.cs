//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Deformation.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DeformationTestsBase
    {
        protected abstract double MicrodeformationsInOneMicrodeformation { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double MicrodeformationsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Deformation((double)0.0, DeformationUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Deformation(double.PositiveInfinity, DeformationUnit.Microdeformation));
            Assert.Throws<ArgumentException>(() => new Deformation(double.NegativeInfinity, DeformationUnit.Microdeformation));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Deformation(double.NaN, DeformationUnit.Microdeformation));
        }

        [Fact]
        public void MicrodeformationToDeformationUnits()
        {
            Deformation microdeformation = Deformation.FromMicrodeformations(1);
            AssertEx.EqualTolerance(MicrodeformationsInOneMicrodeformation, microdeformation.Microdeformations, MicrodeformationsTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Deformation.From(1, DeformationUnit.Microdeformation).Microdeformations, MicrodeformationsTolerance);
        }

        [Fact]
        public void FromMicrodeformations_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Deformation.FromMicrodeformations(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Deformation.FromMicrodeformations(double.NegativeInfinity));
        }

        [Fact]
        public void FromMicrodeformations_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Deformation.FromMicrodeformations(double.NaN));
        }

        [Fact]
        public void As()
        {
            var microdeformation = Deformation.FromMicrodeformations(1);
            AssertEx.EqualTolerance(MicrodeformationsInOneMicrodeformation, microdeformation.As(DeformationUnit.Microdeformation), MicrodeformationsTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var microdeformation = Deformation.FromMicrodeformations(1);

            var microdeformationQuantity = microdeformation.ToUnit(DeformationUnit.Microdeformation);
            AssertEx.EqualTolerance(MicrodeformationsInOneMicrodeformation, (double)microdeformationQuantity.Value, MicrodeformationsTolerance);
            Assert.Equal(DeformationUnit.Microdeformation, microdeformationQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Deformation microdeformation = Deformation.FromMicrodeformations(1);
            AssertEx.EqualTolerance(1, Deformation.FromMicrodeformations(microdeformation.Microdeformations).Microdeformations, MicrodeformationsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Deformation v = Deformation.FromMicrodeformations(1);
            AssertEx.EqualTolerance(-1, -v.Microdeformations, MicrodeformationsTolerance);
            AssertEx.EqualTolerance(2, (Deformation.FromMicrodeformations(3)-v).Microdeformations, MicrodeformationsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Microdeformations, MicrodeformationsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Microdeformations, MicrodeformationsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Microdeformations, MicrodeformationsTolerance);
            AssertEx.EqualTolerance(2, (Deformation.FromMicrodeformations(10)/5).Microdeformations, MicrodeformationsTolerance);
            AssertEx.EqualTolerance(2, Deformation.FromMicrodeformations(10)/Deformation.FromMicrodeformations(5), MicrodeformationsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Deformation oneMicrodeformation = Deformation.FromMicrodeformations(1);
            Deformation twoMicrodeformations = Deformation.FromMicrodeformations(2);

            Assert.True(oneMicrodeformation < twoMicrodeformations);
            Assert.True(oneMicrodeformation <= twoMicrodeformations);
            Assert.True(twoMicrodeformations > oneMicrodeformation);
            Assert.True(twoMicrodeformations >= oneMicrodeformation);

            Assert.False(oneMicrodeformation > twoMicrodeformations);
            Assert.False(oneMicrodeformation >= twoMicrodeformations);
            Assert.False(twoMicrodeformations < oneMicrodeformation);
            Assert.False(twoMicrodeformations <= oneMicrodeformation);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Deformation microdeformation = Deformation.FromMicrodeformations(1);
            Assert.Equal(0, microdeformation.CompareTo(microdeformation));
            Assert.True(microdeformation.CompareTo(Deformation.Zero) > 0);
            Assert.True(Deformation.Zero.CompareTo(microdeformation) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Deformation microdeformation = Deformation.FromMicrodeformations(1);
            Assert.Throws<ArgumentException>(() => microdeformation.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Deformation microdeformation = Deformation.FromMicrodeformations(1);
            Assert.Throws<ArgumentNullException>(() => microdeformation.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Deformation.FromMicrodeformations(1);
            var b = Deformation.FromMicrodeformations(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Deformation.FromMicrodeformations(1);
            var b = Deformation.FromMicrodeformations(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Deformation.FromMicrodeformations(1);
            Assert.True(v.Equals(Deformation.FromMicrodeformations(1), MicrodeformationsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Deformation.Zero, MicrodeformationsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Deformation microdeformation = Deformation.FromMicrodeformations(1);
            Assert.False(microdeformation.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Deformation microdeformation = Deformation.FromMicrodeformations(1);
            Assert.False(microdeformation.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(DeformationUnit.Undefined, Deformation.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(DeformationUnit)).Cast<DeformationUnit>();
            foreach(var unit in units)
            {
                if(unit == DeformationUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Deformation.BaseDimensions is null);
        }
    }
}
