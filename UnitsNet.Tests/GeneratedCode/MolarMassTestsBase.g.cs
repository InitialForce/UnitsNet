//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (angularsen@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MolarMass.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarMassTestsBase
    {
        protected abstract double CentigramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double DecagramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double DecigramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double GramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double HectogramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double KilogramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double KilopoundsPerMolesInOneKilogramPerMole { get; }
        protected abstract double MegapoundsPerMolesInOneKilogramPerMole { get; }
        protected abstract double MicrogramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double MilligramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double NanogramsPerMolesInOneKilogramPerMole { get; }
        protected abstract double PoundsPerMolesInOneKilogramPerMole { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMolesTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerMolesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void KilogramPerMoleToMolarMassUnits()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            AssertEx.EqualTolerance(CentigramsPerMolesInOneKilogramPerMole, kilogrampermole.CentigramsPerMoles, CentigramsPerMolesTolerance);
            AssertEx.EqualTolerance(DecagramsPerMolesInOneKilogramPerMole, kilogrampermole.DecagramsPerMoles, DecagramsPerMolesTolerance);
            AssertEx.EqualTolerance(DecigramsPerMolesInOneKilogramPerMole, kilogrampermole.DecigramsPerMoles, DecigramsPerMolesTolerance);
            AssertEx.EqualTolerance(GramsPerMolesInOneKilogramPerMole, kilogrampermole.GramsPerMoles, GramsPerMolesTolerance);
            AssertEx.EqualTolerance(HectogramsPerMolesInOneKilogramPerMole, kilogrampermole.HectogramsPerMoles, HectogramsPerMolesTolerance);
            AssertEx.EqualTolerance(KilogramsPerMolesInOneKilogramPerMole, kilogrampermole.KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(KilopoundsPerMolesInOneKilogramPerMole, kilogrampermole.KilopoundsPerMoles, KilopoundsPerMolesTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMolesInOneKilogramPerMole, kilogrampermole.MegapoundsPerMoles, MegapoundsPerMolesTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMolesInOneKilogramPerMole, kilogrampermole.MicrogramsPerMoles, MicrogramsPerMolesTolerance);
            AssertEx.EqualTolerance(MilligramsPerMolesInOneKilogramPerMole, kilogrampermole.MilligramsPerMoles, MilligramsPerMolesTolerance);
            AssertEx.EqualTolerance(NanogramsPerMolesInOneKilogramPerMole, kilogrampermole.NanogramsPerMoles, NanogramsPerMolesTolerance);
            AssertEx.EqualTolerance(PoundsPerMolesInOneKilogramPerMole, kilogrampermole.PoundsPerMoles, PoundsPerMolesTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.CentigramPerMole).CentigramsPerMoles, CentigramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.DecagramPerMole).DecagramsPerMoles, DecagramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.DecigramPerMole).DecigramsPerMoles, DecigramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.GramPerMole).GramsPerMoles, GramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.HectogramPerMole).HectogramsPerMoles, HectogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.KilogramPerMole).KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.KilopoundPerMole).KilopoundsPerMoles, KilopoundsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.MegapoundPerMole).MegapoundsPerMoles, MegapoundsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.MicrogramPerMole).MicrogramsPerMoles, MicrogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.MilligramPerMole).MilligramsPerMoles, MilligramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.NanogramPerMole).NanogramsPerMoles, NanogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.From(1, MolarMassUnit.PoundPerMole).PoundsPerMoles, PoundsPerMolesTolerance);
        }

        [Fact]
        public void As()
        {
            var kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            AssertEx.EqualTolerance(CentigramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.CentigramPerMole), CentigramsPerMolesTolerance);
            AssertEx.EqualTolerance(DecagramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecagramPerMole), DecagramsPerMolesTolerance);
            AssertEx.EqualTolerance(DecigramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecigramPerMole), DecigramsPerMolesTolerance);
            AssertEx.EqualTolerance(GramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.GramPerMole), GramsPerMolesTolerance);
            AssertEx.EqualTolerance(HectogramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.HectogramPerMole), HectogramsPerMolesTolerance);
            AssertEx.EqualTolerance(KilogramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilogramPerMole), KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(KilopoundsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilopoundPerMole), KilopoundsPerMolesTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MegapoundPerMole), MegapoundsPerMolesTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MicrogramPerMole), MicrogramsPerMolesTolerance);
            AssertEx.EqualTolerance(MilligramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MilligramPerMole), MilligramsPerMolesTolerance);
            AssertEx.EqualTolerance(NanogramsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.NanogramPerMole), NanogramsPerMolesTolerance);
            AssertEx.EqualTolerance(PoundsPerMolesInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.PoundPerMole), PoundsPerMolesTolerance);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            AssertEx.EqualTolerance(1, MolarMass.FromCentigramsPerMoles(kilogrampermole.CentigramsPerMoles).KilogramsPerMoles, CentigramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromDecagramsPerMoles(kilogrampermole.DecagramsPerMoles).KilogramsPerMoles, DecagramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromDecigramsPerMoles(kilogrampermole.DecigramsPerMoles).KilogramsPerMoles, DecigramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromGramsPerMoles(kilogrampermole.GramsPerMoles).KilogramsPerMoles, GramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromHectogramsPerMoles(kilogrampermole.HectogramsPerMoles).KilogramsPerMoles, HectogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilogramsPerMoles(kilogrampermole.KilogramsPerMoles).KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilopoundsPerMoles(kilogrampermole.KilopoundsPerMoles).KilogramsPerMoles, KilopoundsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromMegapoundsPerMoles(kilogrampermole.MegapoundsPerMoles).KilogramsPerMoles, MegapoundsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromMicrogramsPerMoles(kilogrampermole.MicrogramsPerMoles).KilogramsPerMoles, MicrogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromMilligramsPerMoles(kilogrampermole.MilligramsPerMoles).KilogramsPerMoles, MilligramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromNanogramsPerMoles(kilogrampermole.NanogramsPerMoles).KilogramsPerMoles, NanogramsPerMolesTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromPoundsPerMoles(kilogrampermole.PoundsPerMoles).KilogramsPerMoles, PoundsPerMolesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MolarMass v = MolarMass.FromKilogramsPerMoles(1);
            AssertEx.EqualTolerance(-1, -v.KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(2, (MolarMass.FromKilogramsPerMoles(3)-v).KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(2, (MolarMass.FromKilogramsPerMoles(10)/5).KilogramsPerMoles, KilogramsPerMolesTolerance);
            AssertEx.EqualTolerance(2, MolarMass.FromKilogramsPerMoles(10)/MolarMass.FromKilogramsPerMoles(5), KilogramsPerMolesTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MolarMass oneKilogramPerMole = MolarMass.FromKilogramsPerMoles(1);
            MolarMass twoKilogramsPerMoles = MolarMass.FromKilogramsPerMoles(2);

            Assert.True(oneKilogramPerMole < twoKilogramsPerMoles);
            Assert.True(oneKilogramPerMole <= twoKilogramsPerMoles);
            Assert.True(twoKilogramsPerMoles > oneKilogramPerMole);
            Assert.True(twoKilogramsPerMoles >= oneKilogramPerMole);

            Assert.False(oneKilogramPerMole > twoKilogramsPerMoles);
            Assert.False(oneKilogramPerMole >= twoKilogramsPerMoles);
            Assert.False(twoKilogramsPerMoles < oneKilogramPerMole);
            Assert.False(twoKilogramsPerMoles <= oneKilogramPerMole);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            Assert.Equal(0, kilogrampermole.CompareTo(kilogrampermole));
            Assert.True(kilogrampermole.CompareTo(MolarMass.Zero) > 0);
            Assert.True(MolarMass.Zero.CompareTo(kilogrampermole) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            Assert.Throws<ArgumentException>(() => kilogrampermole.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampermole.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            MolarMass a = MolarMass.FromKilogramsPerMoles(1);
            MolarMass b = MolarMass.FromKilogramsPerMoles(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            MolarMass v = MolarMass.FromKilogramsPerMoles(1);
            Assert.True(v.Equals(MolarMass.FromKilogramsPerMoles(1)));
            Assert.False(v.Equals(MolarMass.Zero));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            Assert.False(kilogrampermole.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMoles(1);
            Assert.False(kilogrampermole.Equals(null));
        }
    }
}
